<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Android自定义View之仪表盘]]></title>
      <url>%2F2017%2F08%2F10%2Fandroid%E8%87%AA%E5%AE%9A%E4%B9%89View%E4%B9%8B%E4%BB%AA%E8%A1%A8%E7%9B%98%2F</url>
      <content type="text"><![CDATA[Android自定义View之仪表盘 又是新系列（坑） 感觉都很零碎，能积累一些是一些了 背景随着项目开发 越来越多的需求被摆在面前 其中不免涉及到定制的功能其中仪表盘也是一个很常用的功能 效果图 设计过程外侧渐变圆环 外侧刻度盘及文字显示 指针显示 内部圆环及文字展示 代码实现自定义组件显示优化设置自定义组件的时候要优化组件的高度 1234567protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; int width = MeasureSpec.getSize(widthMeasureSpec); int heitht = width / 2 / 4 * 5; initIndex(width / 2); //优化组件高度 setMeasuredDimension(width, heitht);&#125; onDraw()过程123456789101112protected void onDraw(Canvas canvas) &#123; //禁用硬件加速 setLayerType(LAYER_TYPE_SOFTWARE, null); //外侧颜色指示圆环 initRing(canvas); //刻度文字 initScale(canvas); //指针 initPointer(canvas); //提示内容 initText(canvas);&#125; 主要还是这个四个绘制的过程 外侧颜色指示圆环 首先绘制的前一部分的红黄渐变圆环这个圆环并不是一个180度的圆环 而是一个两百度的圆环 下侧再实现水平的效果 绘制后一部分的绿色渐变圆环 修正底部的效果 修改成水平的效果 绘制内部半圆 遮盖住渐变的半圆 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071private void initRing(Canvas canvas) &#123; paint.setAntiAlias(true); paint.setStrokeWidth(2); canvas.save(); //canvas中心移动到中间 canvas.translate(canvas.getWidth()/2, r); //前100红黄渐变圆环 paint.setStyle(Paint.Style.FILL); //设置渐变的颜色范围 int[] colors = &#123;Color.parseColor("#F95A37"), Color.parseColor("#f9cf45")&#125;; //设置的渐变起止位置 float[] positions = &#123;0.5f - 10f/180f * 0.5f, 0.5f + 0.5f * 5f / 6f&#125;; //设置渐变的蒙版 SweepGradient sweepGradient = new SweepGradient(0, 0, colors, positions); paint.setShader(sweepGradient); rect = new RectF( -length, -length, length, length); //绘制圆环 canvas.drawArc(rect, 170, 10f + 180f / 6f * 5f, true, paint); //100之后绿色渐变圆环 paint.setStyle(Paint.Style.FILL); canvas.rotate(10,0f,0f); int[] colors2 = &#123;Color.parseColor("#79D062"), Color.parseColor("#3FBF55")&#125;; float[] positions2 = &#123;0.5f + 0.5f * ( 144f / 180f), 1.0f&#125;; sweepGradient = new SweepGradient(0, 0, colors2, positions2); paint.setShader(sweepGradient); rect = new RectF( -length, -length, length, length); canvas.drawArc(rect, 180f + 180f * (140f / 180f), 180f / 6 + 10, true, paint); canvas.restore(); canvas.save(); canvas.translate(canvas.getWidth()/2, r); //绘制描边效果的画笔 strokePain = new Paint(paint); strokePain.setColor(0x3f979797); strokePain.setStrokeWidth(10); strokePain.setShader(null); strokePain.setStyle(Paint.Style.STROKE); canvas.drawArc(rect, 170, 200, true, strokePain); canvas.restore(); canvas.save(); canvas.translate(canvas.getWidth()/2, r); //底边水平 paint.setShader(null); paint.setColor(backGroundColor); paint.setStyle(Paint.Style.FILL); canvas.drawRect(-length , (float) (Math.sin(Math.toRadians(10) ) * length /3f * 2f), length , (float) (Math.sin(Math.toRadians(10)) * length + 100) , paint); canvas.drawRect(-length , (float) (Math.sin(Math.toRadians(10) ) * length /3f * 2f), length , (float) (Math.sin(Math.toRadians(10) ) * length /3f * 2f) , strokePain); //内部背景色填充 paint.setColor(backGroundColor); paint.setShader(null); rect = new RectF( - (length - length / 3f - 2), -(length / 3f * 2f - 2), length - length / 3f -2 , length / 3f * 2f - 2); canvas.drawArc(rect, 170, 200, true, strokePain); canvas.drawArc(rect, 0, 360, true, paint);&#125; 外侧刻度盘及文字显示旋转画布绘制对应角度的显示及刻度 123456789101112131415161718192021222324252627282930313233private void initScale(Canvas canvas) &#123; canvas.restore(); canvas.save(); canvas.translate(canvas.getWidth()/2, r); paint.setColor(Color.parseColor("#999999")); tmpPaint = new Paint(paint); //刻度画笔对象 tmpPaint.setStrokeWidth(1); tmpPaint.setTextSize(35); tmpPaint.setTextAlign(Paint.Align.CENTER); canvas.rotate(-90,0f,0f); float y = length; y = - y; int count = 12; //总刻度数 paint.setColor(backGroundColor); float tempRou = 180 / 12f; //每次旋转的角度 paint.setColor(Color.WHITE); paint.setStrokeWidth(5); //绘制刻度和百分比 for (int i = 0 ; i &lt;= count ; i++)&#123; if (i % 2 == 0 ) &#123; canvas.drawText(String.valueOf((i) * 10), 0, y - 20f, tmpPaint); &#125; canvas.drawLine(0f, y , 0, y + length / 15, paint); canvas.rotate(tempRou,0f,0f); &#125;&#125; 指针显示指针显示的比较简单也是唯二需要变化的之一 指针的绘制比较简单 根据传入的角度(百分比)旋转对应的角度 填充绘制一个三角形 1234567891011121314151617181920212223242526272829private void initPointer(Canvas canvas) &#123; paint.setColor(Color.BLACK); canvas.restore(); canvas.save(); canvas.translate(canvas.getWidth()/2, r); float change; if (perPoint &lt; 1 )&#123; change = perPoint * 180; &#125;else &#123; change = 180; &#125; //根据参数得到旋转角度 canvas.rotate(-90 + change,0f,0f); //绘制三角形形成指针 Path path = new Path(); path.moveTo(0 , pointLength); path.lineTo(-10 , 0); path.lineTo(10,0); path.lineTo(0 , pointLength); path.close(); canvas.drawPath(path, paint);&#125; 内部圆环及文字展示先绘制一个带阴影的圆环 再居中绘制提示的文本信息 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364private void initText(Canvas canvas) &#123; //抗锯齿 canvas.setDrawFilter(new PaintFlagsDrawFilter(0, Paint.ANTI_ALIAS_FLAG|Paint.FILTER_BITMAP_FLAG)); canvas.restore(); canvas.save(); canvas.translate(canvas.getWidth()/2, r); float rIndex = length ; //设置文字展示的圆环 paint.setColor(Color.parseColor("#eeeeee")); paint.setShader(null); paint.setShadowLayer(5, 0, 0, 0x54000000); rect = new RectF( - (rIndex/ 3 ), - (rIndex / 3), rIndex / 3, rIndex / 3); canvas.drawArc(rect, 0, 360, true, paint); paint.clearShadowLayer(); canvas.restore(); canvas.save(); canvas.translate(canvas.getWidth()/2f , r); textPaint.setStrokeWidth(1); textPaint.setAntiAlias(true); textPaint.setTextSize(60); textPaint.setColor(Color.parseColor("#fc6555")); textPaint.setTextAlign(Paint.Align.RIGHT); //判断指数变化及颜色设定 int _per = (int) (per * 120); if (_per &lt; 60)&#123; textPaint.setColor(Color.parseColor("#ff6450")); &#125;else if (_per &lt; 100) &#123; textPaint.setColor(Color.parseColor("#f5a623")); &#125;else &#123; textPaint.setColor(Color.parseColor("#79d062")); &#125; float swidth = textPaint.measureText(String.valueOf(_per)); //计算偏移量 是的数字和百分号整体居中显示 swidth = (swidth - (swidth + 22) / 2); canvas.translate( swidth , 0); canvas.drawText("" + _per, 0, 0, textPaint); textPaint.setTextSize(30); textPaint.setTextAlign(Paint.Align.LEFT); canvas.drawText("%" , 0, 0, textPaint); textPaint.setTextAlign(Paint.Align.CENTER); textPaint.setColor(Color.parseColor("#999999")); canvas.restore(); canvas.save(); canvas.translate(canvas.getWidth()/2 , r + length / 3 /2 ); canvas.drawText("完成率" , 0, 0, textPaint);&#125; 更新动画使用ValueAnimator实现指针的转动动画效果 12345678910111213141516public void cgangePer(float per )&#123; this.perOld = this.per; this.per = per; ValueAnimator va = ValueAnimator.ofFloat(perOld,per); va.setDuration(1000); va.setInterpolator(new OvershootInterpolator()); va.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; perPoint = (float) animation.getAnimatedValue(); invalidate(); &#125; &#125;); va.start();&#125; 这个仪表盘的实现就完成了 具体的代码可以查看我的github]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景]]></title>
      <url>%2F2017%2F05%2F17%2F%E5%A6%82%E4%BD%95%E5%9C%A8SpeedDialPlus%E4%B8%AD%E4%BD%BF%E7%94%A8EarthViewfromGoogleEarth%E5%9B%BE%E7%89%87%E4%BD%9C%E4%B8%BA%E8%83%8C%E6%99%AF%2F</url>
      <content type="text"><![CDATA[如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景介绍Speed Dial Plus和Earth View from Google Earth都是Chrome中的两个十分好用的新标签页插件 Speed Dial Plus可以在你打开一个新的标签页的时候提供经常访问的页面的快捷方式 虽然还有很多扩展, 但是这个功能真心好用Earth View from Google Earth可以在你打开一个新的标签页的时候展示一副google earth拍摄的图片(虽然只有1500多个图片 但是每幅图都是十分别致的) 需求这两个都是十分优秀的标签页的工具,那么问题就是 这两个不能共同使用 虽然SDP提供了设置背景页面的方法,但是每次只能设置成一个页面 解决思路通过分析Earth View from Google Earth来获取所有图片的地址 再在本地或者自己的服务器中部署一个服务器 可以随机返回有效图片地址中的一个 再将SDP中设置背景为自己的服务器设定的地址 最终实现打开新标签页(SDP) SDP访问你的服务地址 服务随机返回一个图片地址 SDP最终访问你设定的新的图片地址 分析Earth View from Google Earth本来是打算直接使用Chrome的开发者工具和charles直接分析网络请求，但是每次返回的图片地址都不一样只能进一步查看GoogelEarth的页面了如https://g.co/ev/2131 这样的短链，可以看到后面的2131这样的四位id 尝试了几次发现不是连续的。 本来打算写个脚本 验证下一定范围内哪些数字是有效的然后日常github 发现了这个好东西 提供了一个一个接口可以得到当前所有图片的信息 可以通过这个json数据解析出所有的图片id 保存到本地作为服务器的数据源 具体实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687import requestsimport random, re , threading , time , socketimport tornado.webimport tornado.ioloopallindex = 0def getUrl(): #通过随机得到的位置来得到对应位置的 id = randomid() with open('date', 'r') as f: _image = f.read() _imagelist = _image.split(',') _imagelist.pop() return _imagelist[id]def updateindex(): #更新所有图片数量的数据 global allindex with open('daterand', 'r') as f: allindex = f.read()def getAllDate(): #从提供的接口中获取所有图片的id并保存下来 同时设置延时每天更新下数据 print('getAllDate') reponse = requests.get('https://raw.githubusercontent.com/limhenry/earthview/master/earthview.json') html = reponse.text with open('date', 'w') as f: imageList = re.findall('"image":".*?"' , html) for image in imageList: imageurl = re.findall('[0-9]&#123;4,5&#125;' ,image) f.write(imageurl[0] + ',') with open('daterand', 'w') as f: f.write(str(len(imageList))) updateindex() time.sleep(60 * 60 * 24) getAllDate()def randomid(): #随机数什么的 global allindex _allindex = int(allindex) id = random.randint(0, _allindex) return idclass earthImage(tornado.web.RequestHandler): def get(self, *args, **kwargs): _id = getUrl() imageurl = 'http://www.gstatic.com/prettyearth/assets/full/%s.jpg'%(_id) print(imageurl) #直接指向随机图片的地址 self.redirect(imageurl)application = tornado.web.Application([ (r"/earthImage" , earthImage)])def runServer(): #trnado 服务器的配置 我这里在运行之后会显示当前的地址 port = 9011 application.listen(port) localIP = socket.gethostbyname(socket.gethostname()) print("run in %s:%s"%(localIP,port)) tornado.ioloop.IOLoop.instance().start()def startServer(): print('startServer') runServer()def main(): //这里开了两个线程 防止取得图片数据的时候访问阻塞 updateindex() thread_getInfoDate = threading.Thread(target=getAllDate, name='getAllDate') thread_startServer = threading.Thread(target=startServer, name='startServer') thread_getInfoDate.start() thread_startServer.start()main() 最后打开SpeedDialPlus的设置 更改其中主题里的自定义网址为你服务器运行后的地址就好了 当然 也可以部署在云服务器中 改进程序写的很随意 山顶洞人编程 性能的话自用还可以的 图片的话只有google erath的图片 可以配置或加入更多的图片 现阶段基本没有扩展性 只能看地球了(1500多张图片还不够看 只能说明 该换风格了) 项目地址https://github.com/clwater/SpeedDialPlusImage]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[RpgMaker入门教程2]]></title>
      <url>%2F2017%2F04%2F25%2FRpgMaker%E6%95%99%E7%A8%8B2%2F</url>
      <content type="text"><![CDATA[上一回的翻译过后发现好多迷之翻译 这里开始决定不再完全依靠原文 部分文本有所删减并增加大量个人经验 第二回 游戏的蓝图这里第二回的初学者教程 在第一回中我们设计了整体的流程图 这一回中我们将继续做游戏的开发工作 试用版本可能不包含部分图片资源 Step2 创建一个新的项目现在,我们要创建一个新项目,让我们启动程序,在菜单 文件-新建项目中 文件名游戏名什么的 应该不需要解释了 Step3 制作地图前的准备让我们绘制一个野外的地图来做作为冒险的舞台,最初的世界地图的宽和高都是100(Vx版本),因为他需要展示很多的信息,初次之外我们还会制作很多30*30的详细地图 在MAO001的对象中右键选择地图设置,设定地图的参数 除了有地图的大小还可以设置BGM和遇敌详情 改变地图的大小将地图的宽和高通过地图属性的宽度和高度设置为30 更改选择的BGM通过改变BGM的设定来变更当前地图的BGN音效,选择自动切换BGM,点击下方的 … 按钮显来选择音效在这里选择Filed1的BGM音效, 在后面的章节中我会介绍出现敌人的选项 Step4 绘制地图如果你准备好了 那么让我开始绘制地图 选择地图编辑模式 选择草原来填充地图 草原填充的岛屿 在Mv的版本中最初应该是有个已经填充好的岛屿 其余的部分都没有任何素材 可以先通过将所有元素都用水来填充再使用草原来建造岛屿 最开始设计的时候可能不需要考虑十分详细的细节,下面让我们完成世界地图的图像 官方文档的地图设计 因为素材原因等 可能不是完全的符合 用心体会就好 关于上面那几个按钮的作用 没买中文版本的简单接介绍一下 (其实就是官方的提示) 左起第一个是画笔 手绘画块 就是一次绘制一个所选的素材 第二个是长方形(?这么随意的名字么) 绘制一个长方形的所选素材块 第三个是椭圆 画个椭圆的素材快 第四个泛滥填充 将素材在选中的闭合区域下填满所有 最后一个是阴影笔 用于绘制阴影效果 到了这个时候 我们可以看一看之前做的流程图,因为大陆是被分成了一个岛屿,所以我们要用到船或飞艇.在这个基础上我们根绝不同岛屿的定位对岛屿的细节进行下处理 其实这里大概的地图分布做到了就好 不需要完全一致 Step5 确定初始地点现在我们将世界地图绘制完成了 在运行测试一下游戏之前 我们要确定初始出现的位置 在工具栏中选择事件模式 在该位置右键选择 设置初始位置 玩家 可以看到人物的初始位置被设置到这里了 我们可以运行一下游戏 在世界中走走 这里还没涉及到城堡和城镇的交互 在后面我们将做这些处理]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[RpgMaker入门教程1]]></title>
      <url>%2F2017%2F04%2F24%2FRpgMaker%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B1%2F</url>
      <content type="text"><![CDATA[RPG Maker是一个十分优秀的rpg游戏制作引擎 恩 一个被定义为游戏的游戏引擎 可以用来十分便捷的制作rpg游戏 有兴趣的可以尝试一下 满足自己想做游戏的愿望 本文主要根据官方文档相关进行翻译并添加了部分个人的理解和帮助 部分文意和理解可能所有差异 欢迎讨论 翻译的主体的的是RpgMaker的VX版本 我使用的是RpgMaker的Mv版本 部分ui界面可能有所不同 基本功能都是一样的 MV版本的官方初级教程可以参考这里 关于RogMaker的相关版本说明可以参考这里 至于学习的建议 版本来说MV的版本扩展性更强 也可以适用于更多的平台 但是本教程的内容对这两个版本都是通用的 转载请注明出处 第一回 决定你的RPG形象(再次原谅我的野生翻译) 在这个教程中 我们将介绍如何使用”RPGMakerVX”(原文使用的版本)来制作一个简单的RPG. 原则上,我们将使用”RPGMakerVX”的正式版本，但使用”RPGMakerVX”的试用版也可以完成这些. Step1 决定你的RPG形象在开始制作之前,你要要构建你的Rpg游戏,就像是建筑的蓝图图,需要好好斟酌一下. 直接做一个十分宏大的游戏是比较困难的,所以我们要开始尝试做一个小游戏来熟悉整个流程.这里我们的主题是”英雄打败魔王”,希望能为你们带来灵感 写出你的想法 让我们总结一下英雄打败魔王的流程 我们需要将你脑中的想法记录下来,比如记在笔记本电脑中,在之后的开发中你可能会想到更多的灵感,不过这个时候记录下游戏的主干就好 例) 英雄打败魔王的流程 主要的流程大概是这样,现在,我们要决定英雄是如何打败魔王的 有的人会说 “我已经将所有的形象都记在脑中了” 但是当你开始做事的时候 这些事情往往都被你忘记了. 可能在开发的过程中就想到了一个新的想法.再忘记这些想法之前要将这些想法记录下来是十分重要的. 在考虑游戏的流程的时候,你可能也会考虑到角色的名称或者主角的个性,除此之外还要考虑物品的名称特征和魔法,怪物.这些都有助于游戏的形象更加的完事,即使是那些当前游戏有没直接相关的想法,也可能为以后的开发有所帮助. 第一回就到这里了 在这之后,你讲直接参与到实际的开发过程中]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo安装后hexo指令无法被找到的解决方法]]></title>
      <url>%2F2017%2F04%2F23%2FHexo%E5%AE%89%E8%A3%85%E5%90%8E%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98%2F</url>
      <content type="text"><![CDATA[Hexo 是一个十分便捷的博客搭建工具 但是经常会遇见安装完成后再次打开终端操作的时候提示 command not found: hexo的情况 对应的github的issues中也没有详细的解决办法在这提供一种可行的解决思路 希望能帮助到大家 相关的环境在mac下 部分终端指令在linux下可能有所不同 Hexo安装后 command not found: hexo的解决方法 出现这种情况主要是node的版本问题 可以通过nvm来控制一下node的版本来解决 nvm的安装nvm是nodejs的版本控制工具,可以很轻松来控制node的版本 下面推荐两个安装方法,可以根据实际情况进行处理 通过brew进行安装 123456brew install nvm//这个过程中可能需要安装gcc或者其它需要依赖的工具 按照提示一次安装好即可mkdir ~/.nvmexport NVM_DIR=~/.nvm.$(brew --prefix nvm)/nvm.sh//这个步骤中mac下的brew需要通过--prefix这种形式完成 通过curl进行安装1curl https://raw.github.com/creationix/nvm/master/install.sh | sh 通过curl安装需要重启终端 可能出现的问题 command not found: nvm确定以上正确执行过以上两个方法之一后 可能会遇到这种问题 需要你手动添加相关的环境变量编辑 ~/.bash_profile文件 如果使用zsh(iterm)的话是 ~/.zshrc将以下内容添加到bash_profile或zshrc文件中12export NVM_DIR=&quot;/Users/yourcomptername/.nvm&quot;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm yourcomptername的位置要填你自己的路径 安装hexo等123nvm install 4 (此处的版本可以根据实际情况处理)//确保以上都完成后再安装hexosudo npm install hexo-cli -g 至此应该可以在终端中输入hexo来验证一下是否安装成功 然后就可以重启终端了 再次输入hexo后会出现 command not found: hexo的提示 一般情况下都是首次安装hexo后可以正常使用 后来再次使用的时候发现无法使用 正文开始也不能说是正文 之前的都是为所依赖的环境做准备 顺便简单排除一下其它因素 查看node的版本情况 (这个截图是我配置完成后的截图 初次使用的时候可能有部分出入) 在这里可以看到我的node版本是4.8.2 再进行一下的操作12345//切换对应的版本nvm use 4.8.2//但是每次重启终端后改设置都会失效 所以要设置默认的版本nvm alias default 4.8.2 再次使用nvm ls命令来查看 当和前面的途中绿色箭头指向你所指定的版本好的时候就说明设置成功了 至此应该可以解决command not found: hexo的问题了 如果还是不可以 可以尝试通过 sudo npm install hexo-cli -g 重装一下hexo]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[写代码时适合听的网站和歌单]]></title>
      <url>%2F2017%2F02%2F06%2FmusicOfCoding%2F</url>
      <content type="text"><![CDATA[适合在写代码的时候听的音乐的歌单和网站推荐(持续收录) 网站musicforprogramming.net 一个看起来就十分有代码风格的网站 defonic.com 一个白噪音生成网站 www.noisli.com 同样是一个白噪音生成的网站 歌单金玟岐作品集 程序员工作专用]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[在搬瓦工中搭建个人vpn(ss和pptp)]]></title>
      <url>%2F2017%2F02%2F05%2Fvpn%2F</url>
      <content type="text"><![CDATA[帮助为了方便访问一些不存在的网站的你们 搬瓦工官方网站 虽然经常连接不上 反而这个备用地址倒是连接速度很快一个支持ailpay的国外vps 价格十分的感人 现在应该是2.99美元一个月 同时五个机房可以随意更换 也就是说可以获得五个ip地址 某些情况下十分的有用 同样价格感人的还有Host1plus 2美元每月 但是线路不是很稳定详细的可以查看官方网站 这里只是简单的介绍了两个可以通过支付宝支付的国外vps 免去了还得申请visa卡的纠结 更多详细的内容可以查看十个便宜VPS(国内国外)主机分享-VPS服务器建站和搭建应用服务体验 ss和pptpss就是Shadowsocks 一个轻量级的科学上网方式支持OS X Windows Linux iOS android的客户端. 具体可以参考Shadowsocks的详细说明 pptp是一种点对点隧道协议 可以用来实现科学上网相对于ss来说可配置性更多. 具体的也可以参考点对点隧道协议 个人vpn搭建教程vps的准备由于是在搬瓦工中搭建的vpn 所以还是推荐购买搬瓦工的服务器 需要注意以下几点 注册的邮箱需要真实 省的以后无法找回密码 同样是注册时 用拼音填写就可以 资料是否真实无所谓 但是国家 省份需要真实存在的 购买的时候选择价格最低的就好 国外的服务器一般都是用来搭建这个的不是 500g额度也够你使用了 可以根据自己的情况选择购买的方式 一月 一季度 半年和一年的四种方式 时间越长每月的花销越低 看个人的选择 玄学是洛杉矶的机房的网速最快 搬瓦工的对文本的操作是会在额外的弹窗中进行的 注意不要阻止弹出 要不你会因为奇怪的提示而怀疑人生的 通过ss搭建个人vpn搬瓦工有一键开启ss的功能 只是想简单的自己做个vpn没有额外其他的要求可以使用一下 十分的便捷 同样 我也会说一下手动配置的方法 也十分的便捷其实 利用ss的Shadowsocks Server一键开启vpn 进入控制台 对系统进行更新 一键生成ss服务 选择一键生成的功能 这个时候就说明生成成功了 ss服务的相关配置信息 下载ss客户端后创建新的连接 输入相关的信息 不需要的时候可以点击这里关闭ss服务 手动配置ss服务开启vpn 进入控制台 利用pip安装ss服务 12# yum install python-setuptools &amp;&amp; easy_install pip # pip install shadowsocks 配置相关信息 也有两种方式 推荐第一种 配置信息方便查看和更改 创建配置信息 123456789101112# touch /etc/shadowsocks.json# vi /etc/shadowsocks.json&#123;&quot;server&quot;:&quot;xxx.xxx.xxx&quot;, //服务器的IP&quot;server_port&quot;:443, //服务器断开&quot;local_address&quot;: &quot;127.0.0.1&quot;, //客户端地址&quot;local_port&quot;:1080, //客户端端口&quot;password&quot;:&quot;MyPass&quot;, //密码&quot;timeout&quot;:600, //超时时间(s)&quot;method&quot;:&quot;rc4-md5&quot; //加密方式 可选“bf-cfb”, “aes-256-cfb”, &quot;salsa20&quot; , “rc4″等&#125; 运行ss服务 1# ssserver -c /etc/shadowsocks.json -d start 直接设置相关信息 1# ssserver -p 443 -k MyPass -m rc4-md5 -d start 停止ss服务 12345#ssserver -c /etc/shadowsocks.json -d stop//通过json文件配置开启的服务关闭方法#ssserver -d stop//直接配置信息开启的服务关闭的方法 通过pptp搭建个人vpn 安装PPP和iptables 1# yum install -y ppp iptables 安装pptpd由于我们是通过yum安转的ppp 因为yum安转的ppp是最新的版本 所以我们要根据当前的ppp版本来选择pptp的版本 1# yum list installed ppp //查看当前ppp版本 根据当期ppp版本选择对应的pptp版本 可以在这里找到对应的版本下载 ppp 2.4.4 对应 pptp 1.3.4的版本 ppp 2.4.5 对应 pptp 1.4.0的版本 123456# wget http://poptop.sourceforge.net/yum/stable/packages/pptpd-1.4.0-1.el6.x86_64.rpm//下载对应的版本# yum install perl//安装perl# rpm -ivh pptpd-1.4.0-1.el6.x86_64.rpm//安装pptp 至此均安装完毕 下面进行配置 vpn相关配置一下均对配置文件进行备份 有需要的可以回滚操作 配置 /etc/ppp/options.pptpd 1234567# cp /etc/ppp/options.pptpd /etc/ppp/options.pptpd.bak//备份# vi /etc/ppp/options.pptpd//将以下内容添加到options.pptpd当中ms-dns 8.8.8.8ms-dns 8.8.4.4 配置 /etc/ppp/chap-secrets 123456789# cp /etc/ppp/chap-secrets /etc/ppp/chap-secrets.bak//备份# vi /etc/ppp/chap-secrets//添加以下内容myusername pptpd mypassword *//myusername vpn账号//mypassword vpn密码//* 可连接的ip地址 *表示接受所有ip地址的来源 配置 /etc/pptpd.conf 123456789# cp /etc/pptpd.conf /etc/pptpd.conf.bak//备份# vi /etc/pptpd.conf//添加一下内容 用于获得vpn客户端获得ip的范围localip 192.168.0.1remoteip 192.168.0.234-238,192.168.0.245//配置文件的最后要以空行结尾 配置 /etc/sysctl.conf 12345678# cp /etc/sysctl.conf /etc/sysctl.conf.bak# vi /etc/sysctl.conf//修改以下内容 使其支持转发net.ipv4.ip_forward = 1# /sbin/sysctl -p//保存修改后的文件 启动pptp服务和iptables 12345678910111213# /sbin/service iptables start//启动iptables# iptables -t nat -A POSTROUTING -o eth0 -s 192.168.0.0/24 -j SNAT --to-source xxx.xxx.xxx.xxx//设置转发功能 -o eth0制定网卡// xxx.xxx.xxx.xxx为公网ip# /etc/init.d/iptables save//保存iptables的转发规则# /sbin/service iptables restart//重新启动iptables# service pptpd start FinalSpeed对ss的优化提速123# wget http://fs.d1sm.net/finalspeed/install_fs.sh# chmod +x install_fs.sh# ./install_fs.sh 2&gt;&amp;1 | tee install.log 相关注意事项个人学习用 不要用于奇怪的地方 游戏延迟可能很高]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android Tools 之一 Hierarchy Viewer]]></title>
      <url>%2F2017%2F02%2F03%2FHierarchyViewer%2F</url>
      <content type="text"><![CDATA[Android Tools 之一 Hierarchy Viewer 本系列旨在介绍一些被忽略的优质工具 毕竟 能被当做自带的工具总有些做的比较好的地方不是 Hierarchy ViewerHierarchy Viewer是一个可以用来查看View的使用工具 android sdk中自带 Optimizing Your UI -官方网站 需科学上网 启动Hierarchy Viewerhierarchyviewer工具在sdk/tools路径下 再次打开后会出现如下提示12The standalone version of hieararchyviewer is deprecated.Please use Android Device Monitor (tools/monitor) instead. 主要想说的就是 单独使用hieararchyviewer已经不被建议 建议使用Android Device Monitor(Android Device Monitor的相关使用后续会详细介绍) 直接运行monitor或者在在Android Studio -&gt; tools -&gt; android -&gt; Android Device Monitor中将hieararchyviewer工具打开 以下对hieararchyviewer工具进行操作均为直接打开hieararchyviewer工具 和通过monitor工具打开的hieararchyviewer的UI可能略有不同 以直接打开hieararchyviewer工具操作为准 无法正常使用在连接过程中可能遇到无法连接到手机的问题 详情参考以下文章 HierachyViewer无法连接真机调试 HierachyViewer无法连接真机调试详解 使用Hierarchy Viewer 成功连接后会出现如上页面 当前页面正在显示的进程被加粗显示 (那些看着是空的位置 进入后会显示通知栏中的View布局) 选择想要查看的进程后进入 Load View Hierarchy页面 下面对不同部分分别介绍一下 Save as PNG: 把这个布局的层级另存为png格式 Capture Layers: 把这个布局的层级另存为psd格式 可以查看各层级的情况 Load View Hierarchy: 重新载入这个view层级图 Evaluate Contrast: 查看层级布局的具体情况 Display View: 在单独的一个窗口中显示所选择的view Invalidate Layout: 重绘当前窗口 Request Layout: 对当前view进行layout Dump DisplayList: 使当前view输出它的显示列表到logcat中 Dump Theme: 下载这个view主题的资源 Profile Node: 得到measure，layout，draw的性能指示器 选取某个view节点可以查看选取的View的详情 关于View的渲染机制可以参考一下本人关于android View相关机制解析的文章 Android View 相关源码分析之三 View的绘制过程 关于对应渲染时间的速度中 我么知道View绘制分为measure layout 和draw三个过程 三个点分布对应以上三个过程 分为绿 黄 红三个颜色 绿色代表该View在本view tree中速度是前50% 黄色表示后50% 而红色表示是花费时间最长的 还记得最开始使用Hierarchy Viewer中上方有Inspect screenshot的按钮 可以查看当前Activity的像素情况 (层级十分的清晰 就不仔细解释了) 解释下相关功能 Save as PNG: 保存当前显示的页面为png格式 Refresh Screenshot: 刷新像素视图和放大镜视图(右边那两个) Refresh Tree: 刷新View tree Load Overlay: 在右侧放大镜视图中中加载一个覆盖图(官网中没有给出详细的定义 主要根据相关介绍理解 略有偏差 欢迎指出) Show In Loupe: 在中间的像素视图中显示之前加载的图片 Auto Refresh: 会根据下发设置的Refresh Rate的时间自动更新View tree 以上]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android View 相关源码分析之五 RelativeLayout 源码分析]]></title>
      <url>%2F2017%2F02%2F03%2FRelativeLayout%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%2F</url>
      <content type="text"><![CDATA[RelativeLayout 源码分析 继承自ViewGroup 没有重载onDraw方法 内部子View又是相对 只要计算出View的坐标 layout过程同样简单 measure过程主要过程 将内部View根据纵向关系和横向关系排序 初始化相关变量 遍历水平关系的View 遍历竖直关系的View baseline计算 宽度和高度修正 1 将内部View根据纵向关系和横向关系排序 layout_toRightOf 为横向关系 layout_below为纵向关系 12345//首先会根据mDirtyHierarchy的值判断是否需要将子View重新排序if (mDirtyHierarchy) &#123; mDirtyHierarchy = false; sortChildren();&#125; 相关调用方法123456789101112131415161718192021222324252627//mDirtyHierarchy的值只有在requestLayout方法下被更新public void requestLayout() &#123; super.requestLayout(); mDirtyHierarchy = true;&#125;//sortChildren()方法对横向纵向关系的view的数组进行非空判断 用DependencyGraph进行判断private void sortChildren() &#123; final int count = getChildCount(); if (mSortedVerticalChildren == null || mSortedVerticalChildren.length != count) &#123; mSortedVerticalChildren = new View[count]; &#125; if (mSortedHorizontalChildren == null || mSortedHorizontalChildren.length != count) &#123; mSortedHorizontalChildren = new View[count]; &#125; final DependencyGraph graph = mGraph; graph.clear(); for (int i = 0; i &lt; count; i++) &#123; graph.add(getChildAt(i)); &#125; graph.getSortedViews(mSortedVerticalChildren, RULES_VERTICAL); graph.getSortedViews(mSortedHorizontalChildren, RULES_HORIZONTAL);&#125; DependencyGraph的相关方法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768 private static class DependencyGraph &#123; ... /** * Adds a view to the graph. * * @param view The view to be added as a node to the graph. */ void add(View view) &#123; //因为是图 根据view生成一个节点 final int id = view.getId(); final Node node = Node.acquire(view); //如果是有效的id 则将该节点添加到List中 if (id != View.NO_ID) &#123; mKeyNodes.put(id, node); &#125; mNodes.add(node); &#125; /** * Builds a sorted list of views. The sorting order depends on the dependencies * between the view. For instance, if view C needs view A to be processed first * and view A needs view B to be processed first, the dependency graph * is: B -&gt; A -&gt; C. The sorted array will contain views B, A and C in this order. * * @param sorted The sorted list of views. The length of this array must * be equal to getChildCount(). * @param rules The list of rules to take into account. */ void getSortedViews(View[] sorted, int... rules) &#123; //当前View找不到其它的可依赖的View时 作为root节点 final ArrayDeque&lt;Node&gt; roots = findRoots(rules); int index = 0; Node node; //读取root的下一个node while ((node = roots.pollLast()) != null) &#123; final View view = node.view; final int key = view.getId(); //将符合规则的View加到 sorted中 sorted[index++] = view; final ArrayMap&lt;Node, DependencyGraph&gt; dependents = node.dependents; //dependents 依赖该node的node (A C依赖B 则B的dependents中存A C) final int count = dependents.size(); //遍历所有依赖自己的node for (int i = 0; i &lt; count; i++) &#123; final Node dependent = dependents.keyAt(i); //dependencies 是被依赖的的node的规则和node(A 依赖 B D 则dependencies存有B D ) final SparseArray&lt;Node&gt; dependencies = dependent.dependencies; //移除当前node和dependencies的依赖关系 dependencies.remove(key); //如果解除依赖后没有其它依赖 则将该node也视为rootNode if (dependencies.size() == 0) &#123; roots.add(dependent); &#125; &#125; &#125; if (index &lt; sorted.length) &#123; throw new IllegalStateException("Circular dependencies cannot exist in RelativeLayout"); &#125; &#125; ...&#125; eg: A依赖B B依赖C 首先存入C 因为不依赖任何其它的 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162/** * Finds the roots of the graph. A root is a node with no dependency and * with [0..n] dependents. * * @param rulesFilter The list of rules to consider when building the * dependencies * * @return A list of node, each being a root of the graph */private ArrayDeque&lt;Node&gt; findRoots(int[] rulesFilter) &#123; //keyNodes为nodelist final SparseArray&lt;Node&gt; keyNodes = mKeyNodes; final ArrayList&lt;Node&gt; nodes = mNodes; final int count = nodes.size(); //初始化依赖该node的node和该node依赖的node相关参数 for (int i = 0; i &lt; count; i++) &#123; final Node node = nodes.get(i); node.dependents.clear(); node.dependencies.clear(); &#125; //遍历所有node 存入当前view和他所依赖的关系 for (int i = 0; i &lt; count; i++) &#123; final Node node = nodes.get(i); final LayoutParams layoutParams = (LayoutParams) node.view.getLayoutParams(); //取出当前View所有的依赖关系 final int[] rules = layoutParams.mRules; final int rulesCount = rulesFilter.length; //遍历当前View所有的 for (int j = 0; j &lt; rulesCount; j++) &#123; //rule对应被依赖view的id final int rule = rules[rulesFilter[j]]; if (rule &gt; 0) &#123; //找到被依赖的node final Node dependency = keyNodes.get(rule); //跳过空view和本身 if (dependency == null || dependency == node) &#123; continue; &#125; //添加依赖被依赖的node dependency.dependents.put(node, this); node.dependencies.put(rule, dependency); &#125; &#125; &#125; final ArrayDeque&lt;Node&gt; roots = mRoots; roots.clear(); // 再次遍历 如果该node的依赖关系为0 即该view不依赖任何view 则视为rootView for (int i = 0; i &lt; count; i++) &#123; final Node node = nodes.get(i); if (node.dependencies.size() == 0) roots.addLast(node); &#125; return roots;&#125; 2 初始化相关变量1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556int myWidth = -1;int myHeight = -1;int width = 0;int height = 0;final int widthMode = MeasureSpec.getMode(widthMeasureSpec);final int heightMode = MeasureSpec.getMode(heightMeasureSpec);final int widthSize = MeasureSpec.getSize(widthMeasureSpec);final int heightSize = MeasureSpec.getSize(heightMeasureSpec);// 如果不是UNSPECIFIED模式 则将widthSize赋值于myWidthif (widthMode != MeasureSpec.UNSPECIFIED) &#123; myWidth = widthSize;&#125;// 如果不是UNSPECIFIED模式 则将heightSize赋值于myHeightif (heightMode != MeasureSpec.UNSPECIFIED) &#123; myHeight = heightSize;&#125;//如果是EXACTLY模式 则将myWidth和myHeight记录if (widthMode == MeasureSpec.EXACTLY) &#123; width = myWidth;&#125;if (heightMode == MeasureSpec.EXACTLY) &#123; height = myHeight;&#125;View ignore = null;//判断是否为Start 和 top 确定左上角坐标int gravity = mGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;final boolean horizontalGravity = gravity != Gravity.START &amp;&amp; gravity != 0;gravity = mGravity &amp; Gravity.VERTICAL_GRAVITY_MASK;final boolean verticalGravity = gravity != Gravity.TOP &amp;&amp; gravity != 0;int left = Integer.MAX_VALUE;int top = Integer.MAX_VALUE;int right = Integer.MIN_VALUE;int bottom = Integer.MIN_VALUE;boolean offsetHorizontalAxis = false;boolean offsetVerticalAxis = false;// 记录ignore的viewif ((horizontalGravity || verticalGravity) &amp;&amp; mIgnoreGravity != View.NO_ID) &#123; ignore = findViewById(mIgnoreGravity);&#125;//宽度个高度是否为warp模式final boolean isWrapContentWidth = widthMode != MeasureSpec.EXACTLY;final boolean isWrapContentHeight = heightMode != MeasureSpec.EXACTLY;//在计算和分配的子View的坐标的时候 需要用到父VIew的尺寸 但是暂时无法拿到准确值(待完成下面操作)//先使用默认值代替 在计算后 用偏移量更新真是坐标final int layoutDirection = getLayoutDirection();if (isLayoutRtl() &amp;&amp; myWidth == -1) &#123; myWidth = DEFAULT_WIDTH;&#125; 3 遍历水平关系的View12345678910111213141516171819View[] views = mSortedHorizontalChildren;int count = views.length;for (int i = 0; i &lt; count; i++) &#123; View child = views[i]; if (child.getVisibility() != GONE) &#123; LayoutParams params = (LayoutParams) child.getLayoutParams(); //根据方向获得子View中设置的规则 int[] rules = params.getRules(layoutDirection); //将左右方向规则转换为左右的坐标 applyHorizontalSizeRules(params, myWidth, rules); //测算水平方向的子View的尺寸 measureChildHorizontal(child, params, myWidth, myHeight); //确定水平方向子View的位置 if (positionChildHorizontal(child, params, myWidth, isWrapContentWidth)) &#123; offsetHorizontalAxis = true; &#125; &#125;&#125; 相关方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455private void applyHorizontalSizeRules(LayoutParams childParams, int myWidth, int[] rules) &#123; RelativeLayout.LayoutParams anchorParams; childParams.mLeft = VALUE_NOT_SET; childParams.mRight = VALUE_NOT_SET; //得到当前子View的layout_toLeftOf属性对应的View anchorParams = getRelatedViewParams(rules, LEFT_OF); if (anchorParams != null) &#123; //如果这个属性存在 则当前子View的右坐标是layout_toLeftOf对应的view的左坐标减去对应view的marginLeft的值和自身marginRight的值 childParams.mRight = anchorParams.mLeft - (anchorParams.leftMargin + childParams.rightMargin); //如果alignWithParent为true alignWithParent取alignWithParentIfMissing //如果layout_toLeftOf的view为空 或者gone 则将RelativeLayout当做被依赖的对象 &#125; else if (childParams.alignWithParent &amp;&amp; rules[LEFT_OF] != 0) &#123; //如果父容器RelativeLayout的宽度大于0 //则子View的右坐标为 父RelativeLayout的宽度减去 mPaddingRight 和自身的marginRight if (myWidth &gt;= 0) &#123; childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin; &#125; &#125; //类似的方法 得到左坐标(通过参数RIGHT_OF) anchorParams = getRelatedViewParams(rules, RIGHT_OF); if (anchorParams != null) &#123; childParams.mLeft = anchorParams.mRight + (anchorParams.rightMargin + childParams.leftMargin); &#125; else if (childParams.alignWithParent &amp;&amp; rules[RIGHT_OF] != 0) &#123; childParams.mLeft = mPaddingLeft + childParams.leftMargin; &#125; //类似的方法 得到左坐标 (通过参数ALIGN_LEFT) anchorParams = getRelatedViewParams(rules, ALIGN_LEFT); if (anchorParams != null) &#123; childParams.mLeft = anchorParams.mLeft + childParams.leftMargin; &#125; else if (childParams.alignWithParent &amp;&amp; rules[ALIGN_LEFT] != 0) &#123; childParams.mLeft = mPaddingLeft + childParams.leftMargin; &#125; //类似的方法 得到右坐标 (通过参数ALIGN_RIGHT) anchorParams = getRelatedViewParams(rules, ALIGN_RIGHT); if (anchorParams != null) &#123; childParams.mRight = anchorParams.mRight - childParams.rightMargin; &#125; else if (childParams.alignWithParent &amp;&amp; rules[ALIGN_RIGHT] != 0) &#123; if (myWidth &gt;= 0) &#123; childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin; &#125; &#125; //根据ALIGN_PARENT_LEFT 将自己放到父RelativeLayout的左边 if (0 != rules[ALIGN_PARENT_LEFT]) &#123; childParams.mLeft = mPaddingLeft + childParams.leftMargin; &#125; //根据ALIGN_PARENT_RIGHT 将自己放到父RelativeLayout的右边 if (0 != rules[ALIGN_PARENT_RIGHT]) &#123; if (myWidth &gt;= 0) &#123; childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin; &#125; &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041private void measureChildHorizontal(View child, LayoutParams params, int myWidth, int myHeight) &#123; //获得child的宽度MeasureSpec final int childWidthMeasureSpec = getChildMeasureSpec(params.mLeft, params.mRight, params.width, params.leftMargin, params.rightMargin, mPaddingLeft, mPaddingRight, myWidth); final int childHeightMeasureSpec; //在低于4.2的时候 mAllowBrokenMeasureSpecs为true //当myHeight &lt; 0 时 则根据父RelativeLayout设置其MeasureSpec模式 if (myHeight &lt; 0 &amp;&amp; !mAllowBrokenMeasureSpecs) &#123; //如果父RelativeLayout的height大于0 则 设置子view的MeasureSpec模式为EXACTLY if (params.height &gt;= 0) &#123; childHeightMeasureSpec = MeasureSpec.makeMeasureSpec( params.height, MeasureSpec.EXACTLY); &#125; else &#123; //反之 如果其小于0 则设置子View的MeasureSpec为UNSPECIFIED childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED); &#125; &#125; else &#123; //当当前myHeight &gt;= 0 //判断当前高度是否与父RelativeLayout高度相同 设置heightMode //根据maxHeight 和heightMode设置子View的MeasureSpec模式 final int maxHeight; if (mMeasureVerticalWithPaddingMargin) &#123; maxHeight = Math.max(0, myHeight - mPaddingTop - mPaddingBottom - params.topMargin - params.bottomMargin); &#125; else &#123; maxHeight = Math.max(0, myHeight); &#125; final int heightMode; if (params.height == LayoutParams.MATCH_PARENT) &#123; heightMode = MeasureSpec.EXACTLY; &#125; else &#123; heightMode = MeasureSpec.AT_MOST; &#125; childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(maxHeight, heightMode); &#125; //获得了子View的WidthMeasureSpec和HeightMeasureSpec //子View可以通过measure方法获取自身的size child.measure(childWidthMeasureSpec, childHeightMeasureSpec);&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105/** * Get a measure spec that accounts for all of the constraints on this view. * This includes size constraints imposed by the RelativeLayout as well as * the View's desired dimension. * * @param childStart The left or top field of the child's layout params * @param childEnd The right or bottom field of the child's layout params * @param childSize The child's desired size (the width or height field of * the child's layout params) * @param startMargin The left or top margin * @param endMargin The right or bottom margin * @param startPadding mPaddingLeft or mPaddingTop * @param endPadding mPaddingRight or mPaddingBottom * @param mySize The width or height of this view (the RelativeLayout) * @return MeasureSpec for the child */ private int getChildMeasureSpec(int childStart, int childEnd, int childSize, int startMargin, int endMargin, int startPadding, int endPadding, int mySize) &#123; int childSpecMode = 0; int childSpecSize = 0; final boolean isUnspecified = mySize &lt; 0; //如果父RelativeLayout宽度小于0 版本号不小于4.2 if (isUnspecified &amp;&amp; !mAllowBrokenMeasureSpecs) &#123; //如果子View的左边距和右边距都不为VALUE_NOT_SET //且右边距坐标大于左边距坐标 则将其差当做宽度赋予View 设置模式为EXACTLY //VALUE_NOT_SET = Integer.MIN_VALUE /** * Constant for the minimum &#123;@code int&#125; value, -2&lt;sup&gt;31&lt;/sup&gt;. */ //public static final int MIN_VALUE = 0x80000000; if (childStart != VALUE_NOT_SET &amp;&amp; childEnd != VALUE_NOT_SET) &#123; childSpecSize = Math.max(0, childEnd - childStart); childSpecMode = MeasureSpec.EXACTLY; &#125; else if (childSize &gt;= 0) &#123; // 如果childSpecSize &gt;= 0 则赋值于childSpecSize //同样设置模式为EXACTLY childSpecSize = childSize; childSpecMode = MeasureSpec.EXACTLY; &#125; else &#123; // 都不满足则设置模式为UNSPECIFIED childSpecSize = 0; childSpecMode = MeasureSpec.UNSPECIFIED; &#125; return MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode); &#125; // 计算 开始和结束相关 int tempStart = childStart; int tempEnd = childEnd; //如果没有指定start值 则默认赋予 padding和merage的值 if (tempStart == VALUE_NOT_SET) &#123; tempStart = startPadding + startMargin; &#125; //同上 if (tempEnd == VALUE_NOT_SET) &#123; tempEnd = mySize - endPadding - endMargin; &#125; //指定最大可提供的大小 final int maxAvailable = tempEnd - tempStart; if (childStart != VALUE_NOT_SET &amp;&amp; childEnd != VALUE_NOT_SET) &#123; //如果Start和End都是有效值 根据isUnspecified设置specMode为UNSPECIFIED或EXACTLY //并将设置对应的size childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY; childSpecSize = Math.max(0, maxAvailable); &#125; else &#123; //反之 判断childSize的相关值 if (childSize &gt;= 0) &#123; //设置模式为EXACTLY //判断maxAvailable和childSize情况 取较大值设置为childSpecSize childSpecMode = MeasureSpec.EXACTLY; if (maxAvailable &gt;= 0) &#123; // We have a maximum size in this dimension. childSpecSize = Math.min(maxAvailable, childSize); &#125; else &#123; // We can grow in this dimension. childSpecSize = childSize; &#125; &#125; else if (childSize == LayoutParams.MATCH_PARENT) &#123; //如果子View是match模式 参照isUnspecified设置相关 childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY; childSpecSize = Math.max(0, maxAvailable); &#125; else if (childSize == LayoutParams.WRAP_CONTENT) &#123; //在wrap进行设置 if (maxAvailable &gt;= 0) &#123; // We have a maximum size in this dimension. childSpecMode = MeasureSpec.AT_MOST; childSpecSize = maxAvailable; &#125; else &#123; // We can grow in this dimension. Child can be as big as it // wants. childSpecMode = MeasureSpec.UNSPECIFIED; childSpecSize = 0; &#125; &#125; &#125; return MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode); &#125; 以上 完成了View的第一次测量 确定了View的大小 然后根据大小觉得把子view放在父RelativeLayout中的位置 12345678910111213141516171819202122232425262728293031323334353637383940414243private boolean positionChildHorizontal(View child, LayoutParams params, int myWidth, boolean wrapContent) &#123; //获取RelativeLayout的布局方向 final int layoutDirection = getLayoutDirection(); int[] rules = params.getRules(layoutDirection); if (params.mLeft == VALUE_NOT_SET &amp;&amp; params.mRight != VALUE_NOT_SET) &#123; // 如果右边界有效 左边界无效 根据右边界计算出左边界 params.mLeft = params.mRight - child.getMeasuredWidth(); &#125; else if (params.mLeft != VALUE_NOT_SET &amp;&amp; params.mRight == VALUE_NOT_SET) &#123; // 同上反之 params.mRight = params.mLeft + child.getMeasuredWidth(); &#125; else if (params.mLeft == VALUE_NOT_SET &amp;&amp; params.mRight == VALUE_NOT_SET) &#123; //都无效的时候 if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_HORIZONTAL] != 0) &#123; //设置了CENTER_IN_PARENT或者 CENTER_HORIZONTAL的情况下 if (!wrapContent) &#123; //非wrap情况下 //把子View水平中心固定在RelativeLayout的中心 centerHorizontal(child, params, myWidth); &#125; else &#123; //左边距为padding+margin //右边距为左边距加上测量宽度 params.mLeft = mPaddingLeft + params.leftMargin; params.mRight = params.mLeft + child.getMeasuredWidth(); &#125; return true; &#125; else &#123; //RTL右到左 布局方向 //LTR左到右 布局方向 if (isLayoutRtl()) &#123; params.mRight = myWidth - mPaddingRight- params.rightMargin; params.mLeft = params.mRight - child.getMeasuredWidth(); &#125; else &#123; params.mLeft = mPaddingLeft + params.leftMargin; params.mRight = params.mLeft + child.getMeasuredWidth(); &#125; &#125; &#125; return rules[ALIGN_PARENT_END] != 0; //当为CENTER_IN_PARENT CENTER_HORIZONTAL ALIGN_PARENT_END三种情况之一时返回True&#125; 4 遍历竖直关系的View12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152... for (int i = 0; i &lt; count; i++) &#123; final View child = views[i]; if (child.getVisibility() != GONE) &#123; final LayoutParams params = (LayoutParams) child.getLayoutParams(); //将竖直方向规则转换为坐标 applyVerticalSizeRules(params, myHeight, child.getBaseline()); //测量子View measureChild(child, params, myWidth, myHeight); //确定竖直方向子View的位置 if (positionChildVertical(child, params, myHeight, isWrapContentHeight)) &#123; offsetVerticalAxis = true; &#125; //首先判断是否为wrap模式 if (isWrapContentWidth) &#123; //根据RTL或者LTR和版本进行区分 //Build.VERSION_CODES.KITKAT = 19 //主要对margin进行处理 if (isLayoutRtl()) &#123; if (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123; width = Math.max(width, myWidth - params.mLeft); &#125; else &#123; width = Math.max(width, myWidth - params.mLeft - params.leftMargin); &#125; &#125; else &#123; if (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123; width = Math.max(width, params.mRight); &#125; else &#123; width = Math.max(width, params.mRight + params.rightMargin); &#125; &#125; &#125; if (isWrapContentHeight) &#123; if (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123; height = Math.max(height, params.mBottom); &#125; else &#123; height = Math.max(height, params.mBottom + params.bottomMargin); &#125; &#125; if (child != ignore || verticalGravity) &#123; left = Math.min(left, params.mLeft - params.leftMargin); top = Math.min(top, params.mTop - params.topMargin); &#125; if (child != ignore || horizontalGravity) &#123; right = Math.max(right, params.mRight + params.rightMargin); bottom = Math.max(bottom, params.mBottom + params.bottomMargin); &#125; &#125; &#125;... 5 baseline计算12345678910111213141516// Use the top-start-most laid out view as the baseline. RTL offsets are// applied later, so we can use the left-most edge as the starting edge. View baselineView = null; LayoutParams baselineParams = null; for (int i = 0; i &lt; count; i++) &#123; final View child = views[i]; if (child.getVisibility() != GONE) &#123; final LayoutParams childParams = (LayoutParams) child.getLayoutParams(); if (baselineView == null || baselineParams == null || compareLayoutPosition(childParams, baselineParams) &lt; 0) &#123; baselineView = child; baselineParams = childParams; &#125; &#125; &#125; mBaselineView = baselineView; 6 宽度和高度修正123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103//如何是wrap模式if (isWrapContentWidth) &#123; width += mPaddingRight; if (mLayoutParams != null &amp;&amp; mLayoutParams.width &gt;= 0) &#123; width = Math.max(width, mLayoutParams.width); &#125; width = Math.max(width, getSuggestedMinimumWidth()); width = resolveSize(width, widthMeasureSpec); //在得到最后的width之后 对依赖RelativeLayout的子View添上偏移量 if (offsetHorizontalAxis) &#123; for (int i = 0; i &lt; count; i++) &#123; final View child = views[i]; if (child.getVisibility() != GONE) &#123; final LayoutParams params = (LayoutParams) child.getLayoutParams(); final int[] rules = params.getRules(layoutDirection); //对CENTER_IN_PARENT或者CENTER_HORIZONTAL的子View重测 if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_HORIZONTAL] != 0) &#123; centerHorizontal(child, params, width); //对ALIGN_PARENT_RIGHT重测 &#125; else if (rules[ALIGN_PARENT_RIGHT] != 0) &#123; final int childWidth = child.getMeasuredWidth(); params.mLeft = width - mPaddingRight - childWidth; params.mRight = params.mLeft + childWidth; &#125; &#125; &#125; &#125; &#125; //同上 if (isWrapContentHeight) &#123; height += mPaddingBottom; if (mLayoutParams != null &amp;&amp; mLayoutParams.height &gt;= 0) &#123; height = Math.max(height, mLayoutParams.height); &#125; height = Math.max(height, getSuggestedMinimumHeight()); height = resolveSize(height, heightMeasureSpec); if (offsetVerticalAxis) &#123; for (int i = 0; i &lt; count; i++) &#123; final View child = views[i]; if (child.getVisibility() != GONE) &#123; final LayoutParams params = (LayoutParams) child.getLayoutParams(); final int[] rules = params.getRules(layoutDirection); if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_VERTICAL] != 0) &#123; centerVertical(child, params, height); &#125; else if (rules[ALIGN_PARENT_BOTTOM] != 0) &#123; final int childHeight = child.getMeasuredHeight(); params.mTop = height - mPaddingBottom - childHeight; params.mBottom = params.mTop + childHeight; &#125; &#125; &#125; &#125; &#125; //根据gravity再次修正 if (horizontalGravity || verticalGravity) &#123; final Rect selfBounds = mSelfBounds; selfBounds.set(mPaddingLeft, mPaddingTop, width - mPaddingRight, height - mPaddingBottom); final Rect contentBounds = mContentBounds; Gravity.apply(mGravity, right - left, bottom - top, selfBounds, contentBounds, layoutDirection); final int horizontalOffset = contentBounds.left - left; final int verticalOffset = contentBounds.top - top; if (horizontalOffset != 0 || verticalOffset != 0) &#123; for (int i = 0; i &lt; count; i++) &#123; final View child = views[i]; if (child.getVisibility() != GONE &amp;&amp; child != ignore) &#123; final LayoutParams params = (LayoutParams) child.getLayoutParams(); if (horizontalGravity) &#123; params.mLeft += horizontalOffset; params.mRight += horizontalOffset; &#125; if (verticalGravity) &#123; params.mTop += verticalOffset; params.mBottom += verticalOffset; &#125; &#125; &#125; &#125; &#125; //如果是RTL(右到左显示)则再次修改 if (isLayoutRtl()) &#123; final int offsetWidth = myWidth - width; for (int i = 0; i &lt; count; i++) &#123; final View child = views[i]; if (child.getVisibility() != GONE) &#123; final LayoutParams params = (LayoutParams) child.getLayoutParams(); params.mLeft -= offsetWidth; params.mRight -= offsetWidth; &#125; &#125; &#125; 简单总结RelativeLayout更加关注子View的left right top bottom值 并且优先级高于width和height RelativeLayout的layout过程对于RelativeLayout来的 layout过程更多的根据子View的left right top bottom值来设定位置1234567891011121314protected void onLayout(boolean changed, int l, int t, int r, int b) &#123; // The layout has actually already been performed and the positions // cached. Apply the cached values to the children. final int count = getChildCount(); for (int i = 0; i &lt; count; i++) &#123; View child = getChildAt(i); if (child.getVisibility() != GONE) &#123; RelativeLayout.LayoutParams st = (RelativeLayout.LayoutParams) child.getLayoutParams(); child.layout(st.mLeft, st.mTop, st.mRight, st.mBottom); &#125; &#125;&#125; RelativeLayout的draw过程RelativeLayout作为ViewGroup的子类 因为其性质原因 没有对draw过程进行修改 以上]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android View 相关源码分析之四 LinearLayout源码分析]]></title>
      <url>%2F2017%2F02%2F03%2FLinearLayout%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%2F</url>
      <content type="text"><![CDATA[LinearLayout 源码分析measure过程主要过程 根据布局方向选择measure过程分支 初始化相关变量 对View进行第一次测量 mTotalLength的再次测量 二次测量部分View和对为测量的子View进行测量 12345678protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; //判断布局方向 if (mOrientation == VERTICAL) &#123; measureVertical(widthMeasureSpec, heightMeasureSpec); &#125; else &#123; measureHorizontal(widthMeasureSpec, heightMeasureSpec); &#125;&#125; measureVertical和measureHorizontal只是布局方向上的区别 以下主要分析measureVertical方法 初始化相关变量1234567891011121314151617181920212223242526//mTotalLength是记录内部使用的高度也就是子View的高度和 而不是LinearLayout的高度mTotalLength = 0;//子视图的最大宽度(不包括layout_weight&gt;0的子View)int maxWidth = 0;int childState = 0;int alternativeMaxWidth = 0;//子视图的最大宽度(仅包含layout_weight&gt;0的子View)int weightedMaxWidth = 0;//子视图是否均为fillParent 用于判断是否需要重新计算boolean allFillParent = true;//权重值的总和float totalWeight = 0;//子View的数量(统一级别下)final int count = getVirtualChildCount();//高度宽度模式final int widthMode = MeasureSpec.getMode(widthMeasureSpec);final int heightMode = MeasureSpec.getMode(heightMeasureSpec);//子View的宽度是否需要由父View决定boolean matchWidth = false;boolean skippedMeasure = false;//第几个子View的baseLine作为LinearLayout的基准线final int baselineChildIndex = mBaselineAlignedChildIndex; //mUseLargestChild为是否使用最大子元素的尺寸作为标准再次测量final boolean useLargestChild = mUseLargestChild;//子View中最高高度int largestChildHeight = Integer.MIN_VALUE; 第一次测量123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112// See how tall everyone is. Also remember max width.for (int i = 0; i &lt; count; ++i) &#123; final View child = getVirtualChildAt(i); // 测量为null的子视图的高度 // measureNullChild() 暂时返回 0 便于扩展 if (child == null) &#123; mTotalLength += measureNullChild(i); continue; &#125; //Visibility为Gone的时候跳过该View // getChildrenSkipCount()方法同样返回0 便于扩展 if (child.getVisibility() == View.GONE) &#123; i += getChildrenSkipCount(child, i); continue; &#125; //根据showDivider的值(通过hasDividerBeforeChildAt()) 来决定当前子View是否需要添加分割线的高度 if (hasDividerBeforeChildAt(i)) &#123; mTotalLength += mDividerHeight; &#125; //会将子view的LayoutParams强转为父View的LayoutParams类型 LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)child.getLayoutParams(); totalWeight += lp.weight; if (heightMode == MeasureSpec.EXACTLY &amp;&amp; lp.height == 0 &amp;&amp; lp.weight &gt; 0) &#123; // 满足该条件的话 不需要现在计算该子视图的高度 测量工作会在之后进行 // 若子View的height=0 且weight&gt; 0 则说明该View希望使用的是LinearLayout的剩余空间 // LinearLayout是EXACTLY模式的说明LinearLayout高度已经确定 不需要依赖子View的测量结果来计算自己 就无需测量该子View final int totalLength = mTotalLength; mTotalLength = Math.max(totalLength, totalLength + lp.topMargin + lp.bottomMargin); skippedMeasure = true; &#125; else &#123; //测量子View int oldHeight = Integer.MIN_VALUE; //当前View的height=0 且weight&gt; 0 则说明该LinearLayout的高度需要靠子View测量(不需要的在上面分支处理了) //将子View的高度设为-1 防止子View高度为0 if (lp.height == 0 &amp;&amp; lp.weight &gt; 0) &#123; oldHeight = 0; lp.height = LayoutParams.WRAP_CONTENT; &#125; //调用子View的measureChildWithMargins() 对子View进行测量 //第四个参数表示当前已使用的宽度 因为是竖直模式 所以为0 //最后一个参数表示已使用的高度 如果之前的子View或者当前的View有weight属性 则当前子视图使用 LinearLayout 的所有高度 已使用的高度为0 measureChildBeforeLayout(child, i, widthMeasureSpec, 0, heightMeasureSpec, totalWeight == 0 ? mTotalLength : 0); if (oldHeight != Integer.MIN_VALUE) &#123; //测量完成后 重置子View高度 lp.height = oldHeight; &#125; final int childHeight = child.getMeasuredHeight(); final int totalLength = mTotalLength; // 比较child测量前后总高度 取较大值 ///getNextLocationOffset() 返回0 便于扩展 mTotalLength = Math.max(totalLength, totalLength + childHeight + lp.topMargin + lp.bottomMargin + getNextLocationOffset(child)); // 设置最高子视图大小 if (useLargestChild) &#123; largestChildHeight = Math.max(childHeight, largestChildHeight); &#125; &#125; // mBaselineChildTop 表示指定的 baseline 的子视图的顶部高度 if ((baselineChildIndex &gt;= 0) &amp;&amp; (baselineChildIndex == i + 1)) &#123; mBaselineChildTop = mTotalLength; &#125; // 设置为 baseline 的子视图的前面不允许设置 weiget 属性 if (i &lt; baselineChildIndex &amp;&amp; lp.weight &gt; 0) &#123; throw new RuntimeException("A child of LinearLayout with index " + "less than mBaselineAlignedChildIndex has weight &gt; 0, which " + "won't work. Either remove the weight, or don't set " + "mBaselineAlignedChildIndex."); &#125; // 宽度测量相关 boolean matchWidthLocally = false; //当LinearLayout非EXACTLY模式 并且自View为MATCH_PARENT时 //设置matchWidth和matchWidthLocally为true //该子View占据LinearLayout水平方向上所有空间 if (widthMode != MeasureSpec.EXACTLY &amp;&amp; lp.width == LayoutParams.MATCH_PARENT) &#123; matchWidth = true; matchWidthLocally = true; &#125; final int margin = lp.leftMargin + lp.rightMargin; final int measuredWidth = child.getMeasuredWidth() + margin; //对一堆变量赋值 maxWidth = Math.max(maxWidth, measuredWidth); childState = combineMeasuredStates(childState, child.getMeasuredState()); allFillParent = allFillParent &amp;&amp; lp.width == LayoutParams.MATCH_PARENT; if (lp.weight &gt; 0) &#123; weightedMaxWidth = Math.max(weightedMaxWidth, matchWidthLocally ? margin : measuredWidth); &#125; else &#123; alternativeMaxWidth = Math.max(alternativeMaxWidth, matchWidthLocally ? margin : measuredWidth); &#125; i += getChildrenSkipCount(child, i);&#125; 二次测量mTotalLength1234567891011121314151617181920212223242526//根据hasDividerBeforeChildAt得到showDivider的值是否为end 来判断是否需要加上divider的高度if (mTotalLength &gt; 0 &amp;&amp; hasDividerBeforeChildAt(count)) mTotalLength += mDividerHeight;&#125;//如果高度测量模式为AT_MOST或者UNSPECIFIED 则进行二次测量 且设置了measureWithLargestChildif (useLargestChild &amp;&amp; (heightMode == MeasureSpec.AT_MOST || heightMode == MeasureSpec.UNSPECIFIED)) &#123; mTotalLength = 0; for (int i = 0; i &lt; count; ++i) &#123; final View child = getVirtualChildAt(i); if (child == null) &#123; mTotalLength += measureNullChild(i); continue; &#125; if (child.getVisibility() == GONE) &#123; i += getChildrenSkipCount(child, i); continue; &#125; final LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) child.getLayoutParams(); // 计算所有子View的高度之和 final int totalLength = mTotalLength; mTotalLength = Math.max(totalLength, totalLength + largestChildHeight + lp.topMargin + lp.bottomMargin + getNextLocationOffset(child)); &#125;&#125; 就是需要useLargestChild 而 mUseLargestChild = a.getBoolean(R.styleable.LinearLayout_measureWithLargestChild, false); 就是说仅在LinearLayout的measureWithLargestChild属性设置为True时(默认为false)才可能出现某个child被二次测量 实例如下 二次测量部分View和对为测量的子View进行测量123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145//加上padding的值mTotalLength += mPaddingTop + mPaddingBottom;int heightSize = mTotalLength;//minHeight和当前使用的高度比较取较大值heightSize = Math.max(heightSize, getSuggestedMinimumHeight());//根据heightMeasureSpec协助计算heightSizeAndState的大小//resolveSizeAndState方法之后会分析int heightSizeAndState = resolveSizeAndState(heightSize, heightMeasureSpec, 0);heightSize = heightSizeAndState &amp; MEASURED_SIZE_MASK;// Either expand children with weight to take up available space or// shrink them if they extend beyond our current bounds. If we skipped// measurement on any children, we need to measure them now.//delta为额外的空间 及LinearLayout中未被分配的空间(可以为负)int delta = heightSize - mTotalLength;if (skippedMeasure || delta != 0 &amp;&amp; totalWeight &gt; 0.0f) &#123; //skippedMeasure为第一次测量下对跳过测量的子View设置的 //weightSum为权重和 如果设置了总权重则使用我们所设置的 如果没有则使用子View的weight和 float weightSum = mWeightSum &gt; 0.0f ? mWeightSum : totalWeight; mTotalLength = 0; //测量什么的 for (int i = 0; i &lt; count; ++i) &#123; final View child = getVirtualChildAt(i); if (child.getVisibility() == View.GONE) &#123; continue; &#125; LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) child.getLayoutParams(); float childExtra = lp.weight; if (childExtra &gt; 0) &#123; // Child said it could absorb extra space -- give him his share //计算weight属性分配的大小 int share = (int) (childExtra * delta / weightSum); //权重和减去已经分配权重 weightSum -= childExtra; //剩余高度减去分配的高度 delta -= share; final int childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec, mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin, lp.width); // TODO: Use a field like lp.isMeasured to figure out if this // child has been previously measured if ((lp.height != 0) || (heightMode != MeasureSpec.EXACTLY)) &#123; //子视图已经被测量过 //非EXACTLY view需要加上share int childHeight = child.getMeasuredHeight() + share; if (childHeight &lt; 0) &#123; childHeight = 0; &#125; //重新测量View child.measure(childWidthMeasureSpec, MeasureSpec.makeMeasureSpec(childHeight, MeasureSpec.EXACTLY)); &#125; else &#123; //如果当前是EXACTLY模式 说明没有被测量 需要进行测量 //子视图首次被测量 //EXACTLY模式下 将weight占比的高度分配给子View child.measure(childWidthMeasureSpec, MeasureSpec.makeMeasureSpec(share &gt; 0 ? share : 0, MeasureSpec.EXACTLY)); &#125; // Child may now not fit in vertical dimension. childState = combineMeasuredStates(childState, child.getMeasuredState() &amp; (MEASURED_STATE_MASK&gt;&gt;MEASURED_HEIGHT_STATE_SHIFT)); &#125; //处理子视图宽度 final int margin = lp.leftMargin + lp.rightMargin; final int measuredWidth = child.getMeasuredWidth() + margin; maxWidth = Math.max(maxWidth, measuredWidth); boolean matchWidthLocally = widthMode != MeasureSpec.EXACTLY &amp;&amp; lp.width == LayoutParams.MATCH_PARENT; alternativeMaxWidth = Math.max(alternativeMaxWidth, matchWidthLocally ? margin : measuredWidth); allFillParent = allFillParent &amp;&amp; lp.width == LayoutParams.MATCH_PARENT; final int totalLength = mTotalLength; mTotalLength = Math.max(totalLength, totalLength + child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin + getNextLocationOffset(child)); &#125; // Add in our padding mTotalLength += mPaddingTop + mPaddingBottom; // TODO: Should we recompute the heightSpec based on the new total length?&#125; else &#123; alternativeMaxWidth = Math.max(alternativeMaxWidth, weightedMaxWidth); // We have no limit, so make all weighted views as tall as the largest child. // Children will have already been measured once. if (useLargestChild &amp;&amp; heightMode != MeasureSpec.EXACTLY) &#123; for (int i = 0; i &lt; count; i++) &#123; final View child = getVirtualChildAt(i); if (child == null || child.getVisibility() == View.GONE) &#123; continue; &#125; final LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) child.getLayoutParams(); float childExtra = lp.weight; if (childExtra &gt; 0) &#123; //使用最大子视图高度测量 child.measure( MeasureSpec.makeMeasureSpec(child.getMeasuredWidth(), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(largestChildHeight, MeasureSpec.EXACTLY)); &#125; &#125; &#125;&#125;if (!allFillParent &amp;&amp; widthMode != MeasureSpec.EXACTLY) &#123; maxWidth = alternativeMaxWidth;&#125;maxWidth += mPaddingLeft + mPaddingRight;// Check against our minimum widthmaxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState), heightSizeAndState);if (matchWidth) &#123; forceUniformWidth(count, heightMeasureSpec);&#125; resolveSizeAndState方法 定义在View中12345678910111213141516171819202122232425262728293031323334353637/** * Utility to reconcile a desired size and state, with constraints imposed * by a MeasureSpec. Will take the desired size, unless a different size * is imposed by the constraints. The returned value is a compound integer, * with the resolved size in the &#123;@link #MEASURED_SIZE_MASK&#125; bits and * optionally the bit &#123;@link #MEASURED_STATE_TOO_SMALL&#125; set if the * resulting size is smaller than the size the view wants to be. * * @param size How big the view wants to be. * @param measureSpec Constraints imposed by the parent. * @param childMeasuredState Size information bit mask for the view's * children. * @return Size information bit mask as defined by * &#123;@link #MEASURED_SIZE_MASK&#125; and * &#123;@link #MEASURED_STATE_TOO_SMALL&#125;. */ public static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState) &#123; final int specMode = MeasureSpec.getMode(measureSpec); final int specSize = MeasureSpec.getSize(measureSpec); final int result; switch (specMode) &#123; case MeasureSpec.AT_MOST: if (specSize &lt; size) &#123; result = specSize | MEASURED_STATE_TOO_SMALL; &#125; else &#123; result = size; &#125; break; case MeasureSpec.EXACTLY: result = specSize; break; case MeasureSpec.UNSPECIFIED: default: result = size; &#125; return result | (childMeasuredState &amp; MEASURED_STATE_MASK); &#125; delta为负的相关解析相关代码及效果如下 根据之前的measure流程分析一下 相关变量初始化 第一次测量 两个子TextView都会被测量 TextView1.height = TextView1.height = 500dp 则mToatalLength为1000dp mToatalLength再次测量跳过 计算delta delta = heightSize - mTotalLength 根据resolveSizeAndState方法 父LinearLayout是EXACTLY模式 所以最终heightSize为500dp delta = -500dp 根据weight分配剩余空间 TextView1.height = 500 + 1 / 5 (- 500) = 400 dpTextView2.height = 500 + 4 / 5 (- 500) = 100 dp layout过程1234567protected void onLayout(boolean changed, int l, int t, int r, int b) &#123; if (mOrientation == VERTICAL) &#123; layoutVertical(l, t, r, b); &#125; else &#123; layoutHorizontal(l, t, r, b); &#125;&#125; 我们可以看出 同样是分成水平和竖直两个方向的 同样分析竖直 方向下的layout过程 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100/** * Position the children during a layout pass if the orientation of this * LinearLayout is set to &#123;@link #VERTICAL&#125;. * * @see #getOrientation() * @see #setOrientation(int) * @see #onLayout(boolean, int, int, int, int) * @param left * @param top * @param right * @param bottom */ void layoutVertical(int left, int top, int right, int bottom) &#123; final int paddingLeft = mPaddingLeft; int childTop; int childLeft; //父View默认子View的宽度 final int width = right - left; //子View的右侧默认位置 int childRight = width - mPaddingRight; // 子View的可用空间大小 int childSpace = width - paddingLeft - mPaddingRight; //子View的个数 final int count = getVirtualChildCount(); final int majorGravity = mGravity &amp; Gravity.VERTICAL_GRAVITY_MASK; final int minorGravity = mGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK; //根据LinearLayout设置的对其方式 设置第一个子View的Top值 switch (majorGravity) &#123; case Gravity.BOTTOM: // mTotalLength contains the padding already childTop = mPaddingTop + bottom - top - mTotalLength; break; // mTotalLength contains the padding already case Gravity.CENTER_VERTICAL: childTop = mPaddingTop + (bottom - top - mTotalLength) / 2; break; case Gravity.TOP: default: childTop = mPaddingTop; break; &#125; //遍历各个子View for (int i = 0; i &lt; count; i++) &#123; final View child = getVirtualChildAt(i); if (child == null) &#123; childTop += measureNullChild(i); &#125; else if (child.getVisibility() != GONE) &#123; //LinearLayout中子View的宽和高有measure过程决定 final int childWidth = child.getMeasuredWidth(); final int childHeight = child.getMeasuredHeight(); //获取子View的LayoutParams final LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) child.getLayoutParams(); int gravity = lp.gravity; if (gravity &lt; 0) &#123; gravity = minorGravity; &#125; final int layoutDirection = getLayoutDirection(); final int absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection); //根据子View的对其方式设置Left值 switch (absoluteGravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) &#123; case Gravity.CENTER_HORIZONTAL: childLeft = paddingLeft + ((childSpace - childWidth) / 2) + lp.leftMargin - lp.rightMargin; break; case Gravity.RIGHT: childLeft = childRight - childWidth - lp.rightMargin; break; case Gravity.LEFT: default: childLeft = paddingLeft + lp.leftMargin; break; &#125; //如果有分割线 添加分割线的高度 if (hasDividerBeforeChildAt(i)) &#123; childTop += mDividerHeight; &#125; //子View的top修改 childTop += lp.topMargin; //用setChildFrame()方法设置子控件控件的在父控件上的坐标轴 setChildFrame(child, childLeft, childTop + getLocationOffset(child), childWidth, childHeight); childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child); i += getChildrenSkipCount(child, i); &#125; &#125; &#125; draw 源码分析1234567891011protected void onDraw(Canvas canvas) &#123; if (mDivider == null) &#123; return; &#125; if (mOrientation == VERTICAL) &#123; drawDividersVertical(canvas); &#125; else &#123; drawDividersHorizontal(canvas); &#125;&#125; 同样主要分析垂直方向的处理 12345678910111213141516171819202122232425262728293031323334void drawDividersVertical(Canvas canvas) &#123; final int count = getVirtualChildCount(); //根据计算好的坐标绘制对应的子View for (int i = 0; i &lt; count; i++) &#123; final View child = getVirtualChildAt(i); if (child != null &amp;&amp; child.getVisibility() != GONE) &#123; if (hasDividerBeforeChildAt(i)) &#123; final LayoutParams lp = (LayoutParams) child.getLayoutParams(); final int top = child.getTop() - lp.topMargin - mDividerHeight; drawHorizontalDivider(canvas, top); &#125; &#125; &#125; //绘制分割线 if (hasDividerBeforeChildAt(count)) &#123; final View child = getLastNonGoneChild(); int bottom = 0; if (child == null) &#123; bottom = getHeight() - getPaddingBottom() - mDividerHeight; &#125; else &#123; final LayoutParams lp = (LayoutParams) child.getLayoutParams(); bottom = child.getBottom() + lp.bottomMargin; &#125; drawHorizontalDivider(canvas, bottom); &#125;&#125;void drawHorizontalDivider(Canvas canvas, int top) &#123; mDivider.setBounds(getPaddingLeft() + mDividerPadding, top, getWidth() - getPaddingRight() - mDividerPadding, top + mDividerHeight); mDivider.draw(canvas);&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android View 相关源码分析之三 View的绘制过程]]></title>
      <url>%2F2017%2F02%2F03%2FView%20%E7%BB%98%E5%88%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%2F</url>
      <content type="text"><![CDATA[Android View Android View框架相关 View的测量 布局 绘制过程LinearLayout RelativeLayout实现源码分析 View的测量 布局 绘制过程测量之前的事情View的整个绘制流程是开始于ViewRootImpl类的performTraversals方法(1k行) 根据相关设置来觉得十分要重新执行相关功能1234567891011121314151617private void performTraversals() &#123; // cache mView since it is used so much below... final View host = mView; ... int childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width); int childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height); ... //measure mView.measure(childWidthMeasureSpec, childHeightMeasureSpec); ... //layout mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight()); ... //draw mView.draw(canvas); ...&#125; 123456789101112private static int getRootMeasureSpec(int windowSize, int rootDimension) &#123; int measureSpec; switch (rootDimension) &#123; case ViewGroup.LayoutParams.MATCH_PARENT: // Window can't resize. Force root view to be windowSize. measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY); break; ... &#125; return measureSpec; &#125; View 绘制整体流程图如下 measure源码分析结论: measure的过程就是父View向子View递归调用view.measure方法 (measure中回调onMeasure方法)的过程 measure方法是 final的 只能重载onMeasure方法 最顶层的DocerView的MeasureSpec由ViewRootImpl的getRootMeasureSpec方法提供 LayoutParams的参数为MATCH_PARENT specMode是EXACTLY，specSize为物理屏幕大小 只要是ViewGroup的子类就必须要求LayoutParams继承子MarginLayoutParams 否则无法使用layout_margin参数 View的getMeasuredWidth()和getMeasuredHeight()方法来获取View测量的宽高，要必须保证这两个方法在onMeasure流程之后被调用才能返回有效值。 12345678910111213141516171819202122232425/** * &lt;p&gt; * This is called to find out how big a view should be. The parent supplies constraint information in the width and height parameters. * &lt;/p&gt; * * &lt;p&gt; * The actual measurement work of a view is performed in * &#123;@link #onMeasure(int, int)&#125;, called by this method. Therefore, only * &#123;@link #onMeasure(int, int)&#125; can and must be overridden by subclasses. * &lt;/p&gt; * * * @param widthMeasureSpec Horizontal space requirements as imposed by the * parent * @param heightMeasureSpec Vertical space requirements as imposed by the * parent * * @see #onMeasure(int, int) */ //没舍得删这些注释 感觉重要的事情都说了 为了计算整个View树的实际大小 设置实际的高和宽 每个子View都是根据父视图和自身决定实际宽高的 在onMeasure()方法中进行实际测量.传入widthMeasureSpec和heightMeasureSpec参数来表示了父View的规格 不但传入了模式 还传入了size 而对于DecorView来说 传入的模式一般为EXACTLY模式 size对应屏幕的宽高. 所以说子View的大小是父子View共同决定的public final void measure(int widthMeasureSpec, int heightMeasureSpec) &#123; // measure ourselves, this should set the measured dimension flag back onMeasure(widthMeasureSpec, heightMeasureSpec); &#125; MeasureSpec内部类 MeasureSpec是View的内部类 int型，由高2位规格模式specMode和低30位具体尺寸specSize组成 其中specMode只有三种 MeasureSpec.EXACTLY //确定模式，父View希望子View的大小是确定的，由specSize决定； MeasureSpec.AT_MOST //最多模式，父View希望子View的大小最多是specSize指定的值； MeasureSpec.UNSPECIFIED //未指定模式，父View完全依据子View的设计值来决定； onMeasure()方法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/** * &lt;p&gt; * Measure the view and its content to determine the measured width and the * measured height. This method is invoked by &#123;@link #measure(int, int)&#125; and * should be overridden by subclasses to provide accurate and efficient * measurement of their contents. * &lt;/p&gt; * * &lt;p&gt; * &lt;strong&gt;CONTRACT:&lt;/strong&gt; When overriding this method, you * &lt;em&gt;must&lt;/em&gt; call &#123;@link #setMeasuredDimension(int, int)&#125; to store the * measured width and height of this view. Failure to do so will trigger an * &lt;code&gt;IllegalStateException&lt;/code&gt;, thrown by * &#123;@link #measure(int, int)&#125;. Calling the superclass' * &#123;@link #onMeasure(int, int)&#125; is a valid use. * &lt;/p&gt; * * &lt;p&gt; * The base class implementation of measure defaults to the background size, * unless a larger size is allowed by the MeasureSpec. Subclasses should * override &#123;@link #onMeasure(int, int)&#125; to provide better measurements of * their content. * &lt;/p&gt; * * &lt;p&gt; * If this method is overridden, it is the subclass's responsibility to make * sure the measured height and width are at least the view's minimum height * and width (&#123;@link #getSuggestedMinimumHeight()&#125; and * &#123;@link #getSuggestedMinimumWidth()&#125;). * &lt;/p&gt; * * @param widthMeasureSpec horizontal space requirements as imposed by the parent. * The requirements are encoded with * &#123;@link android.view.View.MeasureSpec&#125;. * @param heightMeasureSpec vertical space requirements as imposed by the parent. * The requirements are encoded with * &#123;@link android.view.View.MeasureSpec&#125;. * * @see #getMeasuredWidth() * @see #getMeasuredHeight() * @see #setMeasuredDimension(int, int) * @see #getSuggestedMinimumHeight() * @see #getSuggestedMinimumWidth() * @see android.view.View.MeasureSpec#getMode(int) * @see android.view.View.MeasureSpec#getSize(int) */protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec), getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));&#125; getDefaultSize方法相关1234567891011121314151617181920212223242526public static int getDefaultSize(int size, int measureSpec) &#123; int result = size; //通过measureSpec得到mode和size int specMode = MeasureSpec.getMode(measureSpec); int specSize = MeasureSpec.getSize(measureSpec); switch (specMode) &#123; case MeasureSpec.UNSPECIFIED: result = size; break; case MeasureSpec.AT_MOST: case MeasureSpec.EXACTLY: result = specSize; break; &#125; return result;&#125;//最小宽度和高度由View的Background尺寸和View的minXXX共同决定protected int getSuggestedMinimumHeight() &#123; return (mBackground == null) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());&#125;protected int getSuggestedMinimumWidth() &#123; return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());&#125; setMeasuredDimension方法 对View的成员变量measuredWidth和measuredHeight变量赋值 也就是说该方法最终决定了View的大小1234567891011121314151617181920212223protected final void setMeasuredDimension(int measuredWidth, int measuredHeight) &#123; boolean optical = isLayoutModeOptical(this); if (optical != isLayoutModeOptical(mParent)) &#123; Insets insets = getOpticalInsets(); int opticalWidth = insets.left + insets.right; int opticalHeight = insets.top + insets.bottom; measuredWidth += optical ? opticalWidth : -opticalWidth; measuredHeight += optical ? opticalHeight : -opticalHeight; &#125; setMeasuredDimensionRaw(measuredWidth, measuredHeight);&#125;public boolean isLayoutRequested() &#123; return (mPrivateFlags &amp; PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT;&#125;private void setMeasuredDimensionRaw(int measuredWidth, int measuredHeight) &#123; mMeasuredWidth = measuredWidth; mMeasuredHeight = measuredHeight; mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;&#125; 至此一次最基础的View的measure过程就完成了 但是由于View可以嵌套 所以measure是递归传递的所以ViewGroup中需要对其子类进行measure过程 measureChildren方法实质为循环调用measureChild方法 而measureChild和measureChildWithMargins的区别是后者将margin和padding也作为了子视图的大小 一下分析measureChildWithMargins方法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687protected void measureChildWithMargins(View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed) &#123; //获取当前子视图的LayoutParams final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams(); //设定子View的测量规格 final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec, mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin + widthUsed, lp.width); final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec, mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin + heightUsed, lp.height); //子view的继续调用 child.measure(childWidthMeasureSpec, childHeightMeasureSpec);&#125;//在getChildMeasureSpec中通过父View和本身的模式共同决定当前View的sizepublic static int getChildMeasureSpec(int spec, int padding, int childDimension) &#123; //获取当前父View的mode和size int specMode = MeasureSpec.getMode(spec); int specSize = MeasureSpec.getSize(spec); //获取父View的的剩余大小 int size = Math.max(0, specSize - padding); //定义结果变量 int resultSize = 0; int resultMode = 0; //根据对应的mode做处理 //通过父View和本身的模式共同决定当前View的size switch (specMode) &#123; // Parent has imposed an exact size on us case MeasureSpec.EXACTLY: if (childDimension &gt;= 0) &#123; resultSize = childDimension; resultMode = MeasureSpec.EXACTLY; &#125; else if (childDimension == LayoutParams.MATCH_PARENT) &#123; // Child wants to be our size. So be it. resultSize = size; resultMode = MeasureSpec.EXACTLY; &#125; else if (childDimension == LayoutParams.WRAP_CONTENT) &#123; // Child wants to determine its own size. It can't be // bigger than us. resultSize = size; resultMode = MeasureSpec.AT_MOST; &#125; break; // Parent has imposed a maximum size on us case MeasureSpec.AT_MOST: if (childDimension &gt;= 0) &#123; // Child wants a specific size... so be it resultSize = childDimension; resultMode = MeasureSpec.EXACTLY; &#125; else if (childDimension == LayoutParams.MATCH_PARENT) &#123; // Child wants to be our size, but our size is not fixed. // Constrain child to not be bigger than us. resultSize = size; resultMode = MeasureSpec.AT_MOST; &#125; else if (childDimension == LayoutParams.WRAP_CONTENT) &#123; // Child wants to determine its own size. It can't be // bigger than us. resultSize = size; resultMode = MeasureSpec.AT_MOST; &#125; break; // Parent asked to see how big we want to be case MeasureSpec.UNSPECIFIED: if (childDimension &gt;= 0) &#123; // Child wants a specific size... let him have it resultSize = childDimension; resultMode = MeasureSpec.EXACTLY; &#125; else if (childDimension == LayoutParams.MATCH_PARENT) &#123; // Child wants to be our size... find out how big it should // be resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size; resultMode = MeasureSpec.UNSPECIFIED; &#125; else if (childDimension == LayoutParams.WRAP_CONTENT) &#123; // Child wants to determine its own size.... find out how // big it should be resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size; resultMode = MeasureSpec.UNSPECIFIED; &#125; break; &#125; //将size和mode整合为MeasureSpec模式后返回 return MeasureSpec.makeMeasureSpec(resultSize, resultMode); &#125; layout源码分析View layout整体流程与measure过程基本一样 结论: 需要根据ViewGroup本身的情况讨论 LinearLayout下会更看重子View的height和width 来安排对应位置 而RelativeLayout则更加关注子View的left right top bottom值 并且优先级高于width和height 甚至在部分自定义ViewGroup中 measure可能是无用的 直接使用layout方法来设置子View的位置也可以 ViewGroup需要实现自己的layout逻辑 layout_XXX中的各个熟悉都是针对子View的父ViewGroup的 同样使用View的getWidth()和getHeight()方法来获取View测量的宽高 必须保证这两个方法在onLayout流程之后被调用才能返回有效值 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556/** * Assign a size and position to a view and all of its * descendants * * &lt;p&gt;This is the second phase of the layout mechanism. * (The first is measuring). In this phase, each parent calls * layout on all of its children to position them. * This is typically done using the child measurements * that were stored in the measure pass().&lt;/p&gt; * * &lt;p&gt;Derived classes should not override this method. * Derived classes with children should override * onLayout. In that method, they should * call layout on each of their children.&lt;/p&gt; * * @param l Left position, relative to parent * @param t Top position, relative to parent * @param r Right position, relative to parent * @param b Bottom position, relative to parent */ //同样注解写的很好了 分派给他和他的所有的子视图大小和位置 @SuppressWarnings(&#123;"unchecked"&#125;) public void layout(int l, int t, int r, int b) &#123; if ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != 0) &#123; onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec); mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT; &#125; //调用setFrame方法把参数分别赋值于 int oldL = mLeft; int oldT = mTop; int oldB = mBottom; int oldR = mRight; //判断view的位置是否发生过变化 , 确定是否对当前view重新layout boolean changed = isLayoutModeOptical(mParent) ? setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b); if (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123; //调用onLayout onLayout(changed, l, t, r, b); mPrivateFlags &amp;= ~PFLAG_LAYOUT_REQUIRED; ListenerInfo li = mListenerInfo; if (li != null &amp;&amp; li.mOnLayoutChangeListeners != null) &#123; ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy = (ArrayList&lt;OnLayoutChangeListener&gt;)li.mOnLayoutChangeListeners.clone(); int numListeners = listenersCopy.size(); for (int i = 0; i &lt; numListeners; ++i) &#123; listenersCopy.get(i).onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB); &#125; &#125; &#125; mPrivateFlags &amp;= ~PFLAG_FORCE_LAYOUT; mPrivateFlags3 |= PFLAG3_IS_LAID_OUT; &#125; onLyayout方法123456View中protected void onLayout(boolean changed, int left, int top, int right, int bottom) &#123;&#125;ViewGroup中protected abstract void onLayout(boolean changed, int l, int t, int r, int b); 均是空方法 后面会就LinearLayout和RelativeLayout源码进行分析 draw源码分析View的draw流程图如下 结论: View需要在子类中实现onDraw的过程 在ViewGroup中 会调用其子View的方法 顺序与子view的添加顺序一致 draw的源码也很长 但是官方也给出给出了draw的过程123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 public void draw(Canvas canvas) &#123; ... /* * Draw traversal performs several drawing steps which must be executed * in the appropriate order: * * 1. Draw the background * 2. If necessary, save the canvas' layers to prepare for fading * 3. Draw view's content * 4. Draw children * 5. If necessary, draw the fading edges and restore layers * 6. Draw decorations (scrollbars for instance) */ // Step 1, draw the background, if needed ... if (!dirtyOpaque) &#123; drawBackground(canvas); &#125; // skip step 2 &amp; 5 if possible (common case) ... // Step 2, save the canvas' layers ... if (drawTop) &#123; canvas.saveLayer(left, top, right, top + length, null, flags); &#125; ... // Step 3, draw the content if (!dirtyOpaque) onDraw(canvas); // Step 4, draw the children dispatchDraw(canvas); // Step 5, draw the fade effect and restore layers ... if (drawTop) &#123; matrix.setScale(1, fadeHeight * topFadeStrength); matrix.postTranslate(left, top); fade.setLocalMatrix(matrix); p.setShader(fade); canvas.drawRect(left, top, right, top + length, p); &#125; ... // Step 6, draw decorations (scrollbars) onDrawScrollBars(canvas); ...&#125; Step 1, draw the background, if needed123456// Step 1, draw the background, if needed//如果需要的话绘制背景if (!dirtyOpaque) &#123; drawBackground(canvas);&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647private void drawBackground(Canvas canvas) &#123; //通过xml中属性background或者代码中setBackGroundColor\setBackgroundResource等方法赋值的背景drawable final Drawable background = mBackground; if (background == null) &#123; return; &#125; //根据layout中确定的view位置来设置背景的绘制区域 setBackgroundBounds(); // 如果需要的话使用显示列表 //canvas.isHardwareAccelerated() 硬件加速判定 //硬件加速时会将图层缓存到GPU上 而不是重绘View的每一层 if (canvas.isHardwareAccelerated() &amp;&amp; mAttachInfo != null &amp;&amp; mAttachInfo.mHardwareRenderer != null) &#123; mBackgroundRenderNode = getDrawableRenderNode(background, mBackgroundRenderNode); final RenderNode renderNode = mBackgroundRenderNode; if (renderNode != null &amp;&amp; renderNode.isValid()) &#123; setBackgroundRenderNodeProperties(renderNode); ((DisplayListCanvas) canvas).drawRenderNode(renderNode); return; &#125; &#125; final int scrollX = mScrollX; final int scrollY = mScrollY; //调用Drawable的draw方法来完成背景的绘制工作 if ((scrollX | scrollY) == 0) &#123; background.draw(canvas); &#125; else &#123; canvas.translate(scrollX, scrollY); background.draw(canvas); canvas.translate(-scrollX, -scrollY); &#125; &#125; void setBackgroundBounds() &#123; if (mBackgroundSizeChanged &amp;&amp; mBackground != null) &#123; mBackground.setBounds(0, 0, mRight - mLeft, mBottom - mTop); mBackgroundSizeChanged = false; rebuildOutline(); &#125;&#125; Step 2, save the canvas’ layers123456// Step 2, save the canvas' layers//保存绘制图层 if (drawTop) &#123; canvas.saveLayer(left, top, right, top + length, null, flags); &#125; Step 3, draw the content123// Step 3, draw the content//对View的内容进行绘制if (!dirtyOpaque) onDraw(canvas); 12345678/*** Implement this to do your drawing.** @param canvas the canvas on which the background will be drawn*///onDraw也是空方法需要子类根据自身去实现相应的protected void onDraw(Canvas canvas) &#123;&#125; Step 4, draw the children123// Step 4, draw the children//绘制其子ViewdispatchDraw(canvas); 123456789/** * Called by draw to draw the child views. This may be overridden * by derived classes to gain control just before its children are drawn * (but after its own view has been drawn). * @param canvas the canvas on which to draw the view */protected void dispatchDraw(Canvas canvas) &#123;//dispatchDraw同样空方法 与onDraw不同的是dispatchDraw在ViewGroup中被重写&#125; ViewGroup12345678910//dispatchDraw方法中根据子View的不同情况 包括但不只包括该View是否显示 是否有进入或消失动画等进行了部分的调整protected void dispatchDraw(Canvas canvas) &#123; ... more |= drawChild(canvas, transientChild, drawingTime); ... &#125;protected boolean drawChild(Canvas canvas, View child, long drawingTime) &#123; return child.draw(canvas, this, drawingTime);&#125; Step 5, draw the fade effect and restore layers123456789// Step 5, draw the fade effect and restore layers//绘制过度效果和恢复图层if (drawTop) &#123; matrix.setScale(1, fadeHeight * topFadeStrength); matrix.postTranslate(left, top); fade.setLocalMatrix(matrix); p.setShader(fade); canvas.drawRect(left, top, right, top + length, p);&#125; Step 6, draw decorations (scrollbars)123// Step 6, draw decorations (scrollbars)//对滚动条进行绘制onDrawScrollBars(canvas);]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android View 相关源码分析之二 继LayoutInflater来说]]></title>
      <url>%2F2017%2F02%2F03%2FLayoutInflater%2F</url>
      <content type="text"><![CDATA[LayoutInflater源码分析 与setContentView相关 在PhoneWindow的generateLayout中调用了 1View in = mLayoutInflater.inflate(layoutResource, null); LayoutInflater中获取实例化方法 1234567891011/** * Obtains the LayoutInflater from the given context. */public static LayoutInflater from(Context context) &#123; LayoutInflater LayoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE); if (LayoutInflater == null) &#123; throw new AssertionError("LayoutInflater not found."); &#125; return LayoutInflater;&#125; inflate方法相关 1234567public View inflate(@LayoutRes int resource, @Nullable ViewGroup root) &#123; return inflate(resource, root, root != null);&#125;public View inflate(XmlPullParser parser, @Nullable ViewGroup root) &#123; return inflate(parser, root, root != null);&#125; 1234567891011121314public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) &#123; final Resources res = getContext().getResources(); if (DEBUG) &#123; Log.d(TAG, "INFLATING from resource: \"" + res.getResourceName(resource) + "\" (" + Integer.toHexString(resource) + ")"); &#125; final XmlResourceParser parser = res.getLayout(resource); try &#123; return inflate(parser, root, attachToRoot); &#125; finally &#123; parser.close(); &#125;&#125; 最后发现都需要调用 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) &#123; synchronized (mConstructorArgs) &#123; Trace.traceBegin(Trace.TRACE_TAG_VIEW, "inflate"); final Context inflaterContext = mContext; final AttributeSet attrs = Xml.asAttributeSet(parser); Context lastContext = (Context) mConstructorArgs[0]; mConstructorArgs[0] = inflaterContext; //定义返回值 初始化传入形参 root View result = root; try &#123; // 找到根节点 int type; while ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123; &#125; //验证type是否为Start_Tag 保证xml文件正确 if (type != XmlPullParser.START_TAG) &#123; throw new InflateException(parser.getPositionDescription() + ": No start tag found!"); &#125; //type为 root node final String name = parser.getName(); if (DEBUG) &#123; System.out.println("**************************"); System.out.println("Creating root view: " + name); System.out.println("**************************"); &#125; if (TAG_MERGE.equals(name)) &#123; //处理 merge相关 //root需要非空 且attachToRoot为空 if (root == null || !attachToRoot) &#123; throw new InflateException("&lt;merge /&gt; can be used only with a valid " + "ViewGroup root and attachToRoot=true"); &#125; //递归inflate 方法调用 rInflate(parser, root, inflaterContext, attrs, false); &#125; else &#123; //根据tag节点创建view对象 final View temp = createViewFromTag(root, name, inflaterContext, attrs); ViewGroup.LayoutParams params = null; if (root != null) &#123; if (DEBUG) &#123; System.out.println("Creating params from root: " + root); &#125; //根据root生成LayoutParams params = root.generateLayoutParams(attrs); if (!attachToRoot) &#123; //如果attachToRoot为flase 则调用setLayoutParams temp.setLayoutParams(params); &#125; &#125; if (DEBUG) &#123; System.out.println("-----&gt; start inflating children"); &#125; //递归inflate剩下的children rInflateChildren(parser, temp, attrs, true); if (DEBUG) &#123; System.out.println("-----&gt; done inflating children"); &#125; // We are supposed to attach all the views we found (int temp) // to root. Do that now. if (root != null &amp;&amp; attachToRoot) &#123; //root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里 root.addView(temp, params); &#125; // Decide whether to return the root that was passed in or the // top view found in xml. if (root == null || !attachToRoot) &#123; //返回xml里解析的root view result = temp; &#125; &#125; &#125; catch (XmlPullParserException e) &#123; InflateException ex = new InflateException(e.getMessage()); ex.initCause(e); throw ex; &#125; catch (Exception e) &#123; InflateException ex = new InflateException( parser.getPositionDescription() + ": " + e.getMessage()); ex.initCause(e); throw ex; &#125; finally &#123; // Don't retain static reference on context. mConstructorArgs[0] = lastContext; mConstructorArgs[1] = null; &#125; Trace.traceEnd(Trace.TRACE_TAG_VIEW); //返回参数root或xml文件里的root view return result; &#125; &#125; 相关inflate参数的结果 相关方法解析在Inflate中多次被调用的rInflate 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152void rInflate(XmlPullParser parser, View parent, Context context, AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException &#123; final int depth = parser.getDepth(); int type; //XmlPullParser解析器的标准解析模式 while (((type = parser.next()) != XmlPullParser.END_TAG || parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123; //找到start_tag节点 if (type != XmlPullParser.START_TAG) &#123; continue; &#125; //获取Name标记 final String name = parser.getName(); //private static final String TAG_REQUEST_FOCUS = "requestFocus"; //处理requestFocus if (TAG_REQUEST_FOCUS.equals(name)) &#123; parseRequestFocus(parser, parent); // private static final String TAG_TAG = "tag"; //处理tag &#125; else if (TAG_TAG.equals(name)) &#123; parseViewTag(parser, parent, attrs); //private static final String TAG_INCLUDE = "include"; //处理include &#125; else if (TAG_INCLUDE.equals(name)) &#123; //如果是根节点则抛出异常 if (parser.getDepth() == 0) &#123; throw new InflateException("&lt;include /&gt; cannot be the root element"); &#125; parseInclude(parser, context, parent, attrs); //private static final String TAG_MERGE = "merge"; //处理merge merge需要是xml中的根节点 &#125; else if (TAG_MERGE.equals(name)) &#123; throw new InflateException("&lt;merge /&gt; must be the root element"); &#125; else &#123; final View view = createViewFromTag(parent, name, context, attrs); final ViewGroup viewGroup = (ViewGroup) parent; final ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs); rInflateChildren(parser, view, attrs, true); viewGroup.addView(view, params); &#125; &#125; //parent的所有子节点都处理完毕的时候回onFinishInflate方法 if (finishInflate) &#123; parent.onFinishInflate(); &#125;&#125;//可以添加自定义逻辑 protected void onFinishInflate() &#123; &#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android View 相关源码分析之一 从setContentView与LayoutInflater说起]]></title>
      <url>%2F2017%2F02%2F03%2F%E4%BB%8EsetContentView%E8%AF%B4%E8%B5%B7%2F</url>
      <content type="text"><![CDATA[从setContentView与LayoutInflater说起setContentView分析相关关系 Activity中有Window成员 实例化为PhoneWindow PhoneWindow是抽象Window类的实现类 Window提供了绘制窗口的通用API PhoneWindow中包含了DecorView对象 是所有窗口(Activity界面)的根View 具体的构如下 具体的可以通过hierarchyviewer工具分析一下 PhoneWindow的setContentView分析 Window类的setContentView方法 而Window的setContentView方法是抽象的 所以查看PhoneWindow的setContentView() setContentView方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172// This is the view in which the window contents are placed. It is either// mDecor itself, or a child of mDecor where the contents go.private ViewGroup mContentParent;@Overridepublic void setContentView(int layoutResID) &#123; // Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window // decor, when theme attributes and the like are crystalized. Do not check the feature // before this happens. if (mContentParent == null) &#123; //第一次调用 //下面会详细分析 installDecor(); &#125; else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123; //移除该mContentParent下的所有View //又因为这个的存在 我们可以多次使用setContentView() mContentParent.removeAllViews(); &#125; //判断是否使用了Activity的过度动画 if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123; //设置动画场景 final Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID, getContext()); transitionTo(newScene); &#125; else &#123; //将资源文件通过LayoutInflater对象装换为View树 //在PhoneWindow的构造函数中 mLayoutInflater = LayoutInflater.from(context); mLayoutInflater.inflate(layoutResID, mContentParent); &#125; //View中 /** * Ask that a new dispatch of &#123;@link #onApplyWindowInsets(WindowInsets)&#125; be performed. */ // public void requestApplyInsets() &#123; // requestFitSystemWindows(); // &#125; mContentParent.requestApplyInsets(); final Callback cb = getCallback(); if (cb != null &amp;&amp; !isDestroyed()) &#123; cb.onContentChanged(); &#125;&#125;@Overridepublic void setContentView(View view) &#123; setContentView(view, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));&#125;@Overridepublic void setContentView(View view, ViewGroup.LayoutParams params) &#123; if (mContentParent == null) &#123; installDecor(); &#125; else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123; mContentParent.removeAllViews(); &#125; if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123; view.setLayoutParams(params); final Scene newScene = new Scene(mContentParent, view); transitionTo(newScene); &#125; else &#123; //已经为View 直接使用View的addView方法追加到当前mContentParent中 mContentParent.addView(view, params); &#125; mContentParent.requestApplyInsets(); final Callback cb = getCallback(); //调用CallBack接口的onContentChange来通知Activity组件视图发生了变化 if (cb != null &amp;&amp; !isDestroyed()) &#123; cb.onContentChanged(); &#125;&#125; installDecor方法 1234567891011121314151617181920//截取部分主要分析代码private void installDecor() &#123; if (mDecor == null) &#123; //如果mDecor为空则创建一个DecorView实例 // protected DecorView generateDecor() &#123; // return new DecorView(getContext(), -1); // &#125; mDecor = generateDecor(); mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS); mDecor.setIsRootNamespace(true); if (!mInvalidatePanelMenuPosted &amp;&amp; mInvalidatePanelMenuFeatures != 0) &#123; mDecor.postOnAnimation(mInvalidatePanelMenuRunnable); &#125; &#125; if (mContentParent == null) &#123; //根据窗口的风格修饰 选择对应的修饰布局文件 将id为content的FrameLayout赋值于mContentParent mContentParent = generateLayout(mDecor); ... &#125;&#125; 1234567891011121314151617181920212223242526272829protected ViewGroup generateLayout(DecorView decor) &#123; // Apply data from current theme. //根据当前style修饰相应样式 TypedArray a = getWindowStyle(); ... //一堆if判断 // 增加窗口修饰 int layoutResource; int features = getLocalFeatures(); ... //根据features选择不同的窗帘修饰布局文件得到 //把选中的窗口修饰布局文件添加到DecorView中, 指定contentParent的值 View in = mLayoutInflater.inflate(layoutResource, null); decor.addView(in, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT)); mContentRoot = (ViewGroup) in; ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT); if (contentParent == null) &#123; throw new RuntimeException("Window couldn't find content container view"); &#125; ... return contentParent; &#125; 该方法的主要功能为 根据窗口的style为该窗口选择不同的窗口根布局文件 将mDecor作为根视图将窗口布局添加,获取id为content的FrameLayout返回给mContentParent对象 实质为阐释mDecor和mContentParent对象 (扩展)关于设置Activity属性需要在setContentView方法之前调用的问题 在设置Activity属性的时候 比如requestWindowFeature(Window.FEATURE_NO_TITLE) 需要在setContentView方法之前调用 123456public boolean requestFeature(int featureId) &#123; if (mContentParent != null) &#123; throw new AndroidRuntimeException("requestFeature() must be called before adding content"); &#125; ...&#125; onContentChanged方法 在PhoneWindow中没有重写getCallback相关方法 而在Window类下 123456/** * Return the current Callback interface for this window. */public final Callback getCallback() &#123; return mCallback;&#125; mCallback相关的赋值方法 123456789/** * Set the Callback interface for this window, used to intercept key * events and other dynamic operations in the window. * * @param callback The desired Callback interface. */public void setCallback(Callback callback) &#123; mCallback = callback;&#125; setCallback方法在Activity中被使用 12345678910final void attach(Context context, ActivityThread aThread, Instrumentation instr, IBinder token, int ident, Application application, Intent intent, ActivityInfo info, CharSequence title, Activity parent, String id, NonConfigurationInstances lastNonConfigurationInstances, Configuration config, String referrer, IVoiceInteractor voiceInteractor) &#123; ... mWindow.setCallback(this); ...&#125; 说明Activity实现了Window的CallBack接口 然后在Activity中找到onContentChanged方法 12public void onContentChanged() &#123;&#125; 对 空方法. 说明在Activity的布局改动时 (setContentView或者addContentView 方法执行完毕后会调用改方法)所以各种View的findViewById方法什么的可以放在这里 setContentView源码总结 创建一个DecorView的对象mDector 该mDector将作为整个应用窗口的根视图 根据根据Feature等style theme创建不同的窗口修饰布局文件 并且通过findViewById获取Activity布局文件该存放的地方 将Activity的布局文件添加至id为content的FrameLayout内 执行到当前页面还没有显示出来 Activity页面显示 我们都知道Activity的实际开始于ActivityThread的main方法 当该方法调运完之后会调用该类的performLaunchActivity方法来创建要启动的Activity组件 这个过程中还会为该Activity组件创建窗口对象和视图对象 当组件创建完成后用过调用该类的handleResumeActivity方法将其激活 12345678910111213141516final void handleResumeActivity(IBinder token, boolean clearHide, boolean isForward, boolean reallyResume) &#123; ... if (!r.activity.mFinished &amp;&amp; willBeVisible &amp;&amp; r.activity.mDecor != null &amp;&amp; !r.hideForNow) &#123; ... if (r.activity.mVisibleFromClient) &#123; r.activity.makeVisible(); //这里这里 通过调用Activity的makeVisible方法来显示我们通过setContentView创建的mDecor &#125; ... &#125; &#125; else &#123; ... &#125; &#125; 123456789//Activity的makeVisible方法void makeVisible() &#123; if (!mWindowAdded) &#123; ViewManager wm = getWindowManager(); wm.addView(mDecor, getWindow().getAttributes()); mWindowAdded = true; &#125; mDecor.setVisibility(View.VISIBLE); &#125; 至此通过setContentView方法设置的页面才最后显示出来 LayoutInflater源码分析 与setContentView相关 在PhoneWindow的generateLayout中调用了 1View in = mLayoutInflater.inflate(layoutResource, null); LayoutInflater中获取实例化方法 1234567891011/** * Obtains the LayoutInflater from the given context. */public static LayoutInflater from(Context context) &#123; LayoutInflater LayoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE); if (LayoutInflater == null) &#123; throw new AssertionError("LayoutInflater not found."); &#125; return LayoutInflater;&#125; inflate方法相关 1234567public View inflate(@LayoutRes int resource, @Nullable ViewGroup root) &#123; return inflate(resource, root, root != null);&#125;public View inflate(XmlPullParser parser, @Nullable ViewGroup root) &#123; return inflate(parser, root, root != null);&#125; 1234567891011121314public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) &#123; final Resources res = getContext().getResources(); if (DEBUG) &#123; Log.d(TAG, "INFLATING from resource: \"" + res.getResourceName(resource) + "\" (" + Integer.toHexString(resource) + ")"); &#125; final XmlResourceParser parser = res.getLayout(resource); try &#123; return inflate(parser, root, attachToRoot); &#125; finally &#123; parser.close(); &#125;&#125; 最后发现都需要调用 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) &#123; synchronized (mConstructorArgs) &#123; Trace.traceBegin(Trace.TRACE_TAG_VIEW, "inflate"); final Context inflaterContext = mContext; final AttributeSet attrs = Xml.asAttributeSet(parser); Context lastContext = (Context) mConstructorArgs[0]; mConstructorArgs[0] = inflaterContext; //定义返回值 初始化传入形参 root View result = root; try &#123; // 找到根节点 int type; while ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123; &#125; //验证type是否为Start_Tag 保证xml文件正确 if (type != XmlPullParser.START_TAG) &#123; throw new InflateException(parser.getPositionDescription() + ": No start tag found!"); &#125; //type为 root node final String name = parser.getName(); if (DEBUG) &#123; System.out.println("**************************"); System.out.println("Creating root view: " + name); System.out.println("**************************"); &#125; if (TAG_MERGE.equals(name)) &#123; //处理 merge相关 //root需要非空 且attachToRoot为空 if (root == null || !attachToRoot) &#123; throw new InflateException("&lt;merge /&gt; can be used only with a valid " + "ViewGroup root and attachToRoot=true"); &#125; //递归inflate 方法调用 rInflate(parser, root, inflaterContext, attrs, false); &#125; else &#123; //根据tag节点创建view对象 final View temp = createViewFromTag(root, name, inflaterContext, attrs); ViewGroup.LayoutParams params = null; if (root != null) &#123; if (DEBUG) &#123; System.out.println("Creating params from root: " + root); &#125; //根据root生成LayoutParams params = root.generateLayoutParams(attrs); if (!attachToRoot) &#123; //如果attachToRoot为flase 则调用setLayoutParams temp.setLayoutParams(params); &#125; &#125; if (DEBUG) &#123; System.out.println("-----&gt; start inflating children"); &#125; //递归inflate剩下的children rInflateChildren(parser, temp, attrs, true); if (DEBUG) &#123; System.out.println("-----&gt; done inflating children"); &#125; // We are supposed to attach all the views we found (int temp) // to root. Do that now. if (root != null &amp;&amp; attachToRoot) &#123; //root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里 root.addView(temp, params); &#125; // Decide whether to return the root that was passed in or the // top view found in xml. if (root == null || !attachToRoot) &#123; //返回xml里解析的root view result = temp; &#125; &#125; &#125; catch (XmlPullParserException e) &#123; InflateException ex = new InflateException(e.getMessage()); ex.initCause(e); throw ex; &#125; catch (Exception e) &#123; InflateException ex = new InflateException( parser.getPositionDescription() + ": " + e.getMessage()); ex.initCause(e); throw ex; &#125; finally &#123; // Don't retain static reference on context. mConstructorArgs[0] = lastContext; mConstructorArgs[1] = null; &#125; Trace.traceEnd(Trace.TRACE_TAG_VIEW); //返回参数root或xml文件里的root view return result; &#125; &#125; 相关inflate参数的结果 相关方法解析在Inflate中多次被调用的rInflate 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152void rInflate(XmlPullParser parser, View parent, Context context, AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException &#123; final int depth = parser.getDepth(); int type; //XmlPullParser解析器的标准解析模式 while (((type = parser.next()) != XmlPullParser.END_TAG || parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123; //找到start_tag节点 if (type != XmlPullParser.START_TAG) &#123; continue; &#125; //获取Name标记 final String name = parser.getName(); //private static final String TAG_REQUEST_FOCUS = "requestFocus"; //处理requestFocus if (TAG_REQUEST_FOCUS.equals(name)) &#123; parseRequestFocus(parser, parent); // private static final String TAG_TAG = "tag"; //处理tag &#125; else if (TAG_TAG.equals(name)) &#123; parseViewTag(parser, parent, attrs); //private static final String TAG_INCLUDE = "include"; //处理include &#125; else if (TAG_INCLUDE.equals(name)) &#123; //如果是根节点则抛出异常 if (parser.getDepth() == 0) &#123; throw new InflateException("&lt;include /&gt; cannot be the root element"); &#125; parseInclude(parser, context, parent, attrs); //private static final String TAG_MERGE = "merge"; //处理merge merge需要是xml中的根节点 &#125; else if (TAG_MERGE.equals(name)) &#123; throw new InflateException("&lt;merge /&gt; must be the root element"); &#125; else &#123; final View view = createViewFromTag(parent, name, context, attrs); final ViewGroup viewGroup = (ViewGroup) parent; final ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs); rInflateChildren(parser, view, attrs, true); viewGroup.addView(view, params); &#125; &#125; //parent的所有子节点都处理完毕的时候回onFinishInflate方法 if (finishInflate) &#123; parent.onFinishInflate(); &#125;&#125;//可以添加自定义逻辑 protected void onFinishInflate() &#123; &#125;]]></content>
    </entry>

    
  
  
</search>
