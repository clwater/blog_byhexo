{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/myicon.jpeg","path":"images/myicon.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/muse.js","path":"js/src/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"99d2790fa643649169ee259cf8ada6716b4e214b","modified":1602260228387},{"_id":"source/CNAME","hash":"42171f5d661de34ed171085370b75a75a6f67374","modified":1584091985447},{"_id":"source/404.html","hash":"0cee696e3bea01edad234cac4de69d18eed5fe79","modified":1584091985447},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1548972860000},{"_id":"themes/next/.all-contributorsrc","hash":"e32dc4075e304af04b98d0726d489081bea722c0","modified":1548972860000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1548972860000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1548972860000},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1548972860000},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1548972860000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1548972860000},{"_id":"themes/next/README.md","hash":"b4f780a96b0e5d3737eb93bc00da6de91f042c4b","modified":1548972860000},{"_id":"themes/next/_config.yml","hash":"d46363dd71706c3bf3932fb152d1fe2c51c77658","modified":1550850656000},{"_id":"themes/next/bower.json","hash":"c2d363510f82ea3672dae230ebc51da6ef10ec6f","modified":1548972860000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1548972860000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1548972860000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1548972860000},{"_id":"themes/next/package.json","hash":"ab9e5be34a934b9bb74a155d7e187f0785445df6","modified":1548972860000},{"_id":"source/_posts/.base.md","hash":"ae6c596a859fbb94cf7739a10cf48077aa1a0f21","modified":1584091985448},{"_id":"source/_posts/Android自定义View之鲨鱼和小鱼的等待动画.md","hash":"48dc25cd68db0c000351641a3dc9f014c4b7b0a6","modified":1584091985448},{"_id":"source/_posts/Android自定义view之emoji键盘.md","hash":"7f79881f5e96bd1ae5af9c63268d3c81793d0731","modified":1584091985448},{"_id":"source/_posts/Hexo安装后的小问题.md","hash":"502dbb7242762847246edf9bcd33a3525dc8940c","modified":1584091985448},{"_id":"source/_posts/HierarchyViewer.md","hash":"9f8d0535eb05bce29e0907ba2b09daacc5bc4feb","modified":1584091985448},{"_id":"source/_posts/LayoutInflater.md","hash":"9efdd0cf1971e559cf0ad047cc765990652bf5f3","modified":1584091985448},{"_id":"source/_posts/LeetCode-Two-sum.md","hash":"aaec98c0b337ef7e4348ddbb7b1ef75443c767d0","modified":1584091985448},{"_id":"source/_posts/LeetCode2-Add-two-numbers.md","hash":"be0197ccea9e07ba877d3c59da3bf9c022737e50","modified":1584091985449},{"_id":"source/_posts/LeetCode20-ValidParentheses.md","hash":"de5a91a02666689c910bdf895e10d4fc12ae640c","modified":1584091985449},{"_id":"source/_posts/LeetCode21-MergeTwoSortedLists.md","hash":"8221c5b0932a41598aeac7711adec5cdda59c4c5","modified":1584091985449},{"_id":"source/_posts/LeetCode26-RemoveDuplicatesFromSortedArray.md","hash":"41360911f7fc2480179270998c87501e9e0757c6","modified":1584091985449},{"_id":"source/_posts/LeetCode27-RemoveElement.md","hash":"a93c19595ae67cde3291bb8635f5f62c431303d9","modified":1584091985449},{"_id":"source/_posts/LeetCode3-Longest-Child.md","hash":"00f864e97e8db13a9c28ad70ae5a41e4c0572933","modified":1584091985449},{"_id":"source/_posts/LeetCode53-MaximumSubarray.md","hash":"ffa0daf417eae7045618501451d07435942d887f","modified":1584091985449},{"_id":"source/_posts/.DS_Store","hash":"ce28cceb0f37854ab53b8e70e4f6c04816d59f7c","modified":1584091985448},{"_id":"source/_posts/LeetCode6-ZigZagConversion.md","hash":"cfe782bf78e3044f873eaff22719640a31a04a93","modified":1584091985449},{"_id":"source/_posts/LeetCode7-ReverseInteger.md","hash":"bd60a4137215c0225f8d08a1cbed938c47bf15ee","modified":1584091985450},{"_id":"source/_posts/LeetCode58-LengthOfLastWord.md","hash":"011bf1a555619a2ec796afcde3c922f67fce0651","modified":1584091985449},{"_id":"source/_posts/LeetCode70-ClimbingStairs.md","hash":"6bce6d7f059ebd805e3f19dff6ffd5901cb0aa4b","modified":1584091985450},{"_id":"source/_posts/Leetcode5-LongestPalindromicSubstring.md","hash":"f195752f82493f78d09e64667808f73ac4210029","modified":1584091985451},{"_id":"source/_posts/LinearLayout 源码分析.md","hash":"ec24d6e9f3632fe069316fdca6de2dcc4010ea9b","modified":1584091985452},{"_id":"source/_posts/LikelyHttp-可能是最简单的retorfit二次封装库.md","hash":"355c53f56329906b15eabd943f08e1b445090187","modified":1584608028926},{"_id":"source/_posts/RelativeLayout 源码分析.md","hash":"b2dd0eb779830f7a72369d499738e5b58a3d9933","modified":1584091985452},{"_id":"source/_posts/RpgMaker入门教程1.md","hash":"c9375e2665b30c3549d452ad1a03e28c4db02393","modified":1584091985453},{"_id":"source/_posts/RpgMaker教程2.md","hash":"4b9c4343ff8d35aa8b7d0b86583976c31b4e441b","modified":1584091985453},{"_id":"source/_posts/RpgMaker教程3.md","hash":"1b7e62b47d4784935216237d0303f12c8ec670a2","modified":1584091985453},{"_id":"source/_posts/RpgMaker教程4.md","hash":"f90ab4042e11fdfebedc4b83027f6f7f4e20045c","modified":1584091985453},{"_id":"source/_posts/RpgMaker教程5.md","hash":"ca277ecf9d13945c3ca99f3ebf8060061ad34f3d","modified":1584091985454},{"_id":"source/_posts/View 绘制源码分析.md","hash":"0048ca5f2b839a20f288dc6f37f5ab5c3b04e141","modified":1584091985454},{"_id":"source/_posts/android自定义View之仪表盘.md","hash":"77f2b1b0318056968caecfdbdbf5fb31f37b31e5","modified":1584091985454},{"_id":"source/_posts/android自定义View之星球运动.md","hash":"27a2657035fc57637a125d3596375b8639e4853e","modified":1584091985455},{"_id":"source/_posts/https.md","hash":"2e757560d29e506ae9e42bd5466fa3ab78c3da4e","modified":1584091985455},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1548972860000},{"_id":"source/_posts/qiniuImage.md","hash":"4eb3c6bb2947d283b71776685055a0a8e21cccde","modified":1584091985456},{"_id":"source/_posts/shell(一)基础.md","hash":"4e25ea9644ec45dab051e2a0aaa99c864c64979a","modified":1584608126276},{"_id":"source/_posts/view03.md","hash":"c41c3e37b93111f1e0396dfbb3c7becdabe3ae9c","modified":1584091985457},{"_id":"source/_posts/vpn.md","hash":"29478bfbd9933a1c9bc624c232781a87d88ae065","modified":1584091985457},{"_id":"source/_posts/中国国家气象局api数据分析.md","hash":"3c7618c1288bd84ca885c8254b27ac4bcfc3b6ac","modified":1584091985457},{"_id":"source/_posts/从setContentView说起.md","hash":"2c71c6b101500daff530d005b21786e38707ad82","modified":1584091985457},{"_id":"source/_posts/公告.md","hash":"8a995a916225f01eec9976d67b93e3d1b3c74ba3","modified":1586641735058},{"_id":"source/_posts/再看求最大公约数的算法.md","hash":"4faa459fff168961e3a40c00220dd9727b9d81d4","modified":1584091985457},{"_id":"source/_posts/写在RobinAlgo上线的前一天.md","hash":"7fa31e85c218a33cf281dc1d45f14933197f0c90","modified":1602264467437},{"_id":"source/_posts/如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景.md","hash":"9f9e88f01815a753ecdb039066961fbdbe35100e","modified":1584091985457},{"_id":"source/_posts/如何用最简单的方法发布Android-library到jCenter-Bintray.md","hash":"b8c80c137ee0f0668ac514928360f76ae95d2cf7","modified":1584607965490},{"_id":"source/_posts/贝塞尔曲线.md","hash":"4827a47bd5a0658587f6d88a54f51817f9d864f6","modified":1584091985458},{"_id":"source/_posts/网页中实现长图固定宽高滚动展示.md","hash":"61c5876da460c5820dc0475f9d03d113498d8bfc","modified":1586641700990},{"_id":"source/about/.DS_Store","hash":"b72281a24317a2efb14c8a48dca2e102d20b80c3","modified":1584091985458},{"_id":"source/about/index.md","hash":"85d1b6e97e2e0dd34619a66d6942d1f2f43062c4","modified":1584091985458},{"_id":"source/tags/.DS_Store","hash":"4b1737e2d95536850ac239b97c1d4b1deae9a602","modified":1584091985459},{"_id":"source/tags/index.md","hash":"0c4d3bebe7ff03b130b425ced2fd8d5ad9e402e5","modified":1584091985459},{"_id":"source/categories/.DS_Store","hash":"0203e668175914dff6a72b324de111ecf675c428","modified":1584091985458},{"_id":"source/categories/index.md","hash":"3d1b717cf45e66a19c850e452772c1001133cddc","modified":1584091985459},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1548972860000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1548972860000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"a5335a99377069ae76fd993d488bc3eaf48f3a05","modified":1548972860000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1cb29a0e54ef390f73cb85f254000d4b57460dae","modified":1548972860000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1548972860000},{"_id":"themes/next/.github/stale.yml","hash":"a782ac925201a8fe07959bba0d7696c7b2b5fd2d","modified":1548972860000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1548972860000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1548972860000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1548972860000},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1548972860000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1548972860000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1548972860000},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1548972860000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1548972860000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1548972860000},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1548972860000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1548972860000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1548972860000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1548972860000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1548972860000},{"_id":"themes/next/layout/_layout.swig","hash":"9ecf425ab8662e94d9f581f7d4e75171a449a1e6","modified":1550765818000},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1548972860000},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1548972860000},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1548972860000},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1548972860000},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1548972860000},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1548972860000},{"_id":"themes/next/layout/page.swig","hash":"2d0e80e8a4dcba665704882b9dc5858c187acc31","modified":1548972860000},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1548972860000},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1548972860000},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1548972860000},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1548972860000},{"_id":"themes/next/languages/ja.yml","hash":"e331b15b1fda0f2285d25853f834682ab8dc3c39","modified":1548972860000},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1548972860000},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1548972860000},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1548972860000},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1548972860000},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1548972860000},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1548972860000},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1548972860000},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1548972860000},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1548972860000},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1548972860000},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1548972860000},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1548972860000},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1548972860000},{"_id":"source/_posts/LeetCodeFile/Add-two-numbers.graffle","hash":"89e6e5d6cee4a077e912fb190cb9aa0a86cdc7cf","modified":1584091985450},{"_id":"source/_posts/LeetCodeFile/MaximumSubarray.graffle","hash":"c387bd620577870da9839969b89f52330cc27335","modified":1584091985450},{"_id":"source/_posts/LeetCodeFile/MergeTwoSortedLists.graffle","hash":"60460ad073c519a430b0b451e9a44d9ff50ca02b","modified":1584091985450},{"_id":"source/_posts/LeetCodeFile/RemoveDuplicatesFromSortedArray.graffle","hash":"e6e06586f03fbde5421c771c2cc9100270eb88bf","modified":1584091985450},{"_id":"source/_posts/LeetCodeFile/RemoveElement.graffle","hash":"cb9f2eb75cc3ad16e719230c2d748f4e2c5bb298","modified":1584091985451},{"_id":"source/_posts/LeetCodeFile/ValidParentheses.graffle","hash":"f73e826d1ae1371ac5677a1563d2e3f4dffa7260","modified":1584091985451},{"_id":"source/_posts/LeetCodeFile/longest-palindromic-substring.graffle","hash":"fcb862923549266628d8e48be141ab0cb9456777","modified":1584091985451},{"_id":"source/_posts/LeetCodeFile/ZigzagConversion.graffle","hash":"8c7d21bede81db76d4a8ece359a4a8c1c54e4a77","modified":1584091985451},{"_id":"source/_posts/LeetCodeFile/longest-substring-without-repeating-characters.graffle","hash":"8ec3049a5805c19470c7634be078740849b77d2b","modified":1584091985451},{"_id":"source/_posts/LeetCodeFile/twosum.graffle","hash":"00bf100bb86194bd2ed21b11e388be37037f79d2","modified":1584091985451},{"_id":"source/_posts/image/001.png","hash":"1f0f5acfef25e32d6983b8bc81427f06132e42b0","modified":1584091985455},{"_id":"source/_posts/image/002.png","hash":"ac509cfdd5c61c02dff07f065be74d1ba4595b9a","modified":1584091985456},{"_id":"source/_posts/image/003.png","hash":"64e3b497bbc11db05888a7204ac0cf5d6b78df44","modified":1584091985456},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548972860000},{"_id":"themes/next/layout/_custom/header.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550761549000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550761592000},{"_id":"source/_posts/image/图片_1.png","hash":"520f2896fa087665c69119f0afe4652936586db8","modified":1584091985456},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1548972860000},{"_id":"themes/next/docs/ru/README.md","hash":"953deb732e0b3b22c423122a189d6847d908c4b8","modified":1548972860000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1548972860000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1548972860000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1548972860000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1548972860000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1548972860000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1548972860000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1548972860000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1548972860000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1548972860000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b76ccbc658024e86639cfa5f8a3817647fc8d651","modified":1548972860000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"15e55eb77616500fa4c64982d6bad9ac17a46e2a","modified":1548972860000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1548972860000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"15582e823d228c0b2288543c1eb460c40afad29b","modified":1548972860000},{"_id":"themes/next/scripts/tags/button.js","hash":"08d5dfe05335f57d3e8392a74315766dafa52538","modified":1548972860000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1548972860000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"7ded3e7a78380b32de3e12f156e0978ef5c2890a","modified":1548972860000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"22de989163c4678278c8a112160be6977f570234","modified":1548972860000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"4775fffa526f1f7b40aa1f1c0a171dbcf5963df7","modified":1548972860000},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1548972860000},{"_id":"themes/next/scripts/tags/label.js","hash":"76735c88cfba2e53649387a7fa5176706c2d3c0c","modified":1548972860000},{"_id":"themes/next/scripts/tags/note.js","hash":"84ce2d2c0646baafc82083e261b093b1c515f63c","modified":1548972860000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"8b1e9043db8f19ea4a12c473b3f729bd3b5bcb0e","modified":1548972860000},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1550761492000},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1548972860000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1548972860000},{"_id":"themes/next/layout/_macro/post.swig","hash":"fd99aeb8b84625772d85d9ed8e5bd1221c3e201b","modified":1548972860000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a1ded7ba92354ed55ae20a0b6bcc15bbb4b801c2","modified":1548972860000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"d66bc7ec3cc03f60fcc7d555368a5b9b010f7f11","modified":1548972860000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"d01881f8056203c4b6920328db8c2ae8fa662a08","modified":1548972860000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c4c58ea2bd4cf10372a5e46dbec1b9a2e0e69f0f","modified":1548972860000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1548972860000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1548972860000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1548972860000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1548972860000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1548972860000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1548972860000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1548972860000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1548972860000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1548972860000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1548972860000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1548972860000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548972860000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1548972860000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1548972860000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1548972860000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548972860000},{"_id":"themes/next/source/images/favicon.ico","hash":"e045ba4041efdf518f3dba99c17ab28e060ba100","modified":1550677987000},{"_id":"themes/next/source/images/myicon.jpeg","hash":"c4c281479e470c7099fbfedcbeccbb6e82401138","modified":1486392996000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1548972860000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1548972860000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1548972860000},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"4148001b0b3f8a29b13ba5cd3f6f636c9cb260b0","modified":1548972860000},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1548972860000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"d359e638a86bd9664101c48e9344f21ec96e6a15","modified":1548972860000},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"5453d76e00bfcd1d732fc5f41828a90eb681f645","modified":1548972860000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1548972860000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1548972860000},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1548972860000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1b250c1b7945cb1029b9e855edb09854f7c8250a","modified":1548972860000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"272c46f03766ea0c169163342bb98f09f561cf4c","modified":1548972860000},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"a6ed0b4d6140bdfc5ea4995bb13d969cce50e74a","modified":1548972860000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1548972860000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"07f88421bda86d9d5ff32d130b1cb1196b99a326","modified":1548972860000},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1548972860000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"07340f3a4c8d8a9dd491d1eba18d985ecc0855a2","modified":1548972860000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548972860000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548972860000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548972860000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548972860000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548972860000},{"_id":"themes/next/scripts/filters/after_post_render/exturl.js","hash":"1c30b09d1855f1720f71f5956e0c9ca4d57b1231","modified":1548972860000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1548972860000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"086f5979b3de091c3378512e6c5c2f8fcb4f6298","modified":1548972860000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1548972860000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1548972860000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1548972860000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1548972860000},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1548972860000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1548972860000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d0e97b205d3320421c380f2eee445457430c8152","modified":1548972860000},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1548972860000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1548972860000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1548972860000},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1548972860000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1548972860000},{"_id":"themes/next/source/js/src/motion.js","hash":"7933a30382a84b655238f6e78d42ea1b99af4de6","modified":1548972860000},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1548972860000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1548972860000},{"_id":"themes/next/source/js/src/utils.js","hash":"f1394d64977439ec569d2777b1ac304905e043f1","modified":1548972860000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1548972860000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"c7f2855f19dfdf18aba8c58d55b7489e631ed035","modified":1548972860000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1548972860000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1548972860000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"be24f204a515d5211bf3ba98a030e3bf61d4cc16","modified":1548972860000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1548972860000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"94e106755c5fb6f40431b621beeba0bd33877e57","modified":1548972860000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1548972860000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1548972860000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"3cfeafefc672d9a7704650ebfb2f9d8668b38d9a","modified":1548972860000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1548972860000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"197207078ff0f4d46417b4413493e02cda0b85f4","modified":1548972860000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1548972860000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"dbe94dd94678ee8e4002b06bb1e9ead2e59e44bf","modified":1548972860000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"a4ab8095bf60def5823bf6b7b91a92a356a4c098","modified":1548972860000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1548972860000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"210f0c152bc4a9375ed364398ce309f09ebafd10","modified":1548972860000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1548972860000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1548972860000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1548972860000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1548972860000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1548972860000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1548972860000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"c76c7ac9b97e74908467701b10e25707ba5c979e","modified":1548972860000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1548972860000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1548972860000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1548972860000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1548972860000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1548972860000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1548972860000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"050ea01f25cfe492be9bb77b409644d623fdf2dc","modified":1548972860000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"866012e74109383c98b31e6062bc735068ac6014","modified":1548972860000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"9e576f12a294b14bd262f59c309a50cbf7003827","modified":1548972860000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1548972860000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1548972860000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"5ced33d88f0e7c7546b8da7ff096c59bb0207cdf","modified":1548972860000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1548972860000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"cbf620cf2a78e3ac736cdd7e768513cfd6946e83","modified":1548972860000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1548972860000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1548972860000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1548972860000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1548972860000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"323ccd05bf8befb7d33de443cf3ac6a4195c3554","modified":1548972860000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"58e2e153e8b67e643b24453a1e1cceaae3323647","modified":1548972860000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"fe0614f1c15cf4c6f4bb72afe4a65e10824c9cb0","modified":1548972860000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1548972860000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1548972860000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"69722be16ce5eae5c027168f9b2fded4776e1b53","modified":1548972860000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"2f73cc9ffb63534f0b6d8f0e9ee853c1af1b1244","modified":1548972860000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1548972860000},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"64d65d9ad0cc94734ac6ded279e2b5dc870a1cab","modified":1548972860000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1548972860000},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"d63208ee20529450c35de8fe80ef41fffa831dc9","modified":1548972860000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1548972860000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"dc53a41196b675268bfd2a944f6258c57ed44e91","modified":1548972860000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"6a825ce9412339ec4a128d9714804994cb85522c","modified":1548972860000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1548972860000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1548972860000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1548972860000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1548972860000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1548972860000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1548972860000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d5bfb363a1154e6505f0cccbd811fa71db133e3d","modified":1548972860000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"936132428a0d35b3947ccedd4c379940abcf223a","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"a5bef4fdde80951f3b8c154d79cb1e581638a988","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"837ff3718cb5a63eb01a451e35989fd1dfe4218c","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1548972860000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1548972860000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"e3ad313825d7ad03e24bb76d036deeb50587022b","modified":1548972860000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"8c68d36d1c74628be58cb61e66948868a8c7588d","modified":1548972860000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"4fd38490b01af4f977b53aefc433cd2f981cde14","modified":1548972860000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1548972860000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"03d57bbe201e7d6865d5b303ee63f3f61c27c9d8","modified":1548972860000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"74c7dccf0a3ee9fc2ca25ad8e998243191813a0e","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a5e3c6da76f6d5bed70c38fdf5796faa759d473","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"09b5054ae34ba83c0d614821e574da265af55a14","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"9b076c92abdadcf9acee75da64592ff3badd69b8","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"fd54eb599d5003bbb1aabc08596bc24a3fa3294f","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"fe03041c387347e0bcf8efd1b4cf205ece66c339","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fe2dc74726a515549956d233becda188da64f948","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"a5bef4fdde80951f3b8c154d79cb1e581638a988","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"2dd866817d0bc7d179e81855f8fbcbb5d3c883fc","modified":1548972860000},{"_id":"themes/next/source/js/src/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1548972860000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1548972860000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1548972860000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1548972860000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1548972860000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1548972860000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1548972860000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1548972860000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"cd86bed852fec6e6933898067122a03755bc17f0","modified":1548972860000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"9e0f215868df17cb27a4a522fd31156c66428c2d","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"05e68adae13f4d99a6ac6493daab39c92e39a6bd","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"9c59dbc1a6f2b4f15d8ae499f7aa227d9b0e3058","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"61af2f656f6e916f9920277bd048c5d58ff32a60","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"cee0e70d1a6ea963bfd707bf9cedb8a4637f64c2","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"b34bb2ea4d16e47e6fdc06cd4feb32d93ccbd779","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"671a7f8aa138259172e7c6268d82d7a62a1e036a","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"e73db17c210ada503aafca2daaf84a9bfd34be75","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"b964782056658ac785ec6070e747c97a5e234ddb","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"c11ef42781111d061ed5b6c14dd4359e2cba88be","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"7d2222f66a1c1a0a3cc90bfd5d817d9b859f4a68","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"c415729e0f0d2439e63b93cec7ae32df54db87b4","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"9ab4e05e7b78af755ebdcbb71731fd723ed2d7f5","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"190ad18f45b8a69cef13b2fdd2254893d06ec2c3","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"2d4f318644bf37c50e5b1fab8d62b2673fbab9e8","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"070251836b57027c8240c51e41cb8e8c999c4525","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"0e760758221d4919902bda7c4d3bb96c94a678db","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"5e340ee2407a4e39cd708794cfcc718a5f398d7b","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"75f7876136fe1cae9b42d2c220e7f8b37b8d2f55","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"3b5a37ba5e70f92c1ee707c8053524e38adbb710","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"300491cf0e80c34faf5f83a2846c177759ac653f","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ede576abad438366c8e81f47435242ade5a5a08c","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"1cf64afd4b49143972f7617869539be3adb91a5e","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"0e8294d042d7d28c680ead48baa9e3c777d407c5","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"b5e5aa7074a965e396229c5bd263fb406770ce5f","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"3039df53b94b0847b0c451d2d227270b479cc184","modified":1548972860000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1548972860000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1548972860000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1548972860000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1548972860000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1548972860000},{"_id":"public/search.xml","hash":"0b707561ccb934d80d0ba8f4e2e9a13a5d403b82","modified":1602264444283},{"_id":"public/baidusitemap.xml","hash":"d07c06dcbf68b6a7c40d77e4307eb6ce8a9cf825","modified":1602264339126},{"_id":"public/sitemap.xml","hash":"94a9c9263aee68ddbdbfa0880fe317320fbbd4c6","modified":1602264473530},{"_id":"public/404.html","hash":"d2edb11ecbdf31088ef7be4f8dba7576d313de1d","modified":1602264339131},{"_id":"public/about/index.html","hash":"63f2677446eacd459591670fc2db416f36d8deef","modified":1602264339131},{"_id":"public/tags/index.html","hash":"ae6cda5df6ecd280b587519352acae96f3a878a5","modified":1602264339131},{"_id":"public/categories/index.html","hash":"0fa227c3586bc8518c344beb4b534e7fbd9ba304","modified":1602264339131},{"_id":"public/2020/04/12/网页中实现长图固定宽高滚动展示/index.html","hash":"50dea58c1de3b2c5e8212439baa65b627fae4781","modified":1602264339131},{"_id":"public/2020/03/19/LikelyHttp-可能是最简单的retorfit二次封装库/index.html","hash":"d90c6ec8bd49e17c1e893057f2580c31e2382eaf","modified":1602264339131},{"_id":"public/2020/03/19/如何用最简单的方法发布Android-library到jCenter-Bintray/index.html","hash":"fc6993e4655c67d099c75f999aba5fd2024ffdbb","modified":1602264339131},{"_id":"public/2020/03/19/shell(一)基础/index.html","hash":"07055b727e8d86f13155f7e76bfc6fb0b93c6e20","modified":1602264339131},{"_id":"public/2020/03/13/RpgMaker教程2/index.html","hash":"a1923073d9ba52bc693a26d9fe1ab3b9f3f3bc06","modified":1602264339132},{"_id":"public/9999/01/01/公告/index.html","hash":"13fbe0c159ec9e2ce2e1491cecb539bb56583f08","modified":1602264339132},{"_id":"public/2019/02/19/LeetCode58-LengthOfLastWord/index.html","hash":"6ddc83daea3a44b9c8206dad0da9865df32e6c2e","modified":1602264339132},{"_id":"public/2019/02/20/LeetCode70-ClimbingStairs/index.html","hash":"3df02c022b46cd68dd1a9e7ebd97672f52f95faf","modified":1602264339132},{"_id":"public/2019/02/18/LeetCode53-MaximumSubarray/index.html","hash":"8823d718b170a861a970bb21c6b8e6b49370ca53","modified":1602264339132},{"_id":"public/2019/02/17/LeetCode27-RemoveElement/index.html","hash":"05fd6b392d93e7004590598614e3d8b8e10fbef5","modified":1602264339132},{"_id":"public/2019/02/16/LeetCode26-RemoveDuplicatesFromSortedArray/index.html","hash":"e93ef35fef6284ecb880f3c25acedafe78b59a3d","modified":1602264339132},{"_id":"public/2019/02/16/LeetCode21-MergeTwoSortedLists/index.html","hash":"8faf8de46f58335cf52079441207306fa568fbe5","modified":1602264339133},{"_id":"public/2019/02/16/LeetCode20-ValidParentheses/index.html","hash":"13a70be8c5cdfe0d6b87620cbeb1b8c922f61196","modified":1602264339133},{"_id":"public/2019/01/12/LeetCode7-ReverseInteger/index.html","hash":"60fd2d795b9d5fd16a8e74f18c9839b2110fa7dd","modified":1602264339133},{"_id":"public/2019/01/12/LeetCode6-ZigZagConversion/index.html","hash":"345c9a2ca69038039f3311ce2643b99b456796dc","modified":1602264339133},{"_id":"public/2019/01/11/Leetcode5-LongestPalindromicSubstring/index.html","hash":"8884043ac748b3c3ade8a6f8e22adc50d1209b94","modified":1602264339133},{"_id":"public/2019/01/11/LeetCode3-Longest-Child/index.html","hash":"b4fa00c1c8825027209d478b383f10e24cc65804","modified":1602264339133},{"_id":"public/2019/01/09/LeetCode2-Add-two-numbers/index.html","hash":"6a69aa1ca9a7931017e2a6cda413c87374e12d28","modified":1602264339133},{"_id":"public/2019/01/08/LeetCode-Two-sum/index.html","hash":"a5858ebccefc5bf92768041d6526353225f74461","modified":1602264339133},{"_id":"public/2018/11/19/qiniuImage/index.html","hash":"30c4905e50527f19510d1791e39a4b3b982d201b","modified":1602264339133},{"_id":"public/2018/05/05/Android自定义view之emoji键盘/index.html","hash":"5c6af26d9b55adccb12c68bb0f44e7b3bb52eed7","modified":1602264339133},{"_id":"public/2018/02/25/android自定义View之星球运动/index.html","hash":"ba37d06e4040d3813d4f8a55fa80b48b98e99f39","modified":1602264339134},{"_id":"public/2018/01/26/贝塞尔曲线/index.html","hash":"1396303aff513acdd9480cba4a5169649ef11bdc","modified":1602264339134},{"_id":"public/2018/01/16/view03/index.html","hash":"5072db36672fa3963847ce8f7e631833ea43a667","modified":1602264339134},{"_id":"public/2018/01/13/Android自定义View之鲨鱼和小鱼的等待动画/index.html","hash":"36768b071d76c9c81d7d4dd258cbde2de5a827f5","modified":1602264339134},{"_id":"public/2018/01/13/再看求最大公约数的算法/index.html","hash":"f2153485e23c270821c11baeb3b6f2c4eed24808","modified":1602264339134},{"_id":"public/2017/11/04/https/index.html","hash":"37508630a8ea901b9be167f9d7fe5978513e38e2","modified":1602264339134},{"_id":"public/2017/10/06/RpgMaker教程5/index.html","hash":"15599805386f520d7025f04fae507dcea250556e","modified":1602264339134},{"_id":"public/2017/10/04/RpgMaker教程4/index.html","hash":"58998b39034f01656304cefd531ec168a296fba5","modified":1602264339134},{"_id":"public/2017/10/04/RpgMaker教程3/index.html","hash":"e8c59fa6c0999b58ddabc626d82a329511a36add","modified":1602264339134},{"_id":"public/2017/08/31/中国国家气象局api数据分析/index.html","hash":"0bca64a57102698d31ee86b594db8386d9723f54","modified":1602264339134},{"_id":"public/2017/05/17/如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景/index.html","hash":"c732f9c53942b9a4d64c6f2dcf4d37bda426dbc1","modified":1602264339135},{"_id":"public/2017/08/10/android自定义View之仪表盘/index.html","hash":"0ab84e819031e0ee81b8a6c07780d638120b58ba","modified":1602264339135},{"_id":"public/2017/04/24/RpgMaker入门教程1/index.html","hash":"6002248135a52757740b1187b10189dbda24cde5","modified":1602264339135},{"_id":"public/2017/04/23/Hexo安装后的小问题/index.html","hash":"f505bdae77b9eb4677d705f3e4cde6201db7708f","modified":1602264339135},{"_id":"public/2017/02/05/vpn/index.html","hash":"bea71235c3764c7aed2eecb2cf93c064d16b420d","modified":1602264339135},{"_id":"public/2017/02/03/HierarchyViewer/index.html","hash":"cb7d8d3272681b8b491d6d0744afbf219b001eb7","modified":1602264339135},{"_id":"public/2017/02/03/RelativeLayout 源码分析/index.html","hash":"6eb8eaae4a346e555a1d29d38889be43bf42a3ed","modified":1602264339135},{"_id":"public/2017/02/03/LinearLayout 源码分析/index.html","hash":"6300a8f255d11210032f2c44b63b7ec4e4c1d155","modified":1602264339135},{"_id":"public/2017/02/03/LayoutInflater/index.html","hash":"5459416e019ec21108faad63e2b3e6cecffee488","modified":1602264339135},{"_id":"public/2017/02/03/View 绘制源码分析/index.html","hash":"072c2bfc79459d68a200a44931e85c47ace3fd68","modified":1602264339135},{"_id":"public/2017/02/03/从setContentView说起/index.html","hash":"e0dd487eac492fd5ef4ea3d20997c7e7407aa369","modified":1602264339135},{"_id":"public/archives/index.html","hash":"d7b2ed653253d6112df902c247919d1189a463dd","modified":1602264339136},{"_id":"public/archives/page/2/index.html","hash":"1b202b473b16ed525a304a9876e9479a1a449447","modified":1602264339136},{"_id":"public/archives/page/3/index.html","hash":"3fbdb8174a13486945d5a2bdea736109793074ef","modified":1602264339136},{"_id":"public/archives/page/4/index.html","hash":"b2e33abe8657766aab7b523dc6d4346b3a019276","modified":1602264339136},{"_id":"public/archives/page/5/index.html","hash":"a1be6619440ab4afba512056f0c5f4719457aa1b","modified":1602264339136},{"_id":"public/archives/2017/index.html","hash":"ab7dc7e014b9b2e8f25147100f42af4637a9ba55","modified":1602264339136},{"_id":"public/archives/2017/02/index.html","hash":"7d54f982253935e6b08c082373db80ea3e3439b4","modified":1602264339136},{"_id":"public/archives/2017/page/2/index.html","hash":"07bb3b0f024a76f03ea30d2f1b13d8203090496e","modified":1602264339136},{"_id":"public/archives/2017/04/index.html","hash":"5dfca42ff953f508c1425a4c8f450e5700792007","modified":1602264339136},{"_id":"public/archives/2017/05/index.html","hash":"178cdf79940c28b11c3868e82bb268220f92fdbe","modified":1602264339136},{"_id":"public/archives/2017/08/index.html","hash":"f907296f554d3c38e078c2447b9ae86e896ee3e8","modified":1602264339136},{"_id":"public/archives/2017/10/index.html","hash":"67d14333a3cdca2beca67151ca17747554f29ce8","modified":1602264339136},{"_id":"public/archives/2017/11/index.html","hash":"415d1e09455b64f89becf00de65dd20fd588e0c7","modified":1602264339136},{"_id":"public/archives/2018/index.html","hash":"bee0c80c5586749a6a420fb6f09b49c0909c1d1d","modified":1602264339136},{"_id":"public/archives/2018/01/index.html","hash":"cfe12b758ad7fbf3dbd3cbef7a1bf98e7c5e4f2e","modified":1602264339136},{"_id":"public/archives/2018/02/index.html","hash":"b63fd29330ce5578f4ef514fa04d4182b76ac9f7","modified":1602264339136},{"_id":"public/archives/2018/05/index.html","hash":"78a836e7d34c97dc966fe6b64cde5aafb3e09754","modified":1602264339137},{"_id":"public/archives/2018/11/index.html","hash":"2d7958fa81b3dca5fc4aa5781320b226cb159ec8","modified":1602264339137},{"_id":"public/archives/2019/index.html","hash":"32bfcf8248088c0eaced9f54e33ebeeccea7b968","modified":1602264339137},{"_id":"public/archives/2019/page/2/index.html","hash":"6d5e14b72f551c5a8282c88d97b37dba79a497fe","modified":1602264339137},{"_id":"public/archives/2019/01/index.html","hash":"f139e8558b78f1033fab9f4357d3be85d912013b","modified":1602264339137},{"_id":"public/archives/2019/02/index.html","hash":"8a46fd327cf4620c321164d2afcf5a4117992df5","modified":1602264339137},{"_id":"public/archives/2020/index.html","hash":"c74605933c5059532b9a2f759d2bf963da5205f2","modified":1602264339137},{"_id":"public/archives/2020/03/index.html","hash":"d9255e302a2c25395b6488e19999c0b5c440c913","modified":1602264339137},{"_id":"public/archives/2020/04/index.html","hash":"ceb0f5fb50e7b691020f5d1307129173aee57d9c","modified":1602264339137},{"_id":"public/index.html","hash":"542f053b26aa4df3724c8fc0f78deaa15b4c5279","modified":1602264473532},{"_id":"public/archives/9999/01/index.html","hash":"4142e07a271bfe51b38dfb1f8bde8bdd9b41f4a1","modified":1602264339137},{"_id":"public/archives/9999/index.html","hash":"bc10ec48b22ca0dbc766153bf2ecbeb2d7bbaba3","modified":1602264339137},{"_id":"public/page/3/index.html","hash":"bd7b5f70b5716be55071f7ca34b0bcdc65721a93","modified":1602264339137},{"_id":"public/page/2/index.html","hash":"308c419fd69ce0fb857e780cc050fd17705f8799","modified":1602264339137},{"_id":"public/page/4/index.html","hash":"c65b607f6f4ff64c0cf81c3a3f2b1e4163367a93","modified":1602264339137},{"_id":"public/page/5/index.html","hash":"972f2ecd7a82c48290440d9d24c392dc25265112","modified":1602264339137},{"_id":"public/categories/Android自定义View/index.html","hash":"bdf501359bac9b125e8641e4a4bd93cbd76d0813","modified":1602264339138},{"_id":"public/categories/Hexo/index.html","hash":"35660b1c77ffb4f63f60213009711be1a1eb563f","modified":1602264339138},{"_id":"public/categories/android/index.html","hash":"a2dd9694e882064280e743a91ee195e5e5ebad04","modified":1602264339138},{"_id":"public/categories/LeetCode/index.html","hash":"eb4f275697155c34fc2a27e66dc292d398e29dba","modified":1602264339138},{"_id":"public/categories/LeetCode/page/2/index.html","hash":"67c7a3cc437c1459b667b6b23f2d0b9a82e83ff0","modified":1602264339138},{"_id":"public/categories/RpgMaker-教程/index.html","hash":"dce4c54090fb8db31859c86b863f10eee6a9acc9","modified":1602264339138},{"_id":"public/categories/https/index.html","hash":"8e4ae3695979edeaf705aa7b3d54611e0c8f204f","modified":1602264339138},{"_id":"public/categories/想啥是啥/index.html","hash":"d7bb43809d60c2cc0a4743d8f310adcb3f0195e8","modified":1602264339138},{"_id":"public/categories/教程/index.html","hash":"b31f514dcf874b341804c706170a286e4ab5dade","modified":1602264339138},{"_id":"public/categories/数据收集/index.html","hash":"4a8fedfc5a303092eb35a58c00ce8df825620157","modified":1602264339138},{"_id":"public/categories/算法/index.html","hash":"95dfc23aeb0bd0e60e56ee5935c8a4fb6e8709b4","modified":1602264339138},{"_id":"public/categories/Python/index.html","hash":"ccc6fcfeb270ad8325c1786e30437133c09fdf84","modified":1602264339138},{"_id":"public/tags/android/index.html","hash":"1ac420e91067b313a72135c4322c6ece51f79229","modified":1602264339138},{"_id":"public/tags/android/page/2/index.html","hash":"64cf1e7ea2aa33706941b76e038ae68a581daca1","modified":1602264339138},{"_id":"public/tags/view/index.html","hash":"0117c5b0b50a944c0967f94250c4577f2041fa74","modified":1602264339138},{"_id":"public/tags/view/page/2/index.html","hash":"2fdc08608afd9f1d7a44822b0c2d4df364a9ad41","modified":1602264339138},{"_id":"public/tags/自定义/index.html","hash":"52d9db50b721b089342c300f1b7135524ee68599","modified":1602264339139},{"_id":"public/tags/hexo/index.html","hash":"e04d09fa1567db5e59ae1a3a3e934a89ce615a5b","modified":1602264339139},{"_id":"public/tags/command-not-found/index.html","hash":"007a4bca5aad2588a53e6dc809ce7dc7a41ab5b2","modified":1602264339139},{"_id":"public/tags/tools/index.html","hash":"b0e21b34ffa3104d69fbdb181fb56395c1dcb8d0","modified":1602264339139},{"_id":"public/tags/Hierarchy-Viewer/index.html","hash":"1615492c1db2b49e116f0e3e7ce27cb873536ec9","modified":1602264339139},{"_id":"public/tags/源码/index.html","hash":"190770a7deff5b7b5c8501c8dc8124a99464b4f2","modified":1602264339139},{"_id":"public/tags/算法/index.html","hash":"9fc4128a7a76ac8000c1341c924481c669136fde","modified":1602264339139},{"_id":"public/tags/算法/page/2/index.html","hash":"c9ce3baa1ddf483429f9e95432986bb9ce06e2cf","modified":1602264339139},{"_id":"public/tags/LeetCode/index.html","hash":"117205bf52d561ad364180b3fe0dd65277f35052","modified":1602264339139},{"_id":"public/tags/LeetCode/page/2/index.html","hash":"114dea70dfc3c263f418b342206c95a8411e32f2","modified":1602264339139},{"_id":"public/tags/Rpg-Maker/index.html","hash":"21dc2f276212aa410187c591ad028e1ed4221b4b","modified":1602264339139},{"_id":"public/tags/https/index.html","hash":"7dd13054da354f6f1afd608d692f6bf08581a343","modified":1602264339139},{"_id":"public/tags/image/index.html","hash":"b684ce2c725e18047ec4cdd66b91f1bf9f0da459","modified":1602264339139},{"_id":"public/tags/七牛/index.html","hash":"237e27af11f5426311ae5447efdb32e27c988948","modified":1602264339139},{"_id":"public/tags/图床/index.html","hash":"ead086f995a57f00923f69865c3598d0968cba95","modified":1602264339139},{"_id":"public/tags/vpn/index.html","hash":"df8790152d2c57e5d4cfee3d45029ab023156d0d","modified":1602264339140},{"_id":"public/tags/阿里OSS/index.html","hash":"88a4b36779ddc2ef30314f8fd1d2993565eb090e","modified":1602264339140},{"_id":"public/tags/搬瓦工/index.html","hash":"8d9569e85a330cb8767e5310134f371439504976","modified":1602264339140},{"_id":"public/tags/bandwagonhost/index.html","hash":"7fa8d1d8ed22de9bf2a9f66e130b733ccc78de62","modified":1602264339140},{"_id":"public/tags/Shadowsocks/index.html","hash":"ca453508fb583e5fbfeb4b3c9305802e513c6d30","modified":1602264339140},{"_id":"public/tags/ss/index.html","hash":"21b592dc899cf75a8afdf1bc3452ba4722bc3078","modified":1602264339140},{"_id":"public/tags/python/index.html","hash":"77516a5427911448c39fb408254105ed21d4cab0","modified":1602264339140},{"_id":"public/tags/api/index.html","hash":"d078ebc674cfae5635103b744db2e5a6698e3690","modified":1602264339140},{"_id":"public/tags/爬虫/index.html","hash":"05b905e724f7a096a3cf9f9fb11933e039faf511","modified":1602264339140},{"_id":"public/tags/kotlin/index.html","hash":"a152920263e339f5a02f99467a3e8fa90906a6b8","modified":1602264339140},{"_id":"public/tags/peed-Dial-Plus/index.html","hash":"55870ed2d7af84c9580115b9de99d9873b770e87","modified":1602264339140},{"_id":"public/tags/Earth-View-from-Google-Earth/index.html","hash":"1e9c5a57cea775af57319065e6b7ab3be5d33658","modified":1602264339140},{"_id":"public/tags/Chrome插件/index.html","hash":"ae7eb1fbfd3cecab6a56513d3729e929f7925a77","modified":1602264339140},{"_id":"public/tags/Python/index.html","hash":"bdd034f77b03e2899473ebc780d231a4e953f281","modified":1602264339141},{"_id":"public/tags/贝塞尔曲线/index.html","hash":"050ae1faf4e313925c5ed178548520c6617aa397","modified":1602264339141},{"_id":"public/2020/10/10/写在RobinAlgo上线的前一天/index.html","hash":"ea0fb89642a693340ea1ba27dece739644cb7caa","modified":1602264473532},{"_id":"public/archives/2020/10/index.html","hash":"1f36e33e50db8b8ea5b15fcc2681166039c9968b","modified":1602264339142}],"Category":[{"name":"Android自定义View","_id":"ckg2it5ew001bq7dq482txmua"},{"name":"Hexo","_id":"ckg2it5f6001fq7dqgr17a7nc"},{"name":"android","_id":"ckg2it5f7001hq7dq7fsdv5q6"},{"name":"LeetCode","_id":"ckg2it5f8001lq7dqrxohvkb0"},{"name":"RpgMaker 教程","_id":"ckg2it5fk002fq7dqd1ohof46"},{"name":"https","_id":"ckg2it5fq002vq7dq4nqxcc51"},{"name":"想啥是啥","_id":"ckg2it5fr002xq7dqsfd84yoj"},{"name":"教程","_id":"ckg2it5fs0031q7dqnizegqd9"},{"name":"数据收集","_id":"ckg2it5fs0033q7dqv0wh8q8w"},{"name":"算法","_id":"ckg2it5ft0037q7dqsqlyi36d"},{"name":"Python","_id":"ckg2it5fu0039q7dqr078nyh1"}],"Data":[],"Page":[{"_content":"<html>\n    <head>\n         <meta http-equiv=\"Content-Type\" content=\"text/html\" charset=\"UTF-8\" />\n         <title>公益404</title>\n    </head>\n\n    <body>\n         <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://www.gengzhibo.com\" homePageName=\"回到我的主页\"></script>\n    </body>\n</html>\n","source":"404.html","raw":"<html>\n    <head>\n         <meta http-equiv=\"Content-Type\" content=\"text/html\" charset=\"UTF-8\" />\n         <title>公益404</title>\n    </head>\n\n    <body>\n         <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://www.gengzhibo.com\" homePageName=\"回到我的主页\"></script>\n    </body>\n</html>\n","date":"2020-03-13T09:33:05.447Z","updated":"2020-03-13T09:33:05.447Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ckg2it5c50000q7dqe2qqn3rd","content":"<html>\n    <head><meta name=\"generator\" content=\"Hexo 3.9.0\">\n         <meta http-equiv=\"Content-Type\" content=\"text/html\" charset=\"UTF-8\">\n         <title>公益404</title>\n    </head>\n\n    <body>\n         <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://www.gengzhibo.com\" homepagename=\"回到我的主页\"></script>\n    </body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<html>\n    <head><meta name=\"generator\" content=\"Hexo 3.9.0\">\n         <meta http-equiv=\"Content-Type\" content=\"text/html\" charset=\"UTF-8\">\n         <title>公益404</title>\n    </head>\n\n    <body>\n         <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://www.gengzhibo.com\" homepagename=\"回到我的主页\"></script>\n    </body>\n</html>\n"},{"title":"关于我","date":"2017-02-03T07:44:46.000Z","type":"about","comments":0,"_content":"\n\n既然点开了这里 那就让我多说几句应该也没什么意见吧\n\n一个日常写bug的我 总想要留点东西\n\n兴趣爱好十分的奇怪 写点东西丰富起来就应该能解释了\n\n更多内容还可以点开侧边栏的相关连接\n\n对内容或者有想其他意向的可以通过邮件gengzhibo@gengzhibo.net来联系我\n\n感谢你的支持\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-02-03 15:44:46\ntype: \"about\"\ncomments: false\n---\n\n\n既然点开了这里 那就让我多说几句应该也没什么意见吧\n\n一个日常写bug的我 总想要留点东西\n\n兴趣爱好十分的奇怪 写点东西丰富起来就应该能解释了\n\n更多内容还可以点开侧边栏的相关连接\n\n对内容或者有想其他意向的可以通过邮件gengzhibo@gengzhibo.net来联系我\n\n感谢你的支持\n","updated":"2020-03-13T09:33:05.458Z","path":"about/index.html","layout":"page","_id":"ckg2it5dc0001q7dq6u372y2f","content":"<p>既然点开了这里 那就让我多说几句应该也没什么意见吧</p>\n<p>一个日常写bug的我 总想要留点东西</p>\n<p>兴趣爱好十分的奇怪 写点东西丰富起来就应该能解释了</p>\n<p>更多内容还可以点开侧边栏的相关连接</p>\n<p>对内容或者有想其他意向的可以通过邮件<a href=\"mailto:gengzhibo@gengzhibo.net\" target=\"_blank\" rel=\"noopener\">gengzhibo@gengzhibo.net</a>来联系我</p>\n<p>感谢你的支持</p>\n","site":{"data":{}},"excerpt":"","more":"<p>既然点开了这里 那就让我多说几句应该也没什么意见吧</p>\n<p>一个日常写bug的我 总想要留点东西</p>\n<p>兴趣爱好十分的奇怪 写点东西丰富起来就应该能解释了</p>\n<p>更多内容还可以点开侧边栏的相关连接</p>\n<p>对内容或者有想其他意向的可以通过邮件<a href=\"mailto:gengzhibo@gengzhibo.net\" target=\"_blank\" rel=\"noopener\">gengzhibo@gengzhibo.net</a>来联系我</p>\n<p>感谢你的支持</p>\n"},{"title":"tags","date":"2017-02-03T06:56:44.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-02-03 14:56:44\ntype: \"tags\"\ncomments: false\n---\n","updated":"2020-03-13T09:33:05.459Z","path":"tags/index.html","layout":"page","_id":"ckg2it5dg0003q7dqqq8ekwnf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2017-02-03T06:53:58.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-02-03 14:53:58\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-03-13T09:33:05.459Z","path":"categories/index.html","layout":"page","_id":"ckg2it5dh0005q7dqk90uu31b","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Android自定义View之鲨鱼和小鱼的等待动画","date":"2018-01-13T13:35:05.000Z","_content":"# Android自定义View之鲨鱼和小鱼的等待动画\n\n> 之前在看文章的时候发现了一个gif动画,感觉很有意思,适逢最近学习kotlin,就打算用kotlin在android中实现一次,部分角度及参数设置的比较随意,如有需要可以可随意修改\n\n先看效果图\n\n![效果图](http://upload-images.jianshu.io/upload_images/2191286-9ecd6300ce5bd1e0.jpg?imageMogr2/auto-orient/strip)\n\n  <!-- more -->\n\n部分角度及速率还有优化的空间,不过主要的效果都已经实现出来了\n\n## 设计过程\n因为是个动画,刚看的时候感觉无从下手,仔细分析过后,发现...其实很简单的\n\n首先是一个循环的动画,先要找到某个循环的开始或者结束,我截取的某个循环部分是鲨鱼鳍在右侧,本地左右变化几下,然后向左追逐小鱼到左侧部分.向右的部分,通过将向左的部分x镜像一下就可以得到.\n\n由此可以将整个画面拆成三个部分:\n* 其一是水面的部分,水面以下及水面和鱼接触的部分的留白处理都是在后面鲨鱼和小鱼处进行的,所以最后绘制的是一个水面以下部分的遮挡,这个部分也是一个比较好绘制的部分\n* 其二是鲨鱼鳍的部分, 这个部分难度中等,主要的难度是两个圆找交点的计算过程...如果有需要可以根据代码设计相关参数进行调整\n* 其三是小鱼的部分,这个是画面中最难实现的部分,主要涉及小鱼的绘制(椭圆及三角形),小鱼的水面的接触时水面的留白,小鱼入水的时候溅起的水花\n\n## 代码实现\n### 水面部分\n代码就不放了,因为只是单纯的绘制个线和下部的遮盖,可以看看效果图\n\n水面\n\n![水面](http://upload-images.jianshu.io/upload_images/2191286-703d64776d993640.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n为加遮盖的水面(可以看到水面之下的小鱼)\n![为加遮盖的水面(可以看到水面之下的小鱼)](http://upload-images.jianshu.io/upload_images/2191286-5de343167c7491dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 鲨鱼部分\n\n鲨鱼鳍的主要设计思路就是先绘制两个圆,再根据两个圆的交点决定绘制的圆弧范围,注意\n绘制的时候遮盖下部的水面\n\n\n效果图\n\n![鲨鱼鳍效果图](http://upload-images.jianshu.io/upload_images/2191286-926ce2dbdda98adf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n```java\n//绘制鲨鱼鳍\n//鲨鱼鳍由两个圆弧组成\nprivate fun  drawShark(index: Float, canvas: Canvas) {\n    //初始化画笔相关\n    val p = Paint()\n    p.strokeWidth = 5F\n    p.color = Color.BLACK\n    p.style = Paint.Style.STROKE\n\n    //设置外面鱼鳍的半径\n    val r = 100F\n    //设置偏移量\n    var xofset = -65 //向右为正\n    var yofset = 0 //向下为正\n\n    //绘制外面鱼鳍\n    drawSharkOut(canvas , index , r , xofset , yofset , isRight , p)\n    //绘制内部鱼鳍\n    drawSharkIn(canvas , index , r , xofset , yofset , isRight , p)\n\n    p.color = viewBackgroundColor\n    //将鱼鳍出现的水面部分设置为空\n    canvas.drawLine(index - r - xofset - viewWidth/2, 0F , index +  r + xofset  - viewWidth/2, 0F, p)\n\n    // p.color = Color.BLACK\n    // //绘制前面的小鱼\n    // drawFish(canvas , index , p)\n\n}\n\n//区分鱼鳍的方向绘制外部鱼鳍\nfun  drawSharkOut(canvas: Canvas , index: Float, r: Float, xofset: Int, yofset: Int, directionRight: Boolean, p: Paint) {\n    if (directionRight){\n        val xofset =  xofset - viewWidth/2\n        val rectf = RectF(index - r + xofset, -r + yofset , index + r + xofset , r  + yofset)\n        canvas.drawArc(rectf, -95F , 95F, false, p)\n    }else{\n        val xofset = 30 + xofset - viewWidth/2\n        val rectf = RectF(index + xofset + yofset  ,  -r , index + 2 * r + xofset, r + yofset )\n        canvas.drawArc(rectf, -180F , 95F, false, p)\n    }\n\n\n}\n//区分鱼鳍方向绘制内部鱼鳍\nfun  drawSharkIn(canvas: Canvas , index: Float, r1: Float, xofset: Int, yofset: Int, directionRight: Boolean, p: Paint) {\n    val r = (1.5 * r1).toInt()\n    if (directionRight) {\n        val xofset = (- (r - ( r - r1) * 0.6)).toInt() + xofset - viewWidth/2\n        val rectf = RectF(index - r + xofset, (- r + yofset).toFloat(), index + r + xofset, (+ r + yofset).toFloat())\n        canvas.drawArc(rectf, -42F, 42F, false, p)\n    }else{\n        val xofset = -45 + xofset - viewWidth/2\n        val rectf = RectF(index + r + xofset, (- r + yofset).toFloat(), index + 3 * r + xofset, (+ r + yofset).toFloat())\n        canvas.drawArc(rectf, -180F, 42F, false, p)\n    }\n\n}\n```\n\n\n\n### 小鱼部分\n小鱼部分设计三个部分,鱼身(本体,眼睛,鱼尾),鱼的运动,鱼入水时的水花.\n\n小鱼的运动轨迹可以看出来是一个圆弧,涉及的部分就是要根据鲨鱼鳍的位置调整在运动圆环上的位置,简单的canvas变换就可以做到\n\n鱼身,相对来说比较简单,一个椭圆,一个三角形,一个点就可以完成了,再实现的时候先绘制了一个和背景色相同的填充内部颜色的鱼,用来实现鱼的水面接触的部分留白.\n\n小鱼入水的水花实际上是在鱼的两侧没测画两个圆弧,当小鱼和入水越来越深(canvas的旋转的角度越来越大的时候,同一侧的两个水花之间的间隔也会变大,用来模拟水花的下落)\n\n小鱼还未出水的部分(关闭水面下发的遮盖)\n\n![小鱼还未出水的部分(关闭水面下发的遮盖)](http://upload-images.jianshu.io/upload_images/2191286-b55cda856f8635c0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n小鱼和水面接触的部分(遮盖水面的绘制)\n\n![小鱼和水面接触的部分(遮盖水面的绘制)](http://upload-images.jianshu.io/upload_images/2191286-b9d5cbec25682367.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n小鱼入水时的水花效果\n\n![小鱼入水时的水花效果](http://upload-images.jianshu.io/upload_images/2191286-6b485000adb70e6d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n代码实现\n\n```java\n//绘制前面逃跑的小鱼\nprivate fun  drawFish(canvas: Canvas, index: Float, p: Paint) {\n\n    //设置鱼运动轨迹的圆心\n    var xofsetFish = viewWidth / 5 * 2\n    var yofsetFish = 0F\n    //设置鱼的宽度及高度\n    val widthFish =  20F\n    val heightFish = 12F\n    //设置鱼鳍的宽度及高度\n    val widthFishTail =  20F\n    val heightFishTail = 10F\n\n    //将画布中心移动到鱼轨迹的中心位置\n    canvas.translate(xofsetFish - viewWidth/2 , yofsetFish)\n    //旋转画布旋转到起始角度\n    canvas.rotate(90F)\n    //根据当前的坐标位置计算鱼的偏移量及偏移角度\n    val per = (index - viewWidth / 5 * 2) / (viewWidth / 5 * 2)\n    val degreesi =per * 360  + 10\n    canvas.rotate(degreesi)\n\n\n    //如果当前per小于0.4说明整体在水面下,则不进行绘制\n    if (per > 0.4) {\n\n        xofsetFish = 0F\n        yofsetFish = -viewWidth / 5\n\n        //绘制鱼的身体部分并通过背景颜色填充\n        //通过这种方法来覆盖水面和鱼接触的部分\n        val rectF = RectF(xofsetFish - widthFish, yofsetFish - heightFish, xofsetFish + widthFish, yofsetFish + heightFish)\n        p.color = viewBackgroundColor\n        p.style = Paint.Style.FILL\n        canvas.drawArc(rectF, 0F, 360F, true, p)\n\n        //绘制鱼的身体部分\n        p.color = Color.BLACK\n        p.style = Paint.Style.STROKE\n        canvas.drawArc(rectF, 0F, 360F, true, p)\n\n        //绘制鱼尾的部分\n        canvas.drawLine(xofsetFish + widthFish, yofsetFish, xofsetFish + widthFish + widthFishTail, yofsetFish + heightFishTail, p)\n        canvas.drawLine(xofsetFish + widthFish + widthFishTail, yofsetFish + heightFishTail, xofsetFish + widthFish + widthFishTail, yofsetFish - heightFishTail, p)\n        canvas.drawLine(xofsetFish + widthFish + widthFishTail, yofsetFish - heightFishTail, xofsetFish + widthFish, yofsetFish, p)\n\n        //绘制鱼的眼睛\n        canvas.drawPoint(xofsetFish - widthFish / 3, yofsetFish , p)\n\n\n        //当per在[0.45,0.48]区间中绘制水面的水花\n        if (per <= 0.48&& per >= 0.45){\n\n            val water = 50F\n            val waterR = 30F\n            canvas.translate(0F ,yofsetFish + water)\n            p.color = Color.BLACK\n            p.style = Paint.Style.STROKE\n            val waterRectF = RectF(-waterR , -waterR , waterR , waterR)\n            canvas.drawArc(waterRectF, -90F , 30F , false, p)\n            //计算区间的跨度,设置统一方向下两半水花的分散程度\n            val changeWater =   ( 1 - (per - 0.45) / 0.03) * 45\n            canvas.drawArc(waterRectF, (-60 + changeWater).toFloat(), 30F , false, p)\n\n            canvas.translate(0F , - 2 * water)\n            canvas.drawArc(waterRectF, 90F , -30F , false, p)\n            canvas.drawArc(waterRectF, (90 - changeWater).toFloat(), -30F , false, p)\n        }\n    }\n}\n```\n\n至此这个小动画就可以实现了,具体的代码可以查看[我的github](https://github.com/clwater/AndroidAnimation/tree/master/androidanimation01)\n","source":"_posts/Android自定义View之鲨鱼和小鱼的等待动画.md","raw":"---\ntitle: Android自定义View之鲨鱼和小鱼的等待动画\ndate: 2018-01-13 21:35:05\ntags: [\"android\" , \"view\" , \"自定义\"]\ncategories : \"Android自定义View\"\n---\n# Android自定义View之鲨鱼和小鱼的等待动画\n\n> 之前在看文章的时候发现了一个gif动画,感觉很有意思,适逢最近学习kotlin,就打算用kotlin在android中实现一次,部分角度及参数设置的比较随意,如有需要可以可随意修改\n\n先看效果图\n\n![效果图](http://upload-images.jianshu.io/upload_images/2191286-9ecd6300ce5bd1e0.jpg?imageMogr2/auto-orient/strip)\n\n  <!-- more -->\n\n部分角度及速率还有优化的空间,不过主要的效果都已经实现出来了\n\n## 设计过程\n因为是个动画,刚看的时候感觉无从下手,仔细分析过后,发现...其实很简单的\n\n首先是一个循环的动画,先要找到某个循环的开始或者结束,我截取的某个循环部分是鲨鱼鳍在右侧,本地左右变化几下,然后向左追逐小鱼到左侧部分.向右的部分,通过将向左的部分x镜像一下就可以得到.\n\n由此可以将整个画面拆成三个部分:\n* 其一是水面的部分,水面以下及水面和鱼接触的部分的留白处理都是在后面鲨鱼和小鱼处进行的,所以最后绘制的是一个水面以下部分的遮挡,这个部分也是一个比较好绘制的部分\n* 其二是鲨鱼鳍的部分, 这个部分难度中等,主要的难度是两个圆找交点的计算过程...如果有需要可以根据代码设计相关参数进行调整\n* 其三是小鱼的部分,这个是画面中最难实现的部分,主要涉及小鱼的绘制(椭圆及三角形),小鱼的水面的接触时水面的留白,小鱼入水的时候溅起的水花\n\n## 代码实现\n### 水面部分\n代码就不放了,因为只是单纯的绘制个线和下部的遮盖,可以看看效果图\n\n水面\n\n![水面](http://upload-images.jianshu.io/upload_images/2191286-703d64776d993640.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n为加遮盖的水面(可以看到水面之下的小鱼)\n![为加遮盖的水面(可以看到水面之下的小鱼)](http://upload-images.jianshu.io/upload_images/2191286-5de343167c7491dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 鲨鱼部分\n\n鲨鱼鳍的主要设计思路就是先绘制两个圆,再根据两个圆的交点决定绘制的圆弧范围,注意\n绘制的时候遮盖下部的水面\n\n\n效果图\n\n![鲨鱼鳍效果图](http://upload-images.jianshu.io/upload_images/2191286-926ce2dbdda98adf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n```java\n//绘制鲨鱼鳍\n//鲨鱼鳍由两个圆弧组成\nprivate fun  drawShark(index: Float, canvas: Canvas) {\n    //初始化画笔相关\n    val p = Paint()\n    p.strokeWidth = 5F\n    p.color = Color.BLACK\n    p.style = Paint.Style.STROKE\n\n    //设置外面鱼鳍的半径\n    val r = 100F\n    //设置偏移量\n    var xofset = -65 //向右为正\n    var yofset = 0 //向下为正\n\n    //绘制外面鱼鳍\n    drawSharkOut(canvas , index , r , xofset , yofset , isRight , p)\n    //绘制内部鱼鳍\n    drawSharkIn(canvas , index , r , xofset , yofset , isRight , p)\n\n    p.color = viewBackgroundColor\n    //将鱼鳍出现的水面部分设置为空\n    canvas.drawLine(index - r - xofset - viewWidth/2, 0F , index +  r + xofset  - viewWidth/2, 0F, p)\n\n    // p.color = Color.BLACK\n    // //绘制前面的小鱼\n    // drawFish(canvas , index , p)\n\n}\n\n//区分鱼鳍的方向绘制外部鱼鳍\nfun  drawSharkOut(canvas: Canvas , index: Float, r: Float, xofset: Int, yofset: Int, directionRight: Boolean, p: Paint) {\n    if (directionRight){\n        val xofset =  xofset - viewWidth/2\n        val rectf = RectF(index - r + xofset, -r + yofset , index + r + xofset , r  + yofset)\n        canvas.drawArc(rectf, -95F , 95F, false, p)\n    }else{\n        val xofset = 30 + xofset - viewWidth/2\n        val rectf = RectF(index + xofset + yofset  ,  -r , index + 2 * r + xofset, r + yofset )\n        canvas.drawArc(rectf, -180F , 95F, false, p)\n    }\n\n\n}\n//区分鱼鳍方向绘制内部鱼鳍\nfun  drawSharkIn(canvas: Canvas , index: Float, r1: Float, xofset: Int, yofset: Int, directionRight: Boolean, p: Paint) {\n    val r = (1.5 * r1).toInt()\n    if (directionRight) {\n        val xofset = (- (r - ( r - r1) * 0.6)).toInt() + xofset - viewWidth/2\n        val rectf = RectF(index - r + xofset, (- r + yofset).toFloat(), index + r + xofset, (+ r + yofset).toFloat())\n        canvas.drawArc(rectf, -42F, 42F, false, p)\n    }else{\n        val xofset = -45 + xofset - viewWidth/2\n        val rectf = RectF(index + r + xofset, (- r + yofset).toFloat(), index + 3 * r + xofset, (+ r + yofset).toFloat())\n        canvas.drawArc(rectf, -180F, 42F, false, p)\n    }\n\n}\n```\n\n\n\n### 小鱼部分\n小鱼部分设计三个部分,鱼身(本体,眼睛,鱼尾),鱼的运动,鱼入水时的水花.\n\n小鱼的运动轨迹可以看出来是一个圆弧,涉及的部分就是要根据鲨鱼鳍的位置调整在运动圆环上的位置,简单的canvas变换就可以做到\n\n鱼身,相对来说比较简单,一个椭圆,一个三角形,一个点就可以完成了,再实现的时候先绘制了一个和背景色相同的填充内部颜色的鱼,用来实现鱼的水面接触的部分留白.\n\n小鱼入水的水花实际上是在鱼的两侧没测画两个圆弧,当小鱼和入水越来越深(canvas的旋转的角度越来越大的时候,同一侧的两个水花之间的间隔也会变大,用来模拟水花的下落)\n\n小鱼还未出水的部分(关闭水面下发的遮盖)\n\n![小鱼还未出水的部分(关闭水面下发的遮盖)](http://upload-images.jianshu.io/upload_images/2191286-b55cda856f8635c0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n小鱼和水面接触的部分(遮盖水面的绘制)\n\n![小鱼和水面接触的部分(遮盖水面的绘制)](http://upload-images.jianshu.io/upload_images/2191286-b9d5cbec25682367.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n小鱼入水时的水花效果\n\n![小鱼入水时的水花效果](http://upload-images.jianshu.io/upload_images/2191286-6b485000adb70e6d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n代码实现\n\n```java\n//绘制前面逃跑的小鱼\nprivate fun  drawFish(canvas: Canvas, index: Float, p: Paint) {\n\n    //设置鱼运动轨迹的圆心\n    var xofsetFish = viewWidth / 5 * 2\n    var yofsetFish = 0F\n    //设置鱼的宽度及高度\n    val widthFish =  20F\n    val heightFish = 12F\n    //设置鱼鳍的宽度及高度\n    val widthFishTail =  20F\n    val heightFishTail = 10F\n\n    //将画布中心移动到鱼轨迹的中心位置\n    canvas.translate(xofsetFish - viewWidth/2 , yofsetFish)\n    //旋转画布旋转到起始角度\n    canvas.rotate(90F)\n    //根据当前的坐标位置计算鱼的偏移量及偏移角度\n    val per = (index - viewWidth / 5 * 2) / (viewWidth / 5 * 2)\n    val degreesi =per * 360  + 10\n    canvas.rotate(degreesi)\n\n\n    //如果当前per小于0.4说明整体在水面下,则不进行绘制\n    if (per > 0.4) {\n\n        xofsetFish = 0F\n        yofsetFish = -viewWidth / 5\n\n        //绘制鱼的身体部分并通过背景颜色填充\n        //通过这种方法来覆盖水面和鱼接触的部分\n        val rectF = RectF(xofsetFish - widthFish, yofsetFish - heightFish, xofsetFish + widthFish, yofsetFish + heightFish)\n        p.color = viewBackgroundColor\n        p.style = Paint.Style.FILL\n        canvas.drawArc(rectF, 0F, 360F, true, p)\n\n        //绘制鱼的身体部分\n        p.color = Color.BLACK\n        p.style = Paint.Style.STROKE\n        canvas.drawArc(rectF, 0F, 360F, true, p)\n\n        //绘制鱼尾的部分\n        canvas.drawLine(xofsetFish + widthFish, yofsetFish, xofsetFish + widthFish + widthFishTail, yofsetFish + heightFishTail, p)\n        canvas.drawLine(xofsetFish + widthFish + widthFishTail, yofsetFish + heightFishTail, xofsetFish + widthFish + widthFishTail, yofsetFish - heightFishTail, p)\n        canvas.drawLine(xofsetFish + widthFish + widthFishTail, yofsetFish - heightFishTail, xofsetFish + widthFish, yofsetFish, p)\n\n        //绘制鱼的眼睛\n        canvas.drawPoint(xofsetFish - widthFish / 3, yofsetFish , p)\n\n\n        //当per在[0.45,0.48]区间中绘制水面的水花\n        if (per <= 0.48&& per >= 0.45){\n\n            val water = 50F\n            val waterR = 30F\n            canvas.translate(0F ,yofsetFish + water)\n            p.color = Color.BLACK\n            p.style = Paint.Style.STROKE\n            val waterRectF = RectF(-waterR , -waterR , waterR , waterR)\n            canvas.drawArc(waterRectF, -90F , 30F , false, p)\n            //计算区间的跨度,设置统一方向下两半水花的分散程度\n            val changeWater =   ( 1 - (per - 0.45) / 0.03) * 45\n            canvas.drawArc(waterRectF, (-60 + changeWater).toFloat(), 30F , false, p)\n\n            canvas.translate(0F , - 2 * water)\n            canvas.drawArc(waterRectF, 90F , -30F , false, p)\n            canvas.drawArc(waterRectF, (90 - changeWater).toFloat(), -30F , false, p)\n        }\n    }\n}\n```\n\n至此这个小动画就可以实现了,具体的代码可以查看[我的github](https://github.com/clwater/AndroidAnimation/tree/master/androidanimation01)\n","slug":"Android自定义View之鲨鱼和小鱼的等待动画","published":1,"updated":"2020-03-13T09:33:05.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dd0002q7dqm2vbo6ox","content":"<h1 id=\"Android自定义View之鲨鱼和小鱼的等待动画\"><a href=\"#Android自定义View之鲨鱼和小鱼的等待动画\" class=\"headerlink\" title=\"Android自定义View之鲨鱼和小鱼的等待动画\"></a>Android自定义View之鲨鱼和小鱼的等待动画</h1><blockquote>\n<p>之前在看文章的时候发现了一个gif动画,感觉很有意思,适逢最近学习kotlin,就打算用kotlin在android中实现一次,部分角度及参数设置的比较随意,如有需要可以可随意修改</p>\n</blockquote>\n<p>先看效果图</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-9ecd6300ce5bd1e0.jpg?imageMogr2/auto-orient/strip\" alt=\"效果图\"></p>\n  <a id=\"more\"></a>\n<p>部分角度及速率还有优化的空间,不过主要的效果都已经实现出来了</p>\n<h2 id=\"设计过程\"><a href=\"#设计过程\" class=\"headerlink\" title=\"设计过程\"></a>设计过程</h2><p>因为是个动画,刚看的时候感觉无从下手,仔细分析过后,发现…其实很简单的</p>\n<p>首先是一个循环的动画,先要找到某个循环的开始或者结束,我截取的某个循环部分是鲨鱼鳍在右侧,本地左右变化几下,然后向左追逐小鱼到左侧部分.向右的部分,通过将向左的部分x镜像一下就可以得到.</p>\n<p>由此可以将整个画面拆成三个部分:</p>\n<ul>\n<li>其一是水面的部分,水面以下及水面和鱼接触的部分的留白处理都是在后面鲨鱼和小鱼处进行的,所以最后绘制的是一个水面以下部分的遮挡,这个部分也是一个比较好绘制的部分</li>\n<li>其二是鲨鱼鳍的部分, 这个部分难度中等,主要的难度是两个圆找交点的计算过程…如果有需要可以根据代码设计相关参数进行调整</li>\n<li>其三是小鱼的部分,这个是画面中最难实现的部分,主要涉及小鱼的绘制(椭圆及三角形),小鱼的水面的接触时水面的留白,小鱼入水的时候溅起的水花</li>\n</ul>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"水面部分\"><a href=\"#水面部分\" class=\"headerlink\" title=\"水面部分\"></a>水面部分</h3><p>代码就不放了,因为只是单纯的绘制个线和下部的遮盖,可以看看效果图</p>\n<p>水面</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-703d64776d993640.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"水面\"></p>\n<p>为加遮盖的水面(可以看到水面之下的小鱼)<br><img src=\"http://upload-images.jianshu.io/upload_images/2191286-5de343167c7491dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"为加遮盖的水面(可以看到水面之下的小鱼)\"></p>\n<h3 id=\"鲨鱼部分\"><a href=\"#鲨鱼部分\" class=\"headerlink\" title=\"鲨鱼部分\"></a>鲨鱼部分</h3><p>鲨鱼鳍的主要设计思路就是先绘制两个圆,再根据两个圆的交点决定绘制的圆弧范围,注意<br>绘制的时候遮盖下部的水面</p>\n<p>效果图</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-926ce2dbdda98adf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"鲨鱼鳍效果图\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//绘制鲨鱼鳍</span></span><br><span class=\"line\"><span class=\"comment\">//鲨鱼鳍由两个圆弧组成</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun  <span class=\"title\">drawShark</span><span class=\"params\">(index: Float, canvas: Canvas)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化画笔相关</span></span><br><span class=\"line\">    val p = Paint()</span><br><span class=\"line\">    p.strokeWidth = <span class=\"number\">5F</span></span><br><span class=\"line\">    p.color = Color.BLACK</span><br><span class=\"line\">    p.style = Paint.Style.STROKE</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置外面鱼鳍的半径</span></span><br><span class=\"line\">    val r = <span class=\"number\">100F</span></span><br><span class=\"line\">    <span class=\"comment\">//设置偏移量</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xofset = -<span class=\"number\">65</span> <span class=\"comment\">//向右为正</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> yofset = <span class=\"number\">0</span> <span class=\"comment\">//向下为正</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制外面鱼鳍</span></span><br><span class=\"line\">    drawSharkOut(canvas , index , r , xofset , yofset , isRight , p)</span><br><span class=\"line\">    <span class=\"comment\">//绘制内部鱼鳍</span></span><br><span class=\"line\">    drawSharkIn(canvas , index , r , xofset , yofset , isRight , p)</span><br><span class=\"line\"></span><br><span class=\"line\">    p.color = viewBackgroundColor</span><br><span class=\"line\">    <span class=\"comment\">//将鱼鳍出现的水面部分设置为空</span></span><br><span class=\"line\">    canvas.drawLine(index - r - xofset - viewWidth/<span class=\"number\">2</span>, <span class=\"number\">0F</span> , index +  r + xofset  - viewWidth/<span class=\"number\">2</span>, <span class=\"number\">0F</span>, p)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// p.color = Color.BLACK</span></span><br><span class=\"line\">    <span class=\"comment\">// //绘制前面的小鱼</span></span><br><span class=\"line\">    <span class=\"comment\">// drawFish(canvas , index , p)</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//区分鱼鳍的方向绘制外部鱼鳍</span></span><br><span class=\"line\"><span class=\"function\">fun  <span class=\"title\">drawSharkOut</span><span class=\"params\">(canvas: Canvas , index: Float, r: Float, xofset: Int, yofset: Int, directionRight: Boolean, p: Paint)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (directionRight)&#123;</span><br><span class=\"line\">        val xofset =  xofset - viewWidth/<span class=\"number\">2</span></span><br><span class=\"line\">        val rectf = RectF(index - r + xofset, -r + yofset , index + r + xofset , r  + yofset)</span><br><span class=\"line\">        canvas.drawArc(rectf, -<span class=\"number\">95F</span> , <span class=\"number\">95F</span>, <span class=\"keyword\">false</span>, p)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        val xofset = <span class=\"number\">30</span> + xofset - viewWidth/<span class=\"number\">2</span></span><br><span class=\"line\">        val rectf = RectF(index + xofset + yofset  ,  -r , index + <span class=\"number\">2</span> * r + xofset, r + yofset )</span><br><span class=\"line\">        canvas.drawArc(rectf, -<span class=\"number\">180F</span> , <span class=\"number\">95F</span>, <span class=\"keyword\">false</span>, p)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//区分鱼鳍方向绘制内部鱼鳍</span></span><br><span class=\"line\"><span class=\"function\">fun  <span class=\"title\">drawSharkIn</span><span class=\"params\">(canvas: Canvas , index: Float, r1: Float, xofset: Int, yofset: Int, directionRight: Boolean, p: Paint)</span> </span>&#123;</span><br><span class=\"line\">    val r = (<span class=\"number\">1.5</span> * r1).toInt()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (directionRight) &#123;</span><br><span class=\"line\">        val xofset = (- (r - ( r - r1) * <span class=\"number\">0.6</span>)).toInt() + xofset - viewWidth/<span class=\"number\">2</span></span><br><span class=\"line\">        val rectf = RectF(index - r + xofset, (- r + yofset).toFloat(), index + r + xofset, (+ r + yofset).toFloat())</span><br><span class=\"line\">        canvas.drawArc(rectf, -<span class=\"number\">42F</span>, <span class=\"number\">42F</span>, <span class=\"keyword\">false</span>, p)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        val xofset = -<span class=\"number\">45</span> + xofset - viewWidth/<span class=\"number\">2</span></span><br><span class=\"line\">        val rectf = RectF(index + r + xofset, (- r + yofset).toFloat(), index + <span class=\"number\">3</span> * r + xofset, (+ r + yofset).toFloat())</span><br><span class=\"line\">        canvas.drawArc(rectf, -<span class=\"number\">180F</span>, <span class=\"number\">42F</span>, <span class=\"keyword\">false</span>, p)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"小鱼部分\"><a href=\"#小鱼部分\" class=\"headerlink\" title=\"小鱼部分\"></a>小鱼部分</h3><p>小鱼部分设计三个部分,鱼身(本体,眼睛,鱼尾),鱼的运动,鱼入水时的水花.</p>\n<p>小鱼的运动轨迹可以看出来是一个圆弧,涉及的部分就是要根据鲨鱼鳍的位置调整在运动圆环上的位置,简单的canvas变换就可以做到</p>\n<p>鱼身,相对来说比较简单,一个椭圆,一个三角形,一个点就可以完成了,再实现的时候先绘制了一个和背景色相同的填充内部颜色的鱼,用来实现鱼的水面接触的部分留白.</p>\n<p>小鱼入水的水花实际上是在鱼的两侧没测画两个圆弧,当小鱼和入水越来越深(canvas的旋转的角度越来越大的时候,同一侧的两个水花之间的间隔也会变大,用来模拟水花的下落)</p>\n<p>小鱼还未出水的部分(关闭水面下发的遮盖)</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-b55cda856f8635c0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"小鱼还未出水的部分(关闭水面下发的遮盖)\"></p>\n<p>小鱼和水面接触的部分(遮盖水面的绘制)</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-b9d5cbec25682367.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"小鱼和水面接触的部分(遮盖水面的绘制)\"></p>\n<p>小鱼入水时的水花效果</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-6b485000adb70e6d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"小鱼入水时的水花效果\"></p>\n<p>代码实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//绘制前面逃跑的小鱼</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun  <span class=\"title\">drawFish</span><span class=\"params\">(canvas: Canvas, index: Float, p: Paint)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置鱼运动轨迹的圆心</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xofsetFish = viewWidth / <span class=\"number\">5</span> * <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> yofsetFish = <span class=\"number\">0F</span></span><br><span class=\"line\">    <span class=\"comment\">//设置鱼的宽度及高度</span></span><br><span class=\"line\">    val widthFish =  <span class=\"number\">20F</span></span><br><span class=\"line\">    val heightFish = <span class=\"number\">12F</span></span><br><span class=\"line\">    <span class=\"comment\">//设置鱼鳍的宽度及高度</span></span><br><span class=\"line\">    val widthFishTail =  <span class=\"number\">20F</span></span><br><span class=\"line\">    val heightFishTail = <span class=\"number\">10F</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将画布中心移动到鱼轨迹的中心位置</span></span><br><span class=\"line\">    canvas.translate(xofsetFish - viewWidth/<span class=\"number\">2</span> , yofsetFish)</span><br><span class=\"line\">    <span class=\"comment\">//旋转画布旋转到起始角度</span></span><br><span class=\"line\">    canvas.rotate(<span class=\"number\">90F</span>)</span><br><span class=\"line\">    <span class=\"comment\">//根据当前的坐标位置计算鱼的偏移量及偏移角度</span></span><br><span class=\"line\">    val per = (index - viewWidth / <span class=\"number\">5</span> * <span class=\"number\">2</span>) / (viewWidth / <span class=\"number\">5</span> * <span class=\"number\">2</span>)</span><br><span class=\"line\">    val degreesi =per * <span class=\"number\">360</span>  + <span class=\"number\">10</span></span><br><span class=\"line\">    canvas.rotate(degreesi)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果当前per小于0.4说明整体在水面下,则不进行绘制</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (per &gt; <span class=\"number\">0.4</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        xofsetFish = <span class=\"number\">0F</span></span><br><span class=\"line\">        yofsetFish = -viewWidth / <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//绘制鱼的身体部分并通过背景颜色填充</span></span><br><span class=\"line\">        <span class=\"comment\">//通过这种方法来覆盖水面和鱼接触的部分</span></span><br><span class=\"line\">        val rectF = RectF(xofsetFish - widthFish, yofsetFish - heightFish, xofsetFish + widthFish, yofsetFish + heightFish)</span><br><span class=\"line\">        p.color = viewBackgroundColor</span><br><span class=\"line\">        p.style = Paint.Style.FILL</span><br><span class=\"line\">        canvas.drawArc(rectF, <span class=\"number\">0F</span>, <span class=\"number\">360F</span>, <span class=\"keyword\">true</span>, p)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//绘制鱼的身体部分</span></span><br><span class=\"line\">        p.color = Color.BLACK</span><br><span class=\"line\">        p.style = Paint.Style.STROKE</span><br><span class=\"line\">        canvas.drawArc(rectF, <span class=\"number\">0F</span>, <span class=\"number\">360F</span>, <span class=\"keyword\">true</span>, p)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//绘制鱼尾的部分</span></span><br><span class=\"line\">        canvas.drawLine(xofsetFish + widthFish, yofsetFish, xofsetFish + widthFish + widthFishTail, yofsetFish + heightFishTail, p)</span><br><span class=\"line\">        canvas.drawLine(xofsetFish + widthFish + widthFishTail, yofsetFish + heightFishTail, xofsetFish + widthFish + widthFishTail, yofsetFish - heightFishTail, p)</span><br><span class=\"line\">        canvas.drawLine(xofsetFish + widthFish + widthFishTail, yofsetFish - heightFishTail, xofsetFish + widthFish, yofsetFish, p)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//绘制鱼的眼睛</span></span><br><span class=\"line\">        canvas.drawPoint(xofsetFish - widthFish / <span class=\"number\">3</span>, yofsetFish , p)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//当per在[0.45,0.48]区间中绘制水面的水花</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (per &lt;= <span class=\"number\">0.48</span>&amp;&amp; per &gt;= <span class=\"number\">0.45</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            val water = <span class=\"number\">50F</span></span><br><span class=\"line\">            val waterR = <span class=\"number\">30F</span></span><br><span class=\"line\">            canvas.translate(<span class=\"number\">0F</span> ,yofsetFish + water)</span><br><span class=\"line\">            p.color = Color.BLACK</span><br><span class=\"line\">            p.style = Paint.Style.STROKE</span><br><span class=\"line\">            val waterRectF = RectF(-waterR , -waterR , waterR , waterR)</span><br><span class=\"line\">            canvas.drawArc(waterRectF, -<span class=\"number\">90F</span> , <span class=\"number\">30F</span> , <span class=\"keyword\">false</span>, p)</span><br><span class=\"line\">            <span class=\"comment\">//计算区间的跨度,设置统一方向下两半水花的分散程度</span></span><br><span class=\"line\">            val changeWater =   ( <span class=\"number\">1</span> - (per - <span class=\"number\">0.45</span>) / <span class=\"number\">0.03</span>) * <span class=\"number\">45</span></span><br><span class=\"line\">            canvas.drawArc(waterRectF, (-<span class=\"number\">60</span> + changeWater).toFloat(), <span class=\"number\">30F</span> , <span class=\"keyword\">false</span>, p)</span><br><span class=\"line\"></span><br><span class=\"line\">            canvas.translate(<span class=\"number\">0F</span> , - <span class=\"number\">2</span> * water)</span><br><span class=\"line\">            canvas.drawArc(waterRectF, <span class=\"number\">90F</span> , -<span class=\"number\">30F</span> , <span class=\"keyword\">false</span>, p)</span><br><span class=\"line\">            canvas.drawArc(waterRectF, (<span class=\"number\">90</span> - changeWater).toFloat(), -<span class=\"number\">30F</span> , <span class=\"keyword\">false</span>, p)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此这个小动画就可以实现了,具体的代码可以查看<a href=\"https://github.com/clwater/AndroidAnimation/tree/master/androidanimation01\" target=\"_blank\" rel=\"noopener\">我的github</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Android自定义View之鲨鱼和小鱼的等待动画\"><a href=\"#Android自定义View之鲨鱼和小鱼的等待动画\" class=\"headerlink\" title=\"Android自定义View之鲨鱼和小鱼的等待动画\"></a>Android自定义View之鲨鱼和小鱼的等待动画</h1><blockquote>\n<p>之前在看文章的时候发现了一个gif动画,感觉很有意思,适逢最近学习kotlin,就打算用kotlin在android中实现一次,部分角度及参数设置的比较随意,如有需要可以可随意修改</p>\n</blockquote>\n<p>先看效果图</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-9ecd6300ce5bd1e0.jpg?imageMogr2/auto-orient/strip\" alt=\"效果图\"></p>","more":"<p>部分角度及速率还有优化的空间,不过主要的效果都已经实现出来了</p>\n<h2 id=\"设计过程\"><a href=\"#设计过程\" class=\"headerlink\" title=\"设计过程\"></a>设计过程</h2><p>因为是个动画,刚看的时候感觉无从下手,仔细分析过后,发现…其实很简单的</p>\n<p>首先是一个循环的动画,先要找到某个循环的开始或者结束,我截取的某个循环部分是鲨鱼鳍在右侧,本地左右变化几下,然后向左追逐小鱼到左侧部分.向右的部分,通过将向左的部分x镜像一下就可以得到.</p>\n<p>由此可以将整个画面拆成三个部分:</p>\n<ul>\n<li>其一是水面的部分,水面以下及水面和鱼接触的部分的留白处理都是在后面鲨鱼和小鱼处进行的,所以最后绘制的是一个水面以下部分的遮挡,这个部分也是一个比较好绘制的部分</li>\n<li>其二是鲨鱼鳍的部分, 这个部分难度中等,主要的难度是两个圆找交点的计算过程…如果有需要可以根据代码设计相关参数进行调整</li>\n<li>其三是小鱼的部分,这个是画面中最难实现的部分,主要涉及小鱼的绘制(椭圆及三角形),小鱼的水面的接触时水面的留白,小鱼入水的时候溅起的水花</li>\n</ul>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"水面部分\"><a href=\"#水面部分\" class=\"headerlink\" title=\"水面部分\"></a>水面部分</h3><p>代码就不放了,因为只是单纯的绘制个线和下部的遮盖,可以看看效果图</p>\n<p>水面</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-703d64776d993640.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"水面\"></p>\n<p>为加遮盖的水面(可以看到水面之下的小鱼)<br><img src=\"http://upload-images.jianshu.io/upload_images/2191286-5de343167c7491dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"为加遮盖的水面(可以看到水面之下的小鱼)\"></p>\n<h3 id=\"鲨鱼部分\"><a href=\"#鲨鱼部分\" class=\"headerlink\" title=\"鲨鱼部分\"></a>鲨鱼部分</h3><p>鲨鱼鳍的主要设计思路就是先绘制两个圆,再根据两个圆的交点决定绘制的圆弧范围,注意<br>绘制的时候遮盖下部的水面</p>\n<p>效果图</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-926ce2dbdda98adf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"鲨鱼鳍效果图\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//绘制鲨鱼鳍</span></span><br><span class=\"line\"><span class=\"comment\">//鲨鱼鳍由两个圆弧组成</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun  <span class=\"title\">drawShark</span><span class=\"params\">(index: Float, canvas: Canvas)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化画笔相关</span></span><br><span class=\"line\">    val p = Paint()</span><br><span class=\"line\">    p.strokeWidth = <span class=\"number\">5F</span></span><br><span class=\"line\">    p.color = Color.BLACK</span><br><span class=\"line\">    p.style = Paint.Style.STROKE</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置外面鱼鳍的半径</span></span><br><span class=\"line\">    val r = <span class=\"number\">100F</span></span><br><span class=\"line\">    <span class=\"comment\">//设置偏移量</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xofset = -<span class=\"number\">65</span> <span class=\"comment\">//向右为正</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> yofset = <span class=\"number\">0</span> <span class=\"comment\">//向下为正</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制外面鱼鳍</span></span><br><span class=\"line\">    drawSharkOut(canvas , index , r , xofset , yofset , isRight , p)</span><br><span class=\"line\">    <span class=\"comment\">//绘制内部鱼鳍</span></span><br><span class=\"line\">    drawSharkIn(canvas , index , r , xofset , yofset , isRight , p)</span><br><span class=\"line\"></span><br><span class=\"line\">    p.color = viewBackgroundColor</span><br><span class=\"line\">    <span class=\"comment\">//将鱼鳍出现的水面部分设置为空</span></span><br><span class=\"line\">    canvas.drawLine(index - r - xofset - viewWidth/<span class=\"number\">2</span>, <span class=\"number\">0F</span> , index +  r + xofset  - viewWidth/<span class=\"number\">2</span>, <span class=\"number\">0F</span>, p)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// p.color = Color.BLACK</span></span><br><span class=\"line\">    <span class=\"comment\">// //绘制前面的小鱼</span></span><br><span class=\"line\">    <span class=\"comment\">// drawFish(canvas , index , p)</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//区分鱼鳍的方向绘制外部鱼鳍</span></span><br><span class=\"line\"><span class=\"function\">fun  <span class=\"title\">drawSharkOut</span><span class=\"params\">(canvas: Canvas , index: Float, r: Float, xofset: Int, yofset: Int, directionRight: Boolean, p: Paint)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (directionRight)&#123;</span><br><span class=\"line\">        val xofset =  xofset - viewWidth/<span class=\"number\">2</span></span><br><span class=\"line\">        val rectf = RectF(index - r + xofset, -r + yofset , index + r + xofset , r  + yofset)</span><br><span class=\"line\">        canvas.drawArc(rectf, -<span class=\"number\">95F</span> , <span class=\"number\">95F</span>, <span class=\"keyword\">false</span>, p)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        val xofset = <span class=\"number\">30</span> + xofset - viewWidth/<span class=\"number\">2</span></span><br><span class=\"line\">        val rectf = RectF(index + xofset + yofset  ,  -r , index + <span class=\"number\">2</span> * r + xofset, r + yofset )</span><br><span class=\"line\">        canvas.drawArc(rectf, -<span class=\"number\">180F</span> , <span class=\"number\">95F</span>, <span class=\"keyword\">false</span>, p)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//区分鱼鳍方向绘制内部鱼鳍</span></span><br><span class=\"line\"><span class=\"function\">fun  <span class=\"title\">drawSharkIn</span><span class=\"params\">(canvas: Canvas , index: Float, r1: Float, xofset: Int, yofset: Int, directionRight: Boolean, p: Paint)</span> </span>&#123;</span><br><span class=\"line\">    val r = (<span class=\"number\">1.5</span> * r1).toInt()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (directionRight) &#123;</span><br><span class=\"line\">        val xofset = (- (r - ( r - r1) * <span class=\"number\">0.6</span>)).toInt() + xofset - viewWidth/<span class=\"number\">2</span></span><br><span class=\"line\">        val rectf = RectF(index - r + xofset, (- r + yofset).toFloat(), index + r + xofset, (+ r + yofset).toFloat())</span><br><span class=\"line\">        canvas.drawArc(rectf, -<span class=\"number\">42F</span>, <span class=\"number\">42F</span>, <span class=\"keyword\">false</span>, p)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        val xofset = -<span class=\"number\">45</span> + xofset - viewWidth/<span class=\"number\">2</span></span><br><span class=\"line\">        val rectf = RectF(index + r + xofset, (- r + yofset).toFloat(), index + <span class=\"number\">3</span> * r + xofset, (+ r + yofset).toFloat())</span><br><span class=\"line\">        canvas.drawArc(rectf, -<span class=\"number\">180F</span>, <span class=\"number\">42F</span>, <span class=\"keyword\">false</span>, p)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"小鱼部分\"><a href=\"#小鱼部分\" class=\"headerlink\" title=\"小鱼部分\"></a>小鱼部分</h3><p>小鱼部分设计三个部分,鱼身(本体,眼睛,鱼尾),鱼的运动,鱼入水时的水花.</p>\n<p>小鱼的运动轨迹可以看出来是一个圆弧,涉及的部分就是要根据鲨鱼鳍的位置调整在运动圆环上的位置,简单的canvas变换就可以做到</p>\n<p>鱼身,相对来说比较简单,一个椭圆,一个三角形,一个点就可以完成了,再实现的时候先绘制了一个和背景色相同的填充内部颜色的鱼,用来实现鱼的水面接触的部分留白.</p>\n<p>小鱼入水的水花实际上是在鱼的两侧没测画两个圆弧,当小鱼和入水越来越深(canvas的旋转的角度越来越大的时候,同一侧的两个水花之间的间隔也会变大,用来模拟水花的下落)</p>\n<p>小鱼还未出水的部分(关闭水面下发的遮盖)</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-b55cda856f8635c0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"小鱼还未出水的部分(关闭水面下发的遮盖)\"></p>\n<p>小鱼和水面接触的部分(遮盖水面的绘制)</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-b9d5cbec25682367.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"小鱼和水面接触的部分(遮盖水面的绘制)\"></p>\n<p>小鱼入水时的水花效果</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-6b485000adb70e6d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"小鱼入水时的水花效果\"></p>\n<p>代码实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//绘制前面逃跑的小鱼</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun  <span class=\"title\">drawFish</span><span class=\"params\">(canvas: Canvas, index: Float, p: Paint)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置鱼运动轨迹的圆心</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xofsetFish = viewWidth / <span class=\"number\">5</span> * <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> yofsetFish = <span class=\"number\">0F</span></span><br><span class=\"line\">    <span class=\"comment\">//设置鱼的宽度及高度</span></span><br><span class=\"line\">    val widthFish =  <span class=\"number\">20F</span></span><br><span class=\"line\">    val heightFish = <span class=\"number\">12F</span></span><br><span class=\"line\">    <span class=\"comment\">//设置鱼鳍的宽度及高度</span></span><br><span class=\"line\">    val widthFishTail =  <span class=\"number\">20F</span></span><br><span class=\"line\">    val heightFishTail = <span class=\"number\">10F</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将画布中心移动到鱼轨迹的中心位置</span></span><br><span class=\"line\">    canvas.translate(xofsetFish - viewWidth/<span class=\"number\">2</span> , yofsetFish)</span><br><span class=\"line\">    <span class=\"comment\">//旋转画布旋转到起始角度</span></span><br><span class=\"line\">    canvas.rotate(<span class=\"number\">90F</span>)</span><br><span class=\"line\">    <span class=\"comment\">//根据当前的坐标位置计算鱼的偏移量及偏移角度</span></span><br><span class=\"line\">    val per = (index - viewWidth / <span class=\"number\">5</span> * <span class=\"number\">2</span>) / (viewWidth / <span class=\"number\">5</span> * <span class=\"number\">2</span>)</span><br><span class=\"line\">    val degreesi =per * <span class=\"number\">360</span>  + <span class=\"number\">10</span></span><br><span class=\"line\">    canvas.rotate(degreesi)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果当前per小于0.4说明整体在水面下,则不进行绘制</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (per &gt; <span class=\"number\">0.4</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        xofsetFish = <span class=\"number\">0F</span></span><br><span class=\"line\">        yofsetFish = -viewWidth / <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//绘制鱼的身体部分并通过背景颜色填充</span></span><br><span class=\"line\">        <span class=\"comment\">//通过这种方法来覆盖水面和鱼接触的部分</span></span><br><span class=\"line\">        val rectF = RectF(xofsetFish - widthFish, yofsetFish - heightFish, xofsetFish + widthFish, yofsetFish + heightFish)</span><br><span class=\"line\">        p.color = viewBackgroundColor</span><br><span class=\"line\">        p.style = Paint.Style.FILL</span><br><span class=\"line\">        canvas.drawArc(rectF, <span class=\"number\">0F</span>, <span class=\"number\">360F</span>, <span class=\"keyword\">true</span>, p)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//绘制鱼的身体部分</span></span><br><span class=\"line\">        p.color = Color.BLACK</span><br><span class=\"line\">        p.style = Paint.Style.STROKE</span><br><span class=\"line\">        canvas.drawArc(rectF, <span class=\"number\">0F</span>, <span class=\"number\">360F</span>, <span class=\"keyword\">true</span>, p)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//绘制鱼尾的部分</span></span><br><span class=\"line\">        canvas.drawLine(xofsetFish + widthFish, yofsetFish, xofsetFish + widthFish + widthFishTail, yofsetFish + heightFishTail, p)</span><br><span class=\"line\">        canvas.drawLine(xofsetFish + widthFish + widthFishTail, yofsetFish + heightFishTail, xofsetFish + widthFish + widthFishTail, yofsetFish - heightFishTail, p)</span><br><span class=\"line\">        canvas.drawLine(xofsetFish + widthFish + widthFishTail, yofsetFish - heightFishTail, xofsetFish + widthFish, yofsetFish, p)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//绘制鱼的眼睛</span></span><br><span class=\"line\">        canvas.drawPoint(xofsetFish - widthFish / <span class=\"number\">3</span>, yofsetFish , p)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//当per在[0.45,0.48]区间中绘制水面的水花</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (per &lt;= <span class=\"number\">0.48</span>&amp;&amp; per &gt;= <span class=\"number\">0.45</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            val water = <span class=\"number\">50F</span></span><br><span class=\"line\">            val waterR = <span class=\"number\">30F</span></span><br><span class=\"line\">            canvas.translate(<span class=\"number\">0F</span> ,yofsetFish + water)</span><br><span class=\"line\">            p.color = Color.BLACK</span><br><span class=\"line\">            p.style = Paint.Style.STROKE</span><br><span class=\"line\">            val waterRectF = RectF(-waterR , -waterR , waterR , waterR)</span><br><span class=\"line\">            canvas.drawArc(waterRectF, -<span class=\"number\">90F</span> , <span class=\"number\">30F</span> , <span class=\"keyword\">false</span>, p)</span><br><span class=\"line\">            <span class=\"comment\">//计算区间的跨度,设置统一方向下两半水花的分散程度</span></span><br><span class=\"line\">            val changeWater =   ( <span class=\"number\">1</span> - (per - <span class=\"number\">0.45</span>) / <span class=\"number\">0.03</span>) * <span class=\"number\">45</span></span><br><span class=\"line\">            canvas.drawArc(waterRectF, (-<span class=\"number\">60</span> + changeWater).toFloat(), <span class=\"number\">30F</span> , <span class=\"keyword\">false</span>, p)</span><br><span class=\"line\"></span><br><span class=\"line\">            canvas.translate(<span class=\"number\">0F</span> , - <span class=\"number\">2</span> * water)</span><br><span class=\"line\">            canvas.drawArc(waterRectF, <span class=\"number\">90F</span> , -<span class=\"number\">30F</span> , <span class=\"keyword\">false</span>, p)</span><br><span class=\"line\">            canvas.drawArc(waterRectF, (<span class=\"number\">90</span> - changeWater).toFloat(), -<span class=\"number\">30F</span> , <span class=\"keyword\">false</span>, p)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此这个小动画就可以实现了,具体的代码可以查看<a href=\"https://github.com/clwater/AndroidAnimation/tree/master/androidanimation01\" target=\"_blank\" rel=\"noopener\">我的github</a></p>"},{"title":"Android自定义view之emoji键盘","date":"2018-05-05T06:52:07.000Z","_content":"\n\n> 主要还是最近做了一个emoji键盘的需求,感觉可以简单封装一下顺便整理下emoji相关的知识\n\n## Android中的 emoji\n\n有关Android中emoji的文章有很多了,我就不简单罗列相关内容了,在这记录一下开发过程中遇到的一些坑...\n\n1. 首先是TextView首次绘制中emoji的颜色会偏浅,官方的demo中依然存在这种问题...\n\n  ![官方demo](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/6609105.jpg)\n\n  <!-- more -->\n\n  (详情可以参考https://github.com/googlesamples/android-EmojiCompat) ,上图中可以看到其中两个Textview的emoji颜色偏浅,但是EditView中就不会出现这个问题...\n\n  解决方法的话暂时有两种,一是针对不能引入EmojiCompat的项目,可以考虑针对textview多次绘制,但是对此Textview设置background的时候会失效...\n  二是可以针对可以引入EmojiCompat的项目,但是简单的直接设置EmojiCompat仍然不好用...通过自定义View即demo中的Custom TextView即刻解决这个问题\n\n2. 原生emoji的适配问题\n\n  不同版本的系统中适配的emoji是不同的,一般来说高版本兼容低版本的emoji.\n\n  另一个就是国产rom的问题,部分rom中会将android的emoji图标替换成ios的emoji.会给人一种也没什么差别的错觉...但是,好歹都适配了啊,部分图标还是android的emoji风格,就很迷\n\n3. emoji的大小问题\n\n  emoji的大小...是跟随TextView的textSize,所以要想调整emoji的大小,需要更改textView的textSize值.\n\n4. EditText的删除问题\n\n  键盘嘛,需要对editText进行操作,其中就包括了删除的操作,然而,emoji有的占两个字节,有的占一个自己.所以再删除的时候需要验证内容再删除对应的字节\n\n简单来说,及时更新设备或者开发工具的话emoji展示并不是什么问题,愿望是美好的,现实却总是不进如人意.(只有我觉得Android的果冻人emoji看着还可以么...)\n\n## Emoji键盘\n先展示效果图,\n\n![完成效果图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/96101267.jpg)\n\n一个emoji键盘的主要功能都实现了,包括了emoji的输入及删除,多个emoji标签页之间的切换及底部滑动指示器的更改.需要展示底部标签页超过屏幕范围的效果,所以展示的部分数据是重复的.\n\n### 设计过程\n  最初的设计中是没有底部多个emoji标签页的,感觉功能有点单薄,所以后期加入了底部过个item切换的功能\n\n  整个View设计如下,\n\n  ![整个View设计](http://ooymoxvz4.bkt.clouddn.com/18-5-4/47317517.jpg)\n\n  1. emoji展示与选择区域: 主要是用于展示emoji的内容,这里使用了ViewPager,在初始化的时候会对emoji展示列表进行计算,最终填充到ViewPager中.对于整个View来说,在初始化ViewPager的Adapter的时候就将所有的emoji填入,在滑动或者选择底部item的时候会根据初始化中计算好的各个页面的展示信息控制指示器及底部item.\n  2. ViewPager的指示器: 实际上是一个LinearLayout,根据设置展示对应的数量及位置,此处展示的是当前item的相关指示器,当选择新的item或者滑动到新的item后,指示器的数量会进行更新,而当上面的ViewPager滑动却没有切换到新的item的时候只是更新指示器指示的内容.\n  3. emoji标签部分: 使用了一个RecycleView,是因为当标签比较多时候滑动效果和定位展示比较方便.\n\n#### 设计缺陷\n  * 暂只支持emoji选择,不能提供自定义图片输入(感觉更改完了就不只是emoji输入器了,下个就做这个了)\n  * 底部指示器现在更新的过程中是全部移除view再根据新参数设置新view没有动画效果\n  * 底部emoji标签页再当选择的item手动滑动超出屏幕显示外后,再次滑动顶部ViewPager页面,底部item复位动画有点僵,仍有优化的余地\n\n### 代码实现\n  1. emoji展示与选择区域:\n\n  主要是针对顶部ViewPager的Adapter处理\n\n  ![emoji展示与选择区域](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/55341826.jpg)\n\n  2. EditText文本控制\n\n  再将EditText绑定到view中后,对view进行操作后会更改EditText的内容\n\n  ![EditText文本控制](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/245055.jpg)\n\n  需要注意的是再删除的时候是要先验证后两位是否是一个完整emoji,如果是则删除后两个字节,反之则只删除一个字节.\n\n  3. 底部标签页指示器\n\n  简单的一个LinearLayout来展示指示器,没有切换的动画效果,可以优化一波.\n\n  ![底部标签页指示器](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/32648287.jpg)\n\n  4. 底部标签选择器\n\n  通过一个RecycleView来实现的底部标签选择器\n\n  ![底部标签选择器](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/48727751.jpg)\n\n  5. 监听ViewPager滑动及底部标签选择\n\n  添加ViewPager的addOnPageChangeListener方法来监听滑动及底部标签选择的点击回调\n\n  ![监听ViewPager滑动及底部标签选择](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/18227363.jpg)\n\n相关代码可以访问我的[GitHub](https://github.com/clwater/EmojiKeyboard)来获取,欢迎大家start或者提供建议.\n","source":"_posts/Android自定义view之emoji键盘.md","raw":"---\ntitle: Android自定义view之emoji键盘\ndate: 2018-05-05 14:52:07\ntags: [\"android\" , \"view\" , \"自定义\"]\ncategories : \"Android自定义View\"\n---\n\n\n> 主要还是最近做了一个emoji键盘的需求,感觉可以简单封装一下顺便整理下emoji相关的知识\n\n## Android中的 emoji\n\n有关Android中emoji的文章有很多了,我就不简单罗列相关内容了,在这记录一下开发过程中遇到的一些坑...\n\n1. 首先是TextView首次绘制中emoji的颜色会偏浅,官方的demo中依然存在这种问题...\n\n  ![官方demo](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/6609105.jpg)\n\n  <!-- more -->\n\n  (详情可以参考https://github.com/googlesamples/android-EmojiCompat) ,上图中可以看到其中两个Textview的emoji颜色偏浅,但是EditView中就不会出现这个问题...\n\n  解决方法的话暂时有两种,一是针对不能引入EmojiCompat的项目,可以考虑针对textview多次绘制,但是对此Textview设置background的时候会失效...\n  二是可以针对可以引入EmojiCompat的项目,但是简单的直接设置EmojiCompat仍然不好用...通过自定义View即demo中的Custom TextView即刻解决这个问题\n\n2. 原生emoji的适配问题\n\n  不同版本的系统中适配的emoji是不同的,一般来说高版本兼容低版本的emoji.\n\n  另一个就是国产rom的问题,部分rom中会将android的emoji图标替换成ios的emoji.会给人一种也没什么差别的错觉...但是,好歹都适配了啊,部分图标还是android的emoji风格,就很迷\n\n3. emoji的大小问题\n\n  emoji的大小...是跟随TextView的textSize,所以要想调整emoji的大小,需要更改textView的textSize值.\n\n4. EditText的删除问题\n\n  键盘嘛,需要对editText进行操作,其中就包括了删除的操作,然而,emoji有的占两个字节,有的占一个自己.所以再删除的时候需要验证内容再删除对应的字节\n\n简单来说,及时更新设备或者开发工具的话emoji展示并不是什么问题,愿望是美好的,现实却总是不进如人意.(只有我觉得Android的果冻人emoji看着还可以么...)\n\n## Emoji键盘\n先展示效果图,\n\n![完成效果图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/96101267.jpg)\n\n一个emoji键盘的主要功能都实现了,包括了emoji的输入及删除,多个emoji标签页之间的切换及底部滑动指示器的更改.需要展示底部标签页超过屏幕范围的效果,所以展示的部分数据是重复的.\n\n### 设计过程\n  最初的设计中是没有底部多个emoji标签页的,感觉功能有点单薄,所以后期加入了底部过个item切换的功能\n\n  整个View设计如下,\n\n  ![整个View设计](http://ooymoxvz4.bkt.clouddn.com/18-5-4/47317517.jpg)\n\n  1. emoji展示与选择区域: 主要是用于展示emoji的内容,这里使用了ViewPager,在初始化的时候会对emoji展示列表进行计算,最终填充到ViewPager中.对于整个View来说,在初始化ViewPager的Adapter的时候就将所有的emoji填入,在滑动或者选择底部item的时候会根据初始化中计算好的各个页面的展示信息控制指示器及底部item.\n  2. ViewPager的指示器: 实际上是一个LinearLayout,根据设置展示对应的数量及位置,此处展示的是当前item的相关指示器,当选择新的item或者滑动到新的item后,指示器的数量会进行更新,而当上面的ViewPager滑动却没有切换到新的item的时候只是更新指示器指示的内容.\n  3. emoji标签部分: 使用了一个RecycleView,是因为当标签比较多时候滑动效果和定位展示比较方便.\n\n#### 设计缺陷\n  * 暂只支持emoji选择,不能提供自定义图片输入(感觉更改完了就不只是emoji输入器了,下个就做这个了)\n  * 底部指示器现在更新的过程中是全部移除view再根据新参数设置新view没有动画效果\n  * 底部emoji标签页再当选择的item手动滑动超出屏幕显示外后,再次滑动顶部ViewPager页面,底部item复位动画有点僵,仍有优化的余地\n\n### 代码实现\n  1. emoji展示与选择区域:\n\n  主要是针对顶部ViewPager的Adapter处理\n\n  ![emoji展示与选择区域](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/55341826.jpg)\n\n  2. EditText文本控制\n\n  再将EditText绑定到view中后,对view进行操作后会更改EditText的内容\n\n  ![EditText文本控制](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/245055.jpg)\n\n  需要注意的是再删除的时候是要先验证后两位是否是一个完整emoji,如果是则删除后两个字节,反之则只删除一个字节.\n\n  3. 底部标签页指示器\n\n  简单的一个LinearLayout来展示指示器,没有切换的动画效果,可以优化一波.\n\n  ![底部标签页指示器](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/32648287.jpg)\n\n  4. 底部标签选择器\n\n  通过一个RecycleView来实现的底部标签选择器\n\n  ![底部标签选择器](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/48727751.jpg)\n\n  5. 监听ViewPager滑动及底部标签选择\n\n  添加ViewPager的addOnPageChangeListener方法来监听滑动及底部标签选择的点击回调\n\n  ![监听ViewPager滑动及底部标签选择](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/18227363.jpg)\n\n相关代码可以访问我的[GitHub](https://github.com/clwater/EmojiKeyboard)来获取,欢迎大家start或者提供建议.\n","slug":"Android自定义view之emoji键盘","published":1,"updated":"2020-03-13T09:33:05.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dg0004q7dqidpm1cw2","content":"<blockquote>\n<p>主要还是最近做了一个emoji键盘的需求,感觉可以简单封装一下顺便整理下emoji相关的知识</p>\n</blockquote>\n<h2 id=\"Android中的-emoji\"><a href=\"#Android中的-emoji\" class=\"headerlink\" title=\"Android中的 emoji\"></a>Android中的 emoji</h2><p>有关Android中emoji的文章有很多了,我就不简单罗列相关内容了,在这记录一下开发过程中遇到的一些坑…</p>\n<ol>\n<li><p>首先是TextView首次绘制中emoji的颜色会偏浅,官方的demo中依然存在这种问题…</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/6609105.jpg\" alt=\"官方demo\"></p>\n<a id=\"more\"></a>\n<p>(详情可以参考<a href=\"https://github.com/googlesamples/android-EmojiCompat\" target=\"_blank\" rel=\"noopener\">https://github.com/googlesamples/android-EmojiCompat</a>) ,上图中可以看到其中两个Textview的emoji颜色偏浅,但是EditView中就不会出现这个问题…</p>\n<p>解决方法的话暂时有两种,一是针对不能引入EmojiCompat的项目,可以考虑针对textview多次绘制,但是对此Textview设置background的时候会失效…<br>二是可以针对可以引入EmojiCompat的项目,但是简单的直接设置EmojiCompat仍然不好用…通过自定义View即demo中的Custom TextView即刻解决这个问题</p>\n</li>\n<li><p>原生emoji的适配问题</p>\n<p>不同版本的系统中适配的emoji是不同的,一般来说高版本兼容低版本的emoji.</p>\n<p>另一个就是国产rom的问题,部分rom中会将android的emoji图标替换成ios的emoji.会给人一种也没什么差别的错觉…但是,好歹都适配了啊,部分图标还是android的emoji风格,就很迷</p>\n</li>\n<li><p>emoji的大小问题</p>\n<p>emoji的大小…是跟随TextView的textSize,所以要想调整emoji的大小,需要更改textView的textSize值.</p>\n</li>\n<li><p>EditText的删除问题</p>\n<p>键盘嘛,需要对editText进行操作,其中就包括了删除的操作,然而,emoji有的占两个字节,有的占一个自己.所以再删除的时候需要验证内容再删除对应的字节</p>\n</li>\n</ol>\n<p>简单来说,及时更新设备或者开发工具的话emoji展示并不是什么问题,愿望是美好的,现实却总是不进如人意.(只有我觉得Android的果冻人emoji看着还可以么…)</p>\n<h2 id=\"Emoji键盘\"><a href=\"#Emoji键盘\" class=\"headerlink\" title=\"Emoji键盘\"></a>Emoji键盘</h2><p>先展示效果图,</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/96101267.jpg\" alt=\"完成效果图\"></p>\n<p>一个emoji键盘的主要功能都实现了,包括了emoji的输入及删除,多个emoji标签页之间的切换及底部滑动指示器的更改.需要展示底部标签页超过屏幕范围的效果,所以展示的部分数据是重复的.</p>\n<h3 id=\"设计过程\"><a href=\"#设计过程\" class=\"headerlink\" title=\"设计过程\"></a>设计过程</h3><p>  最初的设计中是没有底部多个emoji标签页的,感觉功能有点单薄,所以后期加入了底部过个item切换的功能</p>\n<p>  整个View设计如下,</p>\n<p>  <img src=\"http://ooymoxvz4.bkt.clouddn.com/18-5-4/47317517.jpg\" alt=\"整个View设计\"></p>\n<ol>\n<li>emoji展示与选择区域: 主要是用于展示emoji的内容,这里使用了ViewPager,在初始化的时候会对emoji展示列表进行计算,最终填充到ViewPager中.对于整个View来说,在初始化ViewPager的Adapter的时候就将所有的emoji填入,在滑动或者选择底部item的时候会根据初始化中计算好的各个页面的展示信息控制指示器及底部item.</li>\n<li>ViewPager的指示器: 实际上是一个LinearLayout,根据设置展示对应的数量及位置,此处展示的是当前item的相关指示器,当选择新的item或者滑动到新的item后,指示器的数量会进行更新,而当上面的ViewPager滑动却没有切换到新的item的时候只是更新指示器指示的内容.</li>\n<li>emoji标签部分: 使用了一个RecycleView,是因为当标签比较多时候滑动效果和定位展示比较方便.</li>\n</ol>\n<h4 id=\"设计缺陷\"><a href=\"#设计缺陷\" class=\"headerlink\" title=\"设计缺陷\"></a>设计缺陷</h4><ul>\n<li>暂只支持emoji选择,不能提供自定义图片输入(感觉更改完了就不只是emoji输入器了,下个就做这个了)</li>\n<li>底部指示器现在更新的过程中是全部移除view再根据新参数设置新view没有动画效果</li>\n<li>底部emoji标签页再当选择的item手动滑动超出屏幕显示外后,再次滑动顶部ViewPager页面,底部item复位动画有点僵,仍有优化的余地</li>\n</ul>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><ol>\n<li><p>emoji展示与选择区域:</p>\n<p>主要是针对顶部ViewPager的Adapter处理</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/55341826.jpg\" alt=\"emoji展示与选择区域\"></p>\n</li>\n<li><p>EditText文本控制</p>\n<p>再将EditText绑定到view中后,对view进行操作后会更改EditText的内容</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/245055.jpg\" alt=\"EditText文本控制\"></p>\n<p>需要注意的是再删除的时候是要先验证后两位是否是一个完整emoji,如果是则删除后两个字节,反之则只删除一个字节.</p>\n</li>\n<li><p>底部标签页指示器</p>\n<p>简单的一个LinearLayout来展示指示器,没有切换的动画效果,可以优化一波.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/32648287.jpg\" alt=\"底部标签页指示器\"></p>\n</li>\n<li><p>底部标签选择器</p>\n<p>通过一个RecycleView来实现的底部标签选择器</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/48727751.jpg\" alt=\"底部标签选择器\"></p>\n</li>\n<li><p>监听ViewPager滑动及底部标签选择</p>\n<p>添加ViewPager的addOnPageChangeListener方法来监听滑动及底部标签选择的点击回调</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/18227363.jpg\" alt=\"监听ViewPager滑动及底部标签选择\"></p>\n</li>\n</ol>\n<p>相关代码可以访问我的<a href=\"https://github.com/clwater/EmojiKeyboard\" target=\"_blank\" rel=\"noopener\">GitHub</a>来获取,欢迎大家start或者提供建议.</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>主要还是最近做了一个emoji键盘的需求,感觉可以简单封装一下顺便整理下emoji相关的知识</p>\n</blockquote>\n<h2 id=\"Android中的-emoji\"><a href=\"#Android中的-emoji\" class=\"headerlink\" title=\"Android中的 emoji\"></a>Android中的 emoji</h2><p>有关Android中emoji的文章有很多了,我就不简单罗列相关内容了,在这记录一下开发过程中遇到的一些坑…</p>\n<ol>\n<li><p>首先是TextView首次绘制中emoji的颜色会偏浅,官方的demo中依然存在这种问题…</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/6609105.jpg\" alt=\"官方demo\"></p>","more":"<p>(详情可以参考<a href=\"https://github.com/googlesamples/android-EmojiCompat\" target=\"_blank\" rel=\"noopener\">https://github.com/googlesamples/android-EmojiCompat</a>) ,上图中可以看到其中两个Textview的emoji颜色偏浅,但是EditView中就不会出现这个问题…</p>\n<p>解决方法的话暂时有两种,一是针对不能引入EmojiCompat的项目,可以考虑针对textview多次绘制,但是对此Textview设置background的时候会失效…<br>二是可以针对可以引入EmojiCompat的项目,但是简单的直接设置EmojiCompat仍然不好用…通过自定义View即demo中的Custom TextView即刻解决这个问题</p>\n</li>\n<li><p>原生emoji的适配问题</p>\n<p>不同版本的系统中适配的emoji是不同的,一般来说高版本兼容低版本的emoji.</p>\n<p>另一个就是国产rom的问题,部分rom中会将android的emoji图标替换成ios的emoji.会给人一种也没什么差别的错觉…但是,好歹都适配了啊,部分图标还是android的emoji风格,就很迷</p>\n</li>\n<li><p>emoji的大小问题</p>\n<p>emoji的大小…是跟随TextView的textSize,所以要想调整emoji的大小,需要更改textView的textSize值.</p>\n</li>\n<li><p>EditText的删除问题</p>\n<p>键盘嘛,需要对editText进行操作,其中就包括了删除的操作,然而,emoji有的占两个字节,有的占一个自己.所以再删除的时候需要验证内容再删除对应的字节</p>\n</li>\n</ol>\n<p>简单来说,及时更新设备或者开发工具的话emoji展示并不是什么问题,愿望是美好的,现实却总是不进如人意.(只有我觉得Android的果冻人emoji看着还可以么…)</p>\n<h2 id=\"Emoji键盘\"><a href=\"#Emoji键盘\" class=\"headerlink\" title=\"Emoji键盘\"></a>Emoji键盘</h2><p>先展示效果图,</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/96101267.jpg\" alt=\"完成效果图\"></p>\n<p>一个emoji键盘的主要功能都实现了,包括了emoji的输入及删除,多个emoji标签页之间的切换及底部滑动指示器的更改.需要展示底部标签页超过屏幕范围的效果,所以展示的部分数据是重复的.</p>\n<h3 id=\"设计过程\"><a href=\"#设计过程\" class=\"headerlink\" title=\"设计过程\"></a>设计过程</h3><p>  最初的设计中是没有底部多个emoji标签页的,感觉功能有点单薄,所以后期加入了底部过个item切换的功能</p>\n<p>  整个View设计如下,</p>\n<p>  <img src=\"http://ooymoxvz4.bkt.clouddn.com/18-5-4/47317517.jpg\" alt=\"整个View设计\"></p>\n<ol>\n<li>emoji展示与选择区域: 主要是用于展示emoji的内容,这里使用了ViewPager,在初始化的时候会对emoji展示列表进行计算,最终填充到ViewPager中.对于整个View来说,在初始化ViewPager的Adapter的时候就将所有的emoji填入,在滑动或者选择底部item的时候会根据初始化中计算好的各个页面的展示信息控制指示器及底部item.</li>\n<li>ViewPager的指示器: 实际上是一个LinearLayout,根据设置展示对应的数量及位置,此处展示的是当前item的相关指示器,当选择新的item或者滑动到新的item后,指示器的数量会进行更新,而当上面的ViewPager滑动却没有切换到新的item的时候只是更新指示器指示的内容.</li>\n<li>emoji标签部分: 使用了一个RecycleView,是因为当标签比较多时候滑动效果和定位展示比较方便.</li>\n</ol>\n<h4 id=\"设计缺陷\"><a href=\"#设计缺陷\" class=\"headerlink\" title=\"设计缺陷\"></a>设计缺陷</h4><ul>\n<li>暂只支持emoji选择,不能提供自定义图片输入(感觉更改完了就不只是emoji输入器了,下个就做这个了)</li>\n<li>底部指示器现在更新的过程中是全部移除view再根据新参数设置新view没有动画效果</li>\n<li>底部emoji标签页再当选择的item手动滑动超出屏幕显示外后,再次滑动顶部ViewPager页面,底部item复位动画有点僵,仍有优化的余地</li>\n</ul>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><ol>\n<li><p>emoji展示与选择区域:</p>\n<p>主要是针对顶部ViewPager的Adapter处理</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/55341826.jpg\" alt=\"emoji展示与选择区域\"></p>\n</li>\n<li><p>EditText文本控制</p>\n<p>再将EditText绑定到view中后,对view进行操作后会更改EditText的内容</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/245055.jpg\" alt=\"EditText文本控制\"></p>\n<p>需要注意的是再删除的时候是要先验证后两位是否是一个完整emoji,如果是则删除后两个字节,反之则只删除一个字节.</p>\n</li>\n<li><p>底部标签页指示器</p>\n<p>简单的一个LinearLayout来展示指示器,没有切换的动画效果,可以优化一波.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/32648287.jpg\" alt=\"底部标签页指示器\"></p>\n</li>\n<li><p>底部标签选择器</p>\n<p>通过一个RecycleView来实现的底部标签选择器</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/48727751.jpg\" alt=\"底部标签选择器\"></p>\n</li>\n<li><p>监听ViewPager滑动及底部标签选择</p>\n<p>添加ViewPager的addOnPageChangeListener方法来监听滑动及底部标签选择的点击回调</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/18227363.jpg\" alt=\"监听ViewPager滑动及底部标签选择\"></p>\n</li>\n</ol>\n<p>相关代码可以访问我的<a href=\"https://github.com/clwater/EmojiKeyboard\" target=\"_blank\" rel=\"noopener\">GitHub</a>来获取,欢迎大家start或者提供建议.</p>"},{"title":"Hexo安装后hexo指令无法被找到的解决方法","date":"2017-04-23T06:05:36.000Z","_content":"\n>[Hexo](https://hexo.io/) 是一个十分便捷的博客搭建工具 但是经常会遇见安装完成后再次打开终端操作的时候提示 command not found: hexo的情况 对应的github的issues中也没有详细的解决办法在这提供一种可行的解决思路 希望能帮助到大家\n<!-- more -->\n\n*相关的环境在mac下 部分终端指令在linux下可能有所不同*\n\nHexo安装后 `command not found: hexo`的解决方法\n\n出现这种情况主要是node的版本问题 可以通过nvm来控制一下node的版本来解决\n\n## nvm的安装\n\nnvm是nodejs的版本控制工具,可以很轻松来控制node的版本\n\n下面推荐两个安装方法,可以根据实际情况进行处理\n\n1. 通过brew进行安装\n\n```\n  brew install nvm\n  //这个过程中可能需要安装gcc或者其它需要依赖的工具 按照提示一次安装好即可\n  mkdir ~/.nvm\n  export NVM_DIR=~/.nvm\n  .$(brew --prefix nvm)/nvm.sh\n  //这个步骤中mac下的brew需要通过--prefix这种形式完成\n```\n2. 通过curl进行安装\n```\n curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n通过curl安装需要重启终端\n\n3. 可能出现的问题  command not found: nvm\n确定以上正确执行过以上两个方法之一后 可能会遇到这种问题 需要你手动添加相关的环境变量\n编辑 ~/.bash_profile文件 如果使用zsh(iterm)的话是 ~/.zshrc\n将以下内容添加到bash_profile或zshrc文件中\n```\n  export NVM_DIR=\"/Users/yourcomptername/.nvm\"\n  [ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"  # This loads nvm\n```\nyourcomptername的位置要填你自己的路径\n\n## 安装hexo等\n```\n  nvm install 4 (此处的版本可以根据实际情况处理)\n  //确保以上都完成后再安装hexo\n  sudo npm install hexo-cli -g\n```\n\n至此应该可以在终端中输入hexo来验证一下是否安装成功\n\n然后就可以重启终端了 再次输入hexo后会出现 command not found: hexo的提示  一般情况下都是首次安装hexo后可以正常使用 后来再次使用的时候发现无法使用\n\n## 正文开始\n也不能说是正文 之前的都是为所依赖的环境做准备 顺便简单排除一下其它因素\n\n**查看node的版本情况**\n\n![查看node的版本情况](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/36864615.jpg)\n(这个截图是我配置完成后的截图 初次使用的时候可能有部分出入)\n\n在这里可以看到我的node版本是4.8.2\n\n再进行一下的操作\n```\n  //切换对应的版本\n  nvm use 4.8.2\n\n  //但是每次重启终端后改设置都会失效 所以要设置默认的版本\n  nvm alias default 4.8.2\n```\n再次使用nvm ls命令来查看 当和前面的途中绿色箭头指向你所指定的版本好的时候就说明设置成功了\n\n至此应该可以解决command not found: hexo的问题了\n\n如果还是不可以 可以尝试通过 `sudo npm install hexo-cli -g` 重装一下hexo\n","source":"_posts/Hexo安装后的小问题.md","raw":"---\ntitle: Hexo安装后hexo指令无法被找到的解决方法\ndate: 2017-04-23 14:05:36\ntags: [\"hexo\" , \"command not found\"]\ncategories: \"Hexo\"\n---\n\n>[Hexo](https://hexo.io/) 是一个十分便捷的博客搭建工具 但是经常会遇见安装完成后再次打开终端操作的时候提示 command not found: hexo的情况 对应的github的issues中也没有详细的解决办法在这提供一种可行的解决思路 希望能帮助到大家\n<!-- more -->\n\n*相关的环境在mac下 部分终端指令在linux下可能有所不同*\n\nHexo安装后 `command not found: hexo`的解决方法\n\n出现这种情况主要是node的版本问题 可以通过nvm来控制一下node的版本来解决\n\n## nvm的安装\n\nnvm是nodejs的版本控制工具,可以很轻松来控制node的版本\n\n下面推荐两个安装方法,可以根据实际情况进行处理\n\n1. 通过brew进行安装\n\n```\n  brew install nvm\n  //这个过程中可能需要安装gcc或者其它需要依赖的工具 按照提示一次安装好即可\n  mkdir ~/.nvm\n  export NVM_DIR=~/.nvm\n  .$(brew --prefix nvm)/nvm.sh\n  //这个步骤中mac下的brew需要通过--prefix这种形式完成\n```\n2. 通过curl进行安装\n```\n curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n通过curl安装需要重启终端\n\n3. 可能出现的问题  command not found: nvm\n确定以上正确执行过以上两个方法之一后 可能会遇到这种问题 需要你手动添加相关的环境变量\n编辑 ~/.bash_profile文件 如果使用zsh(iterm)的话是 ~/.zshrc\n将以下内容添加到bash_profile或zshrc文件中\n```\n  export NVM_DIR=\"/Users/yourcomptername/.nvm\"\n  [ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"  # This loads nvm\n```\nyourcomptername的位置要填你自己的路径\n\n## 安装hexo等\n```\n  nvm install 4 (此处的版本可以根据实际情况处理)\n  //确保以上都完成后再安装hexo\n  sudo npm install hexo-cli -g\n```\n\n至此应该可以在终端中输入hexo来验证一下是否安装成功\n\n然后就可以重启终端了 再次输入hexo后会出现 command not found: hexo的提示  一般情况下都是首次安装hexo后可以正常使用 后来再次使用的时候发现无法使用\n\n## 正文开始\n也不能说是正文 之前的都是为所依赖的环境做准备 顺便简单排除一下其它因素\n\n**查看node的版本情况**\n\n![查看node的版本情况](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/36864615.jpg)\n(这个截图是我配置完成后的截图 初次使用的时候可能有部分出入)\n\n在这里可以看到我的node版本是4.8.2\n\n再进行一下的操作\n```\n  //切换对应的版本\n  nvm use 4.8.2\n\n  //但是每次重启终端后改设置都会失效 所以要设置默认的版本\n  nvm alias default 4.8.2\n```\n再次使用nvm ls命令来查看 当和前面的途中绿色箭头指向你所指定的版本好的时候就说明设置成功了\n\n至此应该可以解决command not found: hexo的问题了\n\n如果还是不可以 可以尝试通过 `sudo npm install hexo-cli -g` 重装一下hexo\n","slug":"Hexo安装后的小问题","published":1,"updated":"2020-03-13T09:33:05.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dh0006q7dq5lzlc0x5","content":"<blockquote>\n<p><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a> 是一个十分便捷的博客搭建工具 但是经常会遇见安装完成后再次打开终端操作的时候提示 command not found: hexo的情况 对应的github的issues中也没有详细的解决办法在这提供一种可行的解决思路 希望能帮助到大家<br><a id=\"more\"></a></p>\n</blockquote>\n<p><em>相关的环境在mac下 部分终端指令在linux下可能有所不同</em></p>\n<p>Hexo安装后 <code>command not found: hexo</code>的解决方法</p>\n<p>出现这种情况主要是node的版本问题 可以通过nvm来控制一下node的版本来解决</p>\n<h2 id=\"nvm的安装\"><a href=\"#nvm的安装\" class=\"headerlink\" title=\"nvm的安装\"></a>nvm的安装</h2><p>nvm是nodejs的版本控制工具,可以很轻松来控制node的版本</p>\n<p>下面推荐两个安装方法,可以根据实际情况进行处理</p>\n<ol>\n<li>通过brew进行安装</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nvm</span><br><span class=\"line\">//这个过程中可能需要安装gcc或者其它需要依赖的工具 按照提示一次安装好即可</span><br><span class=\"line\">mkdir ~/.nvm</span><br><span class=\"line\">export NVM_DIR=~/.nvm</span><br><span class=\"line\">.$(brew --prefix nvm)/nvm.sh</span><br><span class=\"line\">//这个步骤中mac下的brew需要通过--prefix这种形式完成</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>通过curl进行安装<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>通过curl安装需要重启终端</p>\n<ol start=\"3\">\n<li>可能出现的问题  command not found: nvm<br>确定以上正确执行过以上两个方法之一后 可能会遇到这种问题 需要你手动添加相关的环境变量<br>编辑 ~/.bash_profile文件 如果使用zsh(iterm)的话是 ~/.zshrc<br>将以下内容添加到bash_profile或zshrc文件中<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export NVM_DIR=&quot;/Users/yourcomptername/.nvm&quot;</span><br><span class=\"line\">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>yourcomptername的位置要填你自己的路径</p>\n<h2 id=\"安装hexo等\"><a href=\"#安装hexo等\" class=\"headerlink\" title=\"安装hexo等\"></a>安装hexo等</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 4 (此处的版本可以根据实际情况处理)</span><br><span class=\"line\">//确保以上都完成后再安装hexo</span><br><span class=\"line\">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p>至此应该可以在终端中输入hexo来验证一下是否安装成功</p>\n<p>然后就可以重启终端了 再次输入hexo后会出现 command not found: hexo的提示  一般情况下都是首次安装hexo后可以正常使用 后来再次使用的时候发现无法使用</p>\n<h2 id=\"正文开始\"><a href=\"#正文开始\" class=\"headerlink\" title=\"正文开始\"></a>正文开始</h2><p>也不能说是正文 之前的都是为所依赖的环境做准备 顺便简单排除一下其它因素</p>\n<p><strong>查看node的版本情况</strong></p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/36864615.jpg\" alt=\"查看node的版本情况\"><br>(这个截图是我配置完成后的截图 初次使用的时候可能有部分出入)</p>\n<p>在这里可以看到我的node版本是4.8.2</p>\n<p>再进行一下的操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//切换对应的版本</span><br><span class=\"line\">nvm use 4.8.2</span><br><span class=\"line\"></span><br><span class=\"line\">//但是每次重启终端后改设置都会失效 所以要设置默认的版本</span><br><span class=\"line\">nvm alias default 4.8.2</span><br></pre></td></tr></table></figure></p>\n<p>再次使用nvm ls命令来查看 当和前面的途中绿色箭头指向你所指定的版本好的时候就说明设置成功了</p>\n<p>至此应该可以解决command not found: hexo的问题了</p>\n<p>如果还是不可以 可以尝试通过 <code>sudo npm install hexo-cli -g</code> 重装一下hexo</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a> 是一个十分便捷的博客搭建工具 但是经常会遇见安装完成后再次打开终端操作的时候提示 command not found: hexo的情况 对应的github的issues中也没有详细的解决办法在这提供一种可行的解决思路 希望能帮助到大家<br>","more":"</p>\n</blockquote>\n<p><em>相关的环境在mac下 部分终端指令在linux下可能有所不同</em></p>\n<p>Hexo安装后 <code>command not found: hexo</code>的解决方法</p>\n<p>出现这种情况主要是node的版本问题 可以通过nvm来控制一下node的版本来解决</p>\n<h2 id=\"nvm的安装\"><a href=\"#nvm的安装\" class=\"headerlink\" title=\"nvm的安装\"></a>nvm的安装</h2><p>nvm是nodejs的版本控制工具,可以很轻松来控制node的版本</p>\n<p>下面推荐两个安装方法,可以根据实际情况进行处理</p>\n<ol>\n<li>通过brew进行安装</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nvm</span><br><span class=\"line\">//这个过程中可能需要安装gcc或者其它需要依赖的工具 按照提示一次安装好即可</span><br><span class=\"line\">mkdir ~/.nvm</span><br><span class=\"line\">export NVM_DIR=~/.nvm</span><br><span class=\"line\">.$(brew --prefix nvm)/nvm.sh</span><br><span class=\"line\">//这个步骤中mac下的brew需要通过--prefix这种形式完成</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>通过curl进行安装<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>通过curl安装需要重启终端</p>\n<ol start=\"3\">\n<li>可能出现的问题  command not found: nvm<br>确定以上正确执行过以上两个方法之一后 可能会遇到这种问题 需要你手动添加相关的环境变量<br>编辑 ~/.bash_profile文件 如果使用zsh(iterm)的话是 ~/.zshrc<br>将以下内容添加到bash_profile或zshrc文件中<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export NVM_DIR=&quot;/Users/yourcomptername/.nvm&quot;</span><br><span class=\"line\">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>yourcomptername的位置要填你自己的路径</p>\n<h2 id=\"安装hexo等\"><a href=\"#安装hexo等\" class=\"headerlink\" title=\"安装hexo等\"></a>安装hexo等</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 4 (此处的版本可以根据实际情况处理)</span><br><span class=\"line\">//确保以上都完成后再安装hexo</span><br><span class=\"line\">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p>至此应该可以在终端中输入hexo来验证一下是否安装成功</p>\n<p>然后就可以重启终端了 再次输入hexo后会出现 command not found: hexo的提示  一般情况下都是首次安装hexo后可以正常使用 后来再次使用的时候发现无法使用</p>\n<h2 id=\"正文开始\"><a href=\"#正文开始\" class=\"headerlink\" title=\"正文开始\"></a>正文开始</h2><p>也不能说是正文 之前的都是为所依赖的环境做准备 顺便简单排除一下其它因素</p>\n<p><strong>查看node的版本情况</strong></p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/36864615.jpg\" alt=\"查看node的版本情况\"><br>(这个截图是我配置完成后的截图 初次使用的时候可能有部分出入)</p>\n<p>在这里可以看到我的node版本是4.8.2</p>\n<p>再进行一下的操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//切换对应的版本</span><br><span class=\"line\">nvm use 4.8.2</span><br><span class=\"line\"></span><br><span class=\"line\">//但是每次重启终端后改设置都会失效 所以要设置默认的版本</span><br><span class=\"line\">nvm alias default 4.8.2</span><br></pre></td></tr></table></figure></p>\n<p>再次使用nvm ls命令来查看 当和前面的途中绿色箭头指向你所指定的版本好的时候就说明设置成功了</p>\n<p>至此应该可以解决command not found: hexo的问题了</p>\n<p>如果还是不可以 可以尝试通过 <code>sudo npm install hexo-cli -g</code> 重装一下hexo</p>"},{"title":"Android Tools 之一 Hierarchy Viewer","date":"2017-02-03T10:02:56.000Z","_content":"# Android Tools 之一 Hierarchy Viewer\n\n>本系列旨在介绍一些被忽略的优质工具 毕竟 能被当做自带的工具总有些做的比较好的地方不是\n\n## Hierarchy Viewer\n\nHierarchy Viewer是一个可以用来查看View的使用工具 android sdk中自带\n\n[Optimizing Your UI -官方网站 需科学上网](https://developer.android.com/studio/profile/optimize-ui.html#lint)\n\n### 启动Hierarchy Viewer\n\nhierarchyviewer工具在sdk/tools路径下\n<!-- more -->\n\n再次打开后会出现如下提示\n```\nThe standalone version of hieararchyviewer is deprecated.\nPlease use Android Device Monitor (tools/monitor) instead.\n```\n主要想说的就是 单独使用hieararchyviewer已经不被建议  建议使用Android Device Monitor(Android Device Monitor的相关使用后续会详细介绍)\n\n直接运行monitor或者在在Android Studio -> tools -> android -> Android Device Monitor中将hieararchyviewer工具打开\n\n**以下对hieararchyviewer工具进行操作均为直接打开hieararchyviewer工具 和通过monitor工具打开的hieararchyviewer的UI可能略有不同  以直接打开hieararchyviewer工具操作为准**\n\n\n#### 无法正常使用\n\n在连接过程中可能遇到无法连接到手机的问题 详情参考以下文章\n\n[HierachyViewer无法连接真机调试](http://blog.csdn.net/yafeng_0306/article/details/17224001)\n\n[HierachyViewer无法连接真机调试详解](http://maider.blog.sohu.com/255448342.html)\n\n### 使用Hierarchy Viewer\n\n![Hierarchy Viewer 1-1](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/38369431.jpg)\n\n成功连接后会出现如上页面\n\n当前页面正在显示的进程被加粗显示\n\n(那些看着是空的位置 进入后会显示通知栏中的View布局)\n\n选择想要查看的进程后进入 Load View Hierarchy页面\n\n![Hierarchy Viewer 1-2](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/92076930.jpg)\n\n下面对不同部分分别介绍一下\n\n![Hierarchy Viewer 1-3](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/86316333.jpg)\n\n1. Save as PNG: 把这个布局的层级另存为png格式\n2. Capture Layers: 把这个布局的层级另存为psd格式\n\n  可以查看各层级的情况\n\n  ![Capture Layers](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/35966961.jpg)\n\n3. Load View Hierarchy: 重新载入这个view层级图\n4. Evaluate Contrast: 查看层级布局的具体情况\n\n  ![Evaluate Contrast](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/9472523.jpg)\n\n5. Display View: 在单独的一个窗口中显示所选择的view\n6. Invalidate Layout: 重绘当前窗口\n7. Request Layout: 对当前view进行layout\n8. Dump DisplayList: 使当前view输出它的显示列表到logcat中\n9. Dump Theme: 下载这个view主题的资源\n10. Profile Node: 得到measure，layout，draw的性能指示器\n\n![Hierarchy Viewer 1-6](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/39942923.jpg)\n\n选取某个view节点可以查看选取的View的详情\n\n![Hierarchy Viewer 1-6](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/41478031.jpg)\n\n关于View的渲染机制可以参考一下本人关于android View相关机制解析的文章 [Android View 相关源码分析之三 View的绘制过程 ](http://www.jianshu.com/p/8f3e45663d06)\n\n关于对应渲染时间的速度中  我么知道View绘制分为measure layout 和draw三个过程 三个点分布对应以上三个过程 分为绿 黄 红三个颜色  绿色代表该View在本view tree中速度是前50% 黄色表示后50% 而红色表示是花费时间最长的\n\n还记得最开始使用Hierarchy Viewer中上方有Inspect screenshot的按钮 可以查看当前Activity的像素情况\n\n![Inspect screenshot](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/5593142.jpg)\n\n(层级十分的清晰 就不仔细解释了)\n\n解释下相关功能\n\n1. Save as PNG: 保存当前显示的页面为png格式\n2. Refresh Screenshot: 刷新像素视图和放大镜视图(右边那两个)\n3. Refresh Tree: 刷新View tree\n4. Load Overlay: 在右侧放大镜视图中中加载一个覆盖图(官网中没有给出详细的定义 主要根据相关介绍理解 略有偏差 欢迎指出)\n5. Show In Loupe: 在中间的像素视图中显示之前加载的图片\n6. Auto Refresh: 会根据下发设置的Refresh Rate的时间自动\n更新View tree\n\n\n以上\n","source":"_posts/HierarchyViewer.md","raw":"---\ntitle: Android Tools 之一 Hierarchy Viewer\ndate: 2017-02-03 18:02:56\ntags: [\"android\" , \"view\" , \"tools\" , \"Hierarchy Viewer\"]\ncategories: \"android\"\n---\n# Android Tools 之一 Hierarchy Viewer\n\n>本系列旨在介绍一些被忽略的优质工具 毕竟 能被当做自带的工具总有些做的比较好的地方不是\n\n## Hierarchy Viewer\n\nHierarchy Viewer是一个可以用来查看View的使用工具 android sdk中自带\n\n[Optimizing Your UI -官方网站 需科学上网](https://developer.android.com/studio/profile/optimize-ui.html#lint)\n\n### 启动Hierarchy Viewer\n\nhierarchyviewer工具在sdk/tools路径下\n<!-- more -->\n\n再次打开后会出现如下提示\n```\nThe standalone version of hieararchyviewer is deprecated.\nPlease use Android Device Monitor (tools/monitor) instead.\n```\n主要想说的就是 单独使用hieararchyviewer已经不被建议  建议使用Android Device Monitor(Android Device Monitor的相关使用后续会详细介绍)\n\n直接运行monitor或者在在Android Studio -> tools -> android -> Android Device Monitor中将hieararchyviewer工具打开\n\n**以下对hieararchyviewer工具进行操作均为直接打开hieararchyviewer工具 和通过monitor工具打开的hieararchyviewer的UI可能略有不同  以直接打开hieararchyviewer工具操作为准**\n\n\n#### 无法正常使用\n\n在连接过程中可能遇到无法连接到手机的问题 详情参考以下文章\n\n[HierachyViewer无法连接真机调试](http://blog.csdn.net/yafeng_0306/article/details/17224001)\n\n[HierachyViewer无法连接真机调试详解](http://maider.blog.sohu.com/255448342.html)\n\n### 使用Hierarchy Viewer\n\n![Hierarchy Viewer 1-1](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/38369431.jpg)\n\n成功连接后会出现如上页面\n\n当前页面正在显示的进程被加粗显示\n\n(那些看着是空的位置 进入后会显示通知栏中的View布局)\n\n选择想要查看的进程后进入 Load View Hierarchy页面\n\n![Hierarchy Viewer 1-2](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/92076930.jpg)\n\n下面对不同部分分别介绍一下\n\n![Hierarchy Viewer 1-3](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/86316333.jpg)\n\n1. Save as PNG: 把这个布局的层级另存为png格式\n2. Capture Layers: 把这个布局的层级另存为psd格式\n\n  可以查看各层级的情况\n\n  ![Capture Layers](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/35966961.jpg)\n\n3. Load View Hierarchy: 重新载入这个view层级图\n4. Evaluate Contrast: 查看层级布局的具体情况\n\n  ![Evaluate Contrast](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/9472523.jpg)\n\n5. Display View: 在单独的一个窗口中显示所选择的view\n6. Invalidate Layout: 重绘当前窗口\n7. Request Layout: 对当前view进行layout\n8. Dump DisplayList: 使当前view输出它的显示列表到logcat中\n9. Dump Theme: 下载这个view主题的资源\n10. Profile Node: 得到measure，layout，draw的性能指示器\n\n![Hierarchy Viewer 1-6](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/39942923.jpg)\n\n选取某个view节点可以查看选取的View的详情\n\n![Hierarchy Viewer 1-6](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/41478031.jpg)\n\n关于View的渲染机制可以参考一下本人关于android View相关机制解析的文章 [Android View 相关源码分析之三 View的绘制过程 ](http://www.jianshu.com/p/8f3e45663d06)\n\n关于对应渲染时间的速度中  我么知道View绘制分为measure layout 和draw三个过程 三个点分布对应以上三个过程 分为绿 黄 红三个颜色  绿色代表该View在本view tree中速度是前50% 黄色表示后50% 而红色表示是花费时间最长的\n\n还记得最开始使用Hierarchy Viewer中上方有Inspect screenshot的按钮 可以查看当前Activity的像素情况\n\n![Inspect screenshot](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/5593142.jpg)\n\n(层级十分的清晰 就不仔细解释了)\n\n解释下相关功能\n\n1. Save as PNG: 保存当前显示的页面为png格式\n2. Refresh Screenshot: 刷新像素视图和放大镜视图(右边那两个)\n3. Refresh Tree: 刷新View tree\n4. Load Overlay: 在右侧放大镜视图中中加载一个覆盖图(官网中没有给出详细的定义 主要根据相关介绍理解 略有偏差 欢迎指出)\n5. Show In Loupe: 在中间的像素视图中显示之前加载的图片\n6. Auto Refresh: 会根据下发设置的Refresh Rate的时间自动\n更新View tree\n\n\n以上\n","slug":"HierarchyViewer","published":1,"updated":"2020-03-13T09:33:05.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5di0007q7dqq060izhl","content":"<h1 id=\"Android-Tools-之一-Hierarchy-Viewer\"><a href=\"#Android-Tools-之一-Hierarchy-Viewer\" class=\"headerlink\" title=\"Android Tools 之一 Hierarchy Viewer\"></a>Android Tools 之一 Hierarchy Viewer</h1><blockquote>\n<p>本系列旨在介绍一些被忽略的优质工具 毕竟 能被当做自带的工具总有些做的比较好的地方不是</p>\n</blockquote>\n<h2 id=\"Hierarchy-Viewer\"><a href=\"#Hierarchy-Viewer\" class=\"headerlink\" title=\"Hierarchy Viewer\"></a>Hierarchy Viewer</h2><p>Hierarchy Viewer是一个可以用来查看View的使用工具 android sdk中自带</p>\n<p><a href=\"https://developer.android.com/studio/profile/optimize-ui.html#lint\" target=\"_blank\" rel=\"noopener\">Optimizing Your UI -官方网站 需科学上网</a></p>\n<h3 id=\"启动Hierarchy-Viewer\"><a href=\"#启动Hierarchy-Viewer\" class=\"headerlink\" title=\"启动Hierarchy Viewer\"></a>启动Hierarchy Viewer</h3><p>hierarchyviewer工具在sdk/tools路径下<br><a id=\"more\"></a></p>\n<p>再次打开后会出现如下提示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The standalone version of hieararchyviewer is deprecated.</span><br><span class=\"line\">Please use Android Device Monitor (tools/monitor) instead.</span><br></pre></td></tr></table></figure></p>\n<p>主要想说的就是 单独使用hieararchyviewer已经不被建议  建议使用Android Device Monitor(Android Device Monitor的相关使用后续会详细介绍)</p>\n<p>直接运行monitor或者在在Android Studio -&gt; tools -&gt; android -&gt; Android Device Monitor中将hieararchyviewer工具打开</p>\n<p><strong>以下对hieararchyviewer工具进行操作均为直接打开hieararchyviewer工具 和通过monitor工具打开的hieararchyviewer的UI可能略有不同  以直接打开hieararchyviewer工具操作为准</strong></p>\n<h4 id=\"无法正常使用\"><a href=\"#无法正常使用\" class=\"headerlink\" title=\"无法正常使用\"></a>无法正常使用</h4><p>在连接过程中可能遇到无法连接到手机的问题 详情参考以下文章</p>\n<p><a href=\"http://blog.csdn.net/yafeng_0306/article/details/17224001\" target=\"_blank\" rel=\"noopener\">HierachyViewer无法连接真机调试</a></p>\n<p><a href=\"http://maider.blog.sohu.com/255448342.html\" target=\"_blank\" rel=\"noopener\">HierachyViewer无法连接真机调试详解</a></p>\n<h3 id=\"使用Hierarchy-Viewer\"><a href=\"#使用Hierarchy-Viewer\" class=\"headerlink\" title=\"使用Hierarchy Viewer\"></a>使用Hierarchy Viewer</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/38369431.jpg\" alt=\"Hierarchy Viewer 1-1\"></p>\n<p>成功连接后会出现如上页面</p>\n<p>当前页面正在显示的进程被加粗显示</p>\n<p>(那些看着是空的位置 进入后会显示通知栏中的View布局)</p>\n<p>选择想要查看的进程后进入 Load View Hierarchy页面</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/92076930.jpg\" alt=\"Hierarchy Viewer 1-2\"></p>\n<p>下面对不同部分分别介绍一下</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/86316333.jpg\" alt=\"Hierarchy Viewer 1-3\"></p>\n<ol>\n<li>Save as PNG: 把这个布局的层级另存为png格式</li>\n<li><p>Capture Layers: 把这个布局的层级另存为psd格式</p>\n<p>可以查看各层级的情况</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/35966961.jpg\" alt=\"Capture Layers\"></p>\n</li>\n<li><p>Load View Hierarchy: 重新载入这个view层级图</p>\n</li>\n<li><p>Evaluate Contrast: 查看层级布局的具体情况</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/9472523.jpg\" alt=\"Evaluate Contrast\"></p>\n</li>\n<li><p>Display View: 在单独的一个窗口中显示所选择的view</p>\n</li>\n<li>Invalidate Layout: 重绘当前窗口</li>\n<li>Request Layout: 对当前view进行layout</li>\n<li>Dump DisplayList: 使当前view输出它的显示列表到logcat中</li>\n<li>Dump Theme: 下载这个view主题的资源</li>\n<li>Profile Node: 得到measure，layout，draw的性能指示器</li>\n</ol>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/39942923.jpg\" alt=\"Hierarchy Viewer 1-6\"></p>\n<p>选取某个view节点可以查看选取的View的详情</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/41478031.jpg\" alt=\"Hierarchy Viewer 1-6\"></p>\n<p>关于View的渲染机制可以参考一下本人关于android View相关机制解析的文章 <a href=\"http://www.jianshu.com/p/8f3e45663d06\" target=\"_blank\" rel=\"noopener\">Android View 相关源码分析之三 View的绘制过程 </a></p>\n<p>关于对应渲染时间的速度中  我么知道View绘制分为measure layout 和draw三个过程 三个点分布对应以上三个过程 分为绿 黄 红三个颜色  绿色代表该View在本view tree中速度是前50% 黄色表示后50% 而红色表示是花费时间最长的</p>\n<p>还记得最开始使用Hierarchy Viewer中上方有Inspect screenshot的按钮 可以查看当前Activity的像素情况</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/5593142.jpg\" alt=\"Inspect screenshot\"></p>\n<p>(层级十分的清晰 就不仔细解释了)</p>\n<p>解释下相关功能</p>\n<ol>\n<li>Save as PNG: 保存当前显示的页面为png格式</li>\n<li>Refresh Screenshot: 刷新像素视图和放大镜视图(右边那两个)</li>\n<li>Refresh Tree: 刷新View tree</li>\n<li>Load Overlay: 在右侧放大镜视图中中加载一个覆盖图(官网中没有给出详细的定义 主要根据相关介绍理解 略有偏差 欢迎指出)</li>\n<li>Show In Loupe: 在中间的像素视图中显示之前加载的图片</li>\n<li>Auto Refresh: 会根据下发设置的Refresh Rate的时间自动<br>更新View tree</li>\n</ol>\n<p>以上</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Android-Tools-之一-Hierarchy-Viewer\"><a href=\"#Android-Tools-之一-Hierarchy-Viewer\" class=\"headerlink\" title=\"Android Tools 之一 Hierarchy Viewer\"></a>Android Tools 之一 Hierarchy Viewer</h1><blockquote>\n<p>本系列旨在介绍一些被忽略的优质工具 毕竟 能被当做自带的工具总有些做的比较好的地方不是</p>\n</blockquote>\n<h2 id=\"Hierarchy-Viewer\"><a href=\"#Hierarchy-Viewer\" class=\"headerlink\" title=\"Hierarchy Viewer\"></a>Hierarchy Viewer</h2><p>Hierarchy Viewer是一个可以用来查看View的使用工具 android sdk中自带</p>\n<p><a href=\"https://developer.android.com/studio/profile/optimize-ui.html#lint\" target=\"_blank\" rel=\"noopener\">Optimizing Your UI -官方网站 需科学上网</a></p>\n<h3 id=\"启动Hierarchy-Viewer\"><a href=\"#启动Hierarchy-Viewer\" class=\"headerlink\" title=\"启动Hierarchy Viewer\"></a>启动Hierarchy Viewer</h3><p>hierarchyviewer工具在sdk/tools路径下<br>","more":"</p>\n<p>再次打开后会出现如下提示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The standalone version of hieararchyviewer is deprecated.</span><br><span class=\"line\">Please use Android Device Monitor (tools/monitor) instead.</span><br></pre></td></tr></table></figure></p>\n<p>主要想说的就是 单独使用hieararchyviewer已经不被建议  建议使用Android Device Monitor(Android Device Monitor的相关使用后续会详细介绍)</p>\n<p>直接运行monitor或者在在Android Studio -&gt; tools -&gt; android -&gt; Android Device Monitor中将hieararchyviewer工具打开</p>\n<p><strong>以下对hieararchyviewer工具进行操作均为直接打开hieararchyviewer工具 和通过monitor工具打开的hieararchyviewer的UI可能略有不同  以直接打开hieararchyviewer工具操作为准</strong></p>\n<h4 id=\"无法正常使用\"><a href=\"#无法正常使用\" class=\"headerlink\" title=\"无法正常使用\"></a>无法正常使用</h4><p>在连接过程中可能遇到无法连接到手机的问题 详情参考以下文章</p>\n<p><a href=\"http://blog.csdn.net/yafeng_0306/article/details/17224001\" target=\"_blank\" rel=\"noopener\">HierachyViewer无法连接真机调试</a></p>\n<p><a href=\"http://maider.blog.sohu.com/255448342.html\" target=\"_blank\" rel=\"noopener\">HierachyViewer无法连接真机调试详解</a></p>\n<h3 id=\"使用Hierarchy-Viewer\"><a href=\"#使用Hierarchy-Viewer\" class=\"headerlink\" title=\"使用Hierarchy Viewer\"></a>使用Hierarchy Viewer</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/38369431.jpg\" alt=\"Hierarchy Viewer 1-1\"></p>\n<p>成功连接后会出现如上页面</p>\n<p>当前页面正在显示的进程被加粗显示</p>\n<p>(那些看着是空的位置 进入后会显示通知栏中的View布局)</p>\n<p>选择想要查看的进程后进入 Load View Hierarchy页面</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/92076930.jpg\" alt=\"Hierarchy Viewer 1-2\"></p>\n<p>下面对不同部分分别介绍一下</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/86316333.jpg\" alt=\"Hierarchy Viewer 1-3\"></p>\n<ol>\n<li>Save as PNG: 把这个布局的层级另存为png格式</li>\n<li><p>Capture Layers: 把这个布局的层级另存为psd格式</p>\n<p>可以查看各层级的情况</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/35966961.jpg\" alt=\"Capture Layers\"></p>\n</li>\n<li><p>Load View Hierarchy: 重新载入这个view层级图</p>\n</li>\n<li><p>Evaluate Contrast: 查看层级布局的具体情况</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/9472523.jpg\" alt=\"Evaluate Contrast\"></p>\n</li>\n<li><p>Display View: 在单独的一个窗口中显示所选择的view</p>\n</li>\n<li>Invalidate Layout: 重绘当前窗口</li>\n<li>Request Layout: 对当前view进行layout</li>\n<li>Dump DisplayList: 使当前view输出它的显示列表到logcat中</li>\n<li>Dump Theme: 下载这个view主题的资源</li>\n<li>Profile Node: 得到measure，layout，draw的性能指示器</li>\n</ol>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/39942923.jpg\" alt=\"Hierarchy Viewer 1-6\"></p>\n<p>选取某个view节点可以查看选取的View的详情</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/41478031.jpg\" alt=\"Hierarchy Viewer 1-6\"></p>\n<p>关于View的渲染机制可以参考一下本人关于android View相关机制解析的文章 <a href=\"http://www.jianshu.com/p/8f3e45663d06\" target=\"_blank\" rel=\"noopener\">Android View 相关源码分析之三 View的绘制过程 </a></p>\n<p>关于对应渲染时间的速度中  我么知道View绘制分为measure layout 和draw三个过程 三个点分布对应以上三个过程 分为绿 黄 红三个颜色  绿色代表该View在本view tree中速度是前50% 黄色表示后50% 而红色表示是花费时间最长的</p>\n<p>还记得最开始使用Hierarchy Viewer中上方有Inspect screenshot的按钮 可以查看当前Activity的像素情况</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/5593142.jpg\" alt=\"Inspect screenshot\"></p>\n<p>(层级十分的清晰 就不仔细解释了)</p>\n<p>解释下相关功能</p>\n<ol>\n<li>Save as PNG: 保存当前显示的页面为png格式</li>\n<li>Refresh Screenshot: 刷新像素视图和放大镜视图(右边那两个)</li>\n<li>Refresh Tree: 刷新View tree</li>\n<li>Load Overlay: 在右侧放大镜视图中中加载一个覆盖图(官网中没有给出详细的定义 主要根据相关介绍理解 略有偏差 欢迎指出)</li>\n<li>Show In Loupe: 在中间的像素视图中显示之前加载的图片</li>\n<li>Auto Refresh: 会根据下发设置的Refresh Rate的时间自动<br>更新View tree</li>\n</ol>\n<p>以上</p>"},{"title":"Android View 相关源码分析之二 继LayoutInflater来说","date":"2017-02-03T09:39:24.000Z","_content":"### LayoutInflater源码分析\n1. 与setContentView相关\n\n  在PhoneWindow的generateLayout中调用了     \n  ```java\n    View in = mLayoutInflater.inflate(layoutResource, null);\n  ```\n\n2. LayoutInflater中获取实例化方法\n  ```java\n    /**\n     * Obtains the LayoutInflater from the given context.\n     */\n    public static LayoutInflater from(Context context) {\n        LayoutInflater LayoutInflater =\n                (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        if (LayoutInflater == null) {\n            throw new AssertionError(\"LayoutInflater not found.\");\n        }\n        return LayoutInflater;\n    }\n  ```\n  <!-- more -->\n\n3. inflate方法相关\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root) {\n        return inflate(resource, root, root != null);\n    }\n\n    public View inflate(XmlPullParser parser, @Nullable ViewGroup root) {\n      return inflate(parser, root, root != null);\n    }\n  ```\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\n        final Resources res = getContext().getResources();\n        if (DEBUG) {\n            Log.d(TAG, \"INFLATING from resource: \\\"\" + res.getResourceName(resource) + \"\\\" (\"\n                    + Integer.toHexString(resource) + \")\");\n        }\n\n        final XmlResourceParser parser = res.getLayout(resource);\n        try {\n            return inflate(parser, root, attachToRoot);\n        } finally {\n            parser.close();\n        }\n    }\n  ```\n  最后发现都需要调用\n\n  ```java\n  public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n          synchronized (mConstructorArgs) {\n              Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n\n              final Context inflaterContext = mContext;\n              final AttributeSet attrs = Xml.asAttributeSet(parser);\n              Context lastContext = (Context) mConstructorArgs[0];\n              mConstructorArgs[0] = inflaterContext;\n              //定义返回值 初始化传入形参 root\n              View result = root;\n\n              try {\n                  // 找到根节点\n                  int type;\n                  while ((type = parser.next()) != XmlPullParser.START_TAG &&\n                          type != XmlPullParser.END_DOCUMENT) {\n                  }\n\n                  //验证type是否为Start_Tag  保证xml文件正确\n                  if (type != XmlPullParser.START_TAG) {\n                      throw new InflateException(parser.getPositionDescription()\n                              + \": No start tag found!\");\n                  }\n\n                  //type为 root node\n                  final String name = parser.getName();\n\n                  if (DEBUG) {\n                      System.out.println(\"**************************\");\n                      System.out.println(\"Creating root view: \"\n                              + name);\n                      System.out.println(\"**************************\");\n                  }\n\n                  if (TAG_MERGE.equals(name)) {\n                      //处理 merge相关\n                      //root需要非空 且attachToRoot为空\n                      if (root == null || !attachToRoot) {\n                          throw new InflateException(\"<merge /> can be used only with a valid \"\n                                  + \"ViewGroup root and attachToRoot=true\");\n                      }\n                      //递归inflate 方法调用\n                      rInflate(parser, root, inflaterContext, attrs, false);\n                  } else {\n                      //根据tag节点创建view对象\n                      final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                      ViewGroup.LayoutParams params = null;\n\n                      if (root != null) {\n                          if (DEBUG) {\n                              System.out.println(\"Creating params from root: \" +\n                                      root);\n                          }\n                          //根据root生成LayoutParams\n                          params = root.generateLayoutParams(attrs);\n                          if (!attachToRoot) {\n                              //如果attachToRoot为flase 则调用setLayoutParams\n                              temp.setLayoutParams(params);\n                          }\n                      }\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> start inflating children\");\n                      }\n                      //递归inflate剩下的children\n                      rInflateChildren(parser, temp, attrs, true);\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> done inflating children\");\n                      }\n\n                      // We are supposed to attach all the views we found (int temp)\n                      // to root. Do that now.\n                      if (root != null && attachToRoot) {\n                          //root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里\n                          root.addView(temp, params);\n                      }\n\n                      // Decide whether to return the root that was passed in or the\n                      // top view found in xml.\n                      if (root == null || !attachToRoot) {\n                          //返回xml里解析的root view\n                          result = temp;\n                      }\n                  }\n\n              } catch (XmlPullParserException e) {\n                  InflateException ex = new InflateException(e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } catch (Exception e) {\n                  InflateException ex = new InflateException(\n                          parser.getPositionDescription()\n                                  + \": \" + e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } finally {\n                  // Don't retain static reference on context.\n                  mConstructorArgs[0] = lastContext;\n                  mConstructorArgs[1] = null;\n              }\n\n              Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n              //返回参数root或xml文件里的root view\n              return result;\n          }\n      }\n\n  ```\n  相关inflate参数的结果\n  ![inflate参数.png](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/22700304.jpg)\n\n4. 相关方法解析\n  在Inflate中多次被调用的rInflate\n\n  ```java\n     void rInflate(XmlPullParser parser, View parent, Context context,\n             AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException {\n\n         final int depth = parser.getDepth();\n         int type;\n         //XmlPullParser解析器的标准解析模式\n         while (((type = parser.next()) != XmlPullParser.END_TAG ||\n                 parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {\n             //找到start_tag节点\n             if (type != XmlPullParser.START_TAG) {\n                 continue;\n             }\n             //获取Name标记\n             final String name = parser.getName();\n\n             //private static final String TAG_REQUEST_FOCUS = \"requestFocus\";\n             //处理requestFocus\n             if (TAG_REQUEST_FOCUS.equals(name)) {\n                 parseRequestFocus(parser, parent);\n             // private static final String TAG_TAG = \"tag\";\n             //处理tag\n             } else if (TAG_TAG.equals(name)) {\n                 parseViewTag(parser, parent, attrs);\n             //private static final String TAG_INCLUDE = \"include\";\n             //处理include\n             } else if (TAG_INCLUDE.equals(name)) {\n                 //如果是根节点则抛出异常\n                 if (parser.getDepth() == 0) {\n                     throw new InflateException(\"<include /> cannot be the root element\");\n                 }\n                 parseInclude(parser, context, parent, attrs);\n             //private static final String TAG_MERGE = \"merge\";\n             //处理merge merge需要是xml中的根节点\n             } else if (TAG_MERGE.equals(name)) {\n                 throw new InflateException(\"<merge /> must be the root element\");\n             } else {\n                 final View view = createViewFromTag(parent, name, context, attrs);\n                 final ViewGroup viewGroup = (ViewGroup) parent;\n                 final ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);\n                 rInflateChildren(parser, view, attrs, true);\n                 viewGroup.addView(view, params);\n             }\n         }\n\n          //parent的所有子节点都处理完毕的时候回onFinishInflate方法\n         if (finishInflate) {\n             parent.onFinishInflate();\n         }\n     }\n     //可以添加自定义逻辑\n      protected void onFinishInflate() {\n      }\n```\n","source":"_posts/LayoutInflater.md","raw":"---\ntitle: Android View 相关源码分析之二 继LayoutInflater来说\ndate: 2017-02-03 17:39:24\ntags: [\"android\" , \"view\" , \"源码\"]\ncategories: \"android\"\n---\n### LayoutInflater源码分析\n1. 与setContentView相关\n\n  在PhoneWindow的generateLayout中调用了     \n  ```java\n    View in = mLayoutInflater.inflate(layoutResource, null);\n  ```\n\n2. LayoutInflater中获取实例化方法\n  ```java\n    /**\n     * Obtains the LayoutInflater from the given context.\n     */\n    public static LayoutInflater from(Context context) {\n        LayoutInflater LayoutInflater =\n                (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        if (LayoutInflater == null) {\n            throw new AssertionError(\"LayoutInflater not found.\");\n        }\n        return LayoutInflater;\n    }\n  ```\n  <!-- more -->\n\n3. inflate方法相关\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root) {\n        return inflate(resource, root, root != null);\n    }\n\n    public View inflate(XmlPullParser parser, @Nullable ViewGroup root) {\n      return inflate(parser, root, root != null);\n    }\n  ```\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\n        final Resources res = getContext().getResources();\n        if (DEBUG) {\n            Log.d(TAG, \"INFLATING from resource: \\\"\" + res.getResourceName(resource) + \"\\\" (\"\n                    + Integer.toHexString(resource) + \")\");\n        }\n\n        final XmlResourceParser parser = res.getLayout(resource);\n        try {\n            return inflate(parser, root, attachToRoot);\n        } finally {\n            parser.close();\n        }\n    }\n  ```\n  最后发现都需要调用\n\n  ```java\n  public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n          synchronized (mConstructorArgs) {\n              Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n\n              final Context inflaterContext = mContext;\n              final AttributeSet attrs = Xml.asAttributeSet(parser);\n              Context lastContext = (Context) mConstructorArgs[0];\n              mConstructorArgs[0] = inflaterContext;\n              //定义返回值 初始化传入形参 root\n              View result = root;\n\n              try {\n                  // 找到根节点\n                  int type;\n                  while ((type = parser.next()) != XmlPullParser.START_TAG &&\n                          type != XmlPullParser.END_DOCUMENT) {\n                  }\n\n                  //验证type是否为Start_Tag  保证xml文件正确\n                  if (type != XmlPullParser.START_TAG) {\n                      throw new InflateException(parser.getPositionDescription()\n                              + \": No start tag found!\");\n                  }\n\n                  //type为 root node\n                  final String name = parser.getName();\n\n                  if (DEBUG) {\n                      System.out.println(\"**************************\");\n                      System.out.println(\"Creating root view: \"\n                              + name);\n                      System.out.println(\"**************************\");\n                  }\n\n                  if (TAG_MERGE.equals(name)) {\n                      //处理 merge相关\n                      //root需要非空 且attachToRoot为空\n                      if (root == null || !attachToRoot) {\n                          throw new InflateException(\"<merge /> can be used only with a valid \"\n                                  + \"ViewGroup root and attachToRoot=true\");\n                      }\n                      //递归inflate 方法调用\n                      rInflate(parser, root, inflaterContext, attrs, false);\n                  } else {\n                      //根据tag节点创建view对象\n                      final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                      ViewGroup.LayoutParams params = null;\n\n                      if (root != null) {\n                          if (DEBUG) {\n                              System.out.println(\"Creating params from root: \" +\n                                      root);\n                          }\n                          //根据root生成LayoutParams\n                          params = root.generateLayoutParams(attrs);\n                          if (!attachToRoot) {\n                              //如果attachToRoot为flase 则调用setLayoutParams\n                              temp.setLayoutParams(params);\n                          }\n                      }\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> start inflating children\");\n                      }\n                      //递归inflate剩下的children\n                      rInflateChildren(parser, temp, attrs, true);\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> done inflating children\");\n                      }\n\n                      // We are supposed to attach all the views we found (int temp)\n                      // to root. Do that now.\n                      if (root != null && attachToRoot) {\n                          //root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里\n                          root.addView(temp, params);\n                      }\n\n                      // Decide whether to return the root that was passed in or the\n                      // top view found in xml.\n                      if (root == null || !attachToRoot) {\n                          //返回xml里解析的root view\n                          result = temp;\n                      }\n                  }\n\n              } catch (XmlPullParserException e) {\n                  InflateException ex = new InflateException(e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } catch (Exception e) {\n                  InflateException ex = new InflateException(\n                          parser.getPositionDescription()\n                                  + \": \" + e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } finally {\n                  // Don't retain static reference on context.\n                  mConstructorArgs[0] = lastContext;\n                  mConstructorArgs[1] = null;\n              }\n\n              Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n              //返回参数root或xml文件里的root view\n              return result;\n          }\n      }\n\n  ```\n  相关inflate参数的结果\n  ![inflate参数.png](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/22700304.jpg)\n\n4. 相关方法解析\n  在Inflate中多次被调用的rInflate\n\n  ```java\n     void rInflate(XmlPullParser parser, View parent, Context context,\n             AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException {\n\n         final int depth = parser.getDepth();\n         int type;\n         //XmlPullParser解析器的标准解析模式\n         while (((type = parser.next()) != XmlPullParser.END_TAG ||\n                 parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {\n             //找到start_tag节点\n             if (type != XmlPullParser.START_TAG) {\n                 continue;\n             }\n             //获取Name标记\n             final String name = parser.getName();\n\n             //private static final String TAG_REQUEST_FOCUS = \"requestFocus\";\n             //处理requestFocus\n             if (TAG_REQUEST_FOCUS.equals(name)) {\n                 parseRequestFocus(parser, parent);\n             // private static final String TAG_TAG = \"tag\";\n             //处理tag\n             } else if (TAG_TAG.equals(name)) {\n                 parseViewTag(parser, parent, attrs);\n             //private static final String TAG_INCLUDE = \"include\";\n             //处理include\n             } else if (TAG_INCLUDE.equals(name)) {\n                 //如果是根节点则抛出异常\n                 if (parser.getDepth() == 0) {\n                     throw new InflateException(\"<include /> cannot be the root element\");\n                 }\n                 parseInclude(parser, context, parent, attrs);\n             //private static final String TAG_MERGE = \"merge\";\n             //处理merge merge需要是xml中的根节点\n             } else if (TAG_MERGE.equals(name)) {\n                 throw new InflateException(\"<merge /> must be the root element\");\n             } else {\n                 final View view = createViewFromTag(parent, name, context, attrs);\n                 final ViewGroup viewGroup = (ViewGroup) parent;\n                 final ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);\n                 rInflateChildren(parser, view, attrs, true);\n                 viewGroup.addView(view, params);\n             }\n         }\n\n          //parent的所有子节点都处理完毕的时候回onFinishInflate方法\n         if (finishInflate) {\n             parent.onFinishInflate();\n         }\n     }\n     //可以添加自定义逻辑\n      protected void onFinishInflate() {\n      }\n```\n","slug":"LayoutInflater","published":1,"updated":"2020-03-13T09:33:05.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dj0008q7dqgvwrgqru","content":"<h3 id=\"LayoutInflater源码分析\"><a href=\"#LayoutInflater源码分析\" class=\"headerlink\" title=\"LayoutInflater源码分析\"></a>LayoutInflater源码分析</h3><ol>\n<li><p>与setContentView相关</p>\n<p>在PhoneWindow的generateLayout中调用了     </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>LayoutInflater中获取实例化方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Obtains the LayoutInflater from the given context.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LayoutInflater <span class=\"title\">from</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">    LayoutInflater LayoutInflater =</span><br><span class=\"line\">            (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (LayoutInflater == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">\"LayoutInflater not found.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> LayoutInflater;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n</li>\n<li><p>inflate方法相关</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inflate(resource, root, root != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> inflate(parser, root, root != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Resources res = getContext().getResources();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"INFLATING from resource: \\\"\"</span> + res.getResourceName(resource) + <span class=\"string\">\"\\\" (\"</span></span><br><span class=\"line\">                + Integer.toHexString(resource) + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> XmlResourceParser parser = res.getLayout(resource);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        parser.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后发现都需要调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</span><br><span class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"inflate\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> Context inflaterContext = mContext;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</span><br><span class=\"line\">            Context lastContext = (Context) mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</span><br><span class=\"line\">            <span class=\"comment\">//定义返回值 初始化传入形参 root</span></span><br><span class=\"line\">            View result = root;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 找到根节点</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> type;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</span><br><span class=\"line\">                        type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//验证type是否为Start_Tag  保证xml文件正确</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(parser.getPositionDescription()</span><br><span class=\"line\">                            + <span class=\"string\">\": No start tag found!\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//type为 root node</span></span><br><span class=\"line\">                <span class=\"keyword\">final</span> String name = parser.getName();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"Creating root view: \"</span></span><br><span class=\"line\">                            + name);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//处理 merge相关</span></span><br><span class=\"line\">                    <span class=\"comment\">//root需要非空 且attachToRoot为空</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; can be used only with a valid \"</span></span><br><span class=\"line\">                                + <span class=\"string\">\"ViewGroup root and attachToRoot=true\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//递归inflate 方法调用</span></span><br><span class=\"line\">                    rInflate(parser, root, inflaterContext, attrs, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//根据tag节点创建view对象</span></span><br><span class=\"line\">                    <span class=\"keyword\">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</span><br><span class=\"line\"></span><br><span class=\"line\">                    ViewGroup.LayoutParams params = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">\"Creating params from root: \"</span> +</span><br><span class=\"line\">                                    root);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">//根据root生成LayoutParams</span></span><br><span class=\"line\">                        params = root.generateLayoutParams(attrs);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!attachToRoot) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//如果attachToRoot为flase 则调用setLayoutParams</span></span><br><span class=\"line\">                            temp.setLayoutParams(params);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; start inflating children\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//递归inflate剩下的children</span></span><br><span class=\"line\">                    rInflateChildren(parser, temp, attrs, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; done inflating children\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></span><br><span class=\"line\">                    <span class=\"comment\">// to root. Do that now.</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; attachToRoot) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里</span></span><br><span class=\"line\">                        root.addView(temp, params);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></span><br><span class=\"line\">                    <span class=\"comment\">// top view found in xml.</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//返回xml里解析的root view</span></span><br><span class=\"line\">                        result = temp;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;</span><br><span class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(e.getMessage());</span><br><span class=\"line\">                ex.initCause(e);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(</span><br><span class=\"line\">                        parser.getPositionDescription()</span><br><span class=\"line\">                                + <span class=\"string\">\": \"</span> + e.getMessage());</span><br><span class=\"line\">                ex.initCause(e);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Don't retain static reference on context.</span></span><br><span class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</span><br><span class=\"line\">                mConstructorArgs[<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class=\"line\">            <span class=\"comment\">//返回参数root或xml文件里的root view</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>相关inflate参数的结果<br><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/22700304.jpg\" alt=\"inflate参数.png\"></p>\n</li>\n<li><p>相关方法解析<br>在Inflate中多次被调用的rInflate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        AttributeSet attrs, <span class=\"keyword\">boolean</span> finishInflate)</span> <span class=\"keyword\">throws</span> XmlPullParserException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> depth = parser.getDepth();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> type;</span><br><span class=\"line\">    <span class=\"comment\">//XmlPullParser解析器的标准解析模式</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</span><br><span class=\"line\">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//找到start_tag节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//获取Name标记</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> String name = parser.getName();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//private static final String TAG_REQUEST_FOCUS = \"requestFocus\";</span></span><br><span class=\"line\">        <span class=\"comment\">//处理requestFocus</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</span><br><span class=\"line\">            parseRequestFocus(parser, parent);</span><br><span class=\"line\">        <span class=\"comment\">// private static final String TAG_TAG = \"tag\";</span></span><br><span class=\"line\">        <span class=\"comment\">//处理tag</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</span><br><span class=\"line\">            parseViewTag(parser, parent, attrs);</span><br><span class=\"line\">        <span class=\"comment\">//private static final String TAG_INCLUDE = \"include\";</span></span><br><span class=\"line\">        <span class=\"comment\">//处理include</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果是根节点则抛出异常</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;include /&gt; cannot be the root element\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            parseInclude(parser, context, parent, attrs);</span><br><span class=\"line\">        <span class=\"comment\">//private static final String TAG_MERGE = \"merge\";</span></span><br><span class=\"line\">        <span class=\"comment\">//处理merge merge需要是xml中的根节点</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; must be the root element\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View view = createViewFromTag(parent, name, context, attrs);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ViewGroup viewGroup = (ViewGroup) parent;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);</span><br><span class=\"line\">            rInflateChildren(parser, view, attrs, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            viewGroup.addView(view, params);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//parent的所有子节点都处理完毕的时候回onFinishInflate方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finishInflate) &#123;</span><br><span class=\"line\">        parent.onFinishInflate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可以添加自定义逻辑</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinishInflate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"LayoutInflater源码分析\"><a href=\"#LayoutInflater源码分析\" class=\"headerlink\" title=\"LayoutInflater源码分析\"></a>LayoutInflater源码分析</h3><ol>\n<li><p>与setContentView相关</p>\n<p>在PhoneWindow的generateLayout中调用了     </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>LayoutInflater中获取实例化方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Obtains the LayoutInflater from the given context.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LayoutInflater <span class=\"title\">from</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">    LayoutInflater LayoutInflater =</span><br><span class=\"line\">            (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (LayoutInflater == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">\"LayoutInflater not found.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> LayoutInflater;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"</li>\n<li><p>inflate方法相关</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inflate(resource, root, root != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> inflate(parser, root, root != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Resources res = getContext().getResources();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"INFLATING from resource: \\\"\"</span> + res.getResourceName(resource) + <span class=\"string\">\"\\\" (\"</span></span><br><span class=\"line\">                + Integer.toHexString(resource) + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> XmlResourceParser parser = res.getLayout(resource);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        parser.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后发现都需要调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</span><br><span class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"inflate\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> Context inflaterContext = mContext;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</span><br><span class=\"line\">            Context lastContext = (Context) mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</span><br><span class=\"line\">            <span class=\"comment\">//定义返回值 初始化传入形参 root</span></span><br><span class=\"line\">            View result = root;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 找到根节点</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> type;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</span><br><span class=\"line\">                        type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//验证type是否为Start_Tag  保证xml文件正确</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(parser.getPositionDescription()</span><br><span class=\"line\">                            + <span class=\"string\">\": No start tag found!\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//type为 root node</span></span><br><span class=\"line\">                <span class=\"keyword\">final</span> String name = parser.getName();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"Creating root view: \"</span></span><br><span class=\"line\">                            + name);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//处理 merge相关</span></span><br><span class=\"line\">                    <span class=\"comment\">//root需要非空 且attachToRoot为空</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; can be used only with a valid \"</span></span><br><span class=\"line\">                                + <span class=\"string\">\"ViewGroup root and attachToRoot=true\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//递归inflate 方法调用</span></span><br><span class=\"line\">                    rInflate(parser, root, inflaterContext, attrs, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//根据tag节点创建view对象</span></span><br><span class=\"line\">                    <span class=\"keyword\">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</span><br><span class=\"line\"></span><br><span class=\"line\">                    ViewGroup.LayoutParams params = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">\"Creating params from root: \"</span> +</span><br><span class=\"line\">                                    root);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">//根据root生成LayoutParams</span></span><br><span class=\"line\">                        params = root.generateLayoutParams(attrs);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!attachToRoot) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//如果attachToRoot为flase 则调用setLayoutParams</span></span><br><span class=\"line\">                            temp.setLayoutParams(params);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; start inflating children\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//递归inflate剩下的children</span></span><br><span class=\"line\">                    rInflateChildren(parser, temp, attrs, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; done inflating children\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></span><br><span class=\"line\">                    <span class=\"comment\">// to root. Do that now.</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; attachToRoot) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里</span></span><br><span class=\"line\">                        root.addView(temp, params);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></span><br><span class=\"line\">                    <span class=\"comment\">// top view found in xml.</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//返回xml里解析的root view</span></span><br><span class=\"line\">                        result = temp;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;</span><br><span class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(e.getMessage());</span><br><span class=\"line\">                ex.initCause(e);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(</span><br><span class=\"line\">                        parser.getPositionDescription()</span><br><span class=\"line\">                                + <span class=\"string\">\": \"</span> + e.getMessage());</span><br><span class=\"line\">                ex.initCause(e);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Don't retain static reference on context.</span></span><br><span class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</span><br><span class=\"line\">                mConstructorArgs[<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class=\"line\">            <span class=\"comment\">//返回参数root或xml文件里的root view</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>相关inflate参数的结果<br><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/22700304.jpg\" alt=\"inflate参数.png\"></p>\n</li>\n<li><p>相关方法解析<br>在Inflate中多次被调用的rInflate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        AttributeSet attrs, <span class=\"keyword\">boolean</span> finishInflate)</span> <span class=\"keyword\">throws</span> XmlPullParserException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> depth = parser.getDepth();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> type;</span><br><span class=\"line\">    <span class=\"comment\">//XmlPullParser解析器的标准解析模式</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</span><br><span class=\"line\">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//找到start_tag节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//获取Name标记</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> String name = parser.getName();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//private static final String TAG_REQUEST_FOCUS = \"requestFocus\";</span></span><br><span class=\"line\">        <span class=\"comment\">//处理requestFocus</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</span><br><span class=\"line\">            parseRequestFocus(parser, parent);</span><br><span class=\"line\">        <span class=\"comment\">// private static final String TAG_TAG = \"tag\";</span></span><br><span class=\"line\">        <span class=\"comment\">//处理tag</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</span><br><span class=\"line\">            parseViewTag(parser, parent, attrs);</span><br><span class=\"line\">        <span class=\"comment\">//private static final String TAG_INCLUDE = \"include\";</span></span><br><span class=\"line\">        <span class=\"comment\">//处理include</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果是根节点则抛出异常</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;include /&gt; cannot be the root element\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            parseInclude(parser, context, parent, attrs);</span><br><span class=\"line\">        <span class=\"comment\">//private static final String TAG_MERGE = \"merge\";</span></span><br><span class=\"line\">        <span class=\"comment\">//处理merge merge需要是xml中的根节点</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; must be the root element\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View view = createViewFromTag(parent, name, context, attrs);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ViewGroup viewGroup = (ViewGroup) parent;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);</span><br><span class=\"line\">            rInflateChildren(parser, view, attrs, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            viewGroup.addView(view, params);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//parent的所有子节点都处理完毕的时候回onFinishInflate方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finishInflate) &#123;</span><br><span class=\"line\">        parent.onFinishInflate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可以添加自定义逻辑</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinishInflate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"LeetCode 1: Two sum(两数之和)","date":"2019-01-08T14:52:01.000Z","_content":"\n# LeetCode-1: Two sum(两数之和)\n\n> 日常新坑,沉迷学习,无法自拔\n\n> 自己实现的代码,在可解读的前提下尽力优化.\n\n[LeetCode:https://leetcode.com/problems/two-sum/](https://leetcode.com/problems/two-sum/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/two-sum/submissions/](https://leetcode-cn.com/problems/two-sum/submissions/)\n\n## 题目说明\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n<!-- more -->\n\n## 示例\n给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n\n## 解题方法\n### 暴力枚举\n遍历nums中的每个元素x,查找是否存在target-x的元素\n\n### 哈希表辅助(一次遍历)\n简单来说就是在遍历的时候将遍历过的x存入HashMap中,已x的值为key,x所在的位置为vaue.在遍历新的元素的时候检查target-x所对应的元素是否包含在HashMap中,如果存在的话就能直接获取到当前x的位置和target-x的位置.\n\n#### 图解相关思路\n以下是个测试用例,现在[1,2,7,11,15]的数组中寻找其中哪两个元素和为9.\n\n![输入条件](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-8/15229509.jpg)\n\n根据思路,我们开始遍历此数组\n\n当x = 0时候, 目标target - x = 8, 我们在check中查找是否存在key为8的元素. 此时我们发现没有key为8的元素,将key = 1,value = 0存入check的HashMap中.\n\n![i=0](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-8/30637830.jpg)\n\n移到下一个元素, x = 2,弥补target - x = 7, 在check中也没有找到key为7的元素,和上一步一样,将key = 2, value = 1存入check中.\n\n![i=1](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-8/55085311.jpg)\n\n移到下一个元素, x = 7, 目标target - x = 2,在check中找到了key为2的数据,此时当前 x = 7的位置为2,check中key为2对应的value为1, 也就是说次数组第1项目和第2项所对应的值之和为target\n\n![i=2](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-8/33350674.jpg)\n\n#### 代码实现\n```java\npublic int[] twoSum(int[] nums, int target) {\n    HashMap<Integer, Integer> check = new HashMap<>();\n    int[] position = new int[2];\n    for (int i = 0; i < nums.length; i++) {\n        int index = target - nums[i];\n        if (check.containsKey(index)) {\n            position[0] = check.get(index);\n            position[1] = i;\n            return position;\n        } else {\n            check.put(nums[i], i);\n        }\n    }\n    return position;\n}\n```\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/SumOfTwoNumbers.java)欢迎大家关注并提出改进的建议\n","source":"_posts/LeetCode-Two-sum.md","raw":"---\ntitle: 'LeetCode 1: Two sum(两数之和)'\ndate: 2019-01-08 22:52:01\ntags: [\"算法\" , \"LeetCode\"]\ncategories : \"LeetCode\"\n---\n\n# LeetCode-1: Two sum(两数之和)\n\n> 日常新坑,沉迷学习,无法自拔\n\n> 自己实现的代码,在可解读的前提下尽力优化.\n\n[LeetCode:https://leetcode.com/problems/two-sum/](https://leetcode.com/problems/two-sum/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/two-sum/submissions/](https://leetcode-cn.com/problems/two-sum/submissions/)\n\n## 题目说明\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n<!-- more -->\n\n## 示例\n给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n\n## 解题方法\n### 暴力枚举\n遍历nums中的每个元素x,查找是否存在target-x的元素\n\n### 哈希表辅助(一次遍历)\n简单来说就是在遍历的时候将遍历过的x存入HashMap中,已x的值为key,x所在的位置为vaue.在遍历新的元素的时候检查target-x所对应的元素是否包含在HashMap中,如果存在的话就能直接获取到当前x的位置和target-x的位置.\n\n#### 图解相关思路\n以下是个测试用例,现在[1,2,7,11,15]的数组中寻找其中哪两个元素和为9.\n\n![输入条件](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-8/15229509.jpg)\n\n根据思路,我们开始遍历此数组\n\n当x = 0时候, 目标target - x = 8, 我们在check中查找是否存在key为8的元素. 此时我们发现没有key为8的元素,将key = 1,value = 0存入check的HashMap中.\n\n![i=0](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-8/30637830.jpg)\n\n移到下一个元素, x = 2,弥补target - x = 7, 在check中也没有找到key为7的元素,和上一步一样,将key = 2, value = 1存入check中.\n\n![i=1](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-8/55085311.jpg)\n\n移到下一个元素, x = 7, 目标target - x = 2,在check中找到了key为2的数据,此时当前 x = 7的位置为2,check中key为2对应的value为1, 也就是说次数组第1项目和第2项所对应的值之和为target\n\n![i=2](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-8/33350674.jpg)\n\n#### 代码实现\n```java\npublic int[] twoSum(int[] nums, int target) {\n    HashMap<Integer, Integer> check = new HashMap<>();\n    int[] position = new int[2];\n    for (int i = 0; i < nums.length; i++) {\n        int index = target - nums[i];\n        if (check.containsKey(index)) {\n            position[0] = check.get(index);\n            position[1] = i;\n            return position;\n        } else {\n            check.put(nums[i], i);\n        }\n    }\n    return position;\n}\n```\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/SumOfTwoNumbers.java)欢迎大家关注并提出改进的建议\n","slug":"LeetCode-Two-sum","published":1,"updated":"2020-03-13T09:33:05.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dk0009q7dq96y9gqsu","content":"<h1 id=\"LeetCode-1-Two-sum-两数之和\"><a href=\"#LeetCode-1-Two-sum-两数之和\" class=\"headerlink\" title=\"LeetCode-1: Two sum(两数之和)\"></a>LeetCode-1: Two sum(两数之和)</h1><blockquote>\n<p>日常新坑,沉迷学习,无法自拔</p>\n</blockquote>\n<blockquote>\n<p>自己实现的代码,在可解读的前提下尽力优化.</p>\n</blockquote>\n<p><a href=\"https://leetcode.com/problems/two-sum/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode.com/problems/two-sum/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/two-sum/submissions/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/two-sum/submissions/</a></p>\n<h2 id=\"题目说明\"><a href=\"#题目说明\" class=\"headerlink\" title=\"题目说明\"></a>题目说明</h2><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n<a id=\"more\"></a>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>给定 nums = [2, 7, 11, 15], target = 9</p>\n<p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>\n<h2 id=\"解题方法\"><a href=\"#解题方法\" class=\"headerlink\" title=\"解题方法\"></a>解题方法</h2><h3 id=\"暴力枚举\"><a href=\"#暴力枚举\" class=\"headerlink\" title=\"暴力枚举\"></a>暴力枚举</h3><p>遍历nums中的每个元素x,查找是否存在target-x的元素</p>\n<h3 id=\"哈希表辅助-一次遍历\"><a href=\"#哈希表辅助-一次遍历\" class=\"headerlink\" title=\"哈希表辅助(一次遍历)\"></a>哈希表辅助(一次遍历)</h3><p>简单来说就是在遍历的时候将遍历过的x存入HashMap中,已x的值为key,x所在的位置为vaue.在遍历新的元素的时候检查target-x所对应的元素是否包含在HashMap中,如果存在的话就能直接获取到当前x的位置和target-x的位置.</p>\n<h4 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h4><p>以下是个测试用例,现在[1,2,7,11,15]的数组中寻找其中哪两个元素和为9.</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-8/15229509.jpg\" alt=\"输入条件\"></p>\n<p>根据思路,我们开始遍历此数组</p>\n<p>当x = 0时候, 目标target - x = 8, 我们在check中查找是否存在key为8的元素. 此时我们发现没有key为8的元素,将key = 1,value = 0存入check的HashMap中.</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-8/30637830.jpg\" alt=\"i=0\"></p>\n<p>移到下一个元素, x = 2,弥补target - x = 7, 在check中也没有找到key为7的元素,和上一步一样,将key = 2, value = 1存入check中.</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-8/55085311.jpg\" alt=\"i=1\"></p>\n<p>移到下一个元素, x = 7, 目标target - x = 2,在check中找到了key为2的数据,此时当前 x = 7的位置为2,check中key为2对应的value为1, 也就是说次数组第1项目和第2项所对应的值之和为target</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-8/33350674.jpg\" alt=\"i=2\"></p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    HashMap&lt;Integer, Integer&gt; check = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] position = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = target - nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check.containsKey(index)) &#123;</span><br><span class=\"line\">            position[<span class=\"number\">0</span>] = check.get(index);</span><br><span class=\"line\">            position[<span class=\"number\">1</span>] = i;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> position;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            check.put(nums[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> position;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/SumOfTwoNumbers.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"LeetCode-1-Two-sum-两数之和\"><a href=\"#LeetCode-1-Two-sum-两数之和\" class=\"headerlink\" title=\"LeetCode-1: Two sum(两数之和)\"></a>LeetCode-1: Two sum(两数之和)</h1><blockquote>\n<p>日常新坑,沉迷学习,无法自拔</p>\n</blockquote>\n<blockquote>\n<p>自己实现的代码,在可解读的前提下尽力优化.</p>\n</blockquote>\n<p><a href=\"https://leetcode.com/problems/two-sum/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode.com/problems/two-sum/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/two-sum/submissions/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/two-sum/submissions/</a></p>\n<h2 id=\"题目说明\"><a href=\"#题目说明\" class=\"headerlink\" title=\"题目说明\"></a>题目说明</h2><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>","more":"<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>给定 nums = [2, 7, 11, 15], target = 9</p>\n<p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>\n<h2 id=\"解题方法\"><a href=\"#解题方法\" class=\"headerlink\" title=\"解题方法\"></a>解题方法</h2><h3 id=\"暴力枚举\"><a href=\"#暴力枚举\" class=\"headerlink\" title=\"暴力枚举\"></a>暴力枚举</h3><p>遍历nums中的每个元素x,查找是否存在target-x的元素</p>\n<h3 id=\"哈希表辅助-一次遍历\"><a href=\"#哈希表辅助-一次遍历\" class=\"headerlink\" title=\"哈希表辅助(一次遍历)\"></a>哈希表辅助(一次遍历)</h3><p>简单来说就是在遍历的时候将遍历过的x存入HashMap中,已x的值为key,x所在的位置为vaue.在遍历新的元素的时候检查target-x所对应的元素是否包含在HashMap中,如果存在的话就能直接获取到当前x的位置和target-x的位置.</p>\n<h4 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h4><p>以下是个测试用例,现在[1,2,7,11,15]的数组中寻找其中哪两个元素和为9.</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-8/15229509.jpg\" alt=\"输入条件\"></p>\n<p>根据思路,我们开始遍历此数组</p>\n<p>当x = 0时候, 目标target - x = 8, 我们在check中查找是否存在key为8的元素. 此时我们发现没有key为8的元素,将key = 1,value = 0存入check的HashMap中.</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-8/30637830.jpg\" alt=\"i=0\"></p>\n<p>移到下一个元素, x = 2,弥补target - x = 7, 在check中也没有找到key为7的元素,和上一步一样,将key = 2, value = 1存入check中.</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-8/55085311.jpg\" alt=\"i=1\"></p>\n<p>移到下一个元素, x = 7, 目标target - x = 2,在check中找到了key为2的数据,此时当前 x = 7的位置为2,check中key为2对应的value为1, 也就是说次数组第1项目和第2项所对应的值之和为target</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-8/33350674.jpg\" alt=\"i=2\"></p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    HashMap&lt;Integer, Integer&gt; check = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] position = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = target - nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check.containsKey(index)) &#123;</span><br><span class=\"line\">            position[<span class=\"number\">0</span>] = check.get(index);</span><br><span class=\"line\">            position[<span class=\"number\">1</span>] = i;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> position;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            check.put(nums[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> position;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/SumOfTwoNumbers.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>"},{"title":"LeetCode2: Add two numbers(两数相加)","date":"2019-01-09T15:17:44.000Z","_content":"\n# LeetCode-2: Add two numbers(两数相加)\n\n\n[LeetCode:https://leetcode-cn.com/problems/add-two-numbers/](https://leetcode.com/problems/add-two-numbers/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/add-two-numbers/](https://leetcode-cn.com/problems/add-two-numbers/)\n\n## 题目说明\n给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\n如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n\n<!-- more -->\n\n\n## 示例：\n输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n\n输出：7 -> 0 -> 8\n\n输入：(8 -> 4 -> 9) + (5 -> 6 -> 3)\n\n输出：3 -> 1 -> 3 -> 1\n\n## 解题方法\n### 初等数学\n简单的数学相加即可,不过需要处理几个特殊情况,当两个链表长度不同时,短链表下一位数据用0填充\n\n在两个链接相加的过程中,增加一个变量,用于记录低位和像高位的进位情况,在两个链表遍历后,在查看此值,决定是否添加高位.\n\n#### 图解相关思路\n这里输入的两个链表分别为8->4->9和5->6->3\n![输入条件](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-9/42941014.jpg)\n\n同时取出两个钟列表的第一个元素,计算sum =13,因为result只记录当前个位数据,通过sum%10得到个位内容,添加到结果链表尾部,同时计算进位标识carry = sum/10 = 1.\n![index=0](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-9/69281328.jpg)\n\n重复上面步骤,将1插入结果链表尾部,计算carry = 1\n![index=1](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-10/16599903.jpg)\n\n重复上面步骤,将3插入结果链表尾部,计算carry = 1\n![index=2](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-10/65109518.jpg)\n\n当L1和L2都遍历结束后,检查carry的内容,发现此时carry非0,则尾插一个carry作为高位的内容\n![补位](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-10/11081499.jpg)\n\n\n#### 代码实现\n```java\npublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n    ListNode result = new ListNode(0);\n    ListNode temp = result;\n    int carry = 0;\n\n    while (l1 != null || l2 != null) {\n        int a = (l1 != null) ? l1.val : 0;\n        int b = (l2 != null) ? l2.val : 0;\n        int sum = carry + a + b;\n\n        carry = sum / 10;\n        temp.next = new ListNode(sum % 10);\n        temp = temp.next;\n\n        if (l1 != null) l1 = l1.next;\n        if (l2 != null) l2 = l2.next;\n    }\n\n\n    if (carry > 0) {\n        temp.next = new ListNode(carry);\n    }\n    return result.next;\n}\n```\n\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/AddingTwoLinkNumbers.java)欢迎大家关注并提出改进的建议\n","source":"_posts/LeetCode2-Add-two-numbers.md","raw":"---\ntitle: 'LeetCode2: Add two numbers(两数相加)'\ndate: 2019-01-09 23:17:44\ntags: [\"算法\" , \"LeetCode\"]\ncategories : \"LeetCode\"\n---\n\n# LeetCode-2: Add two numbers(两数相加)\n\n\n[LeetCode:https://leetcode-cn.com/problems/add-two-numbers/](https://leetcode.com/problems/add-two-numbers/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/add-two-numbers/](https://leetcode-cn.com/problems/add-two-numbers/)\n\n## 题目说明\n给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\n如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n\n<!-- more -->\n\n\n## 示例：\n输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n\n输出：7 -> 0 -> 8\n\n输入：(8 -> 4 -> 9) + (5 -> 6 -> 3)\n\n输出：3 -> 1 -> 3 -> 1\n\n## 解题方法\n### 初等数学\n简单的数学相加即可,不过需要处理几个特殊情况,当两个链表长度不同时,短链表下一位数据用0填充\n\n在两个链接相加的过程中,增加一个变量,用于记录低位和像高位的进位情况,在两个链表遍历后,在查看此值,决定是否添加高位.\n\n#### 图解相关思路\n这里输入的两个链表分别为8->4->9和5->6->3\n![输入条件](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-9/42941014.jpg)\n\n同时取出两个钟列表的第一个元素,计算sum =13,因为result只记录当前个位数据,通过sum%10得到个位内容,添加到结果链表尾部,同时计算进位标识carry = sum/10 = 1.\n![index=0](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-9/69281328.jpg)\n\n重复上面步骤,将1插入结果链表尾部,计算carry = 1\n![index=1](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-10/16599903.jpg)\n\n重复上面步骤,将3插入结果链表尾部,计算carry = 1\n![index=2](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-10/65109518.jpg)\n\n当L1和L2都遍历结束后,检查carry的内容,发现此时carry非0,则尾插一个carry作为高位的内容\n![补位](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-10/11081499.jpg)\n\n\n#### 代码实现\n```java\npublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n    ListNode result = new ListNode(0);\n    ListNode temp = result;\n    int carry = 0;\n\n    while (l1 != null || l2 != null) {\n        int a = (l1 != null) ? l1.val : 0;\n        int b = (l2 != null) ? l2.val : 0;\n        int sum = carry + a + b;\n\n        carry = sum / 10;\n        temp.next = new ListNode(sum % 10);\n        temp = temp.next;\n\n        if (l1 != null) l1 = l1.next;\n        if (l2 != null) l2 = l2.next;\n    }\n\n\n    if (carry > 0) {\n        temp.next = new ListNode(carry);\n    }\n    return result.next;\n}\n```\n\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/AddingTwoLinkNumbers.java)欢迎大家关注并提出改进的建议\n","slug":"LeetCode2-Add-two-numbers","published":1,"updated":"2020-03-13T09:33:05.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dl000aq7dqyweqz78p","content":"<h1 id=\"LeetCode-2-Add-two-numbers-两数相加\"><a href=\"#LeetCode-2-Add-two-numbers-两数相加\" class=\"headerlink\" title=\"LeetCode-2: Add two numbers(两数相加)\"></a>LeetCode-2: Add two numbers(两数相加)</h1><p><a href=\"https://leetcode.com/problems/add-two-numbers/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode-cn.com/problems/add-two-numbers/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/add-two-numbers/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/add-two-numbers/</a></p>\n<h2 id=\"题目说明\"><a href=\"#题目说明\" class=\"headerlink\" title=\"题目说明\"></a>题目说明</h2><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。<br>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。<br>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<a id=\"more\"></a>\n<h2 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h2><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</p>\n<p>输出：7 -&gt; 0 -&gt; 8</p>\n<p>输入：(8 -&gt; 4 -&gt; 9) + (5 -&gt; 6 -&gt; 3)</p>\n<p>输出：3 -&gt; 1 -&gt; 3 -&gt; 1</p>\n<h2 id=\"解题方法\"><a href=\"#解题方法\" class=\"headerlink\" title=\"解题方法\"></a>解题方法</h2><h3 id=\"初等数学\"><a href=\"#初等数学\" class=\"headerlink\" title=\"初等数学\"></a>初等数学</h3><p>简单的数学相加即可,不过需要处理几个特殊情况,当两个链表长度不同时,短链表下一位数据用0填充</p>\n<p>在两个链接相加的过程中,增加一个变量,用于记录低位和像高位的进位情况,在两个链表遍历后,在查看此值,决定是否添加高位.</p>\n<h4 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h4><p>这里输入的两个链表分别为8-&gt;4-&gt;9和5-&gt;6-&gt;3<br><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-9/42941014.jpg\" alt=\"输入条件\"></p>\n<p>同时取出两个钟列表的第一个元素,计算sum =13,因为result只记录当前个位数据,通过sum%10得到个位内容,添加到结果链表尾部,同时计算进位标识carry = sum/10 = 1.<br><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-9/69281328.jpg\" alt=\"index=0\"></p>\n<p>重复上面步骤,将1插入结果链表尾部,计算carry = 1<br><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-10/16599903.jpg\" alt=\"index=1\"></p>\n<p>重复上面步骤,将3插入结果链表尾部,计算carry = 1<br><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-10/65109518.jpg\" alt=\"index=2\"></p>\n<p>当L1和L2都遍历结束后,检查carry的内容,发现此时carry非0,则尾插一个carry作为高位的内容<br><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-10/11081499.jpg\" alt=\"补位\"></p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">addTwoNumbers</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">    ListNode result = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    ListNode temp = result;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l1 != <span class=\"keyword\">null</span> || l2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = (l1 != <span class=\"keyword\">null</span>) ? l1.val : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b = (l2 != <span class=\"keyword\">null</span>) ? l2.val : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = carry + a + b;</span><br><span class=\"line\"></span><br><span class=\"line\">        carry = sum / <span class=\"number\">10</span>;</span><br><span class=\"line\">        temp.next = <span class=\"keyword\">new</span> ListNode(sum % <span class=\"number\">10</span>);</span><br><span class=\"line\">        temp = temp.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l1 != <span class=\"keyword\">null</span>) l1 = l1.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l2 != <span class=\"keyword\">null</span>) l2 = l2.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (carry &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        temp.next = <span class=\"keyword\">new</span> ListNode(carry);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/AddingTwoLinkNumbers.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"LeetCode-2-Add-two-numbers-两数相加\"><a href=\"#LeetCode-2-Add-two-numbers-两数相加\" class=\"headerlink\" title=\"LeetCode-2: Add two numbers(两数相加)\"></a>LeetCode-2: Add two numbers(两数相加)</h1><p><a href=\"https://leetcode.com/problems/add-two-numbers/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode-cn.com/problems/add-two-numbers/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/add-two-numbers/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/add-two-numbers/</a></p>\n<h2 id=\"题目说明\"><a href=\"#题目说明\" class=\"headerlink\" title=\"题目说明\"></a>题目说明</h2><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。<br>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。<br>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>","more":"<h2 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h2><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</p>\n<p>输出：7 -&gt; 0 -&gt; 8</p>\n<p>输入：(8 -&gt; 4 -&gt; 9) + (5 -&gt; 6 -&gt; 3)</p>\n<p>输出：3 -&gt; 1 -&gt; 3 -&gt; 1</p>\n<h2 id=\"解题方法\"><a href=\"#解题方法\" class=\"headerlink\" title=\"解题方法\"></a>解题方法</h2><h3 id=\"初等数学\"><a href=\"#初等数学\" class=\"headerlink\" title=\"初等数学\"></a>初等数学</h3><p>简单的数学相加即可,不过需要处理几个特殊情况,当两个链表长度不同时,短链表下一位数据用0填充</p>\n<p>在两个链接相加的过程中,增加一个变量,用于记录低位和像高位的进位情况,在两个链表遍历后,在查看此值,决定是否添加高位.</p>\n<h4 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h4><p>这里输入的两个链表分别为8-&gt;4-&gt;9和5-&gt;6-&gt;3<br><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-9/42941014.jpg\" alt=\"输入条件\"></p>\n<p>同时取出两个钟列表的第一个元素,计算sum =13,因为result只记录当前个位数据,通过sum%10得到个位内容,添加到结果链表尾部,同时计算进位标识carry = sum/10 = 1.<br><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-9/69281328.jpg\" alt=\"index=0\"></p>\n<p>重复上面步骤,将1插入结果链表尾部,计算carry = 1<br><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-10/16599903.jpg\" alt=\"index=1\"></p>\n<p>重复上面步骤,将3插入结果链表尾部,计算carry = 1<br><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-10/65109518.jpg\" alt=\"index=2\"></p>\n<p>当L1和L2都遍历结束后,检查carry的内容,发现此时carry非0,则尾插一个carry作为高位的内容<br><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-10/11081499.jpg\" alt=\"补位\"></p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">addTwoNumbers</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">    ListNode result = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    ListNode temp = result;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l1 != <span class=\"keyword\">null</span> || l2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = (l1 != <span class=\"keyword\">null</span>) ? l1.val : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b = (l2 != <span class=\"keyword\">null</span>) ? l2.val : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = carry + a + b;</span><br><span class=\"line\"></span><br><span class=\"line\">        carry = sum / <span class=\"number\">10</span>;</span><br><span class=\"line\">        temp.next = <span class=\"keyword\">new</span> ListNode(sum % <span class=\"number\">10</span>);</span><br><span class=\"line\">        temp = temp.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l1 != <span class=\"keyword\">null</span>) l1 = l1.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l2 != <span class=\"keyword\">null</span>) l2 = l2.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (carry &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        temp.next = <span class=\"keyword\">new</span> ListNode(carry);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/AddingTwoLinkNumbers.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>"},{"title":"LeetCode20-ValidParentheses(有效的括号)","date":"2019-02-16T08:06:44.000Z","_content":"\n# LeetCode20:ValidParentheses(有效的括号)\n\n[LeetCode:https://leetcode-cn.com/problems/valid-parentheses/](https://leetcode.com/problems/valid-parentheses/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/valid-parentheses/](https://leetcode-cn.com/problems/valid-parentheses/)\n\n## 题目描述\n给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。\n\n有效字符串需满足：\n* 左括号必须用相同类型的右括号闭合。\n* 左括号必须以正确的顺序闭合。\n* 注意空字符串可被认为是有效字符串。\n\n  <!-- more -->\n\n## 示例\n* 示例 1:\n  * 输入: \"()\"\n  * 输出: true\n\n* 示例 2:\n  * 输入: \"()[]{}\"\n  * 输出: true\n\n* 示例 3:\n  * 输入: \"(]\"\n  * 输出: false\n\n* 示例 4:\n  * 输入: \"([)]\"\n  * 输出: false\n\n* 示例 5:\n  * 输入: \"{[]}\"\n  * 输出: true\n\n## 解题方法-栈辅助\n通过题目的描述中我们可以知道括号需要有序的闭合,也就是每次开括号后遇到的一个闭括号序号和开括号对应,每次对应后就不需要再次验证,后出现的开括号需要先验证,这种情况下,很符合栈的特点,后进先出.\n\n我们可以再遇到开括号的时候将其放入栈中,在遇到闭括号的时候出栈并验证两者时候匹配.\n\n## 图解相关思路\n下面针对\"{[[]{}]}()\"子串进行校验\n\n当i=0时,通过c去的当前位置的字符.我们看到此时c={, {属于开括号 **(,[,{** 之一,将{入栈即可,此时栈(stack顶为{)\n![i=0](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216173040.png)\n\n类似的当i=2时,栈中从顶到底元素分别为[[{\n![i=2](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216173454.png)\n\n当i=3是,c为],]属于闭括号 **),],}**,此时stack非空,我们出去栈顶元素为[,此时栈顶元素'['和c']'匹配,则继续检测.\n若此时栈顶元素和c不匹配,则返回false,此字符串中的括号并不是有效的\n![i=3](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216181107.png)\n\n类似的,当i=4时继续入栈元素\n![i=4](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216181504.png)\n\n当i=9时,此时栈中元素全部验证并出栈.\n![i=9](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216181725.png)\n\n最后我们要检测一下stack中是否还包含未出栈的元素,当stack中包含元素时说明存在开括号未出现与其匹配的闭括号,此串不包含有效括号\n\n## 代码实现\n```java\npublic boolean isValid(String s) {\n    Stack<Character> stack = new Stack<>();\n    for (int i = 0; i < s.length(); i++){\n        char c = s.charAt(i);\n        if (c == '(' || c == '[' || c == '{'){\n            stack.push(c);\n        }else if (stack.empty()){\n            return false;\n        }else {\n            switch (c) {\n                case ')':\n                    if (stack.pop() != '('){\n                    return false;\n                }\n                break;\n                case ']':\n                    if (stack.pop() != '[') {\n                        return false;\n                    }\n                    break;\n                case '}':\n                    if (stack.pop() != '{') {\n                        return false;\n                    }\n                    break;\n            }\n        }\n    }\n    return stack.empty();\n}\n```\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/ValidParentheses.java)欢迎大家关注并提出改进的建议\n","source":"_posts/LeetCode20-ValidParentheses.md","raw":"---\ntitle: 'LeetCode20-ValidParentheses(有效的括号)'\ndate: 2019-02-16 16:06:44\ntags: [\"算法\" , \"LeetCode\"]\ncategories : \"LeetCode\"\n---\n\n# LeetCode20:ValidParentheses(有效的括号)\n\n[LeetCode:https://leetcode-cn.com/problems/valid-parentheses/](https://leetcode.com/problems/valid-parentheses/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/valid-parentheses/](https://leetcode-cn.com/problems/valid-parentheses/)\n\n## 题目描述\n给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。\n\n有效字符串需满足：\n* 左括号必须用相同类型的右括号闭合。\n* 左括号必须以正确的顺序闭合。\n* 注意空字符串可被认为是有效字符串。\n\n  <!-- more -->\n\n## 示例\n* 示例 1:\n  * 输入: \"()\"\n  * 输出: true\n\n* 示例 2:\n  * 输入: \"()[]{}\"\n  * 输出: true\n\n* 示例 3:\n  * 输入: \"(]\"\n  * 输出: false\n\n* 示例 4:\n  * 输入: \"([)]\"\n  * 输出: false\n\n* 示例 5:\n  * 输入: \"{[]}\"\n  * 输出: true\n\n## 解题方法-栈辅助\n通过题目的描述中我们可以知道括号需要有序的闭合,也就是每次开括号后遇到的一个闭括号序号和开括号对应,每次对应后就不需要再次验证,后出现的开括号需要先验证,这种情况下,很符合栈的特点,后进先出.\n\n我们可以再遇到开括号的时候将其放入栈中,在遇到闭括号的时候出栈并验证两者时候匹配.\n\n## 图解相关思路\n下面针对\"{[[]{}]}()\"子串进行校验\n\n当i=0时,通过c去的当前位置的字符.我们看到此时c={, {属于开括号 **(,[,{** 之一,将{入栈即可,此时栈(stack顶为{)\n![i=0](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216173040.png)\n\n类似的当i=2时,栈中从顶到底元素分别为[[{\n![i=2](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216173454.png)\n\n当i=3是,c为],]属于闭括号 **),],}**,此时stack非空,我们出去栈顶元素为[,此时栈顶元素'['和c']'匹配,则继续检测.\n若此时栈顶元素和c不匹配,则返回false,此字符串中的括号并不是有效的\n![i=3](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216181107.png)\n\n类似的,当i=4时继续入栈元素\n![i=4](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216181504.png)\n\n当i=9时,此时栈中元素全部验证并出栈.\n![i=9](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216181725.png)\n\n最后我们要检测一下stack中是否还包含未出栈的元素,当stack中包含元素时说明存在开括号未出现与其匹配的闭括号,此串不包含有效括号\n\n## 代码实现\n```java\npublic boolean isValid(String s) {\n    Stack<Character> stack = new Stack<>();\n    for (int i = 0; i < s.length(); i++){\n        char c = s.charAt(i);\n        if (c == '(' || c == '[' || c == '{'){\n            stack.push(c);\n        }else if (stack.empty()){\n            return false;\n        }else {\n            switch (c) {\n                case ')':\n                    if (stack.pop() != '('){\n                    return false;\n                }\n                break;\n                case ']':\n                    if (stack.pop() != '[') {\n                        return false;\n                    }\n                    break;\n                case '}':\n                    if (stack.pop() != '{') {\n                        return false;\n                    }\n                    break;\n            }\n        }\n    }\n    return stack.empty();\n}\n```\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/ValidParentheses.java)欢迎大家关注并提出改进的建议\n","slug":"LeetCode20-ValidParentheses","published":1,"updated":"2020-03-13T09:33:05.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dm000bq7dqgenuep9r","content":"<h1 id=\"LeetCode20-ValidParentheses-有效的括号\"><a href=\"#LeetCode20-ValidParentheses-有效的括号\" class=\"headerlink\" title=\"LeetCode20:ValidParentheses(有效的括号)\"></a>LeetCode20:ValidParentheses(有效的括号)</h1><p><a href=\"https://leetcode.com/problems/valid-parentheses/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode-cn.com/problems/valid-parentheses/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/valid-parentheses/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/valid-parentheses/</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<ul>\n<li>左括号必须用相同类型的右括号闭合。</li>\n<li>左括号必须以正确的顺序闭合。</li>\n<li><p>注意空字符串可被认为是有效字符串。</p>\n<a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li><p>示例 1:</p>\n<ul>\n<li>输入: “()”</li>\n<li>输出: true</li>\n</ul>\n</li>\n<li><p>示例 2:</p>\n<ul>\n<li>输入: “()[]{}”</li>\n<li>输出: true</li>\n</ul>\n</li>\n<li><p>示例 3:</p>\n<ul>\n<li>输入: “(]”</li>\n<li>输出: false</li>\n</ul>\n</li>\n<li><p>示例 4:</p>\n<ul>\n<li>输入: “([)]”</li>\n<li>输出: false</li>\n</ul>\n</li>\n<li><p>示例 5:</p>\n<ul>\n<li>输入: “{[]}”</li>\n<li>输出: true</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解题方法-栈辅助\"><a href=\"#解题方法-栈辅助\" class=\"headerlink\" title=\"解题方法-栈辅助\"></a>解题方法-栈辅助</h2><p>通过题目的描述中我们可以知道括号需要有序的闭合,也就是每次开括号后遇到的一个闭括号序号和开括号对应,每次对应后就不需要再次验证,后出现的开括号需要先验证,这种情况下,很符合栈的特点,后进先出.</p>\n<p>我们可以再遇到开括号的时候将其放入栈中,在遇到闭括号的时候出栈并验证两者时候匹配.</p>\n<h2 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h2><p>下面针对”{[[]{}]}()”子串进行校验</p>\n<p>当i=0时,通过c去的当前位置的字符.我们看到此时c={, {属于开括号 <strong>(,[,{</strong> 之一,将{入栈即可,此时栈(stack顶为{)<br><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216173040.png\" alt=\"i=0\"></p>\n<p>类似的当i=2时,栈中从顶到底元素分别为[[{<br><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216173454.png\" alt=\"i=2\"></p>\n<p>当i=3是,c为],]属于闭括号 <strong>),],}</strong>,此时stack非空,我们出去栈顶元素为[,此时栈顶元素’[‘和c’]’匹配,则继续检测.<br>若此时栈顶元素和c不匹配,则返回false,此字符串中的括号并不是有效的<br><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216181107.png\" alt=\"i=3\"></p>\n<p>类似的,当i=4时继续入栈元素<br><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216181504.png\" alt=\"i=4\"></p>\n<p>当i=9时,此时栈中元素全部验证并出栈.<br><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216181725.png\" alt=\"i=9\"></p>\n<p>最后我们要检测一下stack中是否还包含未出栈的元素,当stack中包含元素时说明存在开括号未出现与其匹配的闭括号,此串不包含有效括号</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    Stack&lt;Character&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = s.charAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">'('</span> || c == <span class=\"string\">'['</span> || c == <span class=\"string\">'&#123;'</span>)&#123;</span><br><span class=\"line\">            stack.push(c);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stack.empty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (c) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">')'</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (stack.pop() != <span class=\"string\">'('</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">']'</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (stack.pop() != <span class=\"string\">'['</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'&#125;'</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (stack.pop() != <span class=\"string\">'&#123;'</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stack.empty();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/ValidParentheses.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"LeetCode20-ValidParentheses-有效的括号\"><a href=\"#LeetCode20-ValidParentheses-有效的括号\" class=\"headerlink\" title=\"LeetCode20:ValidParentheses(有效的括号)\"></a>LeetCode20:ValidParentheses(有效的括号)</h1><p><a href=\"https://leetcode.com/problems/valid-parentheses/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode-cn.com/problems/valid-parentheses/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/valid-parentheses/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/valid-parentheses/</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<ul>\n<li>左括号必须用相同类型的右括号闭合。</li>\n<li>左括号必须以正确的顺序闭合。</li>\n<li><p>注意空字符串可被认为是有效字符串。</p>","more":"</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li><p>示例 1:</p>\n<ul>\n<li>输入: “()”</li>\n<li>输出: true</li>\n</ul>\n</li>\n<li><p>示例 2:</p>\n<ul>\n<li>输入: “()[]{}”</li>\n<li>输出: true</li>\n</ul>\n</li>\n<li><p>示例 3:</p>\n<ul>\n<li>输入: “(]”</li>\n<li>输出: false</li>\n</ul>\n</li>\n<li><p>示例 4:</p>\n<ul>\n<li>输入: “([)]”</li>\n<li>输出: false</li>\n</ul>\n</li>\n<li><p>示例 5:</p>\n<ul>\n<li>输入: “{[]}”</li>\n<li>输出: true</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解题方法-栈辅助\"><a href=\"#解题方法-栈辅助\" class=\"headerlink\" title=\"解题方法-栈辅助\"></a>解题方法-栈辅助</h2><p>通过题目的描述中我们可以知道括号需要有序的闭合,也就是每次开括号后遇到的一个闭括号序号和开括号对应,每次对应后就不需要再次验证,后出现的开括号需要先验证,这种情况下,很符合栈的特点,后进先出.</p>\n<p>我们可以再遇到开括号的时候将其放入栈中,在遇到闭括号的时候出栈并验证两者时候匹配.</p>\n<h2 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h2><p>下面针对”{[[]{}]}()”子串进行校验</p>\n<p>当i=0时,通过c去的当前位置的字符.我们看到此时c={, {属于开括号 <strong>(,[,{</strong> 之一,将{入栈即可,此时栈(stack顶为{)<br><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216173040.png\" alt=\"i=0\"></p>\n<p>类似的当i=2时,栈中从顶到底元素分别为[[{<br><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216173454.png\" alt=\"i=2\"></p>\n<p>当i=3是,c为],]属于闭括号 <strong>),],}</strong>,此时stack非空,我们出去栈顶元素为[,此时栈顶元素’[‘和c’]’匹配,则继续检测.<br>若此时栈顶元素和c不匹配,则返回false,此字符串中的括号并不是有效的<br><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216181107.png\" alt=\"i=3\"></p>\n<p>类似的,当i=4时继续入栈元素<br><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216181504.png\" alt=\"i=4\"></p>\n<p>当i=9时,此时栈中元素全部验证并出栈.<br><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216181725.png\" alt=\"i=9\"></p>\n<p>最后我们要检测一下stack中是否还包含未出栈的元素,当stack中包含元素时说明存在开括号未出现与其匹配的闭括号,此串不包含有效括号</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    Stack&lt;Character&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = s.charAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">'('</span> || c == <span class=\"string\">'['</span> || c == <span class=\"string\">'&#123;'</span>)&#123;</span><br><span class=\"line\">            stack.push(c);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stack.empty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (c) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">')'</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (stack.pop() != <span class=\"string\">'('</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">']'</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (stack.pop() != <span class=\"string\">'['</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'&#125;'</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (stack.pop() != <span class=\"string\">'&#123;'</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stack.empty();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/ValidParentheses.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>"},{"title":"LeetCode21-MergeTwoSortedLists(合并两个有序链表)","date":"2019-02-16T10:39:59.000Z","_content":"\n# LeetCode21:MergeTwoSortedLists(合并两个有序链表)\n\n[LeetCode:https://leetcode-cn.com/problems/merge-two-sorted-lists/](https://leetcode.com/problems/merge-two-sorted-lists/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/merge-two-sorted-lists/](https://leetcode-cn.com/problems/merge-two-sorted-lists/)\n\n## 题目描述\n将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。\n\n## 示例：\n* 输入：1->2->4, 1->3->5->6\n* 输出：1->1->2->3->4->5->6\n\n  <!-- more -->\n\n## 解题方法-类归并\n此两个链表的合并类似归并排序中将分治后的有序序列合并的过程,简单来说就是在合并的时候比较两个链表首位的的大小,取较小的值放入合并后的链表中,并移动对应的链表.\n\n## 图解相关思路\n下面针对1->2->4, 1->3->5->6这两个链表进行合并\n\n我们需要额外创建head和result,head用于存储需要返回的链表收节点,result用于跟随当前插入的数据位置\n\n![数据准备](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216191013.png)\n\n分别取出l1的元素为1,l2的元素为1,此时1<=1,则将l1的对应元素的1放入合并后的链表中\n\n![10](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216191926.png)\n\n除此之外,我们还要移动l1和result指向的位置(下图中用红箭头表示实际移动后的位置,此时合并后的结果中的1与result为同一个节点)\n\n![11](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216192121.png)\n\n继续检查链表元素,此时l1中的元素2>l2中的元素1,则将l2中的元素1放入合并后的链表中\n\n![20](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216192412.png)\n\n继续移动相关链表\n\n![21](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216192608.png)\n\n当我们处理了一定的节点后,可能会出现某个链接(l1)不再有节点,此时直接将另一个链表(l2)的剩下节点插入合并后的节点即可\n![30](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216192744.png)\n\n## 相关代码\n```java\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n    ListNode result = new ListNode(0);\n    ListNode head = result;\n    while (l1 != null && l2 != null){\n        if (l1.val <= l2.val){\n            result.next = new ListNode(l1.val);\n            l1 = l1.next;\n        }else {\n            result.next =  new ListNode(l2.val);\n            l2 = l2.next;\n        }\n        result = result.next;\n    }\n    if (l1 == null) result.next = l2;\n    if (l2 == null) result.next = l1;\n    return head.next;\n}\n```\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/MergeTwoSortedLists.java)欢迎大家关注并提出改进的建议\n","source":"_posts/LeetCode21-MergeTwoSortedLists.md","raw":"---\ntitle: 'LeetCode21-MergeTwoSortedLists(合并两个有序链表)'\ndate: 2019-02-16 18:39:59\ntags: [\"算法\" , \"LeetCode\"]\ncategories : \"LeetCode\"\n---\n\n# LeetCode21:MergeTwoSortedLists(合并两个有序链表)\n\n[LeetCode:https://leetcode-cn.com/problems/merge-two-sorted-lists/](https://leetcode.com/problems/merge-two-sorted-lists/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/merge-two-sorted-lists/](https://leetcode-cn.com/problems/merge-two-sorted-lists/)\n\n## 题目描述\n将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。\n\n## 示例：\n* 输入：1->2->4, 1->3->5->6\n* 输出：1->1->2->3->4->5->6\n\n  <!-- more -->\n\n## 解题方法-类归并\n此两个链表的合并类似归并排序中将分治后的有序序列合并的过程,简单来说就是在合并的时候比较两个链表首位的的大小,取较小的值放入合并后的链表中,并移动对应的链表.\n\n## 图解相关思路\n下面针对1->2->4, 1->3->5->6这两个链表进行合并\n\n我们需要额外创建head和result,head用于存储需要返回的链表收节点,result用于跟随当前插入的数据位置\n\n![数据准备](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216191013.png)\n\n分别取出l1的元素为1,l2的元素为1,此时1<=1,则将l1的对应元素的1放入合并后的链表中\n\n![10](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216191926.png)\n\n除此之外,我们还要移动l1和result指向的位置(下图中用红箭头表示实际移动后的位置,此时合并后的结果中的1与result为同一个节点)\n\n![11](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216192121.png)\n\n继续检查链表元素,此时l1中的元素2>l2中的元素1,则将l2中的元素1放入合并后的链表中\n\n![20](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216192412.png)\n\n继续移动相关链表\n\n![21](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216192608.png)\n\n当我们处理了一定的节点后,可能会出现某个链接(l1)不再有节点,此时直接将另一个链表(l2)的剩下节点插入合并后的节点即可\n![30](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216192744.png)\n\n## 相关代码\n```java\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n    ListNode result = new ListNode(0);\n    ListNode head = result;\n    while (l1 != null && l2 != null){\n        if (l1.val <= l2.val){\n            result.next = new ListNode(l1.val);\n            l1 = l1.next;\n        }else {\n            result.next =  new ListNode(l2.val);\n            l2 = l2.next;\n        }\n        result = result.next;\n    }\n    if (l1 == null) result.next = l2;\n    if (l2 == null) result.next = l1;\n    return head.next;\n}\n```\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/MergeTwoSortedLists.java)欢迎大家关注并提出改进的建议\n","slug":"LeetCode21-MergeTwoSortedLists","published":1,"updated":"2020-03-13T09:33:05.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dn000cq7dq5thsdn45","content":"<h1 id=\"LeetCode21-MergeTwoSortedLists-合并两个有序链表\"><a href=\"#LeetCode21-MergeTwoSortedLists-合并两个有序链表\" class=\"headerlink\" title=\"LeetCode21:MergeTwoSortedLists(合并两个有序链表)\"></a>LeetCode21:MergeTwoSortedLists(合并两个有序链表)</h1><p><a href=\"https://leetcode.com/problems/merge-two-sorted-lists/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode-cn.com/problems/merge-two-sorted-lists/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/merge-two-sorted-lists/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/merge-two-sorted-lists/</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p>\n<h2 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h2><ul>\n<li>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;5-&gt;6</li>\n<li><p>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6</p>\n<a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"解题方法-类归并\"><a href=\"#解题方法-类归并\" class=\"headerlink\" title=\"解题方法-类归并\"></a>解题方法-类归并</h2><p>此两个链表的合并类似归并排序中将分治后的有序序列合并的过程,简单来说就是在合并的时候比较两个链表首位的的大小,取较小的值放入合并后的链表中,并移动对应的链表.</p>\n<h2 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h2><p>下面针对1-&gt;2-&gt;4, 1-&gt;3-&gt;5-&gt;6这两个链表进行合并</p>\n<p>我们需要额外创建head和result,head用于存储需要返回的链表收节点,result用于跟随当前插入的数据位置</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216191013.png\" alt=\"数据准备\"></p>\n<p>分别取出l1的元素为1,l2的元素为1,此时1&lt;=1,则将l1的对应元素的1放入合并后的链表中</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216191926.png\" alt=\"10\"></p>\n<p>除此之外,我们还要移动l1和result指向的位置(下图中用红箭头表示实际移动后的位置,此时合并后的结果中的1与result为同一个节点)</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216192121.png\" alt=\"11\"></p>\n<p>继续检查链表元素,此时l1中的元素2&gt;l2中的元素1,则将l2中的元素1放入合并后的链表中</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216192412.png\" alt=\"20\"></p>\n<p>继续移动相关链表</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216192608.png\" alt=\"21\"></p>\n<p>当我们处理了一定的节点后,可能会出现某个链接(l1)不再有节点,此时直接将另一个链表(l2)的剩下节点插入合并后的节点即可<br><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216192744.png\" alt=\"30\"></p>\n<h2 id=\"相关代码\"><a href=\"#相关代码\" class=\"headerlink\" title=\"相关代码\"></a>相关代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">    ListNode result = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    ListNode head = result;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l1 != <span class=\"keyword\">null</span> &amp;&amp; l2 != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l1.val &lt;= l2.val)&#123;</span><br><span class=\"line\">            result.next = <span class=\"keyword\">new</span> ListNode(l1.val);</span><br><span class=\"line\">            l1 = l1.next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result.next =  <span class=\"keyword\">new</span> ListNode(l2.val);</span><br><span class=\"line\">            l2 = l2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result = result.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1 == <span class=\"keyword\">null</span>) result.next = l2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l2 == <span class=\"keyword\">null</span>) result.next = l1;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/MergeTwoSortedLists.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"LeetCode21-MergeTwoSortedLists-合并两个有序链表\"><a href=\"#LeetCode21-MergeTwoSortedLists-合并两个有序链表\" class=\"headerlink\" title=\"LeetCode21:MergeTwoSortedLists(合并两个有序链表)\"></a>LeetCode21:MergeTwoSortedLists(合并两个有序链表)</h1><p><a href=\"https://leetcode.com/problems/merge-two-sorted-lists/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode-cn.com/problems/merge-two-sorted-lists/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/merge-two-sorted-lists/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/merge-two-sorted-lists/</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p>\n<h2 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h2><ul>\n<li>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;5-&gt;6</li>\n<li><p>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6</p>","more":"</li>\n</ul>\n<h2 id=\"解题方法-类归并\"><a href=\"#解题方法-类归并\" class=\"headerlink\" title=\"解题方法-类归并\"></a>解题方法-类归并</h2><p>此两个链表的合并类似归并排序中将分治后的有序序列合并的过程,简单来说就是在合并的时候比较两个链表首位的的大小,取较小的值放入合并后的链表中,并移动对应的链表.</p>\n<h2 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h2><p>下面针对1-&gt;2-&gt;4, 1-&gt;3-&gt;5-&gt;6这两个链表进行合并</p>\n<p>我们需要额外创建head和result,head用于存储需要返回的链表收节点,result用于跟随当前插入的数据位置</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216191013.png\" alt=\"数据准备\"></p>\n<p>分别取出l1的元素为1,l2的元素为1,此时1&lt;=1,则将l1的对应元素的1放入合并后的链表中</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216191926.png\" alt=\"10\"></p>\n<p>除此之外,我们还要移动l1和result指向的位置(下图中用红箭头表示实际移动后的位置,此时合并后的结果中的1与result为同一个节点)</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216192121.png\" alt=\"11\"></p>\n<p>继续检查链表元素,此时l1中的元素2&gt;l2中的元素1,则将l2中的元素1放入合并后的链表中</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216192412.png\" alt=\"20\"></p>\n<p>继续移动相关链表</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216192608.png\" alt=\"21\"></p>\n<p>当我们处理了一定的节点后,可能会出现某个链接(l1)不再有节点,此时直接将另一个链表(l2)的剩下节点插入合并后的节点即可<br><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216192744.png\" alt=\"30\"></p>\n<h2 id=\"相关代码\"><a href=\"#相关代码\" class=\"headerlink\" title=\"相关代码\"></a>相关代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">    ListNode result = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    ListNode head = result;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l1 != <span class=\"keyword\">null</span> &amp;&amp; l2 != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l1.val &lt;= l2.val)&#123;</span><br><span class=\"line\">            result.next = <span class=\"keyword\">new</span> ListNode(l1.val);</span><br><span class=\"line\">            l1 = l1.next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result.next =  <span class=\"keyword\">new</span> ListNode(l2.val);</span><br><span class=\"line\">            l2 = l2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result = result.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1 == <span class=\"keyword\">null</span>) result.next = l2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l2 == <span class=\"keyword\">null</span>) result.next = l1;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/MergeTwoSortedLists.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>"},{"title":"LeetCode26-RemoveDuplicatesFromSortedArray(删除排序数组中的重复项)","date":"2019-02-16T14:48:07.000Z","_content":"\n# LeetCode26-RemoveDuplicatesFromSortedArray(删除排序数组中的重复项)\n\n[LeetCode:https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/](https://leetcode.com/problems/remove-duplicates-from-sorted-array/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/)\n\n## 题目描述\n给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。\n\n不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。\n\n## 示例\n* 示例 1:\n\n  * 给定数组 nums = [1,1,2],\n  * 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。\n  * 你不需要考虑数组中超出新长度后面的元素。\n\n    <!-- more -->\n\n* 示例 2:\n  * 给定 nums = [0,0,1,1,1,2,2,3,3,4],\n  * 函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。\n  * 你不需要考虑数组中超出新长度后面的元素。\n\n## 解题方法-双指针\n创建两个指针,分别指向新数组的长度(result)和检测元素的位置(index),如果index和result指向的元素不同,则将index指向的的元素移动到result的下一位.\n\n## 图解相关思路\n我们以排序[0,0,1,1,2,3,4]数组为例.并创建result和index两个指针,初始均指向首位\n\n![初始](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216232427.png)\n\n当index=0时,result和index指向的元素值都为0,则result不更改,index向后移一位\n\n![index=0](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216232732.png)\n\n当index=2时,此时分别对应的元素为1和0,两值并不相同\n\n![index=20](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216232913.png)\n\n则此时index和result均需要向后移动一位,并且需要将result移动后指向的内容更改为index移动前的数据\n\n![index=21](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216233041.png)\n\n类似的,在移动index的时候检查其和result的数值十分相同,直到index将此数组遍历完成\n![index](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216233626.png)\n\n因为result是从0开始的,返回新数组的长度时要将其+1.\n\n## 代码实现\n```java\npublic int removeDuplicates(int[] nums) {\n    int result = 0;\n    for (int index = 0; index < nums.length ; index++){\n        if (nums[result] != nums[index]){\n            result++;\n            nums[result] = nums[index];\n        }\n    }\n    return result +1;\n}\n```\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/RemoveDuplicatesFromSortedArray.java)欢迎大家关注并提出改进的建议\n","source":"_posts/LeetCode26-RemoveDuplicatesFromSortedArray.md","raw":"---\ntitle: 'LeetCode26-RemoveDuplicatesFromSortedArray(删除排序数组中的重复项)'\ndate: 2019-02-16 22:48:07\ntags: [\"算法\" , \"LeetCode\"]\ncategories : \"LeetCode\"\n---\n\n# LeetCode26-RemoveDuplicatesFromSortedArray(删除排序数组中的重复项)\n\n[LeetCode:https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/](https://leetcode.com/problems/remove-duplicates-from-sorted-array/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/)\n\n## 题目描述\n给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。\n\n不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。\n\n## 示例\n* 示例 1:\n\n  * 给定数组 nums = [1,1,2],\n  * 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。\n  * 你不需要考虑数组中超出新长度后面的元素。\n\n    <!-- more -->\n\n* 示例 2:\n  * 给定 nums = [0,0,1,1,1,2,2,3,3,4],\n  * 函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。\n  * 你不需要考虑数组中超出新长度后面的元素。\n\n## 解题方法-双指针\n创建两个指针,分别指向新数组的长度(result)和检测元素的位置(index),如果index和result指向的元素不同,则将index指向的的元素移动到result的下一位.\n\n## 图解相关思路\n我们以排序[0,0,1,1,2,3,4]数组为例.并创建result和index两个指针,初始均指向首位\n\n![初始](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216232427.png)\n\n当index=0时,result和index指向的元素值都为0,则result不更改,index向后移一位\n\n![index=0](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216232732.png)\n\n当index=2时,此时分别对应的元素为1和0,两值并不相同\n\n![index=20](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216232913.png)\n\n则此时index和result均需要向后移动一位,并且需要将result移动后指向的内容更改为index移动前的数据\n\n![index=21](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216233041.png)\n\n类似的,在移动index的时候检查其和result的数值十分相同,直到index将此数组遍历完成\n![index](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216233626.png)\n\n因为result是从0开始的,返回新数组的长度时要将其+1.\n\n## 代码实现\n```java\npublic int removeDuplicates(int[] nums) {\n    int result = 0;\n    for (int index = 0; index < nums.length ; index++){\n        if (nums[result] != nums[index]){\n            result++;\n            nums[result] = nums[index];\n        }\n    }\n    return result +1;\n}\n```\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/RemoveDuplicatesFromSortedArray.java)欢迎大家关注并提出改进的建议\n","slug":"LeetCode26-RemoveDuplicatesFromSortedArray","published":1,"updated":"2020-03-13T09:33:05.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dn000dq7dqk9x72guo","content":"<h1 id=\"LeetCode26-RemoveDuplicatesFromSortedArray-删除排序数组中的重复项\"><a href=\"#LeetCode26-RemoveDuplicatesFromSortedArray-删除排序数组中的重复项\" class=\"headerlink\" title=\"LeetCode26-RemoveDuplicatesFromSortedArray(删除排序数组中的重复项)\"></a>LeetCode26-RemoveDuplicatesFromSortedArray(删除排序数组中的重复项)</h1><p><a href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-array/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li><p>示例 1:</p>\n<ul>\n<li>给定数组 nums = [1,1,2],</li>\n<li>函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。</li>\n<li><p>你不需要考虑数组中超出新长度后面的元素。</p>\n<a id=\"more\"></a>\n</li>\n</ul>\n</li>\n<li><p>示例 2:</p>\n<ul>\n<li>给定 nums = [0,0,1,1,1,2,2,3,3,4],</li>\n<li>函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</li>\n<li>你不需要考虑数组中超出新长度后面的元素。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解题方法-双指针\"><a href=\"#解题方法-双指针\" class=\"headerlink\" title=\"解题方法-双指针\"></a>解题方法-双指针</h2><p>创建两个指针,分别指向新数组的长度(result)和检测元素的位置(index),如果index和result指向的元素不同,则将index指向的的元素移动到result的下一位.</p>\n<h2 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h2><p>我们以排序[0,0,1,1,2,3,4]数组为例.并创建result和index两个指针,初始均指向首位</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216232427.png\" alt=\"初始\"></p>\n<p>当index=0时,result和index指向的元素值都为0,则result不更改,index向后移一位</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216232732.png\" alt=\"index=0\"></p>\n<p>当index=2时,此时分别对应的元素为1和0,两值并不相同</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216232913.png\" alt=\"index=20\"></p>\n<p>则此时index和result均需要向后移动一位,并且需要将result移动后指向的内容更改为index移动前的数据</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216233041.png\" alt=\"index=21\"></p>\n<p>类似的,在移动index的时候检查其和result的数值十分相同,直到index将此数组遍历完成<br><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216233626.png\" alt=\"index\"></p>\n<p>因为result是从0开始的,返回新数组的长度时要将其+1.</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeDuplicates</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; nums.length ; index++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[result] != nums[index])&#123;</span><br><span class=\"line\">            result++;</span><br><span class=\"line\">            nums[result] = nums[index];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result +<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/RemoveDuplicatesFromSortedArray.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"LeetCode26-RemoveDuplicatesFromSortedArray-删除排序数组中的重复项\"><a href=\"#LeetCode26-RemoveDuplicatesFromSortedArray-删除排序数组中的重复项\" class=\"headerlink\" title=\"LeetCode26-RemoveDuplicatesFromSortedArray(删除排序数组中的重复项)\"></a>LeetCode26-RemoveDuplicatesFromSortedArray(删除排序数组中的重复项)</h1><p><a href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-array/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li><p>示例 1:</p>\n<ul>\n<li>给定数组 nums = [1,1,2],</li>\n<li>函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。</li>\n<li><p>你不需要考虑数组中超出新长度后面的元素。</p>","more":"</li>\n</ul>\n</li>\n<li><p>示例 2:</p>\n<ul>\n<li>给定 nums = [0,0,1,1,1,2,2,3,3,4],</li>\n<li>函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</li>\n<li>你不需要考虑数组中超出新长度后面的元素。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解题方法-双指针\"><a href=\"#解题方法-双指针\" class=\"headerlink\" title=\"解题方法-双指针\"></a>解题方法-双指针</h2><p>创建两个指针,分别指向新数组的长度(result)和检测元素的位置(index),如果index和result指向的元素不同,则将index指向的的元素移动到result的下一位.</p>\n<h2 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h2><p>我们以排序[0,0,1,1,2,3,4]数组为例.并创建result和index两个指针,初始均指向首位</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216232427.png\" alt=\"初始\"></p>\n<p>当index=0时,result和index指向的元素值都为0,则result不更改,index向后移一位</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216232732.png\" alt=\"index=0\"></p>\n<p>当index=2时,此时分别对应的元素为1和0,两值并不相同</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216232913.png\" alt=\"index=20\"></p>\n<p>则此时index和result均需要向后移动一位,并且需要将result移动后指向的内容更改为index移动前的数据</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216233041.png\" alt=\"index=21\"></p>\n<p>类似的,在移动index的时候检查其和result的数值十分相同,直到index将此数组遍历完成<br><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190216233626.png\" alt=\"index\"></p>\n<p>因为result是从0开始的,返回新数组的长度时要将其+1.</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeDuplicates</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; nums.length ; index++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[result] != nums[index])&#123;</span><br><span class=\"line\">            result++;</span><br><span class=\"line\">            nums[result] = nums[index];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result +<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/RemoveDuplicatesFromSortedArray.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>"},{"title":"LeetCode27-RemoveElement(移除元素)","date":"2019-02-17T07:45:05.000Z","_content":"\n# LeetCode27-RemoveElement(移除元素)\n\n[LeetCode:https://leetcode-cn.com/problems/remove-element/](https://leetcode.com/problems/remove-element/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/remove-element/](https://leetcode-cn.com/problems/remove-element/)\n\n## 题目描述\n给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。\n\n不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。\n\n元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n<!-- more -->\n\n## 示例\n* 示例 1:\n  * 给定 nums = [3,2,2,3], val = 3,\n  * 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。\n  * 你不需要考虑数组中超出新长度后面的元素。\n\n* 示例 2:\n  * 给定 nums = [0,1,2,2,3,0,4,2], val = 2,\n  * 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。\n  * 注意这五个元素可为任意顺序。\n  * 你不需要考虑数组中超出新长度后面的元素。\n\n## 解题方法-双指针\n应为可以更改其中数据的顺序并且需要原地修改内容,类似'删除排序数组中的重复项'中双指针的方法,不过这里我们的两个指针分别从数组头(l)和数组尾(r)向中心移动校验,当l遇到需要移除的元素时,之间将其内容更换为r所指向的内容,并将r向中心移动,当l指向的内容非需要移除的内容时,将l向中心移动,知道l在r的右侧\n\n## 图解相关思路\n下面我们以[0,1,2,2,3,0,4,2],删除2内容为例.l为左侧指针,默认为数组首位,r为右侧指针默认为数组末位.两个指针都向中心移动\n\n![0](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217203754.png)\n\n当l指向的元素(0,1)不为需要移除的元素(2)时,仅移动l指针\n\n![1](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217203839.png)\n\n当l指向2时,移动r所指向的元素(2)到l的位置,并仅移动r指针(l指针不移动,下次验证l的时候会对移动来的数据进行校验)\n\n![2](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217204155.png)\n\n当我们再次校验l的内容时,将r指向的4移动到原来l指向的内容2\n中,并仅移动r指针\n\n![3](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217204555.png)\n\n我们再次校验l的内容,发现不需要更改,仅移动l指针即可\n\n![4](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217204740.png)\n\n类似的,更改下一次l内容为r的内容\n\n![5](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217205024.png)\n\n知道l指针的位置不在r的左侧,此时r的位置就是此数组的有效位置\n\n![6](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217205212.png)\n\n## 代码实现\n```java\npublic int removeElement(int[] nums, int val) {\n    int l = 0;\n    int r = nums.length;\n    while (l < r){\n        if (nums[l] == val){\n            nums[l] = nums[r - 1];\n            r--;\n        }else {\n            l++;\n        }\n    }\n    return r;\n}\n```\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/RemoveElement.java)欢迎大家关注并提出改进的建议\n","source":"_posts/LeetCode27-RemoveElement.md","raw":"---\ntitle: 'LeetCode27-RemoveElement(移除元素)'\ndate: 2019-02-17 15:45:05\ntags: [\"算法\" , \"LeetCode\"]\ncategories : \"LeetCode\"\n---\n\n# LeetCode27-RemoveElement(移除元素)\n\n[LeetCode:https://leetcode-cn.com/problems/remove-element/](https://leetcode.com/problems/remove-element/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/remove-element/](https://leetcode-cn.com/problems/remove-element/)\n\n## 题目描述\n给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。\n\n不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。\n\n元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n<!-- more -->\n\n## 示例\n* 示例 1:\n  * 给定 nums = [3,2,2,3], val = 3,\n  * 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。\n  * 你不需要考虑数组中超出新长度后面的元素。\n\n* 示例 2:\n  * 给定 nums = [0,1,2,2,3,0,4,2], val = 2,\n  * 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。\n  * 注意这五个元素可为任意顺序。\n  * 你不需要考虑数组中超出新长度后面的元素。\n\n## 解题方法-双指针\n应为可以更改其中数据的顺序并且需要原地修改内容,类似'删除排序数组中的重复项'中双指针的方法,不过这里我们的两个指针分别从数组头(l)和数组尾(r)向中心移动校验,当l遇到需要移除的元素时,之间将其内容更换为r所指向的内容,并将r向中心移动,当l指向的内容非需要移除的内容时,将l向中心移动,知道l在r的右侧\n\n## 图解相关思路\n下面我们以[0,1,2,2,3,0,4,2],删除2内容为例.l为左侧指针,默认为数组首位,r为右侧指针默认为数组末位.两个指针都向中心移动\n\n![0](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217203754.png)\n\n当l指向的元素(0,1)不为需要移除的元素(2)时,仅移动l指针\n\n![1](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217203839.png)\n\n当l指向2时,移动r所指向的元素(2)到l的位置,并仅移动r指针(l指针不移动,下次验证l的时候会对移动来的数据进行校验)\n\n![2](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217204155.png)\n\n当我们再次校验l的内容时,将r指向的4移动到原来l指向的内容2\n中,并仅移动r指针\n\n![3](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217204555.png)\n\n我们再次校验l的内容,发现不需要更改,仅移动l指针即可\n\n![4](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217204740.png)\n\n类似的,更改下一次l内容为r的内容\n\n![5](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217205024.png)\n\n知道l指针的位置不在r的左侧,此时r的位置就是此数组的有效位置\n\n![6](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217205212.png)\n\n## 代码实现\n```java\npublic int removeElement(int[] nums, int val) {\n    int l = 0;\n    int r = nums.length;\n    while (l < r){\n        if (nums[l] == val){\n            nums[l] = nums[r - 1];\n            r--;\n        }else {\n            l++;\n        }\n    }\n    return r;\n}\n```\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/RemoveElement.java)欢迎大家关注并提出改进的建议\n","slug":"LeetCode27-RemoveElement","published":1,"updated":"2020-03-13T09:33:05.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5do000eq7dq8rpw3i0n","content":"<h1 id=\"LeetCode27-RemoveElement-移除元素\"><a href=\"#LeetCode27-RemoveElement-移除元素\" class=\"headerlink\" title=\"LeetCode27-RemoveElement(移除元素)\"></a>LeetCode27-RemoveElement(移除元素)</h1><p><a href=\"https://leetcode.com/problems/remove-element/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode-cn.com/problems/remove-element/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/remove-element/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/remove-element/</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>\n<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。<br><a id=\"more\"></a></p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li><p>示例 1:</p>\n<ul>\n<li>给定 nums = [3,2,2,3], val = 3,</li>\n<li>函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</li>\n<li>你不需要考虑数组中超出新长度后面的元素。</li>\n</ul>\n</li>\n<li><p>示例 2:</p>\n<ul>\n<li>给定 nums = [0,1,2,2,3,0,4,2], val = 2,</li>\n<li>函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</li>\n<li>注意这五个元素可为任意顺序。</li>\n<li>你不需要考虑数组中超出新长度后面的元素。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解题方法-双指针\"><a href=\"#解题方法-双指针\" class=\"headerlink\" title=\"解题方法-双指针\"></a>解题方法-双指针</h2><p>应为可以更改其中数据的顺序并且需要原地修改内容,类似’删除排序数组中的重复项’中双指针的方法,不过这里我们的两个指针分别从数组头(l)和数组尾(r)向中心移动校验,当l遇到需要移除的元素时,之间将其内容更换为r所指向的内容,并将r向中心移动,当l指向的内容非需要移除的内容时,将l向中心移动,知道l在r的右侧</p>\n<h2 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h2><p>下面我们以[0,1,2,2,3,0,4,2],删除2内容为例.l为左侧指针,默认为数组首位,r为右侧指针默认为数组末位.两个指针都向中心移动</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217203754.png\" alt=\"0\"></p>\n<p>当l指向的元素(0,1)不为需要移除的元素(2)时,仅移动l指针</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217203839.png\" alt=\"1\"></p>\n<p>当l指向2时,移动r所指向的元素(2)到l的位置,并仅移动r指针(l指针不移动,下次验证l的时候会对移动来的数据进行校验)</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217204155.png\" alt=\"2\"></p>\n<p>当我们再次校验l的内容时,将r指向的4移动到原来l指向的内容2<br>中,并仅移动r指针</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217204555.png\" alt=\"3\"></p>\n<p>我们再次校验l的内容,发现不需要更改,仅移动l指针即可</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217204740.png\" alt=\"4\"></p>\n<p>类似的,更改下一次l内容为r的内容</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217205024.png\" alt=\"5\"></p>\n<p>知道l指针的位置不在r的左侧,此时r的位置就是此数组的有效位置</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217205212.png\" alt=\"6\"></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> r = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &lt; r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[l] == val)&#123;</span><br><span class=\"line\">            nums[l] = nums[r - <span class=\"number\">1</span>];</span><br><span class=\"line\">            r--;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/RemoveElement.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"LeetCode27-RemoveElement-移除元素\"><a href=\"#LeetCode27-RemoveElement-移除元素\" class=\"headerlink\" title=\"LeetCode27-RemoveElement(移除元素)\"></a>LeetCode27-RemoveElement(移除元素)</h1><p><a href=\"https://leetcode.com/problems/remove-element/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode-cn.com/problems/remove-element/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/remove-element/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/remove-element/</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>\n<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。<br>","more":"</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li><p>示例 1:</p>\n<ul>\n<li>给定 nums = [3,2,2,3], val = 3,</li>\n<li>函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</li>\n<li>你不需要考虑数组中超出新长度后面的元素。</li>\n</ul>\n</li>\n<li><p>示例 2:</p>\n<ul>\n<li>给定 nums = [0,1,2,2,3,0,4,2], val = 2,</li>\n<li>函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</li>\n<li>注意这五个元素可为任意顺序。</li>\n<li>你不需要考虑数组中超出新长度后面的元素。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解题方法-双指针\"><a href=\"#解题方法-双指针\" class=\"headerlink\" title=\"解题方法-双指针\"></a>解题方法-双指针</h2><p>应为可以更改其中数据的顺序并且需要原地修改内容,类似’删除排序数组中的重复项’中双指针的方法,不过这里我们的两个指针分别从数组头(l)和数组尾(r)向中心移动校验,当l遇到需要移除的元素时,之间将其内容更换为r所指向的内容,并将r向中心移动,当l指向的内容非需要移除的内容时,将l向中心移动,知道l在r的右侧</p>\n<h2 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h2><p>下面我们以[0,1,2,2,3,0,4,2],删除2内容为例.l为左侧指针,默认为数组首位,r为右侧指针默认为数组末位.两个指针都向中心移动</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217203754.png\" alt=\"0\"></p>\n<p>当l指向的元素(0,1)不为需要移除的元素(2)时,仅移动l指针</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217203839.png\" alt=\"1\"></p>\n<p>当l指向2时,移动r所指向的元素(2)到l的位置,并仅移动r指针(l指针不移动,下次验证l的时候会对移动来的数据进行校验)</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217204155.png\" alt=\"2\"></p>\n<p>当我们再次校验l的内容时,将r指向的4移动到原来l指向的内容2<br>中,并仅移动r指针</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217204555.png\" alt=\"3\"></p>\n<p>我们再次校验l的内容,发现不需要更改,仅移动l指针即可</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217204740.png\" alt=\"4\"></p>\n<p>类似的,更改下一次l内容为r的内容</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217205024.png\" alt=\"5\"></p>\n<p>知道l指针的位置不在r的左侧,此时r的位置就是此数组的有效位置</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190217205212.png\" alt=\"6\"></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> r = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &lt; r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[l] == val)&#123;</span><br><span class=\"line\">            nums[l] = nums[r - <span class=\"number\">1</span>];</span><br><span class=\"line\">            r--;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/RemoveElement.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>"},{"title":"LeetCode3:Longest Substring Without Repeating Characters(无重复字符的最长子串)","date":"2019-01-10T17:04:15.000Z","_content":"\n\n# LeetCode3:Longest Substring Without Repeating Characters(无重复字符的最长子串)\n\n[LeetCode:https://leetcode.com/problems/longest-substring-without-repeating-characters/](https://leetcode.com/problems/longest-substring-without-repeating-characters/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/](https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/)\n\n## 题目说明\n\n给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n\n## 示例\n* 示例 1:\n  * 输入: \"abcabcbb\"\n  * 输出: 3\n  * 解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n\n<!-- more -->\n\n* 示例 2:\n  * 输入: \"bbbbb\"\n  * 输出: 1\n  * 解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n\n* 示例 3:\n  * 输入: \"pwwkew\"\n  * 输出: 3\n  * 解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n\n## 解题方法\n### 日常暴力法\n  遍历每个元素作为一个字符串开始,查找当前字符串是否元素不重复,如果不重复则得到其长度,全部遍历得到其最长无重复自串长度.\n\n### 滑动窗口(HaskMap辅助表)\n> HaskMap真是个好东西,最近再整理下HashMap相关的资料\n\n此方法只需要一次遍历即可,主要思路为在遍历过程中计算当前遍历位置到最后一个重复元素的下一位位置的长度(也可以说是将最后一次重复的元素的下一位作为一个子串的开始,当前遍历位置作为子串的结束,计算此子串的长度),将其与已存在的最长子串长度对比,得到当前最长未重复元素子串的长度.下面通过图示解析相关思路.\n\n#### 图解相关思路\n我们输入\"pwwkew\"作为参数,此时默认最长无重复子串长度(result)为0,HashMap辅助表check为空.\n\n![输入条件](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/2052140.jpg)\n\n默认遍历位置i = 0, 默认最后一个重复元素的下一位位置index = 0;\n\n查找辅助表check中不存在i位置对应的元素p\n\n当前最长无重复元素子串长度result = i(0) - index(0) + 1 = 1\n\n\n更新check表,将(p,0)加入到check表中\n\n![i=0](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/97954118.jpg)\n\n\n继续遍历此串,当i = 1时,check中依旧查找不到i位置对应的元素w\n\nresult = i(1) - index(0) + 1 = 2\n\n更新check表,将(w,1)加入到check表中\n\n![i=1](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/15643611.jpg)\n\n继续遍历当i = 2时,此时i对应的元素w在check表中可以被找到,说明此元素是一个重复元素,我们需要更新index的值,在这里我们比较当前index的值和check中出现的最后一次重复元素的下一位中的较大值(防止\"abba\"这样的在遍历最后一个a的时候取到首位a的位置).\n\n![i=2(0)](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/24448000.jpg)\n\n此时index = max(index(0), check.get(key(\"w\")) (1 + 1 = 2)) = 2\n\n计算当前的result = i(2) - index(2) + 1 = 1,小于之前的result(2),此时result依然为2.\n\n更新check表的内容,将key为w的value更改为2\n![i=2(1)](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/45366813.jpg)\n\n继续遍历,当i = 3时,check表中找不到'k'\n\nresult = i(3) - index(2) + 1 = 2\n\n更新check表,将(k,3)加入到check表中\n\n![i=3](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/56653284.jpg)\n\n继续遍历,当i = 4时,check表中找不到'e'\n\nresult = i(4) - index(2) + 1 = 3, 此时的result大于原有的result,则更新result的值为3\n\n更新check表,将(e,4)加入到check表中\n\n![i=4](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/55319490.jpg)\n\n继续遍历当i = 5时,此时i对应的元素w在check表中可以被找到,\n\n![i=5(0)](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/83146993.jpg)\n\n此时index = max(index(5), check.get(key(\"w\")) (2 + 1 = 3)) = 5\n\n计算当前的result = i(5) - index(2) + 1 = 3,大于之前的result(2),此时result更新为3.\n\n更新check表的内容,将key为w的value更改为5\n\n![i=5(1)](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/4364624.jpg)\n\n至此,遍历结束,此时reslut的值就是s中最长为重复子串的长度.\n\n#### 代码实现\n```java\npublic int lengthOfLongestSubstring(String s) {\n    int result = 0;\n    Map<Character, Integer> check = new HashMap<>();\n    for (int i = 0, index = 0; i < s.length(); i++) {\n        if (check.containsKey(s.charAt(i))){\n            index = Math.max(index, check.get(s.charAt(i)) + 1);\n        }\n        result = Math.max(result, i - index + 1);\n        check.put(s.charAt(i), i);\n    }\n\n    return result;\n}\n```\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/LongestSubstringWithoutRepeatingCharacters.java)欢迎大家关注并提出改进的建议\n","source":"_posts/LeetCode3-Longest-Child.md","raw":"---\ntitle: 'LeetCode3:Longest Substring Without Repeating Characters(无重复字符的最长子串)'\ndate: 2019-01-11 01:04:15\ntags: [\"算法\" , \"LeetCode\"]\ncategories : \"LeetCode\"\n---\n\n\n# LeetCode3:Longest Substring Without Repeating Characters(无重复字符的最长子串)\n\n[LeetCode:https://leetcode.com/problems/longest-substring-without-repeating-characters/](https://leetcode.com/problems/longest-substring-without-repeating-characters/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/](https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/)\n\n## 题目说明\n\n给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n\n## 示例\n* 示例 1:\n  * 输入: \"abcabcbb\"\n  * 输出: 3\n  * 解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n\n<!-- more -->\n\n* 示例 2:\n  * 输入: \"bbbbb\"\n  * 输出: 1\n  * 解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n\n* 示例 3:\n  * 输入: \"pwwkew\"\n  * 输出: 3\n  * 解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n\n## 解题方法\n### 日常暴力法\n  遍历每个元素作为一个字符串开始,查找当前字符串是否元素不重复,如果不重复则得到其长度,全部遍历得到其最长无重复自串长度.\n\n### 滑动窗口(HaskMap辅助表)\n> HaskMap真是个好东西,最近再整理下HashMap相关的资料\n\n此方法只需要一次遍历即可,主要思路为在遍历过程中计算当前遍历位置到最后一个重复元素的下一位位置的长度(也可以说是将最后一次重复的元素的下一位作为一个子串的开始,当前遍历位置作为子串的结束,计算此子串的长度),将其与已存在的最长子串长度对比,得到当前最长未重复元素子串的长度.下面通过图示解析相关思路.\n\n#### 图解相关思路\n我们输入\"pwwkew\"作为参数,此时默认最长无重复子串长度(result)为0,HashMap辅助表check为空.\n\n![输入条件](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/2052140.jpg)\n\n默认遍历位置i = 0, 默认最后一个重复元素的下一位位置index = 0;\n\n查找辅助表check中不存在i位置对应的元素p\n\n当前最长无重复元素子串长度result = i(0) - index(0) + 1 = 1\n\n\n更新check表,将(p,0)加入到check表中\n\n![i=0](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/97954118.jpg)\n\n\n继续遍历此串,当i = 1时,check中依旧查找不到i位置对应的元素w\n\nresult = i(1) - index(0) + 1 = 2\n\n更新check表,将(w,1)加入到check表中\n\n![i=1](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/15643611.jpg)\n\n继续遍历当i = 2时,此时i对应的元素w在check表中可以被找到,说明此元素是一个重复元素,我们需要更新index的值,在这里我们比较当前index的值和check中出现的最后一次重复元素的下一位中的较大值(防止\"abba\"这样的在遍历最后一个a的时候取到首位a的位置).\n\n![i=2(0)](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/24448000.jpg)\n\n此时index = max(index(0), check.get(key(\"w\")) (1 + 1 = 2)) = 2\n\n计算当前的result = i(2) - index(2) + 1 = 1,小于之前的result(2),此时result依然为2.\n\n更新check表的内容,将key为w的value更改为2\n![i=2(1)](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/45366813.jpg)\n\n继续遍历,当i = 3时,check表中找不到'k'\n\nresult = i(3) - index(2) + 1 = 2\n\n更新check表,将(k,3)加入到check表中\n\n![i=3](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/56653284.jpg)\n\n继续遍历,当i = 4时,check表中找不到'e'\n\nresult = i(4) - index(2) + 1 = 3, 此时的result大于原有的result,则更新result的值为3\n\n更新check表,将(e,4)加入到check表中\n\n![i=4](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/55319490.jpg)\n\n继续遍历当i = 5时,此时i对应的元素w在check表中可以被找到,\n\n![i=5(0)](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/83146993.jpg)\n\n此时index = max(index(5), check.get(key(\"w\")) (2 + 1 = 3)) = 5\n\n计算当前的result = i(5) - index(2) + 1 = 3,大于之前的result(2),此时result更新为3.\n\n更新check表的内容,将key为w的value更改为5\n\n![i=5(1)](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/4364624.jpg)\n\n至此,遍历结束,此时reslut的值就是s中最长为重复子串的长度.\n\n#### 代码实现\n```java\npublic int lengthOfLongestSubstring(String s) {\n    int result = 0;\n    Map<Character, Integer> check = new HashMap<>();\n    for (int i = 0, index = 0; i < s.length(); i++) {\n        if (check.containsKey(s.charAt(i))){\n            index = Math.max(index, check.get(s.charAt(i)) + 1);\n        }\n        result = Math.max(result, i - index + 1);\n        check.put(s.charAt(i), i);\n    }\n\n    return result;\n}\n```\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/LongestSubstringWithoutRepeatingCharacters.java)欢迎大家关注并提出改进的建议\n","slug":"LeetCode3-Longest-Child","published":1,"updated":"2020-03-13T09:33:05.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dp000fq7dqbupo0ipj","content":"<h1 id=\"LeetCode3-Longest-Substring-Without-Repeating-Characters-无重复字符的最长子串\"><a href=\"#LeetCode3-Longest-Substring-Without-Repeating-Characters-无重复字符的最长子串\" class=\"headerlink\" title=\"LeetCode3:Longest Substring Without Repeating Characters(无重复字符的最长子串)\"></a>LeetCode3:Longest Substring Without Repeating Characters(无重复字符的最长子串)</h1><p><a href=\"https://leetcode.com/problems/longest-substring-without-repeating-characters/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode.com/problems/longest-substring-without-repeating-characters/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/</a></p>\n<h2 id=\"题目说明\"><a href=\"#题目说明\" class=\"headerlink\" title=\"题目说明\"></a>题目说明</h2><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li>示例 1:<ul>\n<li>输入: “abcabcbb”</li>\n<li>输出: 3</li>\n<li>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>示例 2:</p>\n<ul>\n<li>输入: “bbbbb”</li>\n<li>输出: 1</li>\n<li>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。</li>\n</ul>\n</li>\n<li><p>示例 3:</p>\n<ul>\n<li>输入: “pwwkew”</li>\n<li>输出: 3</li>\n<li>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br> 请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解题方法\"><a href=\"#解题方法\" class=\"headerlink\" title=\"解题方法\"></a>解题方法</h2><h3 id=\"日常暴力法\"><a href=\"#日常暴力法\" class=\"headerlink\" title=\"日常暴力法\"></a>日常暴力法</h3><p>  遍历每个元素作为一个字符串开始,查找当前字符串是否元素不重复,如果不重复则得到其长度,全部遍历得到其最长无重复自串长度.</p>\n<h3 id=\"滑动窗口-HaskMap辅助表\"><a href=\"#滑动窗口-HaskMap辅助表\" class=\"headerlink\" title=\"滑动窗口(HaskMap辅助表)\"></a>滑动窗口(HaskMap辅助表)</h3><blockquote>\n<p>HaskMap真是个好东西,最近再整理下HashMap相关的资料</p>\n</blockquote>\n<p>此方法只需要一次遍历即可,主要思路为在遍历过程中计算当前遍历位置到最后一个重复元素的下一位位置的长度(也可以说是将最后一次重复的元素的下一位作为一个子串的开始,当前遍历位置作为子串的结束,计算此子串的长度),将其与已存在的最长子串长度对比,得到当前最长未重复元素子串的长度.下面通过图示解析相关思路.</p>\n<h4 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h4><p>我们输入”pwwkew”作为参数,此时默认最长无重复子串长度(result)为0,HashMap辅助表check为空.</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/2052140.jpg\" alt=\"输入条件\"></p>\n<p>默认遍历位置i = 0, 默认最后一个重复元素的下一位位置index = 0;</p>\n<p>查找辅助表check中不存在i位置对应的元素p</p>\n<p>当前最长无重复元素子串长度result = i(0) - index(0) + 1 = 1</p>\n<p>更新check表,将(p,0)加入到check表中</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/97954118.jpg\" alt=\"i=0\"></p>\n<p>继续遍历此串,当i = 1时,check中依旧查找不到i位置对应的元素w</p>\n<p>result = i(1) - index(0) + 1 = 2</p>\n<p>更新check表,将(w,1)加入到check表中</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/15643611.jpg\" alt=\"i=1\"></p>\n<p>继续遍历当i = 2时,此时i对应的元素w在check表中可以被找到,说明此元素是一个重复元素,我们需要更新index的值,在这里我们比较当前index的值和check中出现的最后一次重复元素的下一位中的较大值(防止”abba”这样的在遍历最后一个a的时候取到首位a的位置).</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/24448000.jpg\" alt=\"i=2(0)\"></p>\n<p>此时index = max(index(0), check.get(key(“w”)) (1 + 1 = 2)) = 2</p>\n<p>计算当前的result = i(2) - index(2) + 1 = 1,小于之前的result(2),此时result依然为2.</p>\n<p>更新check表的内容,将key为w的value更改为2<br><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/45366813.jpg\" alt=\"i=2(1)\"></p>\n<p>继续遍历,当i = 3时,check表中找不到’k’</p>\n<p>result = i(3) - index(2) + 1 = 2</p>\n<p>更新check表,将(k,3)加入到check表中</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/56653284.jpg\" alt=\"i=3\"></p>\n<p>继续遍历,当i = 4时,check表中找不到’e’</p>\n<p>result = i(4) - index(2) + 1 = 3, 此时的result大于原有的result,则更新result的值为3</p>\n<p>更新check表,将(e,4)加入到check表中</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/55319490.jpg\" alt=\"i=4\"></p>\n<p>继续遍历当i = 5时,此时i对应的元素w在check表中可以被找到,</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/83146993.jpg\" alt=\"i=5(0)\"></p>\n<p>此时index = max(index(5), check.get(key(“w”)) (2 + 1 = 3)) = 5</p>\n<p>计算当前的result = i(5) - index(2) + 1 = 3,大于之前的result(2),此时result更新为3.</p>\n<p>更新check表的内容,将key为w的value更改为5</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/4364624.jpg\" alt=\"i=5(1)\"></p>\n<p>至此,遍历结束,此时reslut的值就是s中最长为重复子串的长度.</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Map&lt;Character, Integer&gt; check = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, index = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check.containsKey(s.charAt(i)))&#123;</span><br><span class=\"line\">            index = Math.max(index, check.get(s.charAt(i)) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result = Math.max(result, i - index + <span class=\"number\">1</span>);</span><br><span class=\"line\">        check.put(s.charAt(i), i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/LongestSubstringWithoutRepeatingCharacters.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"LeetCode3-Longest-Substring-Without-Repeating-Characters-无重复字符的最长子串\"><a href=\"#LeetCode3-Longest-Substring-Without-Repeating-Characters-无重复字符的最长子串\" class=\"headerlink\" title=\"LeetCode3:Longest Substring Without Repeating Characters(无重复字符的最长子串)\"></a>LeetCode3:Longest Substring Without Repeating Characters(无重复字符的最长子串)</h1><p><a href=\"https://leetcode.com/problems/longest-substring-without-repeating-characters/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode.com/problems/longest-substring-without-repeating-characters/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/</a></p>\n<h2 id=\"题目说明\"><a href=\"#题目说明\" class=\"headerlink\" title=\"题目说明\"></a>题目说明</h2><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li>示例 1:<ul>\n<li>输入: “abcabcbb”</li>\n<li>输出: 3</li>\n<li>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</li>\n</ul>\n</li>\n</ul>","more":"<ul>\n<li><p>示例 2:</p>\n<ul>\n<li>输入: “bbbbb”</li>\n<li>输出: 1</li>\n<li>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。</li>\n</ul>\n</li>\n<li><p>示例 3:</p>\n<ul>\n<li>输入: “pwwkew”</li>\n<li>输出: 3</li>\n<li>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br> 请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解题方法\"><a href=\"#解题方法\" class=\"headerlink\" title=\"解题方法\"></a>解题方法</h2><h3 id=\"日常暴力法\"><a href=\"#日常暴力法\" class=\"headerlink\" title=\"日常暴力法\"></a>日常暴力法</h3><p>  遍历每个元素作为一个字符串开始,查找当前字符串是否元素不重复,如果不重复则得到其长度,全部遍历得到其最长无重复自串长度.</p>\n<h3 id=\"滑动窗口-HaskMap辅助表\"><a href=\"#滑动窗口-HaskMap辅助表\" class=\"headerlink\" title=\"滑动窗口(HaskMap辅助表)\"></a>滑动窗口(HaskMap辅助表)</h3><blockquote>\n<p>HaskMap真是个好东西,最近再整理下HashMap相关的资料</p>\n</blockquote>\n<p>此方法只需要一次遍历即可,主要思路为在遍历过程中计算当前遍历位置到最后一个重复元素的下一位位置的长度(也可以说是将最后一次重复的元素的下一位作为一个子串的开始,当前遍历位置作为子串的结束,计算此子串的长度),将其与已存在的最长子串长度对比,得到当前最长未重复元素子串的长度.下面通过图示解析相关思路.</p>\n<h4 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h4><p>我们输入”pwwkew”作为参数,此时默认最长无重复子串长度(result)为0,HashMap辅助表check为空.</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/2052140.jpg\" alt=\"输入条件\"></p>\n<p>默认遍历位置i = 0, 默认最后一个重复元素的下一位位置index = 0;</p>\n<p>查找辅助表check中不存在i位置对应的元素p</p>\n<p>当前最长无重复元素子串长度result = i(0) - index(0) + 1 = 1</p>\n<p>更新check表,将(p,0)加入到check表中</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/97954118.jpg\" alt=\"i=0\"></p>\n<p>继续遍历此串,当i = 1时,check中依旧查找不到i位置对应的元素w</p>\n<p>result = i(1) - index(0) + 1 = 2</p>\n<p>更新check表,将(w,1)加入到check表中</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/15643611.jpg\" alt=\"i=1\"></p>\n<p>继续遍历当i = 2时,此时i对应的元素w在check表中可以被找到,说明此元素是一个重复元素,我们需要更新index的值,在这里我们比较当前index的值和check中出现的最后一次重复元素的下一位中的较大值(防止”abba”这样的在遍历最后一个a的时候取到首位a的位置).</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/24448000.jpg\" alt=\"i=2(0)\"></p>\n<p>此时index = max(index(0), check.get(key(“w”)) (1 + 1 = 2)) = 2</p>\n<p>计算当前的result = i(2) - index(2) + 1 = 1,小于之前的result(2),此时result依然为2.</p>\n<p>更新check表的内容,将key为w的value更改为2<br><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/45366813.jpg\" alt=\"i=2(1)\"></p>\n<p>继续遍历,当i = 3时,check表中找不到’k’</p>\n<p>result = i(3) - index(2) + 1 = 2</p>\n<p>更新check表,将(k,3)加入到check表中</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/56653284.jpg\" alt=\"i=3\"></p>\n<p>继续遍历,当i = 4时,check表中找不到’e’</p>\n<p>result = i(4) - index(2) + 1 = 3, 此时的result大于原有的result,则更新result的值为3</p>\n<p>更新check表,将(e,4)加入到check表中</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/55319490.jpg\" alt=\"i=4\"></p>\n<p>继续遍历当i = 5时,此时i对应的元素w在check表中可以被找到,</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/83146993.jpg\" alt=\"i=5(0)\"></p>\n<p>此时index = max(index(5), check.get(key(“w”)) (2 + 1 = 3)) = 5</p>\n<p>计算当前的result = i(5) - index(2) + 1 = 3,大于之前的result(2),此时result更新为3.</p>\n<p>更新check表的内容,将key为w的value更改为5</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/4364624.jpg\" alt=\"i=5(1)\"></p>\n<p>至此,遍历结束,此时reslut的值就是s中最长为重复子串的长度.</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Map&lt;Character, Integer&gt; check = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, index = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check.containsKey(s.charAt(i)))&#123;</span><br><span class=\"line\">            index = Math.max(index, check.get(s.charAt(i)) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result = Math.max(result, i - index + <span class=\"number\">1</span>);</span><br><span class=\"line\">        check.put(s.charAt(i), i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/LongestSubstringWithoutRepeatingCharacters.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>"},{"title":"LeetCode53-MaximumSubarray(最大子序和)","date":"2019-02-18T15:39:43.000Z","_content":"\n# LeetCode53-MaximumSubarray(最大子序和)\n\n[LeetCode:https://leetcode-cn.com/problems/maximum-subarray/](https://leetcode.com/problems/maximum-subarray/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/maximum-subarray/](https://leetcode-cn.com/problems/maximum-subarray/)\n\n## 题目描述\n给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n## 示例:\n* 输入: [-2,1,-3,4,-1,2,1,-5,4],\n* 输出: 6\n* 解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。\n\n    <!-- more -->\n\n## 解题思路-分治\n此条件下,我们可以发现连续子数组的序列和最大的时候其首位不能为负数,原因很简单,如果首位为负数,当拿掉首位时,其剩余的数组和必然会增大.同理可扩展,如果某几项的和为负数时,则这几个数也不能作为和最大的子数组的开始\n\n当了解了以上的内容时,我们可以采用分治的方法来解决此问题.\n我们已一个非负数为开始,直到和为负数为结束,再此过程中比较其和的最大值并记录,重复以上过程直到遍历到数组结束.\n\n## 图解相关思路\n下面已[-2,1,-3,4,-1,2,1,-5,4]为例,我们需要通过i遍历一次nums的内容,额外使用sum用来记录当前子数组的和(默认为0),result为遍历过程中遇到的最大和(默认为nums[0])\n\n![初始](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219000003.png)\n\n当i=0时,sum不大于0,我们要已此位(i=0)为子数组的开始,同时例行检查result和sum的关系\n\n![i=0](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219000935.png)\n\n当i=1时,此时sum=-2,要小于0,此时和为-2的子数组[-2]不能为最大子数组的开始,将sum更新为num=1,result更新为1\n\n![i=1](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219001352.png)\n\n当i=2时,此时sum=1,要大于0,sum要+=num为-2\n\n![i=2](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219001840.png)\n\n当i=3是,此时sum为-2,我们需要将此为作为新的子序列的开始,相关变化如下图\n\n![i=3](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219002102.png)\n\n当i=4,5,6,7,8时,sum均大于0,检测result和sum值即可\n![i=4,5](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219002827.png)\n\n\n![i=6,7](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219002857.png)\n\n![i=8](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219002918.png)\n\n## 代码实现\n```java\npublic int maxSubArray(int[] nums) {\n    int result = nums[0];\n    int sum = 0;\n    for (int i = 0 ; i < nums.length ; i++){\n        if (sum > 0){\n            sum += nums[i];\n        }else {\n            sum = nums[i];\n        }\n        if (sum > result){\n            result = sum;\n\n        }\n    }\n\n    return result;\n}\n```\n\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/MaximumSubarray.java)欢迎大家关注并提出改进的建议\n","source":"_posts/LeetCode53-MaximumSubarray.md","raw":"---\ntitle: 'LeetCode53-MaximumSubarray(最大子序和)'\ndate: 2019-02-18 23:39:43\ntags: [\"算法\" , \"LeetCode\"]\ncategories : \"LeetCode\"\n---\n\n# LeetCode53-MaximumSubarray(最大子序和)\n\n[LeetCode:https://leetcode-cn.com/problems/maximum-subarray/](https://leetcode.com/problems/maximum-subarray/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/maximum-subarray/](https://leetcode-cn.com/problems/maximum-subarray/)\n\n## 题目描述\n给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n## 示例:\n* 输入: [-2,1,-3,4,-1,2,1,-5,4],\n* 输出: 6\n* 解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。\n\n    <!-- more -->\n\n## 解题思路-分治\n此条件下,我们可以发现连续子数组的序列和最大的时候其首位不能为负数,原因很简单,如果首位为负数,当拿掉首位时,其剩余的数组和必然会增大.同理可扩展,如果某几项的和为负数时,则这几个数也不能作为和最大的子数组的开始\n\n当了解了以上的内容时,我们可以采用分治的方法来解决此问题.\n我们已一个非负数为开始,直到和为负数为结束,再此过程中比较其和的最大值并记录,重复以上过程直到遍历到数组结束.\n\n## 图解相关思路\n下面已[-2,1,-3,4,-1,2,1,-5,4]为例,我们需要通过i遍历一次nums的内容,额外使用sum用来记录当前子数组的和(默认为0),result为遍历过程中遇到的最大和(默认为nums[0])\n\n![初始](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219000003.png)\n\n当i=0时,sum不大于0,我们要已此位(i=0)为子数组的开始,同时例行检查result和sum的关系\n\n![i=0](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219000935.png)\n\n当i=1时,此时sum=-2,要小于0,此时和为-2的子数组[-2]不能为最大子数组的开始,将sum更新为num=1,result更新为1\n\n![i=1](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219001352.png)\n\n当i=2时,此时sum=1,要大于0,sum要+=num为-2\n\n![i=2](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219001840.png)\n\n当i=3是,此时sum为-2,我们需要将此为作为新的子序列的开始,相关变化如下图\n\n![i=3](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219002102.png)\n\n当i=4,5,6,7,8时,sum均大于0,检测result和sum值即可\n![i=4,5](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219002827.png)\n\n\n![i=6,7](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219002857.png)\n\n![i=8](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219002918.png)\n\n## 代码实现\n```java\npublic int maxSubArray(int[] nums) {\n    int result = nums[0];\n    int sum = 0;\n    for (int i = 0 ; i < nums.length ; i++){\n        if (sum > 0){\n            sum += nums[i];\n        }else {\n            sum = nums[i];\n        }\n        if (sum > result){\n            result = sum;\n\n        }\n    }\n\n    return result;\n}\n```\n\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/MaximumSubarray.java)欢迎大家关注并提出改进的建议\n","slug":"LeetCode53-MaximumSubarray","published":1,"updated":"2020-03-13T09:33:05.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dq000gq7dqhd1tmrxs","content":"<h1 id=\"LeetCode53-MaximumSubarray-最大子序和\"><a href=\"#LeetCode53-MaximumSubarray-最大子序和\" class=\"headerlink\" title=\"LeetCode53-MaximumSubarray(最大子序和)\"></a>LeetCode53-MaximumSubarray(最大子序和)</h1><p><a href=\"https://leetcode.com/problems/maximum-subarray/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode-cn.com/problems/maximum-subarray/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/maximum-subarray/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/maximum-subarray/</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例:\"></a>示例:</h2><ul>\n<li>输入: [-2,1,-3,4,-1,2,1,-5,4],</li>\n<li>输出: 6</li>\n<li><p>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</p>\n  <a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"解题思路-分治\"><a href=\"#解题思路-分治\" class=\"headerlink\" title=\"解题思路-分治\"></a>解题思路-分治</h2><p>此条件下,我们可以发现连续子数组的序列和最大的时候其首位不能为负数,原因很简单,如果首位为负数,当拿掉首位时,其剩余的数组和必然会增大.同理可扩展,如果某几项的和为负数时,则这几个数也不能作为和最大的子数组的开始</p>\n<p>当了解了以上的内容时,我们可以采用分治的方法来解决此问题.<br>我们已一个非负数为开始,直到和为负数为结束,再此过程中比较其和的最大值并记录,重复以上过程直到遍历到数组结束.</p>\n<h2 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h2><p>下面已[-2,1,-3,4,-1,2,1,-5,4]为例,我们需要通过i遍历一次nums的内容,额外使用sum用来记录当前子数组的和(默认为0),result为遍历过程中遇到的最大和(默认为nums[0])</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219000003.png\" alt=\"初始\"></p>\n<p>当i=0时,sum不大于0,我们要已此位(i=0)为子数组的开始,同时例行检查result和sum的关系</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219000935.png\" alt=\"i=0\"></p>\n<p>当i=1时,此时sum=-2,要小于0,此时和为-2的子数组[-2]不能为最大子数组的开始,将sum更新为num=1,result更新为1</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219001352.png\" alt=\"i=1\"></p>\n<p>当i=2时,此时sum=1,要大于0,sum要+=num为-2</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219001840.png\" alt=\"i=2\"></p>\n<p>当i=3是,此时sum为-2,我们需要将此为作为新的子序列的开始,相关变化如下图</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219002102.png\" alt=\"i=3\"></p>\n<p>当i=4,5,6,7,8时,sum均大于0,检测result和sum值即可<br><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219002827.png\" alt=\"i=4,5\"></p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219002857.png\" alt=\"i=6,7\"></p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219002918.png\" alt=\"i=8\"></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; nums.length ; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            sum += nums[i];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sum = nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum &gt; result)&#123;</span><br><span class=\"line\">            result = sum;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/MaximumSubarray.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"LeetCode53-MaximumSubarray-最大子序和\"><a href=\"#LeetCode53-MaximumSubarray-最大子序和\" class=\"headerlink\" title=\"LeetCode53-MaximumSubarray(最大子序和)\"></a>LeetCode53-MaximumSubarray(最大子序和)</h1><p><a href=\"https://leetcode.com/problems/maximum-subarray/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode-cn.com/problems/maximum-subarray/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/maximum-subarray/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/maximum-subarray/</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例:\"></a>示例:</h2><ul>\n<li>输入: [-2,1,-3,4,-1,2,1,-5,4],</li>\n<li>输出: 6</li>\n<li><p>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</p>","more":"</li>\n</ul>\n<h2 id=\"解题思路-分治\"><a href=\"#解题思路-分治\" class=\"headerlink\" title=\"解题思路-分治\"></a>解题思路-分治</h2><p>此条件下,我们可以发现连续子数组的序列和最大的时候其首位不能为负数,原因很简单,如果首位为负数,当拿掉首位时,其剩余的数组和必然会增大.同理可扩展,如果某几项的和为负数时,则这几个数也不能作为和最大的子数组的开始</p>\n<p>当了解了以上的内容时,我们可以采用分治的方法来解决此问题.<br>我们已一个非负数为开始,直到和为负数为结束,再此过程中比较其和的最大值并记录,重复以上过程直到遍历到数组结束.</p>\n<h2 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h2><p>下面已[-2,1,-3,4,-1,2,1,-5,4]为例,我们需要通过i遍历一次nums的内容,额外使用sum用来记录当前子数组的和(默认为0),result为遍历过程中遇到的最大和(默认为nums[0])</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219000003.png\" alt=\"初始\"></p>\n<p>当i=0时,sum不大于0,我们要已此位(i=0)为子数组的开始,同时例行检查result和sum的关系</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219000935.png\" alt=\"i=0\"></p>\n<p>当i=1时,此时sum=-2,要小于0,此时和为-2的子数组[-2]不能为最大子数组的开始,将sum更新为num=1,result更新为1</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219001352.png\" alt=\"i=1\"></p>\n<p>当i=2时,此时sum=1,要大于0,sum要+=num为-2</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219001840.png\" alt=\"i=2\"></p>\n<p>当i=3是,此时sum为-2,我们需要将此为作为新的子序列的开始,相关变化如下图</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219002102.png\" alt=\"i=3\"></p>\n<p>当i=4,5,6,7,8时,sum均大于0,检测result和sum值即可<br><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219002827.png\" alt=\"i=4,5\"></p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219002857.png\" alt=\"i=6,7\"></p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190219002918.png\" alt=\"i=8\"></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; nums.length ; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            sum += nums[i];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sum = nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum &gt; result)&#123;</span><br><span class=\"line\">            result = sum;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/MaximumSubarray.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>"},{"title":"LeetCode6: ZigZag Conversion(Z字形变换)","date":"2019-01-11T17:36:17.000Z","_content":"\n# LeetCode6: ZigZag Conversion(Z字形变换)\n\n[LeetCode:https://leetcode-cn.com/problems/zigzag-conversion/](https://leetcode.com/problems/zigzag-conversion/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/zigzag-conversion/](https://leetcode-cn.com/problems/zigzag-conversion/)\n\n\n## 题目描述\n将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。\n\n比如输入字符串为 \"LEETCODEISHIRING\" 行数为 3 时，排列如下：\n\n  <!-- more -->\n\nL   C   I   R\n\nE T O E S I I G\n\nE   D   H   N\n\n之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：\"LCIRETOESIIGEDHN\"。\n\n## 示例\n* 示例 1:\n  * 输入: s = \"LEETCODEISHIRING\", numRows = 3\n  * 输出: \"LCIRETOESIIGEDHN\"\n\n* 示例 2:\n  * 输入: s = \"LEETCODEISHIRING\", numRows = 4\n  * 输出: \"LDREOEIIECIHNTSG\"\n\n## 解题-归纳法\n主要思路是遍历一次字符串,通过归纳得到的关系直接生成每行的内容.\n\n## 图解相关思路\n下图是一个长度为23的字符串在行数为5的情况下其元素对应的情况\n\n![输入](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/16794605.jpg)\n\n我们可以将其分割为三个部分,setp(分割的步长) = 2 * (numRows - 1),至此我们还可以通过用length(s字符串的长度)/step来得到此时我们分割了几部分\n\n![处理1](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/31790302.jpg)\n\n我们针对第一部分继续分割,我们可以看到第一行和最后一行都是只有一个元素,和中间有两个元素的行中,两个元素之和步长.\n\n![处理2](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/66594411.jpg)\n\n不过当我们归纳下一组时,我们发现非首位行中两个元素和并不简单的是步长,因为再非首组中,其数据经过step长度的平移,归纳后我们可以发现,非首位行的第二个元素(15)其值等于下一组首位(16)减去当前所在行数(1)\n\n![处理3](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/59668982.jpg)\n\n那么最后如何实现就十分明了了,不过记得在里层循环的时候,每次增加的长度为step.在非首尾行中,第二个元素需要验证其是否小于length\n\n![解决](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/88759683.jpg)\n\n## 代码实现\n```java\npublic String convert(String s, int numRows) {\n      if (numRows == 1){\n          return s;\n      }\n      int length = s.length();\n      StringBuffer result = new StringBuffer();\n      int step = 2 * (numRows - 1);\n\n      for (int i = 0; i < numRows; i++) {\n          for (int j = 0; j + i < length; j += step) {\n              result.append(s.charAt(j + i));\n              if (i != 0 && i != numRows - 1 && j + step - i < length){\n                  result.append(s.charAt(j + step - i ));\n              }\n          }\n\n      }\n\n      return result.toString();\n\n  }\n```\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/ZigzagConversion.java)欢迎大家关注并提出改进的建议\n","source":"_posts/LeetCode6-ZigZagConversion.md","raw":"---\ntitle: 'LeetCode6: ZigZag Conversion(Z字形变换)'\ndate: 2019-01-12 01:36:17\ntags: [\"算法\" , \"LeetCode\"]\ncategories : \"LeetCode\"\n---\n\n# LeetCode6: ZigZag Conversion(Z字形变换)\n\n[LeetCode:https://leetcode-cn.com/problems/zigzag-conversion/](https://leetcode.com/problems/zigzag-conversion/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/zigzag-conversion/](https://leetcode-cn.com/problems/zigzag-conversion/)\n\n\n## 题目描述\n将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。\n\n比如输入字符串为 \"LEETCODEISHIRING\" 行数为 3 时，排列如下：\n\n  <!-- more -->\n\nL   C   I   R\n\nE T O E S I I G\n\nE   D   H   N\n\n之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：\"LCIRETOESIIGEDHN\"。\n\n## 示例\n* 示例 1:\n  * 输入: s = \"LEETCODEISHIRING\", numRows = 3\n  * 输出: \"LCIRETOESIIGEDHN\"\n\n* 示例 2:\n  * 输入: s = \"LEETCODEISHIRING\", numRows = 4\n  * 输出: \"LDREOEIIECIHNTSG\"\n\n## 解题-归纳法\n主要思路是遍历一次字符串,通过归纳得到的关系直接生成每行的内容.\n\n## 图解相关思路\n下图是一个长度为23的字符串在行数为5的情况下其元素对应的情况\n\n![输入](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/16794605.jpg)\n\n我们可以将其分割为三个部分,setp(分割的步长) = 2 * (numRows - 1),至此我们还可以通过用length(s字符串的长度)/step来得到此时我们分割了几部分\n\n![处理1](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/31790302.jpg)\n\n我们针对第一部分继续分割,我们可以看到第一行和最后一行都是只有一个元素,和中间有两个元素的行中,两个元素之和步长.\n\n![处理2](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/66594411.jpg)\n\n不过当我们归纳下一组时,我们发现非首位行中两个元素和并不简单的是步长,因为再非首组中,其数据经过step长度的平移,归纳后我们可以发现,非首位行的第二个元素(15)其值等于下一组首位(16)减去当前所在行数(1)\n\n![处理3](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/59668982.jpg)\n\n那么最后如何实现就十分明了了,不过记得在里层循环的时候,每次增加的长度为step.在非首尾行中,第二个元素需要验证其是否小于length\n\n![解决](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/88759683.jpg)\n\n## 代码实现\n```java\npublic String convert(String s, int numRows) {\n      if (numRows == 1){\n          return s;\n      }\n      int length = s.length();\n      StringBuffer result = new StringBuffer();\n      int step = 2 * (numRows - 1);\n\n      for (int i = 0; i < numRows; i++) {\n          for (int j = 0; j + i < length; j += step) {\n              result.append(s.charAt(j + i));\n              if (i != 0 && i != numRows - 1 && j + step - i < length){\n                  result.append(s.charAt(j + step - i ));\n              }\n          }\n\n      }\n\n      return result.toString();\n\n  }\n```\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/ZigzagConversion.java)欢迎大家关注并提出改进的建议\n","slug":"LeetCode6-ZigZagConversion","published":1,"updated":"2020-03-13T09:33:05.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dq000hq7dqhmm005um","content":"<h1 id=\"LeetCode6-ZigZag-Conversion-Z字形变换\"><a href=\"#LeetCode6-ZigZag-Conversion-Z字形变换\" class=\"headerlink\" title=\"LeetCode6: ZigZag Conversion(Z字形变换)\"></a>LeetCode6: ZigZag Conversion(Z字形变换)</h1><p><a href=\"https://leetcode.com/problems/zigzag-conversion/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode-cn.com/problems/zigzag-conversion/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/zigzag-conversion/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/zigzag-conversion/</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p>\n<p>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：</p>\n  <a id=\"more\"></a>\n<p>L   C   I   R</p>\n<p>E T O E S I I G</p>\n<p>E   D   H   N</p>\n<p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”LCIRETOESIIGEDHN”。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li><p>示例 1:</p>\n<ul>\n<li>输入: s = “LEETCODEISHIRING”, numRows = 3</li>\n<li>输出: “LCIRETOESIIGEDHN”</li>\n</ul>\n</li>\n<li><p>示例 2:</p>\n<ul>\n<li>输入: s = “LEETCODEISHIRING”, numRows = 4</li>\n<li>输出: “LDREOEIIECIHNTSG”</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解题-归纳法\"><a href=\"#解题-归纳法\" class=\"headerlink\" title=\"解题-归纳法\"></a>解题-归纳法</h2><p>主要思路是遍历一次字符串,通过归纳得到的关系直接生成每行的内容.</p>\n<h2 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h2><p>下图是一个长度为23的字符串在行数为5的情况下其元素对应的情况</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/16794605.jpg\" alt=\"输入\"></p>\n<p>我们可以将其分割为三个部分,setp(分割的步长) = 2 * (numRows - 1),至此我们还可以通过用length(s字符串的长度)/step来得到此时我们分割了几部分</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/31790302.jpg\" alt=\"处理1\"></p>\n<p>我们针对第一部分继续分割,我们可以看到第一行和最后一行都是只有一个元素,和中间有两个元素的行中,两个元素之和步长.</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/66594411.jpg\" alt=\"处理2\"></p>\n<p>不过当我们归纳下一组时,我们发现非首位行中两个元素和并不简单的是步长,因为再非首组中,其数据经过step长度的平移,归纳后我们可以发现,非首位行的第二个元素(15)其值等于下一组首位(16)减去当前所在行数(1)</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/59668982.jpg\" alt=\"处理3\"></p>\n<p>那么最后如何实现就十分明了了,不过记得在里层循环的时候,每次增加的长度为step.在非首尾行中,第二个元素需要验证其是否小于length</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/88759683.jpg\" alt=\"解决\"></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">convert</span><span class=\"params\">(String s, <span class=\"keyword\">int</span> numRows)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (numRows == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> length = s.length();</span><br><span class=\"line\">      StringBuffer result = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">      <span class=\"keyword\">int</span> step = <span class=\"number\">2</span> * (numRows - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numRows; i++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j + i &lt; length; j += step) &#123;</span><br><span class=\"line\">              result.append(s.charAt(j + i));</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span> &amp;&amp; i != numRows - <span class=\"number\">1</span> &amp;&amp; j + step - i &lt; length)&#123;</span><br><span class=\"line\">                  result.append(s.charAt(j + step - i ));</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> result.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/ZigzagConversion.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"LeetCode6-ZigZag-Conversion-Z字形变换\"><a href=\"#LeetCode6-ZigZag-Conversion-Z字形变换\" class=\"headerlink\" title=\"LeetCode6: ZigZag Conversion(Z字形变换)\"></a>LeetCode6: ZigZag Conversion(Z字形变换)</h1><p><a href=\"https://leetcode.com/problems/zigzag-conversion/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode-cn.com/problems/zigzag-conversion/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/zigzag-conversion/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/zigzag-conversion/</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p>\n<p>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：</p>","more":"<p>L   C   I   R</p>\n<p>E T O E S I I G</p>\n<p>E   D   H   N</p>\n<p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”LCIRETOESIIGEDHN”。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li><p>示例 1:</p>\n<ul>\n<li>输入: s = “LEETCODEISHIRING”, numRows = 3</li>\n<li>输出: “LCIRETOESIIGEDHN”</li>\n</ul>\n</li>\n<li><p>示例 2:</p>\n<ul>\n<li>输入: s = “LEETCODEISHIRING”, numRows = 4</li>\n<li>输出: “LDREOEIIECIHNTSG”</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解题-归纳法\"><a href=\"#解题-归纳法\" class=\"headerlink\" title=\"解题-归纳法\"></a>解题-归纳法</h2><p>主要思路是遍历一次字符串,通过归纳得到的关系直接生成每行的内容.</p>\n<h2 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h2><p>下图是一个长度为23的字符串在行数为5的情况下其元素对应的情况</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/16794605.jpg\" alt=\"输入\"></p>\n<p>我们可以将其分割为三个部分,setp(分割的步长) = 2 * (numRows - 1),至此我们还可以通过用length(s字符串的长度)/step来得到此时我们分割了几部分</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/31790302.jpg\" alt=\"处理1\"></p>\n<p>我们针对第一部分继续分割,我们可以看到第一行和最后一行都是只有一个元素,和中间有两个元素的行中,两个元素之和步长.</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/66594411.jpg\" alt=\"处理2\"></p>\n<p>不过当我们归纳下一组时,我们发现非首位行中两个元素和并不简单的是步长,因为再非首组中,其数据经过step长度的平移,归纳后我们可以发现,非首位行的第二个元素(15)其值等于下一组首位(16)减去当前所在行数(1)</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/59668982.jpg\" alt=\"处理3\"></p>\n<p>那么最后如何实现就十分明了了,不过记得在里层循环的时候,每次增加的长度为step.在非首尾行中,第二个元素需要验证其是否小于length</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/88759683.jpg\" alt=\"解决\"></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">convert</span><span class=\"params\">(String s, <span class=\"keyword\">int</span> numRows)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (numRows == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> length = s.length();</span><br><span class=\"line\">      StringBuffer result = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">      <span class=\"keyword\">int</span> step = <span class=\"number\">2</span> * (numRows - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numRows; i++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j + i &lt; length; j += step) &#123;</span><br><span class=\"line\">              result.append(s.charAt(j + i));</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span> &amp;&amp; i != numRows - <span class=\"number\">1</span> &amp;&amp; j + step - i &lt; length)&#123;</span><br><span class=\"line\">                  result.append(s.charAt(j + step - i ));</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> result.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/ZigzagConversion.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>"},{"title":"LeetCode7:ReverseInteger(整数反转)","date":"2019-01-12T15:47:01.000Z","_content":"\n# LeetCode7:ReverseInteger(整数反转)\n\n[LeetCode:https://leetcode-cn.com/problems/palindrome-number/](https://leetcode.com/problems/palindrome-number/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/palindrome-number/](https://leetcode-cn.com/problems/palindrome-number/)\n\n## 题目描述\n给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n\n假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\n\n\n  <!-- more -->\n\n## 示例\n* 示例 1:\n  * 输入: 123\n  * 输出: 321\n\n* 示例 2:\n  * 输入: -123\n  * 输出: -321\n\n* 示例 3:\n  * 输入: 120\n  * 输出: 21\n\n## 解题方法\n此题相对来说比较简单,不断从x的最后一位取出数字然后校验当前数字是否合法,最后将最后一位移到结果的首位.\n\n再此我们实现一下数字x = 123的翻转.\n\n我们通过x % 10 = 3 来获取到此时x的最后一位为(index)3, 因为将最后一位取走,x需要通过x /= 10来缩小10倍.\n\n在这里我们要验证一下x是否合法,当x > max/10 (因为x缩小了十倍),或者x = max/10并且 index > 7(因为2^31-1=2147483647最后一位为7,当位数相同时仅当index大于7时才移除),负数的验证相近.\n\n当验证通过后通过result = result * 10 + pop来计算出新的result.\n\n如此重复计算,知道x=0时result就是其反转后的数字\n\n## 代码实现\n```java\nint reverse(int x) {\n    int result = 0;\n\n    while (x != 0) {\n        int index = x % 10;\n        x /= 10;\n        if (result > Integer.MAX_VALUE / 10 || (result == Integer.MAX_VALUE / 10 && index > 7)) {\n            return 0;\n        } else if (result < Integer.MIN_VALUE / 10 || (x == Integer.MIN_VALUE / 10 && index < -8)) {\n            return 0;\n        }\n        result = result * 10 + index;\n    }\n\n    return result;\n}\n```\n[相关代码](https://github.com/clwater/Code/blob/master/src/IntegerInversion.java)欢迎大家关注并提出改进的建议\n","source":"_posts/LeetCode7-ReverseInteger.md","raw":"---\ntitle: 'LeetCode7:ReverseInteger(整数反转)'\ndate: 2019-01-12 23:47:01\ntags: [\"算法\" , \"LeetCode\"]\ncategories : \"LeetCode\"\n---\n\n# LeetCode7:ReverseInteger(整数反转)\n\n[LeetCode:https://leetcode-cn.com/problems/palindrome-number/](https://leetcode.com/problems/palindrome-number/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/palindrome-number/](https://leetcode-cn.com/problems/palindrome-number/)\n\n## 题目描述\n给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n\n假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\n\n\n  <!-- more -->\n\n## 示例\n* 示例 1:\n  * 输入: 123\n  * 输出: 321\n\n* 示例 2:\n  * 输入: -123\n  * 输出: -321\n\n* 示例 3:\n  * 输入: 120\n  * 输出: 21\n\n## 解题方法\n此题相对来说比较简单,不断从x的最后一位取出数字然后校验当前数字是否合法,最后将最后一位移到结果的首位.\n\n再此我们实现一下数字x = 123的翻转.\n\n我们通过x % 10 = 3 来获取到此时x的最后一位为(index)3, 因为将最后一位取走,x需要通过x /= 10来缩小10倍.\n\n在这里我们要验证一下x是否合法,当x > max/10 (因为x缩小了十倍),或者x = max/10并且 index > 7(因为2^31-1=2147483647最后一位为7,当位数相同时仅当index大于7时才移除),负数的验证相近.\n\n当验证通过后通过result = result * 10 + pop来计算出新的result.\n\n如此重复计算,知道x=0时result就是其反转后的数字\n\n## 代码实现\n```java\nint reverse(int x) {\n    int result = 0;\n\n    while (x != 0) {\n        int index = x % 10;\n        x /= 10;\n        if (result > Integer.MAX_VALUE / 10 || (result == Integer.MAX_VALUE / 10 && index > 7)) {\n            return 0;\n        } else if (result < Integer.MIN_VALUE / 10 || (x == Integer.MIN_VALUE / 10 && index < -8)) {\n            return 0;\n        }\n        result = result * 10 + index;\n    }\n\n    return result;\n}\n```\n[相关代码](https://github.com/clwater/Code/blob/master/src/IntegerInversion.java)欢迎大家关注并提出改进的建议\n","slug":"LeetCode7-ReverseInteger","published":1,"updated":"2020-03-13T09:33:05.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dr000iq7dqb8tr8u0y","content":"<h1 id=\"LeetCode7-ReverseInteger-整数反转\"><a href=\"#LeetCode7-ReverseInteger-整数反转\" class=\"headerlink\" title=\"LeetCode7:ReverseInteger(整数反转)\"></a>LeetCode7:ReverseInteger(整数反转)</h1><p><a href=\"https://leetcode.com/problems/palindrome-number/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode-cn.com/problems/palindrome-number/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/palindrome-number/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/palindrome-number/</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>\n<p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>\n  <a id=\"more\"></a>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li><p>示例 1:</p>\n<ul>\n<li>输入: 123</li>\n<li>输出: 321</li>\n</ul>\n</li>\n<li><p>示例 2:</p>\n<ul>\n<li>输入: -123</li>\n<li>输出: -321</li>\n</ul>\n</li>\n<li><p>示例 3:</p>\n<ul>\n<li>输入: 120</li>\n<li>输出: 21</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解题方法\"><a href=\"#解题方法\" class=\"headerlink\" title=\"解题方法\"></a>解题方法</h2><p>此题相对来说比较简单,不断从x的最后一位取出数字然后校验当前数字是否合法,最后将最后一位移到结果的首位.</p>\n<p>再此我们实现一下数字x = 123的翻转.</p>\n<p>我们通过x % 10 = 3 来获取到此时x的最后一位为(index)3, 因为将最后一位取走,x需要通过x /= 10来缩小10倍.</p>\n<p>在这里我们要验证一下x是否合法,当x &gt; max/10 (因为x缩小了十倍),或者x = max/10并且 index &gt; 7(因为2^31-1=2147483647最后一位为7,当位数相同时仅当index大于7时才移除),负数的验证相近.</p>\n<p>当验证通过后通过result = result * 10 + pop来计算出新的result.</p>\n<p>如此重复计算,知道x=0时result就是其反转后的数字</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = x % <span class=\"number\">10</span>;</span><br><span class=\"line\">        x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result &gt; Integer.MAX_VALUE / <span class=\"number\">10</span> || (result == Integer.MAX_VALUE / <span class=\"number\">10</span> &amp;&amp; index &gt; <span class=\"number\">7</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result &lt; Integer.MIN_VALUE / <span class=\"number\">10</span> || (x == Integer.MIN_VALUE / <span class=\"number\">10</span> &amp;&amp; index &lt; -<span class=\"number\">8</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result = result * <span class=\"number\">10</span> + index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/IntegerInversion.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"LeetCode7-ReverseInteger-整数反转\"><a href=\"#LeetCode7-ReverseInteger-整数反转\" class=\"headerlink\" title=\"LeetCode7:ReverseInteger(整数反转)\"></a>LeetCode7:ReverseInteger(整数反转)</h1><p><a href=\"https://leetcode.com/problems/palindrome-number/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode-cn.com/problems/palindrome-number/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/palindrome-number/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/palindrome-number/</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>\n<p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>","more":"<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li><p>示例 1:</p>\n<ul>\n<li>输入: 123</li>\n<li>输出: 321</li>\n</ul>\n</li>\n<li><p>示例 2:</p>\n<ul>\n<li>输入: -123</li>\n<li>输出: -321</li>\n</ul>\n</li>\n<li><p>示例 3:</p>\n<ul>\n<li>输入: 120</li>\n<li>输出: 21</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解题方法\"><a href=\"#解题方法\" class=\"headerlink\" title=\"解题方法\"></a>解题方法</h2><p>此题相对来说比较简单,不断从x的最后一位取出数字然后校验当前数字是否合法,最后将最后一位移到结果的首位.</p>\n<p>再此我们实现一下数字x = 123的翻转.</p>\n<p>我们通过x % 10 = 3 来获取到此时x的最后一位为(index)3, 因为将最后一位取走,x需要通过x /= 10来缩小10倍.</p>\n<p>在这里我们要验证一下x是否合法,当x &gt; max/10 (因为x缩小了十倍),或者x = max/10并且 index &gt; 7(因为2^31-1=2147483647最后一位为7,当位数相同时仅当index大于7时才移除),负数的验证相近.</p>\n<p>当验证通过后通过result = result * 10 + pop来计算出新的result.</p>\n<p>如此重复计算,知道x=0时result就是其反转后的数字</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = x % <span class=\"number\">10</span>;</span><br><span class=\"line\">        x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result &gt; Integer.MAX_VALUE / <span class=\"number\">10</span> || (result == Integer.MAX_VALUE / <span class=\"number\">10</span> &amp;&amp; index &gt; <span class=\"number\">7</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result &lt; Integer.MIN_VALUE / <span class=\"number\">10</span> || (x == Integer.MIN_VALUE / <span class=\"number\">10</span> &amp;&amp; index &lt; -<span class=\"number\">8</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result = result * <span class=\"number\">10</span> + index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/IntegerInversion.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>"},{"title":"LeetCode58-LengthOfLastWord(最后一个单词的长度)","date":"2019-02-19T14:36:30.000Z","_content":"\n# LeetCode58-LengthOfLastWord(最后一个单词的长度)\n\n[LeetCode:https://leetcode-cn.com/length-of-last-word/](https://leetcode.com/length-of-last-word/)\n\n[LeetCodeCn:https://leetcode-cn.com/length-of-last-word/](https://leetcode-cn.com/length-of-last-word/)\n\n## 题目描述\n给定一个仅包含大小写字母和空格 ' ' 的字符串，返回其最后一个单词的长度。\n如果不存在最后一个单词，请返回 0 。\n\n说明：一个单词是指由字母组成，但不包含任何空格的字符串。\n\n\n<!-- more -->\n\n## 示例\n* 输入: \"Hello World\"\n* 输出: 5\n\n## 思路\n很简单的一道题,主要是测试用例中' '引起的各种问题,我们可以通过trim去除首位的' ',然后再通过split截断' ',返回最后一个字符串的长度即可.\n\n## 代码实现\n```java\npublic int lengthOfLastWord(String s) {\n    s = s.trim();\n    String[] strs = s.split(\" \");\n    if (strs.length == 0){\n        return 0;\n    }\n    return strs[strs.length - 1].length();\n}\n```\n\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/LengthOfLastWord.java)欢迎大家关注并提出改进的建议\n","source":"_posts/LeetCode58-LengthOfLastWord.md","raw":"---\ntitle: 'LeetCode58-LengthOfLastWord(最后一个单词的长度)'\ndate: 2019-02-19 22:36:30\ntags: [\"算法\" , \"LeetCode\"]\ncategories : \"LeetCode\"\n---\n\n# LeetCode58-LengthOfLastWord(最后一个单词的长度)\n\n[LeetCode:https://leetcode-cn.com/length-of-last-word/](https://leetcode.com/length-of-last-word/)\n\n[LeetCodeCn:https://leetcode-cn.com/length-of-last-word/](https://leetcode-cn.com/length-of-last-word/)\n\n## 题目描述\n给定一个仅包含大小写字母和空格 ' ' 的字符串，返回其最后一个单词的长度。\n如果不存在最后一个单词，请返回 0 。\n\n说明：一个单词是指由字母组成，但不包含任何空格的字符串。\n\n\n<!-- more -->\n\n## 示例\n* 输入: \"Hello World\"\n* 输出: 5\n\n## 思路\n很简单的一道题,主要是测试用例中' '引起的各种问题,我们可以通过trim去除首位的' ',然后再通过split截断' ',返回最后一个字符串的长度即可.\n\n## 代码实现\n```java\npublic int lengthOfLastWord(String s) {\n    s = s.trim();\n    String[] strs = s.split(\" \");\n    if (strs.length == 0){\n        return 0;\n    }\n    return strs[strs.length - 1].length();\n}\n```\n\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/LengthOfLastWord.java)欢迎大家关注并提出改进的建议\n","slug":"LeetCode58-LengthOfLastWord","published":1,"updated":"2020-03-13T09:33:05.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dr000jq7dqlqmhhi37","content":"<h1 id=\"LeetCode58-LengthOfLastWord-最后一个单词的长度\"><a href=\"#LeetCode58-LengthOfLastWord-最后一个单词的长度\" class=\"headerlink\" title=\"LeetCode58-LengthOfLastWord(最后一个单词的长度)\"></a>LeetCode58-LengthOfLastWord(最后一个单词的长度)</h1><p><a href=\"https://leetcode.com/length-of-last-word/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode-cn.com/length-of-last-word/</a></p>\n<p><a href=\"https://leetcode-cn.com/length-of-last-word/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/length-of-last-word/</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个仅包含大小写字母和空格 ‘ ‘ 的字符串，返回其最后一个单词的长度。<br>如果不存在最后一个单词，请返回 0 。</p>\n<p>说明：一个单词是指由字母组成，但不包含任何空格的字符串。</p>\n<a id=\"more\"></a>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li>输入: “Hello World”</li>\n<li>输出: 5</li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>很简单的一道题,主要是测试用例中’ ‘引起的各种问题,我们可以通过trim去除首位的’ ‘,然后再通过split截断’ ‘,返回最后一个字符串的长度即可.</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLastWord</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    s = s.trim();</span><br><span class=\"line\">    String[] strs = s.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strs.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> strs[strs.length - <span class=\"number\">1</span>].length();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/LengthOfLastWord.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"LeetCode58-LengthOfLastWord-最后一个单词的长度\"><a href=\"#LeetCode58-LengthOfLastWord-最后一个单词的长度\" class=\"headerlink\" title=\"LeetCode58-LengthOfLastWord(最后一个单词的长度)\"></a>LeetCode58-LengthOfLastWord(最后一个单词的长度)</h1><p><a href=\"https://leetcode.com/length-of-last-word/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode-cn.com/length-of-last-word/</a></p>\n<p><a href=\"https://leetcode-cn.com/length-of-last-word/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/length-of-last-word/</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个仅包含大小写字母和空格 ‘ ‘ 的字符串，返回其最后一个单词的长度。<br>如果不存在最后一个单词，请返回 0 。</p>\n<p>说明：一个单词是指由字母组成，但不包含任何空格的字符串。</p>","more":"<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li>输入: “Hello World”</li>\n<li>输出: 5</li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>很简单的一道题,主要是测试用例中’ ‘引起的各种问题,我们可以通过trim去除首位的’ ‘,然后再通过split截断’ ‘,返回最后一个字符串的长度即可.</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLastWord</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    s = s.trim();</span><br><span class=\"line\">    String[] strs = s.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strs.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> strs[strs.length - <span class=\"number\">1</span>].length();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/LengthOfLastWord.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>"},{"title":"Leetcode70-ClimbingStairs(爬楼梯)","date":"2019-02-20T15:10:06.000Z","_content":"\n# Leetcode70-ClimbingStairs(爬楼梯)\n\n[LeetCode:https://leetcode-cn.com/climbing-stairs/](https://leetcode.com/climbing-stairs/)\n\n[LeetCodeCn:https://leetcode-cn.com/climbing-stairs/](https://leetcode-cn.com/climbing-stairs/)\n\n## 题目描述\n假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n注意：给定 n 是一个正整数。\n\n<!-- more -->\n\n\n## 示例\n* 示例 1：\n  * 输入： 2\n  * 输出： 2\n  * 解释： 有两种方法可以爬到楼顶。\n    * 1.  1 阶 + 1 阶\n    * 2.  2 阶\n\n* 示例 2：\n  * 输入： 3\n  * 输出： 3\n  * 解释： 有三种方法可以爬到楼顶。\n    * 1.  1 阶 + 1 阶 + 1 阶\n    * 2.  1 阶 + 2 阶\n    * 3.  2 阶 + 1 阶\n\n## 解题思路-迭代法\n一道很经典的题,这个题可以转化为求斐波那契数列数列第n项的问题.可以才用递归的方法,不过在递归的过程中有大量的重复计算导致其性能一般(可以通过设置计算缓存来避免).\n\n初次之外,还可以用迭代的方法来降低消耗的资源.\n\n原理很简单,应为斐波那契数列从第三项起,其值为前两项的和,我们可以通过不断的计算前两项和,并更新前两项的数据来获得最新项的值\n\n## 图解相关思路\n下面我们给出斐波那契数列数列的前十项,并令a为第一项(0),b为第二项(1)\n\n![准备](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190220233327.png)\n\n当我们求第三项的时候,我们先创建一个临时变量用于储存a,将a指向b,将b指向下一位(应计算的位置),并将原来的b值和变化前的a值(temp).简单来说就是将a和b都向后移动了一位\n\n![3](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190220234509.png)\n\n计算第四项及以后各项均类似,通过更改自身的值,并不断的去计算新的内容\n\n![4](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190220234657.png)\n\n## 代码实现\n```java\npublic int climbStairs(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    int a = 0, b = 1;\n    for (int i = 0; i < n; i++) {\n        int temp = a;\n        a = b;\n        b += temp;\n    }\n    return b;\n}\n```\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/ClimbingStairs.java)欢迎大家关注并提出改进的建议\n","source":"_posts/LeetCode70-ClimbingStairs.md","raw":"---\ntitle: 'Leetcode70-ClimbingStairs(爬楼梯)'\ndate: 2019-02-20 23:10:06\ntags: [\"算法\" , \"LeetCode\"]\ncategories : \"LeetCode\"\n---\n\n# Leetcode70-ClimbingStairs(爬楼梯)\n\n[LeetCode:https://leetcode-cn.com/climbing-stairs/](https://leetcode.com/climbing-stairs/)\n\n[LeetCodeCn:https://leetcode-cn.com/climbing-stairs/](https://leetcode-cn.com/climbing-stairs/)\n\n## 题目描述\n假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n注意：给定 n 是一个正整数。\n\n<!-- more -->\n\n\n## 示例\n* 示例 1：\n  * 输入： 2\n  * 输出： 2\n  * 解释： 有两种方法可以爬到楼顶。\n    * 1.  1 阶 + 1 阶\n    * 2.  2 阶\n\n* 示例 2：\n  * 输入： 3\n  * 输出： 3\n  * 解释： 有三种方法可以爬到楼顶。\n    * 1.  1 阶 + 1 阶 + 1 阶\n    * 2.  1 阶 + 2 阶\n    * 3.  2 阶 + 1 阶\n\n## 解题思路-迭代法\n一道很经典的题,这个题可以转化为求斐波那契数列数列第n项的问题.可以才用递归的方法,不过在递归的过程中有大量的重复计算导致其性能一般(可以通过设置计算缓存来避免).\n\n初次之外,还可以用迭代的方法来降低消耗的资源.\n\n原理很简单,应为斐波那契数列从第三项起,其值为前两项的和,我们可以通过不断的计算前两项和,并更新前两项的数据来获得最新项的值\n\n## 图解相关思路\n下面我们给出斐波那契数列数列的前十项,并令a为第一项(0),b为第二项(1)\n\n![准备](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190220233327.png)\n\n当我们求第三项的时候,我们先创建一个临时变量用于储存a,将a指向b,将b指向下一位(应计算的位置),并将原来的b值和变化前的a值(temp).简单来说就是将a和b都向后移动了一位\n\n![3](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190220234509.png)\n\n计算第四项及以后各项均类似,通过更改自身的值,并不断的去计算新的内容\n\n![4](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190220234657.png)\n\n## 代码实现\n```java\npublic int climbStairs(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    int a = 0, b = 1;\n    for (int i = 0; i < n; i++) {\n        int temp = a;\n        a = b;\n        b += temp;\n    }\n    return b;\n}\n```\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/ClimbingStairs.java)欢迎大家关注并提出改进的建议\n","slug":"LeetCode70-ClimbingStairs","published":1,"updated":"2020-03-13T09:33:05.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5ds000kq7dq0lm489oy","content":"<h1 id=\"Leetcode70-ClimbingStairs-爬楼梯\"><a href=\"#Leetcode70-ClimbingStairs-爬楼梯\" class=\"headerlink\" title=\"Leetcode70-ClimbingStairs(爬楼梯)\"></a>Leetcode70-ClimbingStairs(爬楼梯)</h1><p><a href=\"https://leetcode.com/climbing-stairs/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode-cn.com/climbing-stairs/</a></p>\n<p><a href=\"https://leetcode-cn.com/climbing-stairs/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/climbing-stairs/</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。<br>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<br>注意：给定 n 是一个正整数。</p>\n<a id=\"more\"></a>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li><p>示例 1：</p>\n<ul>\n<li>输入： 2</li>\n<li>输出： 2</li>\n<li>解释： 有两种方法可以爬到楼顶。<ul>\n<li><ol>\n<li>1 阶 + 1 阶</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>2 阶</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>示例 2：</p>\n<ul>\n<li>输入： 3</li>\n<li>输出： 3</li>\n<li>解释： 有三种方法可以爬到楼顶。<ul>\n<li><ol>\n<li>1 阶 + 1 阶 + 1 阶</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>1 阶 + 2 阶</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>2 阶 + 1 阶</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解题思路-迭代法\"><a href=\"#解题思路-迭代法\" class=\"headerlink\" title=\"解题思路-迭代法\"></a>解题思路-迭代法</h2><p>一道很经典的题,这个题可以转化为求斐波那契数列数列第n项的问题.可以才用递归的方法,不过在递归的过程中有大量的重复计算导致其性能一般(可以通过设置计算缓存来避免).</p>\n<p>初次之外,还可以用迭代的方法来降低消耗的资源.</p>\n<p>原理很简单,应为斐波那契数列从第三项起,其值为前两项的和,我们可以通过不断的计算前两项和,并更新前两项的数据来获得最新项的值</p>\n<h2 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h2><p>下面我们给出斐波那契数列数列的前十项,并令a为第一项(0),b为第二项(1)</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190220233327.png\" alt=\"准备\"></p>\n<p>当我们求第三项的时候,我们先创建一个临时变量用于储存a,将a指向b,将b指向下一位(应计算的位置),并将原来的b值和变化前的a值(temp).简单来说就是将a和b都向后移动了一位</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190220234509.png\" alt=\"3\"></p>\n<p>计算第四项及以后各项均类似,通过更改自身的值,并不断的去计算新的内容</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190220234657.png\" alt=\"4\"></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">climbStairs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>, b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = a;</span><br><span class=\"line\">        a = b;</span><br><span class=\"line\">        b += temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/ClimbingStairs.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Leetcode70-ClimbingStairs-爬楼梯\"><a href=\"#Leetcode70-ClimbingStairs-爬楼梯\" class=\"headerlink\" title=\"Leetcode70-ClimbingStairs(爬楼梯)\"></a>Leetcode70-ClimbingStairs(爬楼梯)</h1><p><a href=\"https://leetcode.com/climbing-stairs/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode-cn.com/climbing-stairs/</a></p>\n<p><a href=\"https://leetcode-cn.com/climbing-stairs/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/climbing-stairs/</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。<br>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<br>注意：给定 n 是一个正整数。</p>","more":"<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li><p>示例 1：</p>\n<ul>\n<li>输入： 2</li>\n<li>输出： 2</li>\n<li>解释： 有两种方法可以爬到楼顶。<ul>\n<li><ol>\n<li>1 阶 + 1 阶</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>2 阶</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>示例 2：</p>\n<ul>\n<li>输入： 3</li>\n<li>输出： 3</li>\n<li>解释： 有三种方法可以爬到楼顶。<ul>\n<li><ol>\n<li>1 阶 + 1 阶 + 1 阶</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>1 阶 + 2 阶</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>2 阶 + 1 阶</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解题思路-迭代法\"><a href=\"#解题思路-迭代法\" class=\"headerlink\" title=\"解题思路-迭代法\"></a>解题思路-迭代法</h2><p>一道很经典的题,这个题可以转化为求斐波那契数列数列第n项的问题.可以才用递归的方法,不过在递归的过程中有大量的重复计算导致其性能一般(可以通过设置计算缓存来避免).</p>\n<p>初次之外,还可以用迭代的方法来降低消耗的资源.</p>\n<p>原理很简单,应为斐波那契数列从第三项起,其值为前两项的和,我们可以通过不断的计算前两项和,并更新前两项的数据来获得最新项的值</p>\n<h2 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h2><p>下面我们给出斐波那契数列数列的前十项,并令a为第一项(0),b为第二项(1)</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190220233327.png\" alt=\"准备\"></p>\n<p>当我们求第三项的时候,我们先创建一个临时变量用于储存a,将a指向b,将b指向下一位(应计算的位置),并将原来的b值和变化前的a值(temp).简单来说就是将a和b都向后移动了一位</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190220234509.png\" alt=\"3\"></p>\n<p>计算第四项及以后各项均类似,通过更改自身的值,并不断的去计算新的内容</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20190220234657.png\" alt=\"4\"></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">climbStairs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>, b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = a;</span><br><span class=\"line\">        a = b;</span><br><span class=\"line\">        b += temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/ClimbingStairs.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>"},{"title":"Leetcode5: Longest Palindromic Substring(最长回文子串)","date":"2019-01-11T15:25:15.000Z","_content":"\n\n# Leetcode5: Longest Palindromic Substring(最长回文子串)\n\n[LeetCode:https://leetcode.com/problems/longest-palindromic-substring/](https://leetcode.com/problems/longest-palindromic-substring/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/longest-palindromic-substring/](https://leetcode-cn.com/problems/longest-palindromic-substring/)\n\n## 题目描述\n给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。\n\n## 示例\n* 示例 1：\n  * 输入: \"babad\"\n  * 输出: \"bab\"\n  * 注意: \"aba\" 也是一个有效答案。\n\n  <!-- more -->\n\n* 示例 2：\n  * 输入: \"cbbd\"\n  * 输出: \"bb\"\n\n## 解题方法\n> 感觉暴力法什么的,可以不再说了\n\n## 中心扩展法\n如果一个子串是回文,那么它本事是一个左右对称的形式,长度为n的子串,其中心有2n-1个,因为长度为偶数的子串,其中心可能在两个文字中间.接下来我们只要依次查找每个子串元素和两个元素中间作为回文子串的中心,记录其中最长的子串信息.\n\n## 图解相关思路\n在正式开始之前,我们先看一下如何查找一个中心能匹配的回文最长长度是如何得到的.\n\n前面提到,奇数长度的回文串和偶数长度的回文串其中心是不同,在查找的过程中我们要分别区分两种情况来理解.\n\n假设其长度为奇数,说明中心位置的元素无需和其它元素匹配(因为本身和本身一定相等),检测其左右相同长度的元素是否相等,如下图,假设中心位置是第1位的a,其左右元素相同,分别减少l和增加r,当时此时l = -1,并不合法,所以第1位作为中心的最长回文长度为3.\n\n![奇数中心](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/90951172.jpg)\n\n假设其长度为偶数,相当于其中心是一个空元素,也一定与本身相同,我们直接检测其两侧的元素是否相同,步骤同上.\n\n![偶数中心](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/59440311.jpg)\n\n\n我们将\"babab\"作为参数,此时start(最长子串的开始位置)默认为0,end(最长子串的结束位置)默认为0.\n\n![输入条件](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/33545122.jpg)\n\n当我们搜索第0位时,len(奇) = 1, len(偶) = 0,其最大回文子串长度为1,大于当前start和end之间的差.我们需要更新statr和end的内容.end需要在i的基础上增加len/2,start需要在i的基础上减去(len - 1) /2,(防止偶数子串引起的越界问题).\n\n![i=0](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/94959089.jpg)\n\n我们继续移动i,当i = 1时,此时其最长子串为3,更新start值为0,end值为2.\n\n![i=1](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/85177405.jpg)\n\n后边内容不重复, 因为每次计算相对来说都是独立,只需要将此为得到的最长回文子串长度和已知的比对即可\n\n## 代码实现\n```java\npublic String longestPalindrome(String s) {\n    if (s == null || s.length() < 1){\n        return \"\";\n    }\n    int start = 0, end = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int len = Math.max(isCenterNum(s, i , i), isCenterNum(s , i, i+1));\n        if (len > end - start){\n            start = i - (len - 1) / 2;\n            end = i + len / 2;\n        }\n    }\n\n    return s.substring(start, end + 1);\n}\n\n//计算某位中中心的最长回文子串方法\npublic int isCenterNum(String s, int l, int r){\n    while (l >= 0 && r < s.length() && (s.charAt(l) == s.charAt(r))) {\n        l--;\n        r++;\n    }\n    return r - l - 1;\n}\n```\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/LongestPalindromicSubstring.java)欢迎大家关注并提出改进的建议\n","source":"_posts/Leetcode5-LongestPalindromicSubstring.md","raw":"---\ntitle: 'Leetcode5: Longest Palindromic Substring(最长回文子串)'\ndate: 2019-01-11 23:25:15\ntags: [\"算法\" , \"LeetCode\"]\ncategories : \"LeetCode\"\n---\n\n\n# Leetcode5: Longest Palindromic Substring(最长回文子串)\n\n[LeetCode:https://leetcode.com/problems/longest-palindromic-substring/](https://leetcode.com/problems/longest-palindromic-substring/)\n\n[LeetCodeCn:https://leetcode-cn.com/problems/longest-palindromic-substring/](https://leetcode-cn.com/problems/longest-palindromic-substring/)\n\n## 题目描述\n给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。\n\n## 示例\n* 示例 1：\n  * 输入: \"babad\"\n  * 输出: \"bab\"\n  * 注意: \"aba\" 也是一个有效答案。\n\n  <!-- more -->\n\n* 示例 2：\n  * 输入: \"cbbd\"\n  * 输出: \"bb\"\n\n## 解题方法\n> 感觉暴力法什么的,可以不再说了\n\n## 中心扩展法\n如果一个子串是回文,那么它本事是一个左右对称的形式,长度为n的子串,其中心有2n-1个,因为长度为偶数的子串,其中心可能在两个文字中间.接下来我们只要依次查找每个子串元素和两个元素中间作为回文子串的中心,记录其中最长的子串信息.\n\n## 图解相关思路\n在正式开始之前,我们先看一下如何查找一个中心能匹配的回文最长长度是如何得到的.\n\n前面提到,奇数长度的回文串和偶数长度的回文串其中心是不同,在查找的过程中我们要分别区分两种情况来理解.\n\n假设其长度为奇数,说明中心位置的元素无需和其它元素匹配(因为本身和本身一定相等),检测其左右相同长度的元素是否相等,如下图,假设中心位置是第1位的a,其左右元素相同,分别减少l和增加r,当时此时l = -1,并不合法,所以第1位作为中心的最长回文长度为3.\n\n![奇数中心](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/90951172.jpg)\n\n假设其长度为偶数,相当于其中心是一个空元素,也一定与本身相同,我们直接检测其两侧的元素是否相同,步骤同上.\n\n![偶数中心](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/59440311.jpg)\n\n\n我们将\"babab\"作为参数,此时start(最长子串的开始位置)默认为0,end(最长子串的结束位置)默认为0.\n\n![输入条件](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/33545122.jpg)\n\n当我们搜索第0位时,len(奇) = 1, len(偶) = 0,其最大回文子串长度为1,大于当前start和end之间的差.我们需要更新statr和end的内容.end需要在i的基础上增加len/2,start需要在i的基础上减去(len - 1) /2,(防止偶数子串引起的越界问题).\n\n![i=0](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/94959089.jpg)\n\n我们继续移动i,当i = 1时,此时其最长子串为3,更新start值为0,end值为2.\n\n![i=1](http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/85177405.jpg)\n\n后边内容不重复, 因为每次计算相对来说都是独立,只需要将此为得到的最长回文子串长度和已知的比对即可\n\n## 代码实现\n```java\npublic String longestPalindrome(String s) {\n    if (s == null || s.length() < 1){\n        return \"\";\n    }\n    int start = 0, end = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int len = Math.max(isCenterNum(s, i , i), isCenterNum(s , i, i+1));\n        if (len > end - start){\n            start = i - (len - 1) / 2;\n            end = i + len / 2;\n        }\n    }\n\n    return s.substring(start, end + 1);\n}\n\n//计算某位中中心的最长回文子串方法\npublic int isCenterNum(String s, int l, int r){\n    while (l >= 0 && r < s.length() && (s.charAt(l) == s.charAt(r))) {\n        l--;\n        r++;\n    }\n    return r - l - 1;\n}\n```\n\n[相关代码](https://github.com/clwater/Code/blob/master/src/LongestPalindromicSubstring.java)欢迎大家关注并提出改进的建议\n","slug":"Leetcode5-LongestPalindromicSubstring","published":1,"updated":"2020-03-13T09:33:05.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5ds000lq7dqtuzg2fst","content":"<h1 id=\"Leetcode5-Longest-Palindromic-Substring-最长回文子串\"><a href=\"#Leetcode5-Longest-Palindromic-Substring-最长回文子串\" class=\"headerlink\" title=\"Leetcode5: Longest Palindromic Substring(最长回文子串)\"></a>Leetcode5: Longest Palindromic Substring(最长回文子串)</h1><p><a href=\"https://leetcode.com/problems/longest-palindromic-substring/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode.com/problems/longest-palindromic-substring/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/longest-palindromic-substring/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/longest-palindromic-substring/</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li><p>示例 1：</p>\n<ul>\n<li>输入: “babad”</li>\n<li>输出: “bab”</li>\n<li>注意: “aba” 也是一个有效答案。</li>\n</ul>\n<a id=\"more\"></a>\n</li>\n<li><p>示例 2：</p>\n<ul>\n<li>输入: “cbbd”</li>\n<li>输出: “bb”</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解题方法\"><a href=\"#解题方法\" class=\"headerlink\" title=\"解题方法\"></a>解题方法</h2><blockquote>\n<p>感觉暴力法什么的,可以不再说了</p>\n</blockquote>\n<h2 id=\"中心扩展法\"><a href=\"#中心扩展法\" class=\"headerlink\" title=\"中心扩展法\"></a>中心扩展法</h2><p>如果一个子串是回文,那么它本事是一个左右对称的形式,长度为n的子串,其中心有2n-1个,因为长度为偶数的子串,其中心可能在两个文字中间.接下来我们只要依次查找每个子串元素和两个元素中间作为回文子串的中心,记录其中最长的子串信息.</p>\n<h2 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h2><p>在正式开始之前,我们先看一下如何查找一个中心能匹配的回文最长长度是如何得到的.</p>\n<p>前面提到,奇数长度的回文串和偶数长度的回文串其中心是不同,在查找的过程中我们要分别区分两种情况来理解.</p>\n<p>假设其长度为奇数,说明中心位置的元素无需和其它元素匹配(因为本身和本身一定相等),检测其左右相同长度的元素是否相等,如下图,假设中心位置是第1位的a,其左右元素相同,分别减少l和增加r,当时此时l = -1,并不合法,所以第1位作为中心的最长回文长度为3.</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/90951172.jpg\" alt=\"奇数中心\"></p>\n<p>假设其长度为偶数,相当于其中心是一个空元素,也一定与本身相同,我们直接检测其两侧的元素是否相同,步骤同上.</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/59440311.jpg\" alt=\"偶数中心\"></p>\n<p>我们将”babab”作为参数,此时start(最长子串的开始位置)默认为0,end(最长子串的结束位置)默认为0.</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/33545122.jpg\" alt=\"输入条件\"></p>\n<p>当我们搜索第0位时,len(奇) = 1, len(偶) = 0,其最大回文子串长度为1,大于当前start和end之间的差.我们需要更新statr和end的内容.end需要在i的基础上增加len/2,start需要在i的基础上减去(len - 1) /2,(防止偶数子串引起的越界问题).</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/94959089.jpg\" alt=\"i=0\"></p>\n<p>我们继续移动i,当i = 1时,此时其最长子串为3,更新start值为0,end值为2.</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/85177405.jpg\" alt=\"i=1\"></p>\n<p>后边内容不重复, 因为每次计算相对来说都是独立,只需要将此为得到的最长回文子串长度和已知的比对即可</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">longestPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span> || s.length() &lt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>, end = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = Math.max(isCenterNum(s, i , i), isCenterNum(s , i, i+<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &gt; end - start)&#123;</span><br><span class=\"line\">            start = i - (len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            end = i + len / <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.substring(start, end + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//计算某位中中心的最长回文子串方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">isCenterNum</span><span class=\"params\">(String s, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &gt;= <span class=\"number\">0</span> &amp;&amp; r &lt; s.length() &amp;&amp; (s.charAt(l) == s.charAt(r))) &#123;</span><br><span class=\"line\">        l--;</span><br><span class=\"line\">        r++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r - l - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/LongestPalindromicSubstring.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Leetcode5-Longest-Palindromic-Substring-最长回文子串\"><a href=\"#Leetcode5-Longest-Palindromic-Substring-最长回文子串\" class=\"headerlink\" title=\"Leetcode5: Longest Palindromic Substring(最长回文子串)\"></a>Leetcode5: Longest Palindromic Substring(最长回文子串)</h1><p><a href=\"https://leetcode.com/problems/longest-palindromic-substring/\" target=\"_blank\" rel=\"noopener\">LeetCode:https://leetcode.com/problems/longest-palindromic-substring/</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/longest-palindromic-substring/\" target=\"_blank\" rel=\"noopener\">LeetCodeCn:https://leetcode-cn.com/problems/longest-palindromic-substring/</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li><p>示例 1：</p>\n<ul>\n<li>输入: “babad”</li>\n<li>输出: “bab”</li>\n<li>注意: “aba” 也是一个有效答案。</li>\n</ul>","more":"</li>\n<li><p>示例 2：</p>\n<ul>\n<li>输入: “cbbd”</li>\n<li>输出: “bb”</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解题方法\"><a href=\"#解题方法\" class=\"headerlink\" title=\"解题方法\"></a>解题方法</h2><blockquote>\n<p>感觉暴力法什么的,可以不再说了</p>\n</blockquote>\n<h2 id=\"中心扩展法\"><a href=\"#中心扩展法\" class=\"headerlink\" title=\"中心扩展法\"></a>中心扩展法</h2><p>如果一个子串是回文,那么它本事是一个左右对称的形式,长度为n的子串,其中心有2n-1个,因为长度为偶数的子串,其中心可能在两个文字中间.接下来我们只要依次查找每个子串元素和两个元素中间作为回文子串的中心,记录其中最长的子串信息.</p>\n<h2 id=\"图解相关思路\"><a href=\"#图解相关思路\" class=\"headerlink\" title=\"图解相关思路\"></a>图解相关思路</h2><p>在正式开始之前,我们先看一下如何查找一个中心能匹配的回文最长长度是如何得到的.</p>\n<p>前面提到,奇数长度的回文串和偶数长度的回文串其中心是不同,在查找的过程中我们要分别区分两种情况来理解.</p>\n<p>假设其长度为奇数,说明中心位置的元素无需和其它元素匹配(因为本身和本身一定相等),检测其左右相同长度的元素是否相等,如下图,假设中心位置是第1位的a,其左右元素相同,分别减少l和增加r,当时此时l = -1,并不合法,所以第1位作为中心的最长回文长度为3.</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/90951172.jpg\" alt=\"奇数中心\"></p>\n<p>假设其长度为偶数,相当于其中心是一个空元素,也一定与本身相同,我们直接检测其两侧的元素是否相同,步骤同上.</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/59440311.jpg\" alt=\"偶数中心\"></p>\n<p>我们将”babab”作为参数,此时start(最长子串的开始位置)默认为0,end(最长子串的结束位置)默认为0.</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-11/33545122.jpg\" alt=\"输入条件\"></p>\n<p>当我们搜索第0位时,len(奇) = 1, len(偶) = 0,其最大回文子串长度为1,大于当前start和end之间的差.我们需要更新statr和end的内容.end需要在i的基础上增加len/2,start需要在i的基础上减去(len - 1) /2,(防止偶数子串引起的越界问题).</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/94959089.jpg\" alt=\"i=0\"></p>\n<p>我们继续移动i,当i = 1时,此时其最长子串为3,更新start值为0,end值为2.</p>\n<p><img src=\"http://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/19-1-12/85177405.jpg\" alt=\"i=1\"></p>\n<p>后边内容不重复, 因为每次计算相对来说都是独立,只需要将此为得到的最长回文子串长度和已知的比对即可</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">longestPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span> || s.length() &lt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>, end = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = Math.max(isCenterNum(s, i , i), isCenterNum(s , i, i+<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &gt; end - start)&#123;</span><br><span class=\"line\">            start = i - (len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            end = i + len / <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.substring(start, end + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//计算某位中中心的最长回文子串方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">isCenterNum</span><span class=\"params\">(String s, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &gt;= <span class=\"number\">0</span> &amp;&amp; r &lt; s.length() &amp;&amp; (s.charAt(l) == s.charAt(r))) &#123;</span><br><span class=\"line\">        l--;</span><br><span class=\"line\">        r++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r - l - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/clwater/Code/blob/master/src/LongestPalindromicSubstring.java\" target=\"_blank\" rel=\"noopener\">相关代码</a>欢迎大家关注并提出改进的建议</p>"},{"title":"Android View 相关源码分析之四 LinearLayout源码分析","date":"2017-02-03T09:55:53.000Z","_content":"## LinearLayout 源码分析\n### measure过程\n#### 主要过程\n* 根据布局方向选择measure过程分支\n* 初始化相关变量\n* 对View进行第一次测量\n* mTotalLength的再次测量\n* 二次测量部分View和对为测量的子View进行测量\n\n<!-- more -->\n\n```java\n  protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n      //判断布局方向\n      if (mOrientation == VERTICAL) {\n          measureVertical(widthMeasureSpec, heightMeasureSpec);\n      } else {\n          measureHorizontal(widthMeasureSpec, heightMeasureSpec);\n      }\n  }\n```\nmeasureVertical和measureHorizontal只是布局方向上的区别 以下主要分析measureVertical方法\n\n#### 初始化相关变量\n```java\n  //mTotalLength是记录内部使用的高度也就是子View的高度和 而不是LinearLayout的高度\n  mTotalLength = 0;\n  //子视图的最大宽度(不包括layout_weight>0的子View)\n  int maxWidth = 0;\n  int childState = 0;\n  int alternativeMaxWidth = 0;\n  //子视图的最大宽度(仅包含layout_weight>0的子View)\n  int weightedMaxWidth = 0;\n  //子视图是否均为fillParent 用于判断是否需要重新计算\n  boolean allFillParent = true;\n  //权重值的总和\n  float totalWeight = 0;\n  //子View的数量(统一级别下)\n  final int count = getVirtualChildCount();\n  //高度宽度模式\n  final int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n  final int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n  //子View的宽度是否需要由父View决定\n  boolean matchWidth = false;\n  boolean skippedMeasure = false;\n  //第几个子View的baseLine作为LinearLayout的基准线\n  final int baselineChildIndex = mBaselineAlignedChildIndex;  \n  //mUseLargestChild为是否使用最大子元素的尺寸作为标准再次测量\n  final boolean useLargestChild = mUseLargestChild;\n  //子View中最高高度\n  int largestChildHeight = Integer.MIN_VALUE;\n```\n\n#### 第一次测量\n```java\n  // See how tall everyone is. Also remember max width.\n  for (int i = 0; i < count; ++i) {\n      final View child = getVirtualChildAt(i);\n\n      // 测量为null的子视图的高度\n      // measureNullChild() 暂时返回 0 便于扩展\n      if (child == null) {\n          mTotalLength += measureNullChild(i);\n          continue;\n      }\n      //Visibility为Gone的时候跳过该View\n      // getChildrenSkipCount()方法同样返回0 便于扩展\n      if (child.getVisibility() == View.GONE) {\n         i += getChildrenSkipCount(child, i);\n         continue;\n      }\n      //根据showDivider的值(通过hasDividerBeforeChildAt()) 来决定当前子View是否需要添加分割线的高度\n      if (hasDividerBeforeChildAt(i)) {\n          mTotalLength += mDividerHeight;\n      }\n\n      //会将子view的LayoutParams强转为父View的LayoutParams类型\n      LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)child.getLayoutParams();\n\n      totalWeight += lp.weight;\n\n      if (heightMode == MeasureSpec.EXACTLY && lp.height == 0 && lp.weight > 0) {\n          // 满足该条件的话 不需要现在计算该子视图的高度 测量工作会在之后进行\n          // 若子View的height=0 且weight> 0 则说明该View希望使用的是LinearLayout的剩余空间\n          // LinearLayout是EXACTLY模式的说明LinearLayout高度已经确定 不需要依赖子View的测量结果来计算自己 就无需测量该子View\n\n          final int totalLength = mTotalLength;\n          mTotalLength = Math.max(totalLength, totalLength + lp.topMargin + lp.bottomMargin);\n          skippedMeasure = true;\n      } else {\n          //测量子View\n\n          int oldHeight = Integer.MIN_VALUE;\n\n          //当前View的height=0 且weight> 0 则说明该LinearLayout的高度需要靠子View测量(不需要的在上面分支处理了)\n          //将子View的高度设为-1 防止子View高度为0\n          if (lp.height == 0 && lp.weight > 0) {\n              oldHeight = 0;\n              lp.height = LayoutParams.WRAP_CONTENT;\n          }\n\n          //调用子View的measureChildWithMargins() 对子View进行测量\n          //第四个参数表示当前已使用的宽度  因为是竖直模式 所以为0\n          //最后一个参数表示已使用的高度 如果之前的子View或者当前的View有weight属性 则当前子视图使用 LinearLayout 的所有高度 已使用的高度为0\n          measureChildBeforeLayout(child, i, widthMeasureSpec, 0, heightMeasureSpec,\n                 totalWeight == 0 ? mTotalLength : 0);\n\n          if (oldHeight != Integer.MIN_VALUE) {\n             //测量完成后 重置子View高度\n             lp.height = oldHeight;\n          }\n\n          final int childHeight = child.getMeasuredHeight();\n          final int totalLength = mTotalLength;\n          // 比较child测量前后总高度 取较大值\n          ///getNextLocationOffset() 返回0 便于扩展\n          mTotalLength = Math.max(totalLength, totalLength + childHeight + lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));\n          // 设置最高子视图大小\n          if (useLargestChild) {\n              largestChildHeight = Math.max(childHeight, largestChildHeight);\n          }\n      }\n\n       // mBaselineChildTop 表示指定的 baseline 的子视图的顶部高度\n      if ((baselineChildIndex >= 0) && (baselineChildIndex == i + 1)) {\n         mBaselineChildTop = mTotalLength;\n      }\n\n      // 设置为 baseline 的子视图的前面不允许设置 weiget 属性\n      if (i < baselineChildIndex && lp.weight > 0) {\n          throw new RuntimeException(\"A child of LinearLayout with index \"\n                  + \"less than mBaselineAlignedChildIndex has weight > 0, which \"\n                  + \"won't work.  Either remove the weight, or don't set \"\n                  + \"mBaselineAlignedChildIndex.\");\n      }\n\n      // 宽度测量相关\n\n      boolean matchWidthLocally = false;\n\n      //当LinearLayout非EXACTLY模式 并且自View为MATCH_PARENT时\n      //设置matchWidth和matchWidthLocally为true\n      //该子View占据LinearLayout水平方向上所有空间\n\n      if (widthMode != MeasureSpec.EXACTLY && lp.width == LayoutParams.MATCH_PARENT) {\n          matchWidth = true;\n          matchWidthLocally = true;\n      }\n\n      final int margin = lp.leftMargin + lp.rightMargin;\n      final int measuredWidth = child.getMeasuredWidth() + margin;\n\n      //对一堆变量赋值\n      maxWidth = Math.max(maxWidth, measuredWidth);\n      childState = combineMeasuredStates(childState, child.getMeasuredState());\n\n      allFillParent = allFillParent && lp.width == LayoutParams.MATCH_PARENT;\n      if (lp.weight > 0) {\n          weightedMaxWidth = Math.max(weightedMaxWidth,\n                  matchWidthLocally ? margin : measuredWidth);\n      } else {\n          alternativeMaxWidth = Math.max(alternativeMaxWidth,\n                  matchWidthLocally ? margin : measuredWidth);\n      }\n\n      i += getChildrenSkipCount(child, i);\n  }\n```\n\n#### 二次测量mTotalLength\n\n```java\n  //根据hasDividerBeforeChildAt得到showDivider的值是否为end 来判断是否需要加上divider的高度\n  if (mTotalLength > 0 && hasDividerBeforeChildAt(count))\n      mTotalLength += mDividerHeight;\n  }\n  //如果高度测量模式为AT_MOST或者UNSPECIFIED 则进行二次测量 且设置了measureWithLargestChild\n  if (useLargestChild && (heightMode == MeasureSpec.AT_MOST ||\n      heightMode == MeasureSpec.UNSPECIFIED)) {\n      mTotalLength = 0;\n      for (int i = 0; i < count; ++i) {\n          final View child = getVirtualChildAt(i);\n          if (child == null) {\n              mTotalLength += measureNullChild(i);\n              continue;\n          }\n          if (child.getVisibility() == GONE) {\n              i += getChildrenSkipCount(child, i);\n              continue;\n          }\n          final LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)\n                  child.getLayoutParams();\n          // 计算所有子View的高度之和\n          final int totalLength = mTotalLength;\n          mTotalLength = Math.max(totalLength, totalLength + largestChildHeight +\n                  lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));\n      }\n  }\n```\n就是需要useLargestChild\n\n而 mUseLargestChild = a.getBoolean(R.styleable.LinearLayout_measureWithLargestChild, false);\n\n就是说仅在LinearLayout的measureWithLargestChild属性设置为True时(默认为false)才可能出现某个child被二次测量\n\n实例如下\n\n![LinearLayout二次测量](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/34816550.jpg)\n\n\n\n#### 二次测量部分View和对为测量的子View进行测量\n\n```java\n\n   //加上padding的值\n   mTotalLength += mPaddingTop + mPaddingBottom;\n   int heightSize = mTotalLength;\n   //minHeight和当前使用的高度比较取较大值\n   heightSize = Math.max(heightSize, getSuggestedMinimumHeight());\n\n   //根据heightMeasureSpec协助计算heightSizeAndState的大小\n   //resolveSizeAndState方法之后会分析\n   int heightSizeAndState = resolveSizeAndState(heightSize, heightMeasureSpec, 0);\n   heightSize = heightSizeAndState & MEASURED_SIZE_MASK;\n\n   // Either expand children with weight to take up available space or\n   // shrink them if they extend beyond our current bounds. If we skipped\n   // measurement on any children, we need to measure them now.\n\n\n\n   //delta为额外的空间 及LinearLayout中未被分配的空间(可以为负)\n   int delta = heightSize - mTotalLength;\n   if (skippedMeasure || delta != 0 && totalWeight > 0.0f) {\n       //skippedMeasure为第一次测量下对跳过测量的子View设置的\n       //weightSum为权重和 如果设置了总权重则使用我们所设置的  如果没有则使用子View的weight和\n       float weightSum = mWeightSum > 0.0f ? mWeightSum : totalWeight;\n\n       mTotalLength = 0;\n       //测量什么的\n       for (int i = 0; i < count; ++i) {\n           final View child = getVirtualChildAt(i);\n\n           if (child.getVisibility() == View.GONE) {\n               continue;\n           }\n\n           LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) child.getLayoutParams();\n\n           float childExtra = lp.weight;\n           if (childExtra > 0) {\n               // Child said it could absorb extra space -- give him his share\n               //计算weight属性分配的大小\n               int share = (int) (childExtra * delta / weightSum);\n               //权重和减去已经分配权重\n               weightSum -= childExtra;\n               //剩余高度减去分配的高度\n               delta -= share;\n\n               final int childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,\n                       mPaddingLeft + mPaddingRight +\n                               lp.leftMargin + lp.rightMargin, lp.width);\n\n               // TODO: Use a field like lp.isMeasured to figure out if this\n               // child has been previously measured\n\n\n               if ((lp.height != 0) || (heightMode != MeasureSpec.EXACTLY)) {\n                   //子视图已经被测量过\n                   //非EXACTLY view需要加上share\n                   int childHeight = child.getMeasuredHeight() + share;\n                   if (childHeight < 0) {\n                       childHeight = 0;\n                   }\n                   //重新测量View\n                   child.measure(childWidthMeasureSpec,\n                           MeasureSpec.makeMeasureSpec(childHeight, MeasureSpec.EXACTLY));\n               } else {\n                   //如果当前是EXACTLY模式 说明没有被测量 需要进行测量\n                   //子视图首次被测量\n                   //EXACTLY模式下 将weight占比的高度分配给子View    \n                   child.measure(childWidthMeasureSpec,\n                           MeasureSpec.makeMeasureSpec(share > 0 ? share : 0,\n                                   MeasureSpec.EXACTLY));\n               }\n\n               // Child may now not fit in vertical dimension.\n               childState = combineMeasuredStates(childState, child.getMeasuredState()\n                       & (MEASURED_STATE_MASK>>MEASURED_HEIGHT_STATE_SHIFT));\n           }\n\n          //处理子视图宽度\n           final int margin =  lp.leftMargin + lp.rightMargin;\n           final int measuredWidth = child.getMeasuredWidth() + margin;\n           maxWidth = Math.max(maxWidth, measuredWidth);\n\n           boolean matchWidthLocally = widthMode != MeasureSpec.EXACTLY &&\n                   lp.width == LayoutParams.MATCH_PARENT;\n\n           alternativeMaxWidth = Math.max(alternativeMaxWidth,\n                   matchWidthLocally ? margin : measuredWidth);\n\n           allFillParent = allFillParent && lp.width == LayoutParams.MATCH_PARENT;\n\n           final int totalLength = mTotalLength;\n           mTotalLength = Math.max(totalLength, totalLength + child.getMeasuredHeight() +\n                   lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));\n       }\n\n       // Add in our padding\n       mTotalLength += mPaddingTop + mPaddingBottom;\n       // TODO: Should we recompute the heightSpec based on the new total length?\n   } else {\n       alternativeMaxWidth = Math.max(alternativeMaxWidth,\n                                      weightedMaxWidth);\n\n\n       // We have no limit, so make all weighted views as tall as the largest child.\n       // Children will have already been measured once.\n       if (useLargestChild && heightMode != MeasureSpec.EXACTLY) {\n           for (int i = 0; i < count; i++) {\n               final View child = getVirtualChildAt(i);\n\n               if (child == null || child.getVisibility() == View.GONE) {\n                   continue;\n               }\n\n               final LinearLayout.LayoutParams lp =\n                       (LinearLayout.LayoutParams) child.getLayoutParams();\n\n               float childExtra = lp.weight;\n               if (childExtra > 0) {\n                  //使用最大子视图高度测量\n                   child.measure(\n                           MeasureSpec.makeMeasureSpec(child.getMeasuredWidth(),\n                                   MeasureSpec.EXACTLY),\n                           MeasureSpec.makeMeasureSpec(largestChildHeight,\n                                   MeasureSpec.EXACTLY));\n               }\n           }\n       }\n   }\n\n   if (!allFillParent && widthMode != MeasureSpec.EXACTLY) {\n       maxWidth = alternativeMaxWidth;\n   }\n\n   maxWidth += mPaddingLeft + mPaddingRight;\n\n   // Check against our minimum width\n   maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());\n\n   setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),\n           heightSizeAndState);\n\n   if (matchWidth) {\n       forceUniformWidth(count, heightMeasureSpec);\n   }\n```\nresolveSizeAndState方法 定义在View中\n```java\n/**\n   * Utility to reconcile a desired size and state, with constraints imposed\n   * by a MeasureSpec. Will take the desired size, unless a different size\n   * is imposed by the constraints. The returned value is a compound integer,\n   * with the resolved size in the {@link #MEASURED_SIZE_MASK} bits and\n   * optionally the bit {@link #MEASURED_STATE_TOO_SMALL} set if the\n   * resulting size is smaller than the size the view wants to be.\n   *\n   * @param size How big the view wants to be.\n   * @param measureSpec Constraints imposed by the parent.\n   * @param childMeasuredState Size information bit mask for the view's\n   *                           children.\n   * @return Size information bit mask as defined by\n   *         {@link #MEASURED_SIZE_MASK} and\n   *         {@link #MEASURED_STATE_TOO_SMALL}.\n   */\n  public static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState) {\n      final int specMode = MeasureSpec.getMode(measureSpec);\n      final int specSize = MeasureSpec.getSize(measureSpec);\n      final int result;\n      switch (specMode) {\n          case MeasureSpec.AT_MOST:\n              if (specSize < size) {\n                  result = specSize | MEASURED_STATE_TOO_SMALL;\n              } else {\n                  result = size;\n              }\n              break;\n          case MeasureSpec.EXACTLY:\n              result = specSize;\n              break;\n          case MeasureSpec.UNSPECIFIED:\n          default:\n              result = size;\n      }\n      return result | (childMeasuredState & MEASURED_STATE_MASK);\n  }\n```\n\n###### delta为负的相关解析\n相关代码及效果如下\n\n![负delta.png](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/88204275.jpg)\n\n根据之前的measure流程分析一下\n\n* 相关变量初始化\n* 第一次测量  两个子TextView都会被测量 TextView1.height = TextView1.height = 500dp 则mToatalLength为1000dp\n* mToatalLength再次测量跳过\n* 计算delta delta = heightSize - mTotalLength 根据resolveSizeAndState方法 父LinearLayout是EXACTLY模式 所以最终heightSize为500dp delta = -500dp\n* 根据weight分配剩余空间 TextView1.height = 500 + 1 / 5 * (- 500) = 400 dp\n  TextView2.height = 500 + 4 / 5 * (- 500) = 100 dp\n\n\n### layout过程\n\n\n```java\n  protected void onLayout(boolean changed, int l, int t, int r, int b) {\n    if (mOrientation == VERTICAL) {\n        layoutVertical(l, t, r, b);\n    } else {\n        layoutHorizontal(l, t, r, b);\n    }\n  }\n```\n我们可以看出 同样是分成水平和竖直两个方向的 同样分析竖直 方向下的layout过程\n\n```java\n/**\n    * Position the children during a layout pass if the orientation of this\n    * LinearLayout is set to {@link #VERTICAL}.\n    *\n    * @see #getOrientation()\n    * @see #setOrientation(int)\n    * @see #onLayout(boolean, int, int, int, int)\n    * @param left\n    * @param top\n    * @param right\n    * @param bottom\n    */\n   void layoutVertical(int left, int top, int right, int bottom) {\n       final int paddingLeft = mPaddingLeft;\n\n       int childTop;\n       int childLeft;\n\n       //父View默认子View的宽度\n       final int width = right - left;\n       //子View的右侧默认位置\n       int childRight = width - mPaddingRight;\n\n       // 子View的可用空间大小\n       int childSpace = width - paddingLeft - mPaddingRight;\n\n       //子View的个数\n       final int count = getVirtualChildCount();\n\n       final int majorGravity = mGravity & Gravity.VERTICAL_GRAVITY_MASK;\n       final int minorGravity = mGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;\n\n       //根据LinearLayout设置的对其方式 设置第一个子View的Top值\n       switch (majorGravity) {\n          case Gravity.BOTTOM:\n              // mTotalLength contains the padding already\n              childTop = mPaddingTop + bottom - top - mTotalLength;\n              break;\n\n              // mTotalLength contains the padding already\n          case Gravity.CENTER_VERTICAL:\n              childTop = mPaddingTop + (bottom - top - mTotalLength) / 2;\n              break;\n\n          case Gravity.TOP:\n          default:\n              childTop = mPaddingTop;\n              break;\n       }\n\n       //遍历各个子View\n       for (int i = 0; i < count; i++) {\n           final View child = getVirtualChildAt(i);\n           if (child == null) {\n               childTop += measureNullChild(i);\n           } else if (child.getVisibility() != GONE) {\n                //LinearLayout中子View的宽和高有measure过程决定\n               final int childWidth = child.getMeasuredWidth();\n               final int childHeight = child.getMeasuredHeight();\n               //获取子View的LayoutParams\n               final LinearLayout.LayoutParams lp =\n                       (LinearLayout.LayoutParams) child.getLayoutParams();\n\n               int gravity = lp.gravity;\n               if (gravity < 0) {\n                   gravity = minorGravity;\n               }\n               final int layoutDirection = getLayoutDirection();\n               final int absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);\n               //根据子View的对其方式设置Left值\n               switch (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {\n                   case Gravity.CENTER_HORIZONTAL:\n                       childLeft = paddingLeft + ((childSpace - childWidth) / 2)\n                               + lp.leftMargin - lp.rightMargin;\n                       break;\n\n                   case Gravity.RIGHT:\n                       childLeft = childRight - childWidth - lp.rightMargin;\n                       break;\n\n                   case Gravity.LEFT:\n                   default:\n                       childLeft = paddingLeft + lp.leftMargin;\n                       break;\n               }\n               //如果有分割线 添加分割线的高度\n               if (hasDividerBeforeChildAt(i)) {\n                   childTop += mDividerHeight;\n               }\n               //子View的top修改\n               childTop += lp.topMargin;\n               //用setChildFrame()方法设置子控件控件的在父控件上的坐标轴\n               setChildFrame(child, childLeft, childTop + getLocationOffset(child),\n                       childWidth, childHeight);\n               childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);\n\n               i += getChildrenSkipCount(child, i);\n           }\n       }\n   }\n```\n\n#### draw 源码分析\n```java\n  protected void onDraw(Canvas canvas) {\n    if (mDivider == null) {\n        return;\n    }\n\n    if (mOrientation == VERTICAL) {\n        drawDividersVertical(canvas);\n    } else {\n        drawDividersHorizontal(canvas);\n    }\n  }\n```\n同样主要分析垂直方向的处理\n\n```java\n\n  void drawDividersVertical(Canvas canvas) {\n      final int count = getVirtualChildCount();\n      //根据计算好的坐标绘制对应的子View\n      for (int i = 0; i < count; i++) {\n          final View child = getVirtualChildAt(i);\n\n          if (child != null && child.getVisibility() != GONE) {\n              if (hasDividerBeforeChildAt(i)) {\n                  final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n                  final int top = child.getTop() - lp.topMargin - mDividerHeight;\n                  drawHorizontalDivider(canvas, top);\n              }\n          }\n      }\n      //绘制分割线\n      if (hasDividerBeforeChildAt(count)) {\n          final View child = getLastNonGoneChild();\n          int bottom = 0;\n          if (child == null) {\n              bottom = getHeight() - getPaddingBottom() - mDividerHeight;\n          } else {\n              final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n              bottom = child.getBottom() + lp.bottomMargin;\n          }\n          drawHorizontalDivider(canvas, bottom);\n      }\n  }\n\n  void drawHorizontalDivider(Canvas canvas, int top) {\n    mDivider.setBounds(getPaddingLeft() + mDividerPadding, top,\n            getWidth() - getPaddingRight() - mDividerPadding, top + mDividerHeight);\n    mDivider.draw(canvas);\n  }\n```\n","source":"_posts/LinearLayout 源码分析.md","raw":"---\ntitle: Android View 相关源码分析之四 LinearLayout源码分析\ndate: 2017-02-03 17:55:53\ntags: [\"android\" , \"view\" , \"源码\"]\ncategories: \"android\"\n---\n## LinearLayout 源码分析\n### measure过程\n#### 主要过程\n* 根据布局方向选择measure过程分支\n* 初始化相关变量\n* 对View进行第一次测量\n* mTotalLength的再次测量\n* 二次测量部分View和对为测量的子View进行测量\n\n<!-- more -->\n\n```java\n  protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n      //判断布局方向\n      if (mOrientation == VERTICAL) {\n          measureVertical(widthMeasureSpec, heightMeasureSpec);\n      } else {\n          measureHorizontal(widthMeasureSpec, heightMeasureSpec);\n      }\n  }\n```\nmeasureVertical和measureHorizontal只是布局方向上的区别 以下主要分析measureVertical方法\n\n#### 初始化相关变量\n```java\n  //mTotalLength是记录内部使用的高度也就是子View的高度和 而不是LinearLayout的高度\n  mTotalLength = 0;\n  //子视图的最大宽度(不包括layout_weight>0的子View)\n  int maxWidth = 0;\n  int childState = 0;\n  int alternativeMaxWidth = 0;\n  //子视图的最大宽度(仅包含layout_weight>0的子View)\n  int weightedMaxWidth = 0;\n  //子视图是否均为fillParent 用于判断是否需要重新计算\n  boolean allFillParent = true;\n  //权重值的总和\n  float totalWeight = 0;\n  //子View的数量(统一级别下)\n  final int count = getVirtualChildCount();\n  //高度宽度模式\n  final int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n  final int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n  //子View的宽度是否需要由父View决定\n  boolean matchWidth = false;\n  boolean skippedMeasure = false;\n  //第几个子View的baseLine作为LinearLayout的基准线\n  final int baselineChildIndex = mBaselineAlignedChildIndex;  \n  //mUseLargestChild为是否使用最大子元素的尺寸作为标准再次测量\n  final boolean useLargestChild = mUseLargestChild;\n  //子View中最高高度\n  int largestChildHeight = Integer.MIN_VALUE;\n```\n\n#### 第一次测量\n```java\n  // See how tall everyone is. Also remember max width.\n  for (int i = 0; i < count; ++i) {\n      final View child = getVirtualChildAt(i);\n\n      // 测量为null的子视图的高度\n      // measureNullChild() 暂时返回 0 便于扩展\n      if (child == null) {\n          mTotalLength += measureNullChild(i);\n          continue;\n      }\n      //Visibility为Gone的时候跳过该View\n      // getChildrenSkipCount()方法同样返回0 便于扩展\n      if (child.getVisibility() == View.GONE) {\n         i += getChildrenSkipCount(child, i);\n         continue;\n      }\n      //根据showDivider的值(通过hasDividerBeforeChildAt()) 来决定当前子View是否需要添加分割线的高度\n      if (hasDividerBeforeChildAt(i)) {\n          mTotalLength += mDividerHeight;\n      }\n\n      //会将子view的LayoutParams强转为父View的LayoutParams类型\n      LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)child.getLayoutParams();\n\n      totalWeight += lp.weight;\n\n      if (heightMode == MeasureSpec.EXACTLY && lp.height == 0 && lp.weight > 0) {\n          // 满足该条件的话 不需要现在计算该子视图的高度 测量工作会在之后进行\n          // 若子View的height=0 且weight> 0 则说明该View希望使用的是LinearLayout的剩余空间\n          // LinearLayout是EXACTLY模式的说明LinearLayout高度已经确定 不需要依赖子View的测量结果来计算自己 就无需测量该子View\n\n          final int totalLength = mTotalLength;\n          mTotalLength = Math.max(totalLength, totalLength + lp.topMargin + lp.bottomMargin);\n          skippedMeasure = true;\n      } else {\n          //测量子View\n\n          int oldHeight = Integer.MIN_VALUE;\n\n          //当前View的height=0 且weight> 0 则说明该LinearLayout的高度需要靠子View测量(不需要的在上面分支处理了)\n          //将子View的高度设为-1 防止子View高度为0\n          if (lp.height == 0 && lp.weight > 0) {\n              oldHeight = 0;\n              lp.height = LayoutParams.WRAP_CONTENT;\n          }\n\n          //调用子View的measureChildWithMargins() 对子View进行测量\n          //第四个参数表示当前已使用的宽度  因为是竖直模式 所以为0\n          //最后一个参数表示已使用的高度 如果之前的子View或者当前的View有weight属性 则当前子视图使用 LinearLayout 的所有高度 已使用的高度为0\n          measureChildBeforeLayout(child, i, widthMeasureSpec, 0, heightMeasureSpec,\n                 totalWeight == 0 ? mTotalLength : 0);\n\n          if (oldHeight != Integer.MIN_VALUE) {\n             //测量完成后 重置子View高度\n             lp.height = oldHeight;\n          }\n\n          final int childHeight = child.getMeasuredHeight();\n          final int totalLength = mTotalLength;\n          // 比较child测量前后总高度 取较大值\n          ///getNextLocationOffset() 返回0 便于扩展\n          mTotalLength = Math.max(totalLength, totalLength + childHeight + lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));\n          // 设置最高子视图大小\n          if (useLargestChild) {\n              largestChildHeight = Math.max(childHeight, largestChildHeight);\n          }\n      }\n\n       // mBaselineChildTop 表示指定的 baseline 的子视图的顶部高度\n      if ((baselineChildIndex >= 0) && (baselineChildIndex == i + 1)) {\n         mBaselineChildTop = mTotalLength;\n      }\n\n      // 设置为 baseline 的子视图的前面不允许设置 weiget 属性\n      if (i < baselineChildIndex && lp.weight > 0) {\n          throw new RuntimeException(\"A child of LinearLayout with index \"\n                  + \"less than mBaselineAlignedChildIndex has weight > 0, which \"\n                  + \"won't work.  Either remove the weight, or don't set \"\n                  + \"mBaselineAlignedChildIndex.\");\n      }\n\n      // 宽度测量相关\n\n      boolean matchWidthLocally = false;\n\n      //当LinearLayout非EXACTLY模式 并且自View为MATCH_PARENT时\n      //设置matchWidth和matchWidthLocally为true\n      //该子View占据LinearLayout水平方向上所有空间\n\n      if (widthMode != MeasureSpec.EXACTLY && lp.width == LayoutParams.MATCH_PARENT) {\n          matchWidth = true;\n          matchWidthLocally = true;\n      }\n\n      final int margin = lp.leftMargin + lp.rightMargin;\n      final int measuredWidth = child.getMeasuredWidth() + margin;\n\n      //对一堆变量赋值\n      maxWidth = Math.max(maxWidth, measuredWidth);\n      childState = combineMeasuredStates(childState, child.getMeasuredState());\n\n      allFillParent = allFillParent && lp.width == LayoutParams.MATCH_PARENT;\n      if (lp.weight > 0) {\n          weightedMaxWidth = Math.max(weightedMaxWidth,\n                  matchWidthLocally ? margin : measuredWidth);\n      } else {\n          alternativeMaxWidth = Math.max(alternativeMaxWidth,\n                  matchWidthLocally ? margin : measuredWidth);\n      }\n\n      i += getChildrenSkipCount(child, i);\n  }\n```\n\n#### 二次测量mTotalLength\n\n```java\n  //根据hasDividerBeforeChildAt得到showDivider的值是否为end 来判断是否需要加上divider的高度\n  if (mTotalLength > 0 && hasDividerBeforeChildAt(count))\n      mTotalLength += mDividerHeight;\n  }\n  //如果高度测量模式为AT_MOST或者UNSPECIFIED 则进行二次测量 且设置了measureWithLargestChild\n  if (useLargestChild && (heightMode == MeasureSpec.AT_MOST ||\n      heightMode == MeasureSpec.UNSPECIFIED)) {\n      mTotalLength = 0;\n      for (int i = 0; i < count; ++i) {\n          final View child = getVirtualChildAt(i);\n          if (child == null) {\n              mTotalLength += measureNullChild(i);\n              continue;\n          }\n          if (child.getVisibility() == GONE) {\n              i += getChildrenSkipCount(child, i);\n              continue;\n          }\n          final LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)\n                  child.getLayoutParams();\n          // 计算所有子View的高度之和\n          final int totalLength = mTotalLength;\n          mTotalLength = Math.max(totalLength, totalLength + largestChildHeight +\n                  lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));\n      }\n  }\n```\n就是需要useLargestChild\n\n而 mUseLargestChild = a.getBoolean(R.styleable.LinearLayout_measureWithLargestChild, false);\n\n就是说仅在LinearLayout的measureWithLargestChild属性设置为True时(默认为false)才可能出现某个child被二次测量\n\n实例如下\n\n![LinearLayout二次测量](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/34816550.jpg)\n\n\n\n#### 二次测量部分View和对为测量的子View进行测量\n\n```java\n\n   //加上padding的值\n   mTotalLength += mPaddingTop + mPaddingBottom;\n   int heightSize = mTotalLength;\n   //minHeight和当前使用的高度比较取较大值\n   heightSize = Math.max(heightSize, getSuggestedMinimumHeight());\n\n   //根据heightMeasureSpec协助计算heightSizeAndState的大小\n   //resolveSizeAndState方法之后会分析\n   int heightSizeAndState = resolveSizeAndState(heightSize, heightMeasureSpec, 0);\n   heightSize = heightSizeAndState & MEASURED_SIZE_MASK;\n\n   // Either expand children with weight to take up available space or\n   // shrink them if they extend beyond our current bounds. If we skipped\n   // measurement on any children, we need to measure them now.\n\n\n\n   //delta为额外的空间 及LinearLayout中未被分配的空间(可以为负)\n   int delta = heightSize - mTotalLength;\n   if (skippedMeasure || delta != 0 && totalWeight > 0.0f) {\n       //skippedMeasure为第一次测量下对跳过测量的子View设置的\n       //weightSum为权重和 如果设置了总权重则使用我们所设置的  如果没有则使用子View的weight和\n       float weightSum = mWeightSum > 0.0f ? mWeightSum : totalWeight;\n\n       mTotalLength = 0;\n       //测量什么的\n       for (int i = 0; i < count; ++i) {\n           final View child = getVirtualChildAt(i);\n\n           if (child.getVisibility() == View.GONE) {\n               continue;\n           }\n\n           LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) child.getLayoutParams();\n\n           float childExtra = lp.weight;\n           if (childExtra > 0) {\n               // Child said it could absorb extra space -- give him his share\n               //计算weight属性分配的大小\n               int share = (int) (childExtra * delta / weightSum);\n               //权重和减去已经分配权重\n               weightSum -= childExtra;\n               //剩余高度减去分配的高度\n               delta -= share;\n\n               final int childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,\n                       mPaddingLeft + mPaddingRight +\n                               lp.leftMargin + lp.rightMargin, lp.width);\n\n               // TODO: Use a field like lp.isMeasured to figure out if this\n               // child has been previously measured\n\n\n               if ((lp.height != 0) || (heightMode != MeasureSpec.EXACTLY)) {\n                   //子视图已经被测量过\n                   //非EXACTLY view需要加上share\n                   int childHeight = child.getMeasuredHeight() + share;\n                   if (childHeight < 0) {\n                       childHeight = 0;\n                   }\n                   //重新测量View\n                   child.measure(childWidthMeasureSpec,\n                           MeasureSpec.makeMeasureSpec(childHeight, MeasureSpec.EXACTLY));\n               } else {\n                   //如果当前是EXACTLY模式 说明没有被测量 需要进行测量\n                   //子视图首次被测量\n                   //EXACTLY模式下 将weight占比的高度分配给子View    \n                   child.measure(childWidthMeasureSpec,\n                           MeasureSpec.makeMeasureSpec(share > 0 ? share : 0,\n                                   MeasureSpec.EXACTLY));\n               }\n\n               // Child may now not fit in vertical dimension.\n               childState = combineMeasuredStates(childState, child.getMeasuredState()\n                       & (MEASURED_STATE_MASK>>MEASURED_HEIGHT_STATE_SHIFT));\n           }\n\n          //处理子视图宽度\n           final int margin =  lp.leftMargin + lp.rightMargin;\n           final int measuredWidth = child.getMeasuredWidth() + margin;\n           maxWidth = Math.max(maxWidth, measuredWidth);\n\n           boolean matchWidthLocally = widthMode != MeasureSpec.EXACTLY &&\n                   lp.width == LayoutParams.MATCH_PARENT;\n\n           alternativeMaxWidth = Math.max(alternativeMaxWidth,\n                   matchWidthLocally ? margin : measuredWidth);\n\n           allFillParent = allFillParent && lp.width == LayoutParams.MATCH_PARENT;\n\n           final int totalLength = mTotalLength;\n           mTotalLength = Math.max(totalLength, totalLength + child.getMeasuredHeight() +\n                   lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));\n       }\n\n       // Add in our padding\n       mTotalLength += mPaddingTop + mPaddingBottom;\n       // TODO: Should we recompute the heightSpec based on the new total length?\n   } else {\n       alternativeMaxWidth = Math.max(alternativeMaxWidth,\n                                      weightedMaxWidth);\n\n\n       // We have no limit, so make all weighted views as tall as the largest child.\n       // Children will have already been measured once.\n       if (useLargestChild && heightMode != MeasureSpec.EXACTLY) {\n           for (int i = 0; i < count; i++) {\n               final View child = getVirtualChildAt(i);\n\n               if (child == null || child.getVisibility() == View.GONE) {\n                   continue;\n               }\n\n               final LinearLayout.LayoutParams lp =\n                       (LinearLayout.LayoutParams) child.getLayoutParams();\n\n               float childExtra = lp.weight;\n               if (childExtra > 0) {\n                  //使用最大子视图高度测量\n                   child.measure(\n                           MeasureSpec.makeMeasureSpec(child.getMeasuredWidth(),\n                                   MeasureSpec.EXACTLY),\n                           MeasureSpec.makeMeasureSpec(largestChildHeight,\n                                   MeasureSpec.EXACTLY));\n               }\n           }\n       }\n   }\n\n   if (!allFillParent && widthMode != MeasureSpec.EXACTLY) {\n       maxWidth = alternativeMaxWidth;\n   }\n\n   maxWidth += mPaddingLeft + mPaddingRight;\n\n   // Check against our minimum width\n   maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());\n\n   setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),\n           heightSizeAndState);\n\n   if (matchWidth) {\n       forceUniformWidth(count, heightMeasureSpec);\n   }\n```\nresolveSizeAndState方法 定义在View中\n```java\n/**\n   * Utility to reconcile a desired size and state, with constraints imposed\n   * by a MeasureSpec. Will take the desired size, unless a different size\n   * is imposed by the constraints. The returned value is a compound integer,\n   * with the resolved size in the {@link #MEASURED_SIZE_MASK} bits and\n   * optionally the bit {@link #MEASURED_STATE_TOO_SMALL} set if the\n   * resulting size is smaller than the size the view wants to be.\n   *\n   * @param size How big the view wants to be.\n   * @param measureSpec Constraints imposed by the parent.\n   * @param childMeasuredState Size information bit mask for the view's\n   *                           children.\n   * @return Size information bit mask as defined by\n   *         {@link #MEASURED_SIZE_MASK} and\n   *         {@link #MEASURED_STATE_TOO_SMALL}.\n   */\n  public static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState) {\n      final int specMode = MeasureSpec.getMode(measureSpec);\n      final int specSize = MeasureSpec.getSize(measureSpec);\n      final int result;\n      switch (specMode) {\n          case MeasureSpec.AT_MOST:\n              if (specSize < size) {\n                  result = specSize | MEASURED_STATE_TOO_SMALL;\n              } else {\n                  result = size;\n              }\n              break;\n          case MeasureSpec.EXACTLY:\n              result = specSize;\n              break;\n          case MeasureSpec.UNSPECIFIED:\n          default:\n              result = size;\n      }\n      return result | (childMeasuredState & MEASURED_STATE_MASK);\n  }\n```\n\n###### delta为负的相关解析\n相关代码及效果如下\n\n![负delta.png](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/88204275.jpg)\n\n根据之前的measure流程分析一下\n\n* 相关变量初始化\n* 第一次测量  两个子TextView都会被测量 TextView1.height = TextView1.height = 500dp 则mToatalLength为1000dp\n* mToatalLength再次测量跳过\n* 计算delta delta = heightSize - mTotalLength 根据resolveSizeAndState方法 父LinearLayout是EXACTLY模式 所以最终heightSize为500dp delta = -500dp\n* 根据weight分配剩余空间 TextView1.height = 500 + 1 / 5 * (- 500) = 400 dp\n  TextView2.height = 500 + 4 / 5 * (- 500) = 100 dp\n\n\n### layout过程\n\n\n```java\n  protected void onLayout(boolean changed, int l, int t, int r, int b) {\n    if (mOrientation == VERTICAL) {\n        layoutVertical(l, t, r, b);\n    } else {\n        layoutHorizontal(l, t, r, b);\n    }\n  }\n```\n我们可以看出 同样是分成水平和竖直两个方向的 同样分析竖直 方向下的layout过程\n\n```java\n/**\n    * Position the children during a layout pass if the orientation of this\n    * LinearLayout is set to {@link #VERTICAL}.\n    *\n    * @see #getOrientation()\n    * @see #setOrientation(int)\n    * @see #onLayout(boolean, int, int, int, int)\n    * @param left\n    * @param top\n    * @param right\n    * @param bottom\n    */\n   void layoutVertical(int left, int top, int right, int bottom) {\n       final int paddingLeft = mPaddingLeft;\n\n       int childTop;\n       int childLeft;\n\n       //父View默认子View的宽度\n       final int width = right - left;\n       //子View的右侧默认位置\n       int childRight = width - mPaddingRight;\n\n       // 子View的可用空间大小\n       int childSpace = width - paddingLeft - mPaddingRight;\n\n       //子View的个数\n       final int count = getVirtualChildCount();\n\n       final int majorGravity = mGravity & Gravity.VERTICAL_GRAVITY_MASK;\n       final int minorGravity = mGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;\n\n       //根据LinearLayout设置的对其方式 设置第一个子View的Top值\n       switch (majorGravity) {\n          case Gravity.BOTTOM:\n              // mTotalLength contains the padding already\n              childTop = mPaddingTop + bottom - top - mTotalLength;\n              break;\n\n              // mTotalLength contains the padding already\n          case Gravity.CENTER_VERTICAL:\n              childTop = mPaddingTop + (bottom - top - mTotalLength) / 2;\n              break;\n\n          case Gravity.TOP:\n          default:\n              childTop = mPaddingTop;\n              break;\n       }\n\n       //遍历各个子View\n       for (int i = 0; i < count; i++) {\n           final View child = getVirtualChildAt(i);\n           if (child == null) {\n               childTop += measureNullChild(i);\n           } else if (child.getVisibility() != GONE) {\n                //LinearLayout中子View的宽和高有measure过程决定\n               final int childWidth = child.getMeasuredWidth();\n               final int childHeight = child.getMeasuredHeight();\n               //获取子View的LayoutParams\n               final LinearLayout.LayoutParams lp =\n                       (LinearLayout.LayoutParams) child.getLayoutParams();\n\n               int gravity = lp.gravity;\n               if (gravity < 0) {\n                   gravity = minorGravity;\n               }\n               final int layoutDirection = getLayoutDirection();\n               final int absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);\n               //根据子View的对其方式设置Left值\n               switch (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {\n                   case Gravity.CENTER_HORIZONTAL:\n                       childLeft = paddingLeft + ((childSpace - childWidth) / 2)\n                               + lp.leftMargin - lp.rightMargin;\n                       break;\n\n                   case Gravity.RIGHT:\n                       childLeft = childRight - childWidth - lp.rightMargin;\n                       break;\n\n                   case Gravity.LEFT:\n                   default:\n                       childLeft = paddingLeft + lp.leftMargin;\n                       break;\n               }\n               //如果有分割线 添加分割线的高度\n               if (hasDividerBeforeChildAt(i)) {\n                   childTop += mDividerHeight;\n               }\n               //子View的top修改\n               childTop += lp.topMargin;\n               //用setChildFrame()方法设置子控件控件的在父控件上的坐标轴\n               setChildFrame(child, childLeft, childTop + getLocationOffset(child),\n                       childWidth, childHeight);\n               childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);\n\n               i += getChildrenSkipCount(child, i);\n           }\n       }\n   }\n```\n\n#### draw 源码分析\n```java\n  protected void onDraw(Canvas canvas) {\n    if (mDivider == null) {\n        return;\n    }\n\n    if (mOrientation == VERTICAL) {\n        drawDividersVertical(canvas);\n    } else {\n        drawDividersHorizontal(canvas);\n    }\n  }\n```\n同样主要分析垂直方向的处理\n\n```java\n\n  void drawDividersVertical(Canvas canvas) {\n      final int count = getVirtualChildCount();\n      //根据计算好的坐标绘制对应的子View\n      for (int i = 0; i < count; i++) {\n          final View child = getVirtualChildAt(i);\n\n          if (child != null && child.getVisibility() != GONE) {\n              if (hasDividerBeforeChildAt(i)) {\n                  final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n                  final int top = child.getTop() - lp.topMargin - mDividerHeight;\n                  drawHorizontalDivider(canvas, top);\n              }\n          }\n      }\n      //绘制分割线\n      if (hasDividerBeforeChildAt(count)) {\n          final View child = getLastNonGoneChild();\n          int bottom = 0;\n          if (child == null) {\n              bottom = getHeight() - getPaddingBottom() - mDividerHeight;\n          } else {\n              final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n              bottom = child.getBottom() + lp.bottomMargin;\n          }\n          drawHorizontalDivider(canvas, bottom);\n      }\n  }\n\n  void drawHorizontalDivider(Canvas canvas, int top) {\n    mDivider.setBounds(getPaddingLeft() + mDividerPadding, top,\n            getWidth() - getPaddingRight() - mDividerPadding, top + mDividerHeight);\n    mDivider.draw(canvas);\n  }\n```\n","slug":"LinearLayout 源码分析","published":1,"updated":"2020-03-13T09:33:05.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dt000mq7dqnjsi3mx2","content":"<h2 id=\"LinearLayout-源码分析\"><a href=\"#LinearLayout-源码分析\" class=\"headerlink\" title=\"LinearLayout 源码分析\"></a>LinearLayout 源码分析</h2><h3 id=\"measure过程\"><a href=\"#measure过程\" class=\"headerlink\" title=\"measure过程\"></a>measure过程</h3><h4 id=\"主要过程\"><a href=\"#主要过程\" class=\"headerlink\" title=\"主要过程\"></a>主要过程</h4><ul>\n<li>根据布局方向选择measure过程分支</li>\n<li>初始化相关变量</li>\n<li>对View进行第一次测量</li>\n<li>mTotalLength的再次测量</li>\n<li>二次测量部分View和对为测量的子View进行测量</li>\n</ul>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断布局方向</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</span><br><span class=\"line\">        measureVertical(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        measureHorizontal(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>measureVertical和measureHorizontal只是布局方向上的区别 以下主要分析measureVertical方法</p>\n<h4 id=\"初始化相关变量\"><a href=\"#初始化相关变量\" class=\"headerlink\" title=\"初始化相关变量\"></a>初始化相关变量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mTotalLength是记录内部使用的高度也就是子View的高度和 而不是LinearLayout的高度</span></span><br><span class=\"line\">mTotalLength = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//子视图的最大宽度(不包括layout_weight&gt;0的子View)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> maxWidth = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> childState = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> alternativeMaxWidth = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//子视图的最大宽度(仅包含layout_weight&gt;0的子View)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> weightedMaxWidth = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//子视图是否均为fillParent 用于判断是否需要重新计算</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> allFillParent = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">//权重值的总和</span></span><br><span class=\"line\"><span class=\"keyword\">float</span> totalWeight = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//子View的数量(统一级别下)</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</span><br><span class=\"line\"><span class=\"comment\">//高度宽度模式</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\"><span class=\"comment\">//子View的宽度是否需要由父View决定</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> matchWidth = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> skippedMeasure = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">//第几个子View的baseLine作为LinearLayout的基准线</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> baselineChildIndex = mBaselineAlignedChildIndex;  </span><br><span class=\"line\"><span class=\"comment\">//mUseLargestChild为是否使用最大子元素的尺寸作为标准再次测量</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> useLargestChild = mUseLargestChild;</span><br><span class=\"line\"><span class=\"comment\">//子View中最高高度</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> largestChildHeight = Integer.MIN_VALUE;</span><br></pre></td></tr></table></figure>\n<h4 id=\"第一次测量\"><a href=\"#第一次测量\" class=\"headerlink\" title=\"第一次测量\"></a>第一次测量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// See how tall everyone is. Also remember max width.</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 测量为null的子视图的高度</span></span><br><span class=\"line\">    <span class=\"comment\">// measureNullChild() 暂时返回 0 便于扩展</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        mTotalLength += measureNullChild(i);</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//Visibility为Gone的时候跳过该View</span></span><br><span class=\"line\">    <span class=\"comment\">// getChildrenSkipCount()方法同样返回0 便于扩展</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.getVisibility() == View.GONE) &#123;</span><br><span class=\"line\">       i += getChildrenSkipCount(child, i);</span><br><span class=\"line\">       <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//根据showDivider的值(通过hasDividerBeforeChildAt()) 来决定当前子View是否需要添加分割线的高度</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</span><br><span class=\"line\">        mTotalLength += mDividerHeight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//会将子view的LayoutParams强转为父View的LayoutParams类型</span></span><br><span class=\"line\">    LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)child.getLayoutParams();</span><br><span class=\"line\"></span><br><span class=\"line\">    totalWeight += lp.weight;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (heightMode == MeasureSpec.EXACTLY &amp;&amp; lp.height == <span class=\"number\">0</span> &amp;&amp; lp.weight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 满足该条件的话 不需要现在计算该子视图的高度 测量工作会在之后进行</span></span><br><span class=\"line\">        <span class=\"comment\">// 若子View的height=0 且weight&gt; 0 则说明该View希望使用的是LinearLayout的剩余空间</span></span><br><span class=\"line\">        <span class=\"comment\">// LinearLayout是EXACTLY模式的说明LinearLayout高度已经确定 不需要依赖子View的测量结果来计算自己 就无需测量该子View</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</span><br><span class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + lp.topMargin + lp.bottomMargin);</span><br><span class=\"line\">        skippedMeasure = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//测量子View</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> oldHeight = Integer.MIN_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//当前View的height=0 且weight&gt; 0 则说明该LinearLayout的高度需要靠子View测量(不需要的在上面分支处理了)</span></span><br><span class=\"line\">        <span class=\"comment\">//将子View的高度设为-1 防止子View高度为0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lp.height == <span class=\"number\">0</span> &amp;&amp; lp.weight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            oldHeight = <span class=\"number\">0</span>;</span><br><span class=\"line\">            lp.height = LayoutParams.WRAP_CONTENT;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//调用子View的measureChildWithMargins() 对子View进行测量</span></span><br><span class=\"line\">        <span class=\"comment\">//第四个参数表示当前已使用的宽度  因为是竖直模式 所以为0</span></span><br><span class=\"line\">        <span class=\"comment\">//最后一个参数表示已使用的高度 如果之前的子View或者当前的View有weight属性 则当前子视图使用 LinearLayout 的所有高度 已使用的高度为0</span></span><br><span class=\"line\">        measureChildBeforeLayout(child, i, widthMeasureSpec, <span class=\"number\">0</span>, heightMeasureSpec,</span><br><span class=\"line\">               totalWeight == <span class=\"number\">0</span> ? mTotalLength : <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldHeight != Integer.MIN_VALUE) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//测量完成后 重置子View高度</span></span><br><span class=\"line\">           lp.height = oldHeight;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</span><br><span class=\"line\">        <span class=\"comment\">// 比较child测量前后总高度 取较大值</span></span><br><span class=\"line\">        <span class=\"comment\">///getNextLocationOffset() 返回0 便于扩展</span></span><br><span class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + childHeight + lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));</span><br><span class=\"line\">        <span class=\"comment\">// 设置最高子视图大小</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (useLargestChild) &#123;</span><br><span class=\"line\">            largestChildHeight = Math.max(childHeight, largestChildHeight);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// mBaselineChildTop 表示指定的 baseline 的子视图的顶部高度</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((baselineChildIndex &gt;= <span class=\"number\">0</span>) &amp;&amp; (baselineChildIndex == i + <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">       mBaselineChildTop = mTotalLength;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置为 baseline 的子视图的前面不允许设置 weiget 属性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; baselineChildIndex &amp;&amp; lp.weight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"A child of LinearLayout with index \"</span></span><br><span class=\"line\">                + <span class=\"string\">\"less than mBaselineAlignedChildIndex has weight &gt; 0, which \"</span></span><br><span class=\"line\">                + <span class=\"string\">\"won't work.  Either remove the weight, or don't set \"</span></span><br><span class=\"line\">                + <span class=\"string\">\"mBaselineAlignedChildIndex.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 宽度测量相关</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> matchWidthLocally = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当LinearLayout非EXACTLY模式 并且自View为MATCH_PARENT时</span></span><br><span class=\"line\">    <span class=\"comment\">//设置matchWidth和matchWidthLocally为true</span></span><br><span class=\"line\">    <span class=\"comment\">//该子View占据LinearLayout水平方向上所有空间</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (widthMode != MeasureSpec.EXACTLY &amp;&amp; lp.width == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">        matchWidth = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        matchWidthLocally = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> margin = lp.leftMargin + lp.rightMargin;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> measuredWidth = child.getMeasuredWidth() + margin;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//对一堆变量赋值</span></span><br><span class=\"line\">    maxWidth = Math.max(maxWidth, measuredWidth);</span><br><span class=\"line\">    childState = combineMeasuredStates(childState, child.getMeasuredState());</span><br><span class=\"line\"></span><br><span class=\"line\">    allFillParent = allFillParent &amp;&amp; lp.width == LayoutParams.MATCH_PARENT;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lp.weight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        weightedMaxWidth = Math.max(weightedMaxWidth,</span><br><span class=\"line\">                matchWidthLocally ? margin : measuredWidth);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        alternativeMaxWidth = Math.max(alternativeMaxWidth,</span><br><span class=\"line\">                matchWidthLocally ? margin : measuredWidth);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    i += getChildrenSkipCount(child, i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"二次测量mTotalLength\"><a href=\"#二次测量mTotalLength\" class=\"headerlink\" title=\"二次测量mTotalLength\"></a>二次测量mTotalLength</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据hasDividerBeforeChildAt得到showDivider的值是否为end 来判断是否需要加上divider的高度</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (mTotalLength &gt; <span class=\"number\">0</span> &amp;&amp; hasDividerBeforeChildAt(count))</span><br><span class=\"line\">    mTotalLength += mDividerHeight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果高度测量模式为AT_MOST或者UNSPECIFIED 则进行二次测量 且设置了measureWithLargestChild</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (useLargestChild &amp;&amp; (heightMode == MeasureSpec.AT_MOST ||</span><br><span class=\"line\">    heightMode == MeasureSpec.UNSPECIFIED)) &#123;</span><br><span class=\"line\">    mTotalLength = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mTotalLength += measureNullChild(i);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() == GONE) &#123;</span><br><span class=\"line\">            i += getChildrenSkipCount(child, i);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)</span><br><span class=\"line\">                child.getLayoutParams();</span><br><span class=\"line\">        <span class=\"comment\">// 计算所有子View的高度之和</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</span><br><span class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + largestChildHeight +</span><br><span class=\"line\">                lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就是需要useLargestChild</p>\n<p>而 mUseLargestChild = a.getBoolean(R.styleable.LinearLayout_measureWithLargestChild, false);</p>\n<p>就是说仅在LinearLayout的measureWithLargestChild属性设置为True时(默认为false)才可能出现某个child被二次测量</p>\n<p>实例如下</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/34816550.jpg\" alt=\"LinearLayout二次测量\"></p>\n<h4 id=\"二次测量部分View和对为测量的子View进行测量\"><a href=\"#二次测量部分View和对为测量的子View进行测量\" class=\"headerlink\" title=\"二次测量部分View和对为测量的子View进行测量\"></a>二次测量部分View和对为测量的子View进行测量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//加上padding的值</span></span><br><span class=\"line\">mTotalLength += mPaddingTop + mPaddingBottom;</span><br><span class=\"line\"><span class=\"keyword\">int</span> heightSize = mTotalLength;</span><br><span class=\"line\"><span class=\"comment\">//minHeight和当前使用的高度比较取较大值</span></span><br><span class=\"line\">heightSize = Math.max(heightSize, getSuggestedMinimumHeight());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据heightMeasureSpec协助计算heightSizeAndState的大小</span></span><br><span class=\"line\"><span class=\"comment\">//resolveSizeAndState方法之后会分析</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> heightSizeAndState = resolveSizeAndState(heightSize, heightMeasureSpec, <span class=\"number\">0</span>);</span><br><span class=\"line\">heightSize = heightSizeAndState &amp; MEASURED_SIZE_MASK;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Either expand children with weight to take up available space or</span></span><br><span class=\"line\"><span class=\"comment\">// shrink them if they extend beyond our current bounds. If we skipped</span></span><br><span class=\"line\"><span class=\"comment\">// measurement on any children, we need to measure them now.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//delta为额外的空间 及LinearLayout中未被分配的空间(可以为负)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> delta = heightSize - mTotalLength;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (skippedMeasure || delta != <span class=\"number\">0</span> &amp;&amp; totalWeight &gt; <span class=\"number\">0.0f</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//skippedMeasure为第一次测量下对跳过测量的子View设置的</span></span><br><span class=\"line\">    <span class=\"comment\">//weightSum为权重和 如果设置了总权重则使用我们所设置的  如果没有则使用子View的weight和</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> weightSum = mWeightSum &gt; <span class=\"number\">0.0f</span> ? mWeightSum : totalWeight;</span><br><span class=\"line\"></span><br><span class=\"line\">    mTotalLength = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//测量什么的</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() == View.GONE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) child.getLayoutParams();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">float</span> childExtra = lp.weight;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childExtra &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Child said it could absorb extra space -- give him his share</span></span><br><span class=\"line\">            <span class=\"comment\">//计算weight属性分配的大小</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> share = (<span class=\"keyword\">int</span>) (childExtra * delta / weightSum);</span><br><span class=\"line\">            <span class=\"comment\">//权重和减去已经分配权重</span></span><br><span class=\"line\">            weightSum -= childExtra;</span><br><span class=\"line\">            <span class=\"comment\">//剩余高度减去分配的高度</span></span><br><span class=\"line\">            delta -= share;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,</span><br><span class=\"line\">                    mPaddingLeft + mPaddingRight +</span><br><span class=\"line\">                            lp.leftMargin + lp.rightMargin, lp.width);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Use a field like lp.isMeasured to figure out if this</span></span><br><span class=\"line\">            <span class=\"comment\">// child has been previously measured</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((lp.height != <span class=\"number\">0</span>) || (heightMode != MeasureSpec.EXACTLY)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//子视图已经被测量过</span></span><br><span class=\"line\">                <span class=\"comment\">//非EXACTLY view需要加上share</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight() + share;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (childHeight &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    childHeight = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//重新测量View</span></span><br><span class=\"line\">                child.measure(childWidthMeasureSpec,</span><br><span class=\"line\">                        MeasureSpec.makeMeasureSpec(childHeight, MeasureSpec.EXACTLY));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果当前是EXACTLY模式 说明没有被测量 需要进行测量</span></span><br><span class=\"line\">                <span class=\"comment\">//子视图首次被测量</span></span><br><span class=\"line\">                <span class=\"comment\">//EXACTLY模式下 将weight占比的高度分配给子View    </span></span><br><span class=\"line\">                child.measure(childWidthMeasureSpec,</span><br><span class=\"line\">                        MeasureSpec.makeMeasureSpec(share &gt; <span class=\"number\">0</span> ? share : <span class=\"number\">0</span>,</span><br><span class=\"line\">                                MeasureSpec.EXACTLY));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Child may now not fit in vertical dimension.</span></span><br><span class=\"line\">            childState = combineMeasuredStates(childState, child.getMeasuredState()</span><br><span class=\"line\">                    &amp; (MEASURED_STATE_MASK&gt;&gt;MEASURED_HEIGHT_STATE_SHIFT));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//处理子视图宽度</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> margin =  lp.leftMargin + lp.rightMargin;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> measuredWidth = child.getMeasuredWidth() + margin;</span><br><span class=\"line\">        maxWidth = Math.max(maxWidth, measuredWidth);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> matchWidthLocally = widthMode != MeasureSpec.EXACTLY &amp;&amp;</span><br><span class=\"line\">                lp.width == LayoutParams.MATCH_PARENT;</span><br><span class=\"line\"></span><br><span class=\"line\">        alternativeMaxWidth = Math.max(alternativeMaxWidth,</span><br><span class=\"line\">                matchWidthLocally ? margin : measuredWidth);</span><br><span class=\"line\"></span><br><span class=\"line\">        allFillParent = allFillParent &amp;&amp; lp.width == LayoutParams.MATCH_PARENT;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</span><br><span class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + child.getMeasuredHeight() +</span><br><span class=\"line\">                lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Add in our padding</span></span><br><span class=\"line\">    mTotalLength += mPaddingTop + mPaddingBottom;</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Should we recompute the heightSpec based on the new total length?</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    alternativeMaxWidth = Math.max(alternativeMaxWidth,</span><br><span class=\"line\">                                   weightedMaxWidth);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// We have no limit, so make all weighted views as tall as the largest child.</span></span><br><span class=\"line\">    <span class=\"comment\">// Children will have already been measured once.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (useLargestChild &amp;&amp; heightMode != MeasureSpec.EXACTLY) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span> || child.getVisibility() == View.GONE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp =</span><br><span class=\"line\">                    (LinearLayout.LayoutParams) child.getLayoutParams();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">float</span> childExtra = lp.weight;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (childExtra &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//使用最大子视图高度测量</span></span><br><span class=\"line\">                child.measure(</span><br><span class=\"line\">                        MeasureSpec.makeMeasureSpec(child.getMeasuredWidth(),</span><br><span class=\"line\">                                MeasureSpec.EXACTLY),</span><br><span class=\"line\">                        MeasureSpec.makeMeasureSpec(largestChildHeight,</span><br><span class=\"line\">                                MeasureSpec.EXACTLY));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!allFillParent &amp;&amp; widthMode != MeasureSpec.EXACTLY) &#123;</span><br><span class=\"line\">    maxWidth = alternativeMaxWidth;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">maxWidth += mPaddingLeft + mPaddingRight;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Check against our minimum width</span></span><br><span class=\"line\">maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());</span><br><span class=\"line\"></span><br><span class=\"line\">setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),</span><br><span class=\"line\">        heightSizeAndState);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (matchWidth) &#123;</span><br><span class=\"line\">    forceUniformWidth(count, heightMeasureSpec);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>resolveSizeAndState方法 定义在View中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Utility to reconcile a desired size and state, with constraints imposed</span></span><br><span class=\"line\"><span class=\"comment\">   * by a MeasureSpec. Will take the desired size, unless a different size</span></span><br><span class=\"line\"><span class=\"comment\">   * is imposed by the constraints. The returned value is a compound integer,</span></span><br><span class=\"line\"><span class=\"comment\">   * with the resolved size in the &#123;<span class=\"doctag\">@link</span> #MEASURED_SIZE_MASK&#125; bits and</span></span><br><span class=\"line\"><span class=\"comment\">   * optionally the bit &#123;<span class=\"doctag\">@link</span> #MEASURED_STATE_TOO_SMALL&#125; set if the</span></span><br><span class=\"line\"><span class=\"comment\">   * resulting size is smaller than the size the view wants to be.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> size How big the view wants to be.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> measureSpec Constraints imposed by the parent.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> childMeasuredState Size information bit mask for the view's</span></span><br><span class=\"line\"><span class=\"comment\">   *                           children.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> Size information bit mask as defined by</span></span><br><span class=\"line\"><span class=\"comment\">   *         &#123;<span class=\"doctag\">@link</span> #MEASURED_SIZE_MASK&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">   *         &#123;<span class=\"doctag\">@link</span> #MEASURED_STATE_TOO_SMALL&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">resolveSizeAndState</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec, <span class=\"keyword\">int</span> childMeasuredState)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> result;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (specMode) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (specSize &lt; size) &#123;</span><br><span class=\"line\">                  result = specSize | MEASURED_STATE_TOO_SMALL;</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  result = size;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</span><br><span class=\"line\">              result = specSize;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">          <span class=\"keyword\">default</span>:</span><br><span class=\"line\">              result = size;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result | (childMeasuredState &amp; MEASURED_STATE_MASK);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"delta为负的相关解析\"><a href=\"#delta为负的相关解析\" class=\"headerlink\" title=\"delta为负的相关解析\"></a>delta为负的相关解析</h6><p>相关代码及效果如下</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/88204275.jpg\" alt=\"负delta.png\"></p>\n<p>根据之前的measure流程分析一下</p>\n<ul>\n<li>相关变量初始化</li>\n<li>第一次测量  两个子TextView都会被测量 TextView1.height = TextView1.height = 500dp 则mToatalLength为1000dp</li>\n<li>mToatalLength再次测量跳过</li>\n<li>计算delta delta = heightSize - mTotalLength 根据resolveSizeAndState方法 父LinearLayout是EXACTLY模式 所以最终heightSize为500dp delta = -500dp</li>\n<li>根据weight分配剩余空间 TextView1.height = 500 + 1 / 5 <em> (- 500) = 400 dp<br>TextView2.height = 500 + 4 / 5 </em> (- 500) = 100 dp</li>\n</ul>\n<h3 id=\"layout过程\"><a href=\"#layout过程\" class=\"headerlink\" title=\"layout过程\"></a>layout过程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</span><br><span class=\"line\">      layoutVertical(l, t, r, b);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      layoutHorizontal(l, t, r, b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看出 同样是分成水平和竖直两个方向的 同样分析竖直 方向下的layout过程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Position the children during a layout pass if the orientation of this</span></span><br><span class=\"line\"><span class=\"comment\">    * LinearLayout is set to &#123;<span class=\"doctag\">@link</span> #VERTICAL&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@see</span> #getOrientation()</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@see</span> #setOrientation(int)</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@see</span> #onLayout(boolean, int, int, int, int)</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> left</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> top</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> right</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> bottom</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">layoutVertical</span><span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingLeft = mPaddingLeft;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> childTop;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> childLeft;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//父View默认子View的宽度</span></span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = right - left;</span><br><span class=\"line\">       <span class=\"comment\">//子View的右侧默认位置</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> childRight = width - mPaddingRight;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 子View的可用空间大小</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> childSpace = width - paddingLeft - mPaddingRight;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//子View的个数</span></span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> majorGravity = mGravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> minorGravity = mGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//根据LinearLayout设置的对其方式 设置第一个子View的Top值</span></span><br><span class=\"line\">       <span class=\"keyword\">switch</span> (majorGravity) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> Gravity.BOTTOM:</span><br><span class=\"line\">              <span class=\"comment\">// mTotalLength contains the padding already</span></span><br><span class=\"line\">              childTop = mPaddingTop + bottom - top - mTotalLength;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"comment\">// mTotalLength contains the padding already</span></span><br><span class=\"line\">          <span class=\"keyword\">case</span> Gravity.CENTER_VERTICAL:</span><br><span class=\"line\">              childTop = mPaddingTop + (bottom - top - mTotalLength) / <span class=\"number\">2</span>;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">case</span> Gravity.TOP:</span><br><span class=\"line\">          <span class=\"keyword\">default</span>:</span><br><span class=\"line\">              childTop = mPaddingTop;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//遍历各个子View</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               childTop += measureNullChild(i);</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//LinearLayout中子View的宽和高有measure过程决定</span></span><br><span class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = child.getMeasuredWidth();</span><br><span class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</span><br><span class=\"line\">               <span class=\"comment\">//获取子View的LayoutParams</span></span><br><span class=\"line\">               <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp =</span><br><span class=\"line\">                       (LinearLayout.LayoutParams) child.getLayoutParams();</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">int</span> gravity = lp.gravity;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (gravity &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                   gravity = minorGravity;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</span><br><span class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);</span><br><span class=\"line\">               <span class=\"comment\">//根据子View的对其方式设置Left值</span></span><br><span class=\"line\">               <span class=\"keyword\">switch</span> (absoluteGravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">case</span> Gravity.CENTER_HORIZONTAL:</span><br><span class=\"line\">                       childLeft = paddingLeft + ((childSpace - childWidth) / <span class=\"number\">2</span>)</span><br><span class=\"line\">                               + lp.leftMargin - lp.rightMargin;</span><br><span class=\"line\">                       <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                   <span class=\"keyword\">case</span> Gravity.RIGHT:</span><br><span class=\"line\">                       childLeft = childRight - childWidth - lp.rightMargin;</span><br><span class=\"line\">                       <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                   <span class=\"keyword\">case</span> Gravity.LEFT:</span><br><span class=\"line\">                   <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                       childLeft = paddingLeft + lp.leftMargin;</span><br><span class=\"line\">                       <span class=\"keyword\">break</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"comment\">//如果有分割线 添加分割线的高度</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</span><br><span class=\"line\">                   childTop += mDividerHeight;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"comment\">//子View的top修改</span></span><br><span class=\"line\">               childTop += lp.topMargin;</span><br><span class=\"line\">               <span class=\"comment\">//用setChildFrame()方法设置子控件控件的在父控件上的坐标轴</span></span><br><span class=\"line\">               setChildFrame(child, childLeft, childTop + getLocationOffset(child),</span><br><span class=\"line\">                       childWidth, childHeight);</span><br><span class=\"line\">               childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);</span><br><span class=\"line\"></span><br><span class=\"line\">               i += getChildrenSkipCount(child, i);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"draw-源码分析\"><a href=\"#draw-源码分析\" class=\"headerlink\" title=\"draw 源码分析\"></a>draw 源码分析</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mDivider == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</span><br><span class=\"line\">      drawDividersVertical(canvas);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      drawDividersHorizontal(canvas);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样主要分析垂直方向的处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">drawDividersVertical</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</span><br><span class=\"line\">    <span class=\"comment\">//根据计算好的坐标绘制对应的子View</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child != <span class=\"keyword\">null</span> &amp;&amp; child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> top = child.getTop() - lp.topMargin - mDividerHeight;</span><br><span class=\"line\">                drawHorizontalDivider(canvas, top);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//绘制分割线</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(count)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View child = getLastNonGoneChild();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> bottom = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            bottom = getHeight() - getPaddingBottom() - mDividerHeight;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">            bottom = child.getBottom() + lp.bottomMargin;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        drawHorizontalDivider(canvas, bottom);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">drawHorizontalDivider</span><span class=\"params\">(Canvas canvas, <span class=\"keyword\">int</span> top)</span> </span>&#123;</span><br><span class=\"line\">  mDivider.setBounds(getPaddingLeft() + mDividerPadding, top,</span><br><span class=\"line\">          getWidth() - getPaddingRight() - mDividerPadding, top + mDividerHeight);</span><br><span class=\"line\">  mDivider.draw(canvas);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"LinearLayout-源码分析\"><a href=\"#LinearLayout-源码分析\" class=\"headerlink\" title=\"LinearLayout 源码分析\"></a>LinearLayout 源码分析</h2><h3 id=\"measure过程\"><a href=\"#measure过程\" class=\"headerlink\" title=\"measure过程\"></a>measure过程</h3><h4 id=\"主要过程\"><a href=\"#主要过程\" class=\"headerlink\" title=\"主要过程\"></a>主要过程</h4><ul>\n<li>根据布局方向选择measure过程分支</li>\n<li>初始化相关变量</li>\n<li>对View进行第一次测量</li>\n<li>mTotalLength的再次测量</li>\n<li>二次测量部分View和对为测量的子View进行测量</li>\n</ul>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断布局方向</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</span><br><span class=\"line\">        measureVertical(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        measureHorizontal(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>measureVertical和measureHorizontal只是布局方向上的区别 以下主要分析measureVertical方法</p>\n<h4 id=\"初始化相关变量\"><a href=\"#初始化相关变量\" class=\"headerlink\" title=\"初始化相关变量\"></a>初始化相关变量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mTotalLength是记录内部使用的高度也就是子View的高度和 而不是LinearLayout的高度</span></span><br><span class=\"line\">mTotalLength = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//子视图的最大宽度(不包括layout_weight&gt;0的子View)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> maxWidth = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> childState = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> alternativeMaxWidth = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//子视图的最大宽度(仅包含layout_weight&gt;0的子View)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> weightedMaxWidth = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//子视图是否均为fillParent 用于判断是否需要重新计算</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> allFillParent = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">//权重值的总和</span></span><br><span class=\"line\"><span class=\"keyword\">float</span> totalWeight = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//子View的数量(统一级别下)</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</span><br><span class=\"line\"><span class=\"comment\">//高度宽度模式</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\"><span class=\"comment\">//子View的宽度是否需要由父View决定</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> matchWidth = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> skippedMeasure = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">//第几个子View的baseLine作为LinearLayout的基准线</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> baselineChildIndex = mBaselineAlignedChildIndex;  </span><br><span class=\"line\"><span class=\"comment\">//mUseLargestChild为是否使用最大子元素的尺寸作为标准再次测量</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> useLargestChild = mUseLargestChild;</span><br><span class=\"line\"><span class=\"comment\">//子View中最高高度</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> largestChildHeight = Integer.MIN_VALUE;</span><br></pre></td></tr></table></figure>\n<h4 id=\"第一次测量\"><a href=\"#第一次测量\" class=\"headerlink\" title=\"第一次测量\"></a>第一次测量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// See how tall everyone is. Also remember max width.</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 测量为null的子视图的高度</span></span><br><span class=\"line\">    <span class=\"comment\">// measureNullChild() 暂时返回 0 便于扩展</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        mTotalLength += measureNullChild(i);</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//Visibility为Gone的时候跳过该View</span></span><br><span class=\"line\">    <span class=\"comment\">// getChildrenSkipCount()方法同样返回0 便于扩展</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.getVisibility() == View.GONE) &#123;</span><br><span class=\"line\">       i += getChildrenSkipCount(child, i);</span><br><span class=\"line\">       <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//根据showDivider的值(通过hasDividerBeforeChildAt()) 来决定当前子View是否需要添加分割线的高度</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</span><br><span class=\"line\">        mTotalLength += mDividerHeight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//会将子view的LayoutParams强转为父View的LayoutParams类型</span></span><br><span class=\"line\">    LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)child.getLayoutParams();</span><br><span class=\"line\"></span><br><span class=\"line\">    totalWeight += lp.weight;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (heightMode == MeasureSpec.EXACTLY &amp;&amp; lp.height == <span class=\"number\">0</span> &amp;&amp; lp.weight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 满足该条件的话 不需要现在计算该子视图的高度 测量工作会在之后进行</span></span><br><span class=\"line\">        <span class=\"comment\">// 若子View的height=0 且weight&gt; 0 则说明该View希望使用的是LinearLayout的剩余空间</span></span><br><span class=\"line\">        <span class=\"comment\">// LinearLayout是EXACTLY模式的说明LinearLayout高度已经确定 不需要依赖子View的测量结果来计算自己 就无需测量该子View</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</span><br><span class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + lp.topMargin + lp.bottomMargin);</span><br><span class=\"line\">        skippedMeasure = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//测量子View</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> oldHeight = Integer.MIN_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//当前View的height=0 且weight&gt; 0 则说明该LinearLayout的高度需要靠子View测量(不需要的在上面分支处理了)</span></span><br><span class=\"line\">        <span class=\"comment\">//将子View的高度设为-1 防止子View高度为0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lp.height == <span class=\"number\">0</span> &amp;&amp; lp.weight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            oldHeight = <span class=\"number\">0</span>;</span><br><span class=\"line\">            lp.height = LayoutParams.WRAP_CONTENT;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//调用子View的measureChildWithMargins() 对子View进行测量</span></span><br><span class=\"line\">        <span class=\"comment\">//第四个参数表示当前已使用的宽度  因为是竖直模式 所以为0</span></span><br><span class=\"line\">        <span class=\"comment\">//最后一个参数表示已使用的高度 如果之前的子View或者当前的View有weight属性 则当前子视图使用 LinearLayout 的所有高度 已使用的高度为0</span></span><br><span class=\"line\">        measureChildBeforeLayout(child, i, widthMeasureSpec, <span class=\"number\">0</span>, heightMeasureSpec,</span><br><span class=\"line\">               totalWeight == <span class=\"number\">0</span> ? mTotalLength : <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldHeight != Integer.MIN_VALUE) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//测量完成后 重置子View高度</span></span><br><span class=\"line\">           lp.height = oldHeight;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</span><br><span class=\"line\">        <span class=\"comment\">// 比较child测量前后总高度 取较大值</span></span><br><span class=\"line\">        <span class=\"comment\">///getNextLocationOffset() 返回0 便于扩展</span></span><br><span class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + childHeight + lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));</span><br><span class=\"line\">        <span class=\"comment\">// 设置最高子视图大小</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (useLargestChild) &#123;</span><br><span class=\"line\">            largestChildHeight = Math.max(childHeight, largestChildHeight);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// mBaselineChildTop 表示指定的 baseline 的子视图的顶部高度</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((baselineChildIndex &gt;= <span class=\"number\">0</span>) &amp;&amp; (baselineChildIndex == i + <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">       mBaselineChildTop = mTotalLength;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置为 baseline 的子视图的前面不允许设置 weiget 属性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; baselineChildIndex &amp;&amp; lp.weight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"A child of LinearLayout with index \"</span></span><br><span class=\"line\">                + <span class=\"string\">\"less than mBaselineAlignedChildIndex has weight &gt; 0, which \"</span></span><br><span class=\"line\">                + <span class=\"string\">\"won't work.  Either remove the weight, or don't set \"</span></span><br><span class=\"line\">                + <span class=\"string\">\"mBaselineAlignedChildIndex.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 宽度测量相关</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> matchWidthLocally = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当LinearLayout非EXACTLY模式 并且自View为MATCH_PARENT时</span></span><br><span class=\"line\">    <span class=\"comment\">//设置matchWidth和matchWidthLocally为true</span></span><br><span class=\"line\">    <span class=\"comment\">//该子View占据LinearLayout水平方向上所有空间</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (widthMode != MeasureSpec.EXACTLY &amp;&amp; lp.width == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">        matchWidth = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        matchWidthLocally = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> margin = lp.leftMargin + lp.rightMargin;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> measuredWidth = child.getMeasuredWidth() + margin;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//对一堆变量赋值</span></span><br><span class=\"line\">    maxWidth = Math.max(maxWidth, measuredWidth);</span><br><span class=\"line\">    childState = combineMeasuredStates(childState, child.getMeasuredState());</span><br><span class=\"line\"></span><br><span class=\"line\">    allFillParent = allFillParent &amp;&amp; lp.width == LayoutParams.MATCH_PARENT;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lp.weight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        weightedMaxWidth = Math.max(weightedMaxWidth,</span><br><span class=\"line\">                matchWidthLocally ? margin : measuredWidth);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        alternativeMaxWidth = Math.max(alternativeMaxWidth,</span><br><span class=\"line\">                matchWidthLocally ? margin : measuredWidth);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    i += getChildrenSkipCount(child, i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"二次测量mTotalLength\"><a href=\"#二次测量mTotalLength\" class=\"headerlink\" title=\"二次测量mTotalLength\"></a>二次测量mTotalLength</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据hasDividerBeforeChildAt得到showDivider的值是否为end 来判断是否需要加上divider的高度</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (mTotalLength &gt; <span class=\"number\">0</span> &amp;&amp; hasDividerBeforeChildAt(count))</span><br><span class=\"line\">    mTotalLength += mDividerHeight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果高度测量模式为AT_MOST或者UNSPECIFIED 则进行二次测量 且设置了measureWithLargestChild</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (useLargestChild &amp;&amp; (heightMode == MeasureSpec.AT_MOST ||</span><br><span class=\"line\">    heightMode == MeasureSpec.UNSPECIFIED)) &#123;</span><br><span class=\"line\">    mTotalLength = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mTotalLength += measureNullChild(i);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() == GONE) &#123;</span><br><span class=\"line\">            i += getChildrenSkipCount(child, i);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)</span><br><span class=\"line\">                child.getLayoutParams();</span><br><span class=\"line\">        <span class=\"comment\">// 计算所有子View的高度之和</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</span><br><span class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + largestChildHeight +</span><br><span class=\"line\">                lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就是需要useLargestChild</p>\n<p>而 mUseLargestChild = a.getBoolean(R.styleable.LinearLayout_measureWithLargestChild, false);</p>\n<p>就是说仅在LinearLayout的measureWithLargestChild属性设置为True时(默认为false)才可能出现某个child被二次测量</p>\n<p>实例如下</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/34816550.jpg\" alt=\"LinearLayout二次测量\"></p>\n<h4 id=\"二次测量部分View和对为测量的子View进行测量\"><a href=\"#二次测量部分View和对为测量的子View进行测量\" class=\"headerlink\" title=\"二次测量部分View和对为测量的子View进行测量\"></a>二次测量部分View和对为测量的子View进行测量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//加上padding的值</span></span><br><span class=\"line\">mTotalLength += mPaddingTop + mPaddingBottom;</span><br><span class=\"line\"><span class=\"keyword\">int</span> heightSize = mTotalLength;</span><br><span class=\"line\"><span class=\"comment\">//minHeight和当前使用的高度比较取较大值</span></span><br><span class=\"line\">heightSize = Math.max(heightSize, getSuggestedMinimumHeight());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据heightMeasureSpec协助计算heightSizeAndState的大小</span></span><br><span class=\"line\"><span class=\"comment\">//resolveSizeAndState方法之后会分析</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> heightSizeAndState = resolveSizeAndState(heightSize, heightMeasureSpec, <span class=\"number\">0</span>);</span><br><span class=\"line\">heightSize = heightSizeAndState &amp; MEASURED_SIZE_MASK;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Either expand children with weight to take up available space or</span></span><br><span class=\"line\"><span class=\"comment\">// shrink them if they extend beyond our current bounds. If we skipped</span></span><br><span class=\"line\"><span class=\"comment\">// measurement on any children, we need to measure them now.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//delta为额外的空间 及LinearLayout中未被分配的空间(可以为负)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> delta = heightSize - mTotalLength;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (skippedMeasure || delta != <span class=\"number\">0</span> &amp;&amp; totalWeight &gt; <span class=\"number\">0.0f</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//skippedMeasure为第一次测量下对跳过测量的子View设置的</span></span><br><span class=\"line\">    <span class=\"comment\">//weightSum为权重和 如果设置了总权重则使用我们所设置的  如果没有则使用子View的weight和</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> weightSum = mWeightSum &gt; <span class=\"number\">0.0f</span> ? mWeightSum : totalWeight;</span><br><span class=\"line\"></span><br><span class=\"line\">    mTotalLength = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//测量什么的</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() == View.GONE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) child.getLayoutParams();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">float</span> childExtra = lp.weight;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childExtra &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Child said it could absorb extra space -- give him his share</span></span><br><span class=\"line\">            <span class=\"comment\">//计算weight属性分配的大小</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> share = (<span class=\"keyword\">int</span>) (childExtra * delta / weightSum);</span><br><span class=\"line\">            <span class=\"comment\">//权重和减去已经分配权重</span></span><br><span class=\"line\">            weightSum -= childExtra;</span><br><span class=\"line\">            <span class=\"comment\">//剩余高度减去分配的高度</span></span><br><span class=\"line\">            delta -= share;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,</span><br><span class=\"line\">                    mPaddingLeft + mPaddingRight +</span><br><span class=\"line\">                            lp.leftMargin + lp.rightMargin, lp.width);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Use a field like lp.isMeasured to figure out if this</span></span><br><span class=\"line\">            <span class=\"comment\">// child has been previously measured</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((lp.height != <span class=\"number\">0</span>) || (heightMode != MeasureSpec.EXACTLY)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//子视图已经被测量过</span></span><br><span class=\"line\">                <span class=\"comment\">//非EXACTLY view需要加上share</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight() + share;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (childHeight &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    childHeight = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//重新测量View</span></span><br><span class=\"line\">                child.measure(childWidthMeasureSpec,</span><br><span class=\"line\">                        MeasureSpec.makeMeasureSpec(childHeight, MeasureSpec.EXACTLY));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果当前是EXACTLY模式 说明没有被测量 需要进行测量</span></span><br><span class=\"line\">                <span class=\"comment\">//子视图首次被测量</span></span><br><span class=\"line\">                <span class=\"comment\">//EXACTLY模式下 将weight占比的高度分配给子View    </span></span><br><span class=\"line\">                child.measure(childWidthMeasureSpec,</span><br><span class=\"line\">                        MeasureSpec.makeMeasureSpec(share &gt; <span class=\"number\">0</span> ? share : <span class=\"number\">0</span>,</span><br><span class=\"line\">                                MeasureSpec.EXACTLY));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Child may now not fit in vertical dimension.</span></span><br><span class=\"line\">            childState = combineMeasuredStates(childState, child.getMeasuredState()</span><br><span class=\"line\">                    &amp; (MEASURED_STATE_MASK&gt;&gt;MEASURED_HEIGHT_STATE_SHIFT));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//处理子视图宽度</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> margin =  lp.leftMargin + lp.rightMargin;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> measuredWidth = child.getMeasuredWidth() + margin;</span><br><span class=\"line\">        maxWidth = Math.max(maxWidth, measuredWidth);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> matchWidthLocally = widthMode != MeasureSpec.EXACTLY &amp;&amp;</span><br><span class=\"line\">                lp.width == LayoutParams.MATCH_PARENT;</span><br><span class=\"line\"></span><br><span class=\"line\">        alternativeMaxWidth = Math.max(alternativeMaxWidth,</span><br><span class=\"line\">                matchWidthLocally ? margin : measuredWidth);</span><br><span class=\"line\"></span><br><span class=\"line\">        allFillParent = allFillParent &amp;&amp; lp.width == LayoutParams.MATCH_PARENT;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</span><br><span class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + child.getMeasuredHeight() +</span><br><span class=\"line\">                lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Add in our padding</span></span><br><span class=\"line\">    mTotalLength += mPaddingTop + mPaddingBottom;</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Should we recompute the heightSpec based on the new total length?</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    alternativeMaxWidth = Math.max(alternativeMaxWidth,</span><br><span class=\"line\">                                   weightedMaxWidth);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// We have no limit, so make all weighted views as tall as the largest child.</span></span><br><span class=\"line\">    <span class=\"comment\">// Children will have already been measured once.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (useLargestChild &amp;&amp; heightMode != MeasureSpec.EXACTLY) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span> || child.getVisibility() == View.GONE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp =</span><br><span class=\"line\">                    (LinearLayout.LayoutParams) child.getLayoutParams();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">float</span> childExtra = lp.weight;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (childExtra &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//使用最大子视图高度测量</span></span><br><span class=\"line\">                child.measure(</span><br><span class=\"line\">                        MeasureSpec.makeMeasureSpec(child.getMeasuredWidth(),</span><br><span class=\"line\">                                MeasureSpec.EXACTLY),</span><br><span class=\"line\">                        MeasureSpec.makeMeasureSpec(largestChildHeight,</span><br><span class=\"line\">                                MeasureSpec.EXACTLY));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!allFillParent &amp;&amp; widthMode != MeasureSpec.EXACTLY) &#123;</span><br><span class=\"line\">    maxWidth = alternativeMaxWidth;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">maxWidth += mPaddingLeft + mPaddingRight;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Check against our minimum width</span></span><br><span class=\"line\">maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());</span><br><span class=\"line\"></span><br><span class=\"line\">setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),</span><br><span class=\"line\">        heightSizeAndState);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (matchWidth) &#123;</span><br><span class=\"line\">    forceUniformWidth(count, heightMeasureSpec);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>resolveSizeAndState方法 定义在View中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Utility to reconcile a desired size and state, with constraints imposed</span></span><br><span class=\"line\"><span class=\"comment\">   * by a MeasureSpec. Will take the desired size, unless a different size</span></span><br><span class=\"line\"><span class=\"comment\">   * is imposed by the constraints. The returned value is a compound integer,</span></span><br><span class=\"line\"><span class=\"comment\">   * with the resolved size in the &#123;<span class=\"doctag\">@link</span> #MEASURED_SIZE_MASK&#125; bits and</span></span><br><span class=\"line\"><span class=\"comment\">   * optionally the bit &#123;<span class=\"doctag\">@link</span> #MEASURED_STATE_TOO_SMALL&#125; set if the</span></span><br><span class=\"line\"><span class=\"comment\">   * resulting size is smaller than the size the view wants to be.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> size How big the view wants to be.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> measureSpec Constraints imposed by the parent.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> childMeasuredState Size information bit mask for the view's</span></span><br><span class=\"line\"><span class=\"comment\">   *                           children.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> Size information bit mask as defined by</span></span><br><span class=\"line\"><span class=\"comment\">   *         &#123;<span class=\"doctag\">@link</span> #MEASURED_SIZE_MASK&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">   *         &#123;<span class=\"doctag\">@link</span> #MEASURED_STATE_TOO_SMALL&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">resolveSizeAndState</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec, <span class=\"keyword\">int</span> childMeasuredState)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> result;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (specMode) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (specSize &lt; size) &#123;</span><br><span class=\"line\">                  result = specSize | MEASURED_STATE_TOO_SMALL;</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  result = size;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</span><br><span class=\"line\">              result = specSize;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">          <span class=\"keyword\">default</span>:</span><br><span class=\"line\">              result = size;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result | (childMeasuredState &amp; MEASURED_STATE_MASK);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"delta为负的相关解析\"><a href=\"#delta为负的相关解析\" class=\"headerlink\" title=\"delta为负的相关解析\"></a>delta为负的相关解析</h6><p>相关代码及效果如下</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/88204275.jpg\" alt=\"负delta.png\"></p>\n<p>根据之前的measure流程分析一下</p>\n<ul>\n<li>相关变量初始化</li>\n<li>第一次测量  两个子TextView都会被测量 TextView1.height = TextView1.height = 500dp 则mToatalLength为1000dp</li>\n<li>mToatalLength再次测量跳过</li>\n<li>计算delta delta = heightSize - mTotalLength 根据resolveSizeAndState方法 父LinearLayout是EXACTLY模式 所以最终heightSize为500dp delta = -500dp</li>\n<li>根据weight分配剩余空间 TextView1.height = 500 + 1 / 5 <em> (- 500) = 400 dp<br>TextView2.height = 500 + 4 / 5 </em> (- 500) = 100 dp</li>\n</ul>\n<h3 id=\"layout过程\"><a href=\"#layout过程\" class=\"headerlink\" title=\"layout过程\"></a>layout过程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</span><br><span class=\"line\">      layoutVertical(l, t, r, b);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      layoutHorizontal(l, t, r, b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看出 同样是分成水平和竖直两个方向的 同样分析竖直 方向下的layout过程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Position the children during a layout pass if the orientation of this</span></span><br><span class=\"line\"><span class=\"comment\">    * LinearLayout is set to &#123;<span class=\"doctag\">@link</span> #VERTICAL&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@see</span> #getOrientation()</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@see</span> #setOrientation(int)</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@see</span> #onLayout(boolean, int, int, int, int)</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> left</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> top</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> right</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> bottom</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">layoutVertical</span><span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingLeft = mPaddingLeft;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> childTop;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> childLeft;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//父View默认子View的宽度</span></span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = right - left;</span><br><span class=\"line\">       <span class=\"comment\">//子View的右侧默认位置</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> childRight = width - mPaddingRight;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 子View的可用空间大小</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> childSpace = width - paddingLeft - mPaddingRight;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//子View的个数</span></span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> majorGravity = mGravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> minorGravity = mGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//根据LinearLayout设置的对其方式 设置第一个子View的Top值</span></span><br><span class=\"line\">       <span class=\"keyword\">switch</span> (majorGravity) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> Gravity.BOTTOM:</span><br><span class=\"line\">              <span class=\"comment\">// mTotalLength contains the padding already</span></span><br><span class=\"line\">              childTop = mPaddingTop + bottom - top - mTotalLength;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"comment\">// mTotalLength contains the padding already</span></span><br><span class=\"line\">          <span class=\"keyword\">case</span> Gravity.CENTER_VERTICAL:</span><br><span class=\"line\">              childTop = mPaddingTop + (bottom - top - mTotalLength) / <span class=\"number\">2</span>;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">case</span> Gravity.TOP:</span><br><span class=\"line\">          <span class=\"keyword\">default</span>:</span><br><span class=\"line\">              childTop = mPaddingTop;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//遍历各个子View</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               childTop += measureNullChild(i);</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//LinearLayout中子View的宽和高有measure过程决定</span></span><br><span class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = child.getMeasuredWidth();</span><br><span class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</span><br><span class=\"line\">               <span class=\"comment\">//获取子View的LayoutParams</span></span><br><span class=\"line\">               <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp =</span><br><span class=\"line\">                       (LinearLayout.LayoutParams) child.getLayoutParams();</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">int</span> gravity = lp.gravity;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (gravity &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                   gravity = minorGravity;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</span><br><span class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);</span><br><span class=\"line\">               <span class=\"comment\">//根据子View的对其方式设置Left值</span></span><br><span class=\"line\">               <span class=\"keyword\">switch</span> (absoluteGravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">case</span> Gravity.CENTER_HORIZONTAL:</span><br><span class=\"line\">                       childLeft = paddingLeft + ((childSpace - childWidth) / <span class=\"number\">2</span>)</span><br><span class=\"line\">                               + lp.leftMargin - lp.rightMargin;</span><br><span class=\"line\">                       <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                   <span class=\"keyword\">case</span> Gravity.RIGHT:</span><br><span class=\"line\">                       childLeft = childRight - childWidth - lp.rightMargin;</span><br><span class=\"line\">                       <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                   <span class=\"keyword\">case</span> Gravity.LEFT:</span><br><span class=\"line\">                   <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                       childLeft = paddingLeft + lp.leftMargin;</span><br><span class=\"line\">                       <span class=\"keyword\">break</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"comment\">//如果有分割线 添加分割线的高度</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</span><br><span class=\"line\">                   childTop += mDividerHeight;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"comment\">//子View的top修改</span></span><br><span class=\"line\">               childTop += lp.topMargin;</span><br><span class=\"line\">               <span class=\"comment\">//用setChildFrame()方法设置子控件控件的在父控件上的坐标轴</span></span><br><span class=\"line\">               setChildFrame(child, childLeft, childTop + getLocationOffset(child),</span><br><span class=\"line\">                       childWidth, childHeight);</span><br><span class=\"line\">               childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);</span><br><span class=\"line\"></span><br><span class=\"line\">               i += getChildrenSkipCount(child, i);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"draw-源码分析\"><a href=\"#draw-源码分析\" class=\"headerlink\" title=\"draw 源码分析\"></a>draw 源码分析</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mDivider == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</span><br><span class=\"line\">      drawDividersVertical(canvas);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      drawDividersHorizontal(canvas);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样主要分析垂直方向的处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">drawDividersVertical</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</span><br><span class=\"line\">    <span class=\"comment\">//根据计算好的坐标绘制对应的子View</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child != <span class=\"keyword\">null</span> &amp;&amp; child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> top = child.getTop() - lp.topMargin - mDividerHeight;</span><br><span class=\"line\">                drawHorizontalDivider(canvas, top);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//绘制分割线</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(count)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View child = getLastNonGoneChild();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> bottom = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            bottom = getHeight() - getPaddingBottom() - mDividerHeight;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">            bottom = child.getBottom() + lp.bottomMargin;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        drawHorizontalDivider(canvas, bottom);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">drawHorizontalDivider</span><span class=\"params\">(Canvas canvas, <span class=\"keyword\">int</span> top)</span> </span>&#123;</span><br><span class=\"line\">  mDivider.setBounds(getPaddingLeft() + mDividerPadding, top,</span><br><span class=\"line\">          getWidth() - getPaddingRight() - mDividerPadding, top + mDividerHeight);</span><br><span class=\"line\">  mDivider.draw(canvas);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"LikelyHttp -- 可能是最简单的retorfit二次封装库","date":"2020-03-19T08:53:26.000Z","_content":"\n# LikelyHttp -- 可能是最简单的retorfit二次封装库\n\n> retorfit + okhttp可能现阶段最常见的android网络请求库了,网上针对retorfit和okhttp二次封装的库层出不穷, 其中有很多很优秀功能也很强大的库,但功能强大和内容丰富很有可能带来了更多的耦合从而导致这些第三方的库在使用的时候不尽如人意,很多的时候我们的使用第三方的库的目的是使得我们的使用更加的简洁和简单. 二是网络库是一个使用频率十分高的库,为此为自己封装一个自己使用更加顺手的库,为此才有了个做了减法的LikeluHttp.\n\n  <!-- more -->\n\n## 如何使用\n\n```java\n        //定义OkHttp相关, 注册拦截器相关的\n        OkHttpClient mOkHttpClient = new OkHttpClient.Builder()\n                .addInterceptor(LogInterceptor())\n                .build();\n        //定义Retrofit相关\n        Retrofit mRetrofit = new Retrofit.Builder()\n                .baseUrl(BasUrl)\n                //添加gson转换器\n                .addConverterFactory(GsonConverterFactory.create())\n                //添加rxjava转换器\n                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n                .client(mOkHttpClient)\n                .build();\n        //获取接口定义接口\n        BaseNetApi baseNetApi = mRetrofit.create(BaseNetApi.class);\n\n        //配置LikelyHttp相关功能信息\n        //暂时支持配置的功能比较少\n        LikelyHttp.getInstance()\n        //增加请求统一处理\n        .setUniteDeal(new BaseObserverInterface() {\n            //请求开始\n            @Override\n            public void onRequestStart() {\n                Toast.makeText(MainActivity.this, \"onRequestStart\", Toast.LENGTH_SHORT).show();\n            }\n\n            //请求完成, 包含成功和失败\n            @Override\n            public void onRequestEnd() {\n                Toast.makeText(MainActivity.this, \"onRequestEnd\", Toast.LENGTH_SHORT).show();\n            }\n\n            //请求状态码异常\n            @Override\n            public void onCodeError(int errorCode) {\n                Toast.makeText(MainActivity.this, \"onCodeError: \" + errorCode, Toast.LENGTH_SHORT).show();\n            }\n        })\n        //设置请求成功状态(默认为200)\n        .setUniteDeal(200)\n        ;\n\n        //使用\n        LikelyHttp.getInstance().start(baseNetApi.getHome(), new BaseObserver<String>(){\n            @Override\n            protected void onSuccees(BaseEntity<String> t) throws Exception {\n                Toast.makeText(MainActivity.this, \"onSuccees\", Toast.LENGTH_SHORT).show();\n                //获取内容\n                t.getData()\n            }\n\n            @Override\n            protected void onFailure(Throwable e, boolean isNetWorkError) throws Exception {\n                Toast.makeText(MainActivity.this, \"onFailure\", Toast.LENGTH_SHORT).show();\n            }\n        });\n\n        //不使用请求统一处理\n        //默认为使用情况统一处理\n        LikelyHttp.getInstance().start(baseNetApi.getHome(), new BaseObserver<String>(false){\n                  ...\n        });\n\n        //返回回调放入非主线程中使用\n        //默认回调放入主线程\n        LikelyHttp.getInstance().start(baseNetApi.getHome(), new BaseObserver<String>(){\n                  ...\n        }, true);\n\n```\n\n其中BaseNetApi为平时使用的接口类,用于定义网络请求\n\n```java\npublic interface BaseNetApi {\n    @GET(\"clwater\")\n    Observable<BaseEntity<String>> getHome();\n}\n```\n\n\n## 使用详情\n1. 简单get请求\n\n模拟最简单的get success请求\n\n![简单get请求](https://user-gold-cdn.xitu.io/2019/12/6/16ed6cadc8c853dd?w=1024&h=2163&f=gif&s=1079003)\n\n2. 简单get请求(失败)\n\n模拟最简单的get fail请求\n\n![简单getfail请求](https://user-gold-cdn.xitu.io/2019/12/6/16ed6cadc59da66f?w=1024&h=2163&f=gif&s=932539)\n\n3. 服务器返回状态码错误的情况(统一处理)\n\n模拟服务器返回状态码错误的情况\n\n![简单codeerror请求](https://user-gold-cdn.xitu.io/2019/12/6/16ed6cadc8ca4f3a?w=1024&h=2163&f=gif&s=330080)\n\n\n4. 简单的post请求\n\n模拟简单的post请求\n\n![简单post请求](https://user-gold-cdn.xitu.io/2019/12/6/16ed6cadd237505e?w=1024&h=2163&f=gif&s=935163)\n\n4. 异步线程回调模拟\n\n模拟异步线程回调模拟\n\n![io](https://user-gold-cdn.xitu.io/2019/12/6/16ed6cadca174625?w=1024&h=2163&f=gif&s=1181851)\n\n\n\n## 如何封装\n1. BaseEntity 请求默认返回结构\n  BaseEntity暂时不支持自定义结构,后续会增加此部分的自定义情况\n\n```java\n请求默认返回格式\n// {\n//     \"status\": 200,\n//     \"message\": \"success\",\n//     \"data\": {}\n// }\n\npublic class BaseEntity<T> {\n    public static int SUCCESS_CODE = 200;\n    private int status;\n    private String msg;\n    private T data;\n\n\n    public boolean isSuccess(){\n        return getCode() == SUCCESS_CODE;\n    }\n    public int getCode() {\n        return status;\n    }\n\n    public void setCode(int code) {\n        this.status = code;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n\n    public void setMsg(String msg) {\n        this.msg = msg;\n    }\n\n    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n\n}\n\n2. BaseObserver请求回调处理,包含每个请求的成功与失败以及统一的情况处理\n\npublic abstract class BaseObserver<T> implements Observer<BaseEntity<T>> {\n\n    /*\n     * 是否经过统一处理, 默认均使用\n     */\n    private boolean userUniteDeal = true;\n\n    private static BaseObserverInterface baseObserverInterface;\n\n    public static void setBaseObserverInterface(BaseObserverInterface baseObserverInterface) {\n        BaseObserver.baseObserverInterface = baseObserverInterface;\n    }\n\n    public BaseObserver() {\n\n    }\n\n    public BaseObserver(boolean useLoading) {\n        this.userUniteDeal = useLoading;\n    }\n\n    @Override\n    public void onSubscribe(Disposable d) {\n        onRequestStart();\n    }\n\n    @Override\n    public void onNext(BaseEntity<T> tBaseEntity) {\n        onRequestEnd();\n        if (tBaseEntity.isSuccess()) {\n            try {\n                onSuccees(tBaseEntity);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        } else {\n            try {\n                onCodeError(tBaseEntity);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    @Override\n    public void onError(Throwable e) {\n        onRequestEnd();\n        try {\n            if (e instanceof ConnectException\n                    || e instanceof TimeoutException\n                    || e instanceof NetworkErrorException\n                    || e instanceof UnknownHostException) {\n                onFailure(e, true);\n            } else {\n                onFailure(e, false);\n            }\n        } catch (Exception e1) {\n            e1.printStackTrace();\n        }\n    }\n\n    @Override\n    public void onComplete() {\n    }\n\n    /**\n     * @param t\n     * @throws Exception\n     * 网络请求成功, 状态码错误\n     */\n    protected void onCodeError(BaseEntity<T> t) throws Exception {\n        baseObserverInterface.onCodeError(t.getCode());\n    }\n\n\n    /**\n     * @param t\n     * @throws Exception\n     * 请求成功(网络及状态码code)\n     */\n    protected abstract void onSuccees(BaseEntity<T> t) throws Exception;\n\n    /**\n     * @param e\n     * @param isNetWorkError 是否是网络错误\n     * @throws Exception\n     * 网络请求失败\n     */\n    protected abstract void onFailure(Throwable e, boolean isNetWorkError) throws Exception;\n\n\n    /**\n     * 网络请求开始\n     */\n    protected void onRequestStart() {\n        if (userUniteDeal) {\n            baseObserverInterface.onRequestStart();\n        }\n    }\n\n    /**\n     * 网络请求完成(包括成功及失败)\n     */\n    protected void onRequestEnd() {\n        if (userUniteDeal) {\n            baseObserverInterface.onRequestEnd();\n        }\n    }\n\n\n}\n\n\n```\n\n\n## 代码\n相关代码可以访问我的[GitHub](https://github.com/clwater/LikelyHttp.git)","source":"_posts/LikelyHttp-可能是最简单的retorfit二次封装库.md","raw":"---\ntitle: LikelyHttp -- 可能是最简单的retorfit二次封装库\ndate: 2020-03-19 16:53:26\ntags:\n---\n\n# LikelyHttp -- 可能是最简单的retorfit二次封装库\n\n> retorfit + okhttp可能现阶段最常见的android网络请求库了,网上针对retorfit和okhttp二次封装的库层出不穷, 其中有很多很优秀功能也很强大的库,但功能强大和内容丰富很有可能带来了更多的耦合从而导致这些第三方的库在使用的时候不尽如人意,很多的时候我们的使用第三方的库的目的是使得我们的使用更加的简洁和简单. 二是网络库是一个使用频率十分高的库,为此为自己封装一个自己使用更加顺手的库,为此才有了个做了减法的LikeluHttp.\n\n  <!-- more -->\n\n## 如何使用\n\n```java\n        //定义OkHttp相关, 注册拦截器相关的\n        OkHttpClient mOkHttpClient = new OkHttpClient.Builder()\n                .addInterceptor(LogInterceptor())\n                .build();\n        //定义Retrofit相关\n        Retrofit mRetrofit = new Retrofit.Builder()\n                .baseUrl(BasUrl)\n                //添加gson转换器\n                .addConverterFactory(GsonConverterFactory.create())\n                //添加rxjava转换器\n                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n                .client(mOkHttpClient)\n                .build();\n        //获取接口定义接口\n        BaseNetApi baseNetApi = mRetrofit.create(BaseNetApi.class);\n\n        //配置LikelyHttp相关功能信息\n        //暂时支持配置的功能比较少\n        LikelyHttp.getInstance()\n        //增加请求统一处理\n        .setUniteDeal(new BaseObserverInterface() {\n            //请求开始\n            @Override\n            public void onRequestStart() {\n                Toast.makeText(MainActivity.this, \"onRequestStart\", Toast.LENGTH_SHORT).show();\n            }\n\n            //请求完成, 包含成功和失败\n            @Override\n            public void onRequestEnd() {\n                Toast.makeText(MainActivity.this, \"onRequestEnd\", Toast.LENGTH_SHORT).show();\n            }\n\n            //请求状态码异常\n            @Override\n            public void onCodeError(int errorCode) {\n                Toast.makeText(MainActivity.this, \"onCodeError: \" + errorCode, Toast.LENGTH_SHORT).show();\n            }\n        })\n        //设置请求成功状态(默认为200)\n        .setUniteDeal(200)\n        ;\n\n        //使用\n        LikelyHttp.getInstance().start(baseNetApi.getHome(), new BaseObserver<String>(){\n            @Override\n            protected void onSuccees(BaseEntity<String> t) throws Exception {\n                Toast.makeText(MainActivity.this, \"onSuccees\", Toast.LENGTH_SHORT).show();\n                //获取内容\n                t.getData()\n            }\n\n            @Override\n            protected void onFailure(Throwable e, boolean isNetWorkError) throws Exception {\n                Toast.makeText(MainActivity.this, \"onFailure\", Toast.LENGTH_SHORT).show();\n            }\n        });\n\n        //不使用请求统一处理\n        //默认为使用情况统一处理\n        LikelyHttp.getInstance().start(baseNetApi.getHome(), new BaseObserver<String>(false){\n                  ...\n        });\n\n        //返回回调放入非主线程中使用\n        //默认回调放入主线程\n        LikelyHttp.getInstance().start(baseNetApi.getHome(), new BaseObserver<String>(){\n                  ...\n        }, true);\n\n```\n\n其中BaseNetApi为平时使用的接口类,用于定义网络请求\n\n```java\npublic interface BaseNetApi {\n    @GET(\"clwater\")\n    Observable<BaseEntity<String>> getHome();\n}\n```\n\n\n## 使用详情\n1. 简单get请求\n\n模拟最简单的get success请求\n\n![简单get请求](https://user-gold-cdn.xitu.io/2019/12/6/16ed6cadc8c853dd?w=1024&h=2163&f=gif&s=1079003)\n\n2. 简单get请求(失败)\n\n模拟最简单的get fail请求\n\n![简单getfail请求](https://user-gold-cdn.xitu.io/2019/12/6/16ed6cadc59da66f?w=1024&h=2163&f=gif&s=932539)\n\n3. 服务器返回状态码错误的情况(统一处理)\n\n模拟服务器返回状态码错误的情况\n\n![简单codeerror请求](https://user-gold-cdn.xitu.io/2019/12/6/16ed6cadc8ca4f3a?w=1024&h=2163&f=gif&s=330080)\n\n\n4. 简单的post请求\n\n模拟简单的post请求\n\n![简单post请求](https://user-gold-cdn.xitu.io/2019/12/6/16ed6cadd237505e?w=1024&h=2163&f=gif&s=935163)\n\n4. 异步线程回调模拟\n\n模拟异步线程回调模拟\n\n![io](https://user-gold-cdn.xitu.io/2019/12/6/16ed6cadca174625?w=1024&h=2163&f=gif&s=1181851)\n\n\n\n## 如何封装\n1. BaseEntity 请求默认返回结构\n  BaseEntity暂时不支持自定义结构,后续会增加此部分的自定义情况\n\n```java\n请求默认返回格式\n// {\n//     \"status\": 200,\n//     \"message\": \"success\",\n//     \"data\": {}\n// }\n\npublic class BaseEntity<T> {\n    public static int SUCCESS_CODE = 200;\n    private int status;\n    private String msg;\n    private T data;\n\n\n    public boolean isSuccess(){\n        return getCode() == SUCCESS_CODE;\n    }\n    public int getCode() {\n        return status;\n    }\n\n    public void setCode(int code) {\n        this.status = code;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n\n    public void setMsg(String msg) {\n        this.msg = msg;\n    }\n\n    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n\n}\n\n2. BaseObserver请求回调处理,包含每个请求的成功与失败以及统一的情况处理\n\npublic abstract class BaseObserver<T> implements Observer<BaseEntity<T>> {\n\n    /*\n     * 是否经过统一处理, 默认均使用\n     */\n    private boolean userUniteDeal = true;\n\n    private static BaseObserverInterface baseObserverInterface;\n\n    public static void setBaseObserverInterface(BaseObserverInterface baseObserverInterface) {\n        BaseObserver.baseObserverInterface = baseObserverInterface;\n    }\n\n    public BaseObserver() {\n\n    }\n\n    public BaseObserver(boolean useLoading) {\n        this.userUniteDeal = useLoading;\n    }\n\n    @Override\n    public void onSubscribe(Disposable d) {\n        onRequestStart();\n    }\n\n    @Override\n    public void onNext(BaseEntity<T> tBaseEntity) {\n        onRequestEnd();\n        if (tBaseEntity.isSuccess()) {\n            try {\n                onSuccees(tBaseEntity);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        } else {\n            try {\n                onCodeError(tBaseEntity);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    @Override\n    public void onError(Throwable e) {\n        onRequestEnd();\n        try {\n            if (e instanceof ConnectException\n                    || e instanceof TimeoutException\n                    || e instanceof NetworkErrorException\n                    || e instanceof UnknownHostException) {\n                onFailure(e, true);\n            } else {\n                onFailure(e, false);\n            }\n        } catch (Exception e1) {\n            e1.printStackTrace();\n        }\n    }\n\n    @Override\n    public void onComplete() {\n    }\n\n    /**\n     * @param t\n     * @throws Exception\n     * 网络请求成功, 状态码错误\n     */\n    protected void onCodeError(BaseEntity<T> t) throws Exception {\n        baseObserverInterface.onCodeError(t.getCode());\n    }\n\n\n    /**\n     * @param t\n     * @throws Exception\n     * 请求成功(网络及状态码code)\n     */\n    protected abstract void onSuccees(BaseEntity<T> t) throws Exception;\n\n    /**\n     * @param e\n     * @param isNetWorkError 是否是网络错误\n     * @throws Exception\n     * 网络请求失败\n     */\n    protected abstract void onFailure(Throwable e, boolean isNetWorkError) throws Exception;\n\n\n    /**\n     * 网络请求开始\n     */\n    protected void onRequestStart() {\n        if (userUniteDeal) {\n            baseObserverInterface.onRequestStart();\n        }\n    }\n\n    /**\n     * 网络请求完成(包括成功及失败)\n     */\n    protected void onRequestEnd() {\n        if (userUniteDeal) {\n            baseObserverInterface.onRequestEnd();\n        }\n    }\n\n\n}\n\n\n```\n\n\n## 代码\n相关代码可以访问我的[GitHub](https://github.com/clwater/LikelyHttp.git)","slug":"LikelyHttp-可能是最简单的retorfit二次封装库","published":1,"updated":"2020-03-19T08:53:48.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5du000nq7dqs87t80kg","content":"<h1 id=\"LikelyHttp-–-可能是最简单的retorfit二次封装库\"><a href=\"#LikelyHttp-–-可能是最简单的retorfit二次封装库\" class=\"headerlink\" title=\"LikelyHttp – 可能是最简单的retorfit二次封装库\"></a>LikelyHttp – 可能是最简单的retorfit二次封装库</h1><blockquote>\n<p>retorfit + okhttp可能现阶段最常见的android网络请求库了,网上针对retorfit和okhttp二次封装的库层出不穷, 其中有很多很优秀功能也很强大的库,但功能强大和内容丰富很有可能带来了更多的耦合从而导致这些第三方的库在使用的时候不尽如人意,很多的时候我们的使用第三方的库的目的是使得我们的使用更加的简洁和简单. 二是网络库是一个使用频率十分高的库,为此为自己封装一个自己使用更加顺手的库,为此才有了个做了减法的LikeluHttp.</p>\n</blockquote>\n  <a id=\"more\"></a>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义OkHttp相关, 注册拦截器相关的</span></span><br><span class=\"line\">OkHttpClient mOkHttpClient = <span class=\"keyword\">new</span> OkHttpClient.Builder()</span><br><span class=\"line\">        .addInterceptor(LogInterceptor())</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"><span class=\"comment\">//定义Retrofit相关</span></span><br><span class=\"line\">Retrofit mRetrofit = <span class=\"keyword\">new</span> Retrofit.Builder()</span><br><span class=\"line\">        .baseUrl(BasUrl)</span><br><span class=\"line\">        <span class=\"comment\">//添加gson转换器</span></span><br><span class=\"line\">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">        <span class=\"comment\">//添加rxjava转换器</span></span><br><span class=\"line\">        .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class=\"line\">        .client(mOkHttpClient)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"><span class=\"comment\">//获取接口定义接口</span></span><br><span class=\"line\">BaseNetApi baseNetApi = mRetrofit.create(BaseNetApi<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//配置LikelyHttp相关功能信息</span></span><br><span class=\"line\"><span class=\"comment\">//暂时支持配置的功能比较少</span></span><br><span class=\"line\">LikelyHttp.getInstance()</span><br><span class=\"line\"><span class=\"comment\">//增加请求统一处理</span></span><br><span class=\"line\">.setUniteDeal(<span class=\"keyword\">new</span> BaseObserverInterface() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//请求开始</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"onRequestStart\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//请求完成, 包含成功和失败</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestEnd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"onRequestEnd\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//请求状态码异常</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCodeError</span><span class=\"params\">(<span class=\"keyword\">int</span> errorCode)</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"onCodeError: \"</span> + errorCode, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//设置请求成功状态(默认为200)</span></span><br><span class=\"line\">.setUniteDeal(<span class=\"number\">200</span>)</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\">LikelyHttp.getInstance().start(baseNetApi.getHome(), <span class=\"keyword\">new</span> BaseObserver&lt;String&gt;()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccees</span><span class=\"params\">(BaseEntity&lt;String&gt; t)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"onSuccees\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        <span class=\"comment\">//获取内容</span></span><br><span class=\"line\">        t.getData()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Throwable e, <span class=\"keyword\">boolean</span> isNetWorkError)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"onFailure\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不使用请求统一处理</span></span><br><span class=\"line\"><span class=\"comment\">//默认为使用情况统一处理</span></span><br><span class=\"line\">LikelyHttp.getInstance().start(baseNetApi.getHome(), <span class=\"keyword\">new</span> BaseObserver&lt;String&gt;(<span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">          ...</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回回调放入非主线程中使用</span></span><br><span class=\"line\"><span class=\"comment\">//默认回调放入主线程</span></span><br><span class=\"line\">LikelyHttp.getInstance().start(baseNetApi.getHome(), <span class=\"keyword\">new</span> BaseObserver&lt;String&gt;()&#123;</span><br><span class=\"line\">          ...</span><br><span class=\"line\">&#125;, <span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>其中BaseNetApi为平时使用的接口类,用于定义网络请求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BaseNetApi</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET</span>(<span class=\"string\">\"clwater\"</span>)</span><br><span class=\"line\">    Observable&lt;BaseEntity&lt;String&gt;&gt; getHome();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用详情\"><a href=\"#使用详情\" class=\"headerlink\" title=\"使用详情\"></a>使用详情</h2><ol>\n<li>简单get请求</li>\n</ol>\n<p>模拟最简单的get success请求</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/12/6/16ed6cadc8c853dd?w=1024&amp;h=2163&amp;f=gif&amp;s=1079003\" alt=\"简单get请求\"></p>\n<ol start=\"2\">\n<li>简单get请求(失败)</li>\n</ol>\n<p>模拟最简单的get fail请求</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/12/6/16ed6cadc59da66f?w=1024&amp;h=2163&amp;f=gif&amp;s=932539\" alt=\"简单getfail请求\"></p>\n<ol start=\"3\">\n<li>服务器返回状态码错误的情况(统一处理)</li>\n</ol>\n<p>模拟服务器返回状态码错误的情况</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/12/6/16ed6cadc8ca4f3a?w=1024&amp;h=2163&amp;f=gif&amp;s=330080\" alt=\"简单codeerror请求\"></p>\n<ol start=\"4\">\n<li>简单的post请求</li>\n</ol>\n<p>模拟简单的post请求</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/12/6/16ed6cadd237505e?w=1024&amp;h=2163&amp;f=gif&amp;s=935163\" alt=\"简单post请求\"></p>\n<ol start=\"4\">\n<li>异步线程回调模拟</li>\n</ol>\n<p>模拟异步线程回调模拟</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/12/6/16ed6cadca174625?w=1024&amp;h=2163&amp;f=gif&amp;s=1181851\" alt=\"io\"></p>\n<h2 id=\"如何封装\"><a href=\"#如何封装\" class=\"headerlink\" title=\"如何封装\"></a>如何封装</h2><ol>\n<li>BaseEntity 请求默认返回结构<br>BaseEntity暂时不支持自定义结构,后续会增加此部分的自定义情况</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求默认返回格式</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     \"status\": 200,</span></span><br><span class=\"line\"><span class=\"comment\">//     \"message\": \"success\",</span></span><br><span class=\"line\"><span class=\"comment\">//     \"data\": &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseEntity</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> SUCCESS_CODE = <span class=\"number\">200</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> status;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSuccess</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getCode() == SUCCESS_CODE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCode</span><span class=\"params\">(<span class=\"keyword\">int</span> code)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getMsg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMsg</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(T data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>. BaseObserver请求回调处理,包含每个请求的成功与失败以及统一的情况处理</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseObserver</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span>&lt;<span class=\"title\">BaseEntity</span>&lt;<span class=\"title\">T</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否经过统一处理, 默认均使用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> userUniteDeal = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BaseObserverInterface baseObserverInterface;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setBaseObserverInterface</span><span class=\"params\">(BaseObserverInterface baseObserverInterface)</span> </span>&#123;</span><br><span class=\"line\">        BaseObserver.baseObserverInterface = baseObserverInterface;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseObserver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseObserver</span><span class=\"params\">(<span class=\"keyword\">boolean</span> useLoading)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userUniteDeal = useLoading;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Disposable d)</span> </span>&#123;</span><br><span class=\"line\">        onRequestStart();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(BaseEntity&lt;T&gt; tBaseEntity)</span> </span>&#123;</span><br><span class=\"line\">        onRequestEnd();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tBaseEntity.isSuccess()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                onSuccees(tBaseEntity);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                onCodeError(tBaseEntity);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">        onRequestEnd();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> ConnectException</span><br><span class=\"line\">                    || e <span class=\"keyword\">instanceof</span> TimeoutException</span><br><span class=\"line\">                    || e <span class=\"keyword\">instanceof</span> NetworkErrorException</span><br><span class=\"line\">                    || e <span class=\"keyword\">instanceof</span> UnknownHostException) &#123;</span><br><span class=\"line\">                onFailure(e, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                onFailure(e, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e1) &#123;</span><br><span class=\"line\">            e1.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> t</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     * 网络请求成功, 状态码错误</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCodeError</span><span class=\"params\">(BaseEntity&lt;T&gt; t)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        baseObserverInterface.onCodeError(t.getCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> t</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     * 请求成功(网络及状态码code)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccees</span><span class=\"params\">(BaseEntity&lt;T&gt; t)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> e</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> isNetWorkError 是否是网络错误</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     * 网络请求失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Throwable e, <span class=\"keyword\">boolean</span> isNetWorkError)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 网络请求开始</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (userUniteDeal) &#123;</span><br><span class=\"line\">            baseObserverInterface.onRequestStart();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 网络请求完成(包括成功及失败)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestEnd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (userUniteDeal) &#123;</span><br><span class=\"line\">            baseObserverInterface.onRequestEnd();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>相关代码可以访问我的<a href=\"https://github.com/clwater/LikelyHttp.git\" target=\"_blank\" rel=\"noopener\">GitHub</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"LikelyHttp-–-可能是最简单的retorfit二次封装库\"><a href=\"#LikelyHttp-–-可能是最简单的retorfit二次封装库\" class=\"headerlink\" title=\"LikelyHttp – 可能是最简单的retorfit二次封装库\"></a>LikelyHttp – 可能是最简单的retorfit二次封装库</h1><blockquote>\n<p>retorfit + okhttp可能现阶段最常见的android网络请求库了,网上针对retorfit和okhttp二次封装的库层出不穷, 其中有很多很优秀功能也很强大的库,但功能强大和内容丰富很有可能带来了更多的耦合从而导致这些第三方的库在使用的时候不尽如人意,很多的时候我们的使用第三方的库的目的是使得我们的使用更加的简洁和简单. 二是网络库是一个使用频率十分高的库,为此为自己封装一个自己使用更加顺手的库,为此才有了个做了减法的LikeluHttp.</p>\n</blockquote>","more":"<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义OkHttp相关, 注册拦截器相关的</span></span><br><span class=\"line\">OkHttpClient mOkHttpClient = <span class=\"keyword\">new</span> OkHttpClient.Builder()</span><br><span class=\"line\">        .addInterceptor(LogInterceptor())</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"><span class=\"comment\">//定义Retrofit相关</span></span><br><span class=\"line\">Retrofit mRetrofit = <span class=\"keyword\">new</span> Retrofit.Builder()</span><br><span class=\"line\">        .baseUrl(BasUrl)</span><br><span class=\"line\">        <span class=\"comment\">//添加gson转换器</span></span><br><span class=\"line\">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">        <span class=\"comment\">//添加rxjava转换器</span></span><br><span class=\"line\">        .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class=\"line\">        .client(mOkHttpClient)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"><span class=\"comment\">//获取接口定义接口</span></span><br><span class=\"line\">BaseNetApi baseNetApi = mRetrofit.create(BaseNetApi<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//配置LikelyHttp相关功能信息</span></span><br><span class=\"line\"><span class=\"comment\">//暂时支持配置的功能比较少</span></span><br><span class=\"line\">LikelyHttp.getInstance()</span><br><span class=\"line\"><span class=\"comment\">//增加请求统一处理</span></span><br><span class=\"line\">.setUniteDeal(<span class=\"keyword\">new</span> BaseObserverInterface() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//请求开始</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"onRequestStart\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//请求完成, 包含成功和失败</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestEnd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"onRequestEnd\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//请求状态码异常</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCodeError</span><span class=\"params\">(<span class=\"keyword\">int</span> errorCode)</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"onCodeError: \"</span> + errorCode, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//设置请求成功状态(默认为200)</span></span><br><span class=\"line\">.setUniteDeal(<span class=\"number\">200</span>)</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\">LikelyHttp.getInstance().start(baseNetApi.getHome(), <span class=\"keyword\">new</span> BaseObserver&lt;String&gt;()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccees</span><span class=\"params\">(BaseEntity&lt;String&gt; t)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"onSuccees\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        <span class=\"comment\">//获取内容</span></span><br><span class=\"line\">        t.getData()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Throwable e, <span class=\"keyword\">boolean</span> isNetWorkError)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"onFailure\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不使用请求统一处理</span></span><br><span class=\"line\"><span class=\"comment\">//默认为使用情况统一处理</span></span><br><span class=\"line\">LikelyHttp.getInstance().start(baseNetApi.getHome(), <span class=\"keyword\">new</span> BaseObserver&lt;String&gt;(<span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">          ...</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回回调放入非主线程中使用</span></span><br><span class=\"line\"><span class=\"comment\">//默认回调放入主线程</span></span><br><span class=\"line\">LikelyHttp.getInstance().start(baseNetApi.getHome(), <span class=\"keyword\">new</span> BaseObserver&lt;String&gt;()&#123;</span><br><span class=\"line\">          ...</span><br><span class=\"line\">&#125;, <span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>其中BaseNetApi为平时使用的接口类,用于定义网络请求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BaseNetApi</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET</span>(<span class=\"string\">\"clwater\"</span>)</span><br><span class=\"line\">    Observable&lt;BaseEntity&lt;String&gt;&gt; getHome();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用详情\"><a href=\"#使用详情\" class=\"headerlink\" title=\"使用详情\"></a>使用详情</h2><ol>\n<li>简单get请求</li>\n</ol>\n<p>模拟最简单的get success请求</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/12/6/16ed6cadc8c853dd?w=1024&amp;h=2163&amp;f=gif&amp;s=1079003\" alt=\"简单get请求\"></p>\n<ol start=\"2\">\n<li>简单get请求(失败)</li>\n</ol>\n<p>模拟最简单的get fail请求</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/12/6/16ed6cadc59da66f?w=1024&amp;h=2163&amp;f=gif&amp;s=932539\" alt=\"简单getfail请求\"></p>\n<ol start=\"3\">\n<li>服务器返回状态码错误的情况(统一处理)</li>\n</ol>\n<p>模拟服务器返回状态码错误的情况</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/12/6/16ed6cadc8ca4f3a?w=1024&amp;h=2163&amp;f=gif&amp;s=330080\" alt=\"简单codeerror请求\"></p>\n<ol start=\"4\">\n<li>简单的post请求</li>\n</ol>\n<p>模拟简单的post请求</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/12/6/16ed6cadd237505e?w=1024&amp;h=2163&amp;f=gif&amp;s=935163\" alt=\"简单post请求\"></p>\n<ol start=\"4\">\n<li>异步线程回调模拟</li>\n</ol>\n<p>模拟异步线程回调模拟</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/12/6/16ed6cadca174625?w=1024&amp;h=2163&amp;f=gif&amp;s=1181851\" alt=\"io\"></p>\n<h2 id=\"如何封装\"><a href=\"#如何封装\" class=\"headerlink\" title=\"如何封装\"></a>如何封装</h2><ol>\n<li>BaseEntity 请求默认返回结构<br>BaseEntity暂时不支持自定义结构,后续会增加此部分的自定义情况</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求默认返回格式</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     \"status\": 200,</span></span><br><span class=\"line\"><span class=\"comment\">//     \"message\": \"success\",</span></span><br><span class=\"line\"><span class=\"comment\">//     \"data\": &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseEntity</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> SUCCESS_CODE = <span class=\"number\">200</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> status;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSuccess</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getCode() == SUCCESS_CODE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCode</span><span class=\"params\">(<span class=\"keyword\">int</span> code)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getMsg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMsg</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(T data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>. BaseObserver请求回调处理,包含每个请求的成功与失败以及统一的情况处理</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseObserver</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span>&lt;<span class=\"title\">BaseEntity</span>&lt;<span class=\"title\">T</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否经过统一处理, 默认均使用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> userUniteDeal = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BaseObserverInterface baseObserverInterface;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setBaseObserverInterface</span><span class=\"params\">(BaseObserverInterface baseObserverInterface)</span> </span>&#123;</span><br><span class=\"line\">        BaseObserver.baseObserverInterface = baseObserverInterface;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseObserver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseObserver</span><span class=\"params\">(<span class=\"keyword\">boolean</span> useLoading)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userUniteDeal = useLoading;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Disposable d)</span> </span>&#123;</span><br><span class=\"line\">        onRequestStart();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(BaseEntity&lt;T&gt; tBaseEntity)</span> </span>&#123;</span><br><span class=\"line\">        onRequestEnd();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tBaseEntity.isSuccess()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                onSuccees(tBaseEntity);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                onCodeError(tBaseEntity);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">        onRequestEnd();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> ConnectException</span><br><span class=\"line\">                    || e <span class=\"keyword\">instanceof</span> TimeoutException</span><br><span class=\"line\">                    || e <span class=\"keyword\">instanceof</span> NetworkErrorException</span><br><span class=\"line\">                    || e <span class=\"keyword\">instanceof</span> UnknownHostException) &#123;</span><br><span class=\"line\">                onFailure(e, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                onFailure(e, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e1) &#123;</span><br><span class=\"line\">            e1.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> t</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     * 网络请求成功, 状态码错误</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCodeError</span><span class=\"params\">(BaseEntity&lt;T&gt; t)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        baseObserverInterface.onCodeError(t.getCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> t</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     * 请求成功(网络及状态码code)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccees</span><span class=\"params\">(BaseEntity&lt;T&gt; t)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> e</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> isNetWorkError 是否是网络错误</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     * 网络请求失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Throwable e, <span class=\"keyword\">boolean</span> isNetWorkError)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 网络请求开始</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (userUniteDeal) &#123;</span><br><span class=\"line\">            baseObserverInterface.onRequestStart();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 网络请求完成(包括成功及失败)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestEnd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (userUniteDeal) &#123;</span><br><span class=\"line\">            baseObserverInterface.onRequestEnd();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>相关代码可以访问我的<a href=\"https://github.com/clwater/LikelyHttp.git\" target=\"_blank\" rel=\"noopener\">GitHub</a></p>"},{"title":"Android View 相关源码分析之五 RelativeLayout 源码分析","date":"2017-02-03T09:59:16.000Z","_content":"## RelativeLayout  源码分析\n> 继承自ViewGroup 没有重载onDraw方法 内部子View又是相对 只要计算出View的坐标 layout过程同样简单\n\n### measure过程\n#### 主要过程\n1. 将内部View根据纵向关系和横向关系排序\n2. 初始化相关变量\n3. 遍历水平关系的View\n4. 遍历竖直关系的View\n5. baseline计算\n6. 宽度和高度修正\n\n  <!-- more -->\n\n\n\n#### 1 将内部View根据纵向关系和横向关系排序\n>layout_toRightOf 为横向关系  layout_below为纵向关系\n\n```java\n    //首先会根据mDirtyHierarchy的值判断是否需要将子View重新排序\n    if (mDirtyHierarchy) {\n        mDirtyHierarchy = false;\n        sortChildren();\n    }\n```\n相关调用方法\n```java\n    //mDirtyHierarchy的值只有在requestLayout方法下被更新\n    public void requestLayout() {\n        super.requestLayout();\n        mDirtyHierarchy = true;\n    }\n\n    //sortChildren()方法对横向纵向关系的view的数组进行非空判断 用DependencyGraph进行判断\n    private void sortChildren() {\n        final int count = getChildCount();\n        if (mSortedVerticalChildren == null || mSortedVerticalChildren.length != count) {\n            mSortedVerticalChildren = new View[count];\n        }\n\n        if (mSortedHorizontalChildren == null || mSortedHorizontalChildren.length != count) {\n            mSortedHorizontalChildren = new View[count];\n        }\n\n        final DependencyGraph graph = mGraph;\n        graph.clear();\n\n        for (int i = 0; i < count; i++) {\n            graph.add(getChildAt(i));\n        }\n\n        graph.getSortedViews(mSortedVerticalChildren, RULES_VERTICAL);\n        graph.getSortedViews(mSortedHorizontalChildren, RULES_HORIZONTAL);\n    }\n```\n**DependencyGraph的相关方法**\n```java\n    private static class DependencyGraph {\n        ...\n        /**\n         * Adds a view to the graph.\n         *\n         * @param view The view to be added as a node to the graph.\n         */\n        void add(View view) {\n            //因为是图 根据view生成一个节点\n            final int id = view.getId();\n            final Node node = Node.acquire(view);\n            //如果是有效的id 则将该节点添加到List中\n            if (id != View.NO_ID) {\n                mKeyNodes.put(id, node);\n            }\n\n            mNodes.add(node);\n        }     \n\n          /**\n           * Builds a sorted list of views. The sorting order depends on the dependencies\n           * between the view. For instance, if view C needs view A to be processed first\n           * and view A needs view B to be processed first, the dependency graph\n           * is: B -> A -> C. The sorted array will contain views B, A and C in this order.\n           *\n           * @param sorted The sorted list of views. The length of this array must\n           *        be equal to getChildCount().\n           * @param rules The list of rules to take into account.\n           */\n          void getSortedViews(View[] sorted, int... rules) {\n            //当前View找不到其它的可依赖的View时  作为root节点\n              final ArrayDeque<Node> roots = findRoots(rules);\n              int index = 0;\n\n              Node node;\n              //读取root的下一个node\n              while ((node = roots.pollLast()) != null) {\n                  final View view = node.view;\n                  final int key = view.getId();\n\n              //将符合规则的View加到 sorted中\n\n                  sorted[index++] = view;\n\n                  final ArrayMap<Node, DependencyGraph> dependents = node.dependents;\n                  //dependents 依赖该node的node  (A C依赖B 则B的dependents中存A C)\n                  final int count = dependents.size();\n                  //遍历所有依赖自己的node\n                  for (int i = 0; i < count; i++) {\n                      final Node dependent = dependents.keyAt(i);\n                      //dependencies 是被依赖的的node的规则和node(A 依赖 B D 则dependencies存有B D )\n                      final SparseArray<Node> dependencies = dependent.dependencies;\n\n                      //移除当前node和dependencies的依赖关系\n                      dependencies.remove(key);\n                      //如果解除依赖后没有其它依赖 则将该node也视为rootNode\n                      if (dependencies.size() == 0) {\n                          roots.add(dependent);\n                      }\n                  }\n              }\n\n              if (index < sorted.length) {\n                  throw new IllegalStateException(\"Circular dependencies cannot exist in RelativeLayout\");\n              }\n          }\n  ...\n}\n```\neg: A依赖B B依赖C 首先存入C 因为不依赖任何其它的\n\n```java\n\n        /**\n         * Finds the roots of the graph. A root is a node with no dependency and\n         * with [0..n] dependents.\n         *\n         * @param rulesFilter The list of rules to consider when building the\n         *        dependencies\n         *\n         * @return A list of node, each being a root of the graph\n         */\n        private ArrayDeque<Node> findRoots(int[] rulesFilter) {\n          //keyNodes为nodelist\n            final SparseArray<Node> keyNodes = mKeyNodes;\n            final ArrayList<Node> nodes = mNodes;\n            final int count = nodes.size();\n\n          //初始化依赖该node的node和该node依赖的node相关参数\n            for (int i = 0; i < count; i++) {\n                final Node node = nodes.get(i);\n                node.dependents.clear();\n                node.dependencies.clear();\n            }\n\n\n            //遍历所有node  存入当前view和他所依赖的关系\n            for (int i = 0; i < count; i++) {\n                final Node node = nodes.get(i);\n\n                final LayoutParams layoutParams = (LayoutParams) node.view.getLayoutParams();\n                //取出当前View所有的依赖关系\n                final int[] rules = layoutParams.mRules;\n                final int rulesCount = rulesFilter.length;\n\n                //遍历当前View所有的\n                for (int j = 0; j < rulesCount; j++) {\n                  //rule对应被依赖view的id\n                    final int rule = rules[rulesFilter[j]];\n                    if (rule > 0) {\n                        //找到被依赖的node\n                        final Node dependency = keyNodes.get(rule);\n                        //跳过空view和本身\n                        if (dependency == null || dependency == node) {\n                            continue;\n                        }\n                        //添加依赖被依赖的node\n                        dependency.dependents.put(node, this);\n                        node.dependencies.put(rule, dependency);\n                    }\n                }\n            }\n\n            final ArrayDeque<Node> roots = mRoots;\n            roots.clear();\n\n            // 再次遍历  如果该node的依赖关系为0 即该view不依赖任何view 则视为rootView\n            for (int i = 0; i < count; i++) {\n                final Node node = nodes.get(i);\n                if (node.dependencies.size() == 0) roots.addLast(node);\n            }\n\n            return roots;\n        }\n```\n\n#### 2 初始化相关变量\n```java\n  int myWidth = -1;\n  int myHeight = -1;\n\n  int width = 0;\n  int height = 0;\n\n  final int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n  final int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n  final int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n  final int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n\n  // 如果不是UNSPECIFIED模式 则将widthSize赋值于myWidth\n  if (widthMode != MeasureSpec.UNSPECIFIED) {\n      myWidth = widthSize;\n  }\n  // 如果不是UNSPECIFIED模式 则将heightSize赋值于myHeight\n  if (heightMode != MeasureSpec.UNSPECIFIED) {\n      myHeight = heightSize;\n  }\n  //如果是EXACTLY模式 则将myWidth和myHeight记录\n  if (widthMode == MeasureSpec.EXACTLY) {\n      width = myWidth;\n  }\n\n  if (heightMode == MeasureSpec.EXACTLY) {\n      height = myHeight;\n  }\n\n  View ignore = null;\n  //判断是否为Start 和  top 确定左上角坐标\n  int gravity = mGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;\n  final boolean horizontalGravity = gravity != Gravity.START && gravity != 0;\n  gravity = mGravity & Gravity.VERTICAL_GRAVITY_MASK;\n  final boolean verticalGravity = gravity != Gravity.TOP && gravity != 0;\n\n  int left = Integer.MAX_VALUE;\n  int top = Integer.MAX_VALUE;\n  int right = Integer.MIN_VALUE;\n  int bottom = Integer.MIN_VALUE;\n\n  boolean offsetHorizontalAxis = false;\n  boolean offsetVerticalAxis = false;\n  // 记录ignore的view\n  if ((horizontalGravity || verticalGravity) && mIgnoreGravity != View.NO_ID) {\n      ignore = findViewById(mIgnoreGravity);\n  }\n  //宽度个高度是否为warp模式\n  final boolean isWrapContentWidth = widthMode != MeasureSpec.EXACTLY;\n  final boolean isWrapContentHeight = heightMode != MeasureSpec.EXACTLY;\n\n  //在计算和分配的子View的坐标的时候 需要用到父VIew的尺寸 但是暂时无法拿到准确值(待完成下面操作)\n  //先使用默认值代替 在计算后 用偏移量更新真是坐标\n  final int layoutDirection = getLayoutDirection();\n  if (isLayoutRtl() && myWidth == -1) {\n      myWidth = DEFAULT_WIDTH;\n  }\n```\n\n#### 3  遍历水平关系的View\n```java\n    View[] views = mSortedHorizontalChildren;\n    int count = views.length;\n\n    for (int i = 0; i < count; i++) {\n        View child = views[i];\n        if (child.getVisibility() != GONE) {\n            LayoutParams params = (LayoutParams) child.getLayoutParams();\n            //根据方向获得子View中设置的规则\n            int[] rules = params.getRules(layoutDirection);\n            //将左右方向规则转换为左右的坐标\n            applyHorizontalSizeRules(params, myWidth, rules);\n            //测算水平方向的子View的尺寸\n            measureChildHorizontal(child, params, myWidth, myHeight);\n            //确定水平方向子View的位置\n            if (positionChildHorizontal(child, params, myWidth, isWrapContentWidth)) {\n                offsetHorizontalAxis = true;\n            }\n        }\n    }\n\n```\n相关方法\n```java\n    private void applyHorizontalSizeRules(LayoutParams childParams, int myWidth, int[] rules) {\n        RelativeLayout.LayoutParams anchorParams;\n        childParams.mLeft = VALUE_NOT_SET;\n        childParams.mRight = VALUE_NOT_SET;\n        //得到当前子View的layout_toLeftOf属性对应的View\n        anchorParams = getRelatedViewParams(rules, LEFT_OF);\n        if (anchorParams != null) {\n          //如果这个属性存在 则当前子View的右坐标是layout_toLeftOf对应的view的左坐标减去对应view的marginLeft的值和自身marginRight的值\n            childParams.mRight = anchorParams.mLeft - (anchorParams.leftMargin +\n                    childParams.rightMargin);\n        //如果alignWithParent为true alignWithParent取alignWithParentIfMissing\n        //如果layout_toLeftOf的view为空 或者gone 则将RelativeLayout当做被依赖的对象\n        } else if (childParams.alignWithParent && rules[LEFT_OF] != 0) {\n            //如果父容器RelativeLayout的宽度大于0\n            //则子View的右坐标为 父RelativeLayout的宽度减去 mPaddingRight 和自身的marginRight\n            if (myWidth >= 0) {\n                childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;\n            }\n        }\n\n        //类似的方法 得到左坐标(通过参数RIGHT_OF)\n        anchorParams = getRelatedViewParams(rules, RIGHT_OF);\n        if (anchorParams != null) {\n            childParams.mLeft = anchorParams.mRight + (anchorParams.rightMargin +\n                    childParams.leftMargin);\n        } else if (childParams.alignWithParent && rules[RIGHT_OF] != 0) {\n            childParams.mLeft = mPaddingLeft + childParams.leftMargin;\n        }\n        //类似的方法 得到左坐标 (通过参数ALIGN_LEFT)\n        anchorParams = getRelatedViewParams(rules, ALIGN_LEFT);\n        if (anchorParams != null) {\n            childParams.mLeft = anchorParams.mLeft + childParams.leftMargin;\n        } else if (childParams.alignWithParent && rules[ALIGN_LEFT] != 0) {\n            childParams.mLeft = mPaddingLeft + childParams.leftMargin;\n        }\n        //类似的方法 得到右坐标 (通过参数ALIGN_RIGHT)\n        anchorParams = getRelatedViewParams(rules, ALIGN_RIGHT);\n        if (anchorParams != null) {\n            childParams.mRight = anchorParams.mRight - childParams.rightMargin;\n        } else if (childParams.alignWithParent && rules[ALIGN_RIGHT] != 0) {\n            if (myWidth >= 0) {\n                childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;\n            }\n        }\n        //根据ALIGN_PARENT_LEFT 将自己放到父RelativeLayout的左边\n        if (0 != rules[ALIGN_PARENT_LEFT]) {\n            childParams.mLeft = mPaddingLeft + childParams.leftMargin;\n        }\n        //根据ALIGN_PARENT_RIGHT 将自己放到父RelativeLayout的右边\n        if (0 != rules[ALIGN_PARENT_RIGHT]) {\n            if (myWidth >= 0) {\n                childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;\n            }\n        }\n    }\n```\n```java\nprivate void measureChildHorizontal(View child, LayoutParams params, int myWidth, int myHeight) {\n  //获得child的宽度MeasureSpec\n    final int childWidthMeasureSpec = getChildMeasureSpec(params.mLeft, params.mRight,\n            params.width, params.leftMargin, params.rightMargin, mPaddingLeft, mPaddingRight,\n            myWidth);\n\n    final int childHeightMeasureSpec;\n    //在低于4.2的时候 mAllowBrokenMeasureSpecs为true\n    //当myHeight < 0 时 则根据父RelativeLayout设置其MeasureSpec模式\n    if (myHeight < 0 && !mAllowBrokenMeasureSpecs) {\n        //如果父RelativeLayout的height大于0  则 设置子view的MeasureSpec模式为EXACTLY\n        if (params.height >= 0) {\n            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(\n                    params.height, MeasureSpec.EXACTLY);\n        } else {\n            //反之 如果其小于0  则设置子View的MeasureSpec为UNSPECIFIED\n            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED);\n        }\n    } else {\n      //当当前myHeight >= 0\n      //判断当前高度是否与父RelativeLayout高度相同 设置heightMode\n      //根据maxHeight 和heightMode设置子View的MeasureSpec模式\n        final int maxHeight;\n        if (mMeasureVerticalWithPaddingMargin) {\n            maxHeight = Math.max(0, myHeight - mPaddingTop - mPaddingBottom\n                    - params.topMargin - params.bottomMargin);\n        } else {\n            maxHeight = Math.max(0, myHeight);\n        }\n        final int heightMode;\n        if (params.height == LayoutParams.MATCH_PARENT) {\n            heightMode = MeasureSpec.EXACTLY;\n        } else {\n            heightMode = MeasureSpec.AT_MOST;\n        }\n        childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(maxHeight, heightMode);\n    }\n    //获得了子View的WidthMeasureSpec和HeightMeasureSpec\n    //子View可以通过measure方法获取自身的size\n    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n}\n```\n```java\n/**\n    * Get a measure spec that accounts for all of the constraints on this view.\n    * This includes size constraints imposed by the RelativeLayout as well as\n    * the View's desired dimension.\n    *\n    * @param childStart The left or top field of the child's layout params\n    * @param childEnd The right or bottom field of the child's layout params\n    * @param childSize The child's desired size (the width or height field of\n    *        the child's layout params)\n    * @param startMargin The left or top margin\n    * @param endMargin The right or bottom margin\n    * @param startPadding mPaddingLeft or mPaddingTop\n    * @param endPadding mPaddingRight or mPaddingBottom\n    * @param mySize The width or height of this view (the RelativeLayout)\n    * @return MeasureSpec for the child\n    */\n   private int getChildMeasureSpec(int childStart, int childEnd,\n           int childSize, int startMargin, int endMargin, int startPadding,\n           int endPadding, int mySize) {\n       int childSpecMode = 0;\n       int childSpecSize = 0;\n\n       final boolean isUnspecified = mySize < 0;\n       //如果父RelativeLayout宽度小于0 版本号不小于4.2\n       if (isUnspecified && !mAllowBrokenMeasureSpecs) {\n            //如果子View的左边距和右边距都不为VALUE_NOT_SET\n            //且右边距坐标大于左边距坐标 则将其差当做宽度赋予View 设置模式为EXACTLY\n            //VALUE_NOT_SET = Integer.MIN_VALUE\n            /**\n             * Constant for the minimum {@code int} value, -2<sup>31</sup>.\n             */\n            //public static final int MIN_VALUE = 0x80000000;\n           if (childStart != VALUE_NOT_SET && childEnd != VALUE_NOT_SET) {\n               childSpecSize = Math.max(0, childEnd - childStart);\n               childSpecMode = MeasureSpec.EXACTLY;\n           } else if (childSize >= 0) {\n               // 如果childSpecSize >= 0 则赋值于childSpecSize\n               //同样设置模式为EXACTLY\n               childSpecSize = childSize;\n               childSpecMode = MeasureSpec.EXACTLY;\n           } else {\n               // 都不满足则设置模式为UNSPECIFIED\n               childSpecSize = 0;\n               childSpecMode = MeasureSpec.UNSPECIFIED;\n           }\n\n           return MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);\n       }\n\n       // 计算 开始和结束相关\n       int tempStart = childStart;\n       int tempEnd = childEnd;\n\n       //如果没有指定start值 则默认赋予 padding和merage的值\n       if (tempStart == VALUE_NOT_SET) {\n           tempStart = startPadding + startMargin;\n       }\n       //同上\n       if (tempEnd == VALUE_NOT_SET) {\n           tempEnd = mySize - endPadding - endMargin;\n       }\n\n       //指定最大可提供的大小\n       final int maxAvailable = tempEnd - tempStart;\n\n       if (childStart != VALUE_NOT_SET && childEnd != VALUE_NOT_SET) {\n           //如果Start和End都是有效值 根据isUnspecified设置specMode为UNSPECIFIED或EXACTLY\n           //并将设置对应的size\n           childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;\n           childSpecSize = Math.max(0, maxAvailable);\n       } else {\n          //反之 判断childSize的相关值\n           if (childSize >= 0) {\n               //设置模式为EXACTLY\n               //判断maxAvailable和childSize情况 取较大值设置为childSpecSize\n               childSpecMode = MeasureSpec.EXACTLY;\n\n               if (maxAvailable >= 0) {\n                   // We have a maximum size in this dimension.\n                   childSpecSize = Math.min(maxAvailable, childSize);\n               } else {\n                   // We can grow in this dimension.\n                   childSpecSize = childSize;\n               }\n           } else if (childSize == LayoutParams.MATCH_PARENT) {\n               //如果子View是match模式 参照isUnspecified设置相关\n               childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;\n               childSpecSize = Math.max(0, maxAvailable);\n           } else if (childSize == LayoutParams.WRAP_CONTENT) {\n               //在wrap进行设置\n               if (maxAvailable >= 0) {\n                   // We have a maximum size in this dimension.\n                   childSpecMode = MeasureSpec.AT_MOST;\n                   childSpecSize = maxAvailable;\n               } else {\n                   // We can grow in this dimension. Child can be as big as it\n                   // wants.\n                   childSpecMode = MeasureSpec.UNSPECIFIED;\n                   childSpecSize = 0;\n               }\n           }\n       }\n\n       return MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);\n   }\n```\n以上 完成了View的第一次测量  确定了View的大小 然后根据大小觉得把子view放在父RelativeLayout中的位置\n\n```java\nprivate boolean positionChildHorizontal(View child, LayoutParams params, int myWidth,\n        boolean wrapContent) {\n    //获取RelativeLayout的布局方向\n    final int layoutDirection = getLayoutDirection();\n    int[] rules = params.getRules(layoutDirection);\n\n    if (params.mLeft == VALUE_NOT_SET && params.mRight != VALUE_NOT_SET) {\n        // 如果右边界有效 左边界无效 根据右边界计算出左边界\n        params.mLeft = params.mRight - child.getMeasuredWidth();\n    } else if (params.mLeft != VALUE_NOT_SET && params.mRight == VALUE_NOT_SET) {\n        // 同上反之\n        params.mRight = params.mLeft + child.getMeasuredWidth();\n    } else if (params.mLeft == VALUE_NOT_SET && params.mRight == VALUE_NOT_SET) {\n        //都无效的时候\n\n        if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_HORIZONTAL] != 0) {\n          //设置了CENTER_IN_PARENT或者 CENTER_HORIZONTAL的情况下\n            if (!wrapContent) {\n              //非wrap情况下\n              //把子View水平中心固定在RelativeLayout的中心\n                centerHorizontal(child, params, myWidth);\n            } else {\n               //左边距为padding+margin\n               //右边距为左边距加上测量宽度\n                params.mLeft = mPaddingLeft + params.leftMargin;\n                params.mRight = params.mLeft + child.getMeasuredWidth();\n            }\n            return true;\n        } else {\n            //RTL右到左 布局方向\n            //LTR\u0010左到右 布局方向\n            if (isLayoutRtl()) {\n                params.mRight = myWidth - mPaddingRight- params.rightMargin;\n                params.mLeft = params.mRight - child.getMeasuredWidth();\n            } else {\n                params.mLeft = mPaddingLeft + params.leftMargin;\n                params.mRight = params.mLeft + child.getMeasuredWidth();\n            }\n        }\n    }\n    return rules[ALIGN_PARENT_END] != 0;\n    //当为CENTER_IN_PARENT  CENTER_HORIZONTAL ALIGN_PARENT_END三种情况之一时返回True\n}\n```\n\n#### 4 遍历竖直关系的View\n```java\n...\n  for (int i = 0; i < count; i++) {\n           final View child = views[i];\n           if (child.getVisibility() != GONE) {\n               final LayoutParams params = (LayoutParams) child.getLayoutParams();\n              //将竖直方向规则转换为坐标\n               applyVerticalSizeRules(params, myHeight, child.getBaseline());\n               //测量子View\n               measureChild(child, params, myWidth, myHeight);\n               //确定竖直方向子View的位置\n               if (positionChildVertical(child, params, myHeight, isWrapContentHeight)) {\n                   offsetVerticalAxis = true;\n               }\n              //首先判断是否为wrap模式\n               if (isWrapContentWidth) {\n                 //根据RTL或者LTR和版本进行区分\n                 //Build.VERSION_CODES.KITKAT = 19\n                 //主要对margin进行处理\n                   if (isLayoutRtl()) {\n                       if (targetSdkVersion < Build.VERSION_CODES.KITKAT) {\n                           width = Math.max(width, myWidth - params.mLeft);\n                       } else {\n                           width = Math.max(width, myWidth - params.mLeft - params.leftMargin);\n                       }\n                   } else {\n                       if (targetSdkVersion < Build.VERSION_CODES.KITKAT) {\n                           width = Math.max(width, params.mRight);\n                       } else {\n                           width = Math.max(width, params.mRight + params.rightMargin);\n                       }\n                   }\n               }\n               if (isWrapContentHeight) {\n                   if (targetSdkVersion < Build.VERSION_CODES.KITKAT) {\n                       height = Math.max(height, params.mBottom);\n                   } else {\n                       height = Math.max(height, params.mBottom + params.bottomMargin);\n                   }\n               }\n\n               if (child != ignore || verticalGravity) {\n                   left = Math.min(left, params.mLeft - params.leftMargin);\n                   top = Math.min(top, params.mTop - params.topMargin);\n               }\n\n               if (child != ignore || horizontalGravity) {\n                   right = Math.max(right, params.mRight + params.rightMargin);\n                   bottom = Math.max(bottom, params.mBottom + params.bottomMargin);\n               }\n           }\n       }\n...\n```\n\n#### 5 baseline计算\n```java\n// Use the top-start-most laid out view as the baseline. RTL offsets are\n// applied later, so we can use the left-most edge as the starting edge.\n    View baselineView = null;\n    LayoutParams baselineParams = null;\n    for (int i = 0; i < count; i++) {\n        final View child = views[i];\n        if (child.getVisibility() != GONE) {\n            final LayoutParams childParams = (LayoutParams) child.getLayoutParams();\n            if (baselineView == null || baselineParams == null\n                    || compareLayoutPosition(childParams, baselineParams) < 0) {\n                baselineView = child;\n                baselineParams = childParams;\n            }\n        }\n    }\n    mBaselineView = baselineView;\n```\n\n#### 6 宽度和高度修正\n```java\n    //如何是wrap模式\n    if (isWrapContentWidth) {\n            width += mPaddingRight;\n\n            if (mLayoutParams != null && mLayoutParams.width >= 0) {\n                width = Math.max(width, mLayoutParams.width);\n            }\n\n            width = Math.max(width, getSuggestedMinimumWidth());\n            width = resolveSize(width, widthMeasureSpec);\n\n            //在得到最后的width之后 对依赖RelativeLayout的子View添上偏移量\n            if (offsetHorizontalAxis) {\n                for (int i = 0; i < count; i++) {\n                    final View child = views[i];\n                    if (child.getVisibility() != GONE) {\n                        final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                        final int[] rules = params.getRules(layoutDirection);\n                        //对CENTER_IN_PARENT或者CENTER_HORIZONTAL的子View重测\n                        if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_HORIZONTAL] != 0) {\n                            centerHorizontal(child, params, width);\n                        //对ALIGN_PARENT_RIGHT重测\n                        } else if (rules[ALIGN_PARENT_RIGHT] != 0) {\n                            final int childWidth = child.getMeasuredWidth();\n                            params.mLeft = width - mPaddingRight - childWidth;\n                            params.mRight = params.mLeft + childWidth;\n                        }\n                    }\n                }\n            }\n        }\n        //同上\n        if (isWrapContentHeight) {\n            height += mPaddingBottom;\n\n            if (mLayoutParams != null && mLayoutParams.height >= 0) {\n                height = Math.max(height, mLayoutParams.height);\n            }\n\n            height = Math.max(height, getSuggestedMinimumHeight());\n            height = resolveSize(height, heightMeasureSpec);\n\n            if (offsetVerticalAxis) {\n                for (int i = 0; i < count; i++) {\n                    final View child = views[i];\n                    if (child.getVisibility() != GONE) {\n                        final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                        final int[] rules = params.getRules(layoutDirection);\n                        if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_VERTICAL] != 0) {\n                            centerVertical(child, params, height);\n                        } else if (rules[ALIGN_PARENT_BOTTOM] != 0) {\n                            final int childHeight = child.getMeasuredHeight();\n                            params.mTop = height - mPaddingBottom - childHeight;\n                            params.mBottom = params.mTop + childHeight;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        //根据gravity再次修正\n        if (horizontalGravity || verticalGravity) {\n            final Rect selfBounds = mSelfBounds;\n            selfBounds.set(mPaddingLeft, mPaddingTop, width - mPaddingRight,\n                    height - mPaddingBottom);\n\n            final Rect contentBounds = mContentBounds;\n            Gravity.apply(mGravity, right - left, bottom - top, selfBounds, contentBounds,\n                    layoutDirection);\n\n            final int horizontalOffset = contentBounds.left - left;\n            final int verticalOffset = contentBounds.top - top;\n            if (horizontalOffset != 0 || verticalOffset != 0) {\n                for (int i = 0; i < count; i++) {\n                    final View child = views[i];\n                    if (child.getVisibility() != GONE && child != ignore) {\n                        final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                        if (horizontalGravity) {\n                            params.mLeft += horizontalOffset;\n                            params.mRight += horizontalOffset;\n                        }\n                        if (verticalGravity) {\n                            params.mTop += verticalOffset;\n                            params.mBottom += verticalOffset;\n                        }\n                    }\n                }\n            }\n        }\n\n        //如果是RTL(右到左显示)则再次修改\n        if (isLayoutRtl()) {\n            final int offsetWidth = myWidth - width;\n            for (int i = 0; i < count; i++) {\n                final View child = views[i];\n                if (child.getVisibility() != GONE) {\n                    final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                    params.mLeft -= offsetWidth;\n                    params.mRight -= offsetWidth;\n                }\n            }\n        }\n```\n#### 简单总结\nRelativeLayout更加关注子View的left right top bottom值 并且优先级高于width和height\n\n\n\n### RelativeLayout的layout过程\n对于RelativeLayout来的 layout过程更多的根据子View的left right top bottom值来设定位置\n```java\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        //  The layout has actually already been performed and the positions\n        //  cached.  Apply the cached values to the children.\n        final int count = getChildCount();\n\n        for (int i = 0; i < count; i++) {\n            View child = getChildAt(i);\n            if (child.getVisibility() != GONE) {\n                RelativeLayout.LayoutParams st =\n                        (RelativeLayout.LayoutParams) child.getLayoutParams();\n                child.layout(st.mLeft, st.mTop, st.mRight, st.mBottom);\n            }\n        }\n    }\n```\n\n### RelativeLayout的draw过程\nRelativeLayout作为ViewGroup的子类 因为其性质原因  没有对draw过程进行修改\n\n\n以上\n","source":"_posts/RelativeLayout 源码分析.md","raw":"---\ntitle: Android View 相关源码分析之五 RelativeLayout 源码分析\ndate: 2017-02-03 17:59:16\ntags: [\"android\" , \"view\" , \"源码\"]\ncategories: \"android\"\n---\n## RelativeLayout  源码分析\n> 继承自ViewGroup 没有重载onDraw方法 内部子View又是相对 只要计算出View的坐标 layout过程同样简单\n\n### measure过程\n#### 主要过程\n1. 将内部View根据纵向关系和横向关系排序\n2. 初始化相关变量\n3. 遍历水平关系的View\n4. 遍历竖直关系的View\n5. baseline计算\n6. 宽度和高度修正\n\n  <!-- more -->\n\n\n\n#### 1 将内部View根据纵向关系和横向关系排序\n>layout_toRightOf 为横向关系  layout_below为纵向关系\n\n```java\n    //首先会根据mDirtyHierarchy的值判断是否需要将子View重新排序\n    if (mDirtyHierarchy) {\n        mDirtyHierarchy = false;\n        sortChildren();\n    }\n```\n相关调用方法\n```java\n    //mDirtyHierarchy的值只有在requestLayout方法下被更新\n    public void requestLayout() {\n        super.requestLayout();\n        mDirtyHierarchy = true;\n    }\n\n    //sortChildren()方法对横向纵向关系的view的数组进行非空判断 用DependencyGraph进行判断\n    private void sortChildren() {\n        final int count = getChildCount();\n        if (mSortedVerticalChildren == null || mSortedVerticalChildren.length != count) {\n            mSortedVerticalChildren = new View[count];\n        }\n\n        if (mSortedHorizontalChildren == null || mSortedHorizontalChildren.length != count) {\n            mSortedHorizontalChildren = new View[count];\n        }\n\n        final DependencyGraph graph = mGraph;\n        graph.clear();\n\n        for (int i = 0; i < count; i++) {\n            graph.add(getChildAt(i));\n        }\n\n        graph.getSortedViews(mSortedVerticalChildren, RULES_VERTICAL);\n        graph.getSortedViews(mSortedHorizontalChildren, RULES_HORIZONTAL);\n    }\n```\n**DependencyGraph的相关方法**\n```java\n    private static class DependencyGraph {\n        ...\n        /**\n         * Adds a view to the graph.\n         *\n         * @param view The view to be added as a node to the graph.\n         */\n        void add(View view) {\n            //因为是图 根据view生成一个节点\n            final int id = view.getId();\n            final Node node = Node.acquire(view);\n            //如果是有效的id 则将该节点添加到List中\n            if (id != View.NO_ID) {\n                mKeyNodes.put(id, node);\n            }\n\n            mNodes.add(node);\n        }     \n\n          /**\n           * Builds a sorted list of views. The sorting order depends on the dependencies\n           * between the view. For instance, if view C needs view A to be processed first\n           * and view A needs view B to be processed first, the dependency graph\n           * is: B -> A -> C. The sorted array will contain views B, A and C in this order.\n           *\n           * @param sorted The sorted list of views. The length of this array must\n           *        be equal to getChildCount().\n           * @param rules The list of rules to take into account.\n           */\n          void getSortedViews(View[] sorted, int... rules) {\n            //当前View找不到其它的可依赖的View时  作为root节点\n              final ArrayDeque<Node> roots = findRoots(rules);\n              int index = 0;\n\n              Node node;\n              //读取root的下一个node\n              while ((node = roots.pollLast()) != null) {\n                  final View view = node.view;\n                  final int key = view.getId();\n\n              //将符合规则的View加到 sorted中\n\n                  sorted[index++] = view;\n\n                  final ArrayMap<Node, DependencyGraph> dependents = node.dependents;\n                  //dependents 依赖该node的node  (A C依赖B 则B的dependents中存A C)\n                  final int count = dependents.size();\n                  //遍历所有依赖自己的node\n                  for (int i = 0; i < count; i++) {\n                      final Node dependent = dependents.keyAt(i);\n                      //dependencies 是被依赖的的node的规则和node(A 依赖 B D 则dependencies存有B D )\n                      final SparseArray<Node> dependencies = dependent.dependencies;\n\n                      //移除当前node和dependencies的依赖关系\n                      dependencies.remove(key);\n                      //如果解除依赖后没有其它依赖 则将该node也视为rootNode\n                      if (dependencies.size() == 0) {\n                          roots.add(dependent);\n                      }\n                  }\n              }\n\n              if (index < sorted.length) {\n                  throw new IllegalStateException(\"Circular dependencies cannot exist in RelativeLayout\");\n              }\n          }\n  ...\n}\n```\neg: A依赖B B依赖C 首先存入C 因为不依赖任何其它的\n\n```java\n\n        /**\n         * Finds the roots of the graph. A root is a node with no dependency and\n         * with [0..n] dependents.\n         *\n         * @param rulesFilter The list of rules to consider when building the\n         *        dependencies\n         *\n         * @return A list of node, each being a root of the graph\n         */\n        private ArrayDeque<Node> findRoots(int[] rulesFilter) {\n          //keyNodes为nodelist\n            final SparseArray<Node> keyNodes = mKeyNodes;\n            final ArrayList<Node> nodes = mNodes;\n            final int count = nodes.size();\n\n          //初始化依赖该node的node和该node依赖的node相关参数\n            for (int i = 0; i < count; i++) {\n                final Node node = nodes.get(i);\n                node.dependents.clear();\n                node.dependencies.clear();\n            }\n\n\n            //遍历所有node  存入当前view和他所依赖的关系\n            for (int i = 0; i < count; i++) {\n                final Node node = nodes.get(i);\n\n                final LayoutParams layoutParams = (LayoutParams) node.view.getLayoutParams();\n                //取出当前View所有的依赖关系\n                final int[] rules = layoutParams.mRules;\n                final int rulesCount = rulesFilter.length;\n\n                //遍历当前View所有的\n                for (int j = 0; j < rulesCount; j++) {\n                  //rule对应被依赖view的id\n                    final int rule = rules[rulesFilter[j]];\n                    if (rule > 0) {\n                        //找到被依赖的node\n                        final Node dependency = keyNodes.get(rule);\n                        //跳过空view和本身\n                        if (dependency == null || dependency == node) {\n                            continue;\n                        }\n                        //添加依赖被依赖的node\n                        dependency.dependents.put(node, this);\n                        node.dependencies.put(rule, dependency);\n                    }\n                }\n            }\n\n            final ArrayDeque<Node> roots = mRoots;\n            roots.clear();\n\n            // 再次遍历  如果该node的依赖关系为0 即该view不依赖任何view 则视为rootView\n            for (int i = 0; i < count; i++) {\n                final Node node = nodes.get(i);\n                if (node.dependencies.size() == 0) roots.addLast(node);\n            }\n\n            return roots;\n        }\n```\n\n#### 2 初始化相关变量\n```java\n  int myWidth = -1;\n  int myHeight = -1;\n\n  int width = 0;\n  int height = 0;\n\n  final int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n  final int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n  final int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n  final int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n\n  // 如果不是UNSPECIFIED模式 则将widthSize赋值于myWidth\n  if (widthMode != MeasureSpec.UNSPECIFIED) {\n      myWidth = widthSize;\n  }\n  // 如果不是UNSPECIFIED模式 则将heightSize赋值于myHeight\n  if (heightMode != MeasureSpec.UNSPECIFIED) {\n      myHeight = heightSize;\n  }\n  //如果是EXACTLY模式 则将myWidth和myHeight记录\n  if (widthMode == MeasureSpec.EXACTLY) {\n      width = myWidth;\n  }\n\n  if (heightMode == MeasureSpec.EXACTLY) {\n      height = myHeight;\n  }\n\n  View ignore = null;\n  //判断是否为Start 和  top 确定左上角坐标\n  int gravity = mGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;\n  final boolean horizontalGravity = gravity != Gravity.START && gravity != 0;\n  gravity = mGravity & Gravity.VERTICAL_GRAVITY_MASK;\n  final boolean verticalGravity = gravity != Gravity.TOP && gravity != 0;\n\n  int left = Integer.MAX_VALUE;\n  int top = Integer.MAX_VALUE;\n  int right = Integer.MIN_VALUE;\n  int bottom = Integer.MIN_VALUE;\n\n  boolean offsetHorizontalAxis = false;\n  boolean offsetVerticalAxis = false;\n  // 记录ignore的view\n  if ((horizontalGravity || verticalGravity) && mIgnoreGravity != View.NO_ID) {\n      ignore = findViewById(mIgnoreGravity);\n  }\n  //宽度个高度是否为warp模式\n  final boolean isWrapContentWidth = widthMode != MeasureSpec.EXACTLY;\n  final boolean isWrapContentHeight = heightMode != MeasureSpec.EXACTLY;\n\n  //在计算和分配的子View的坐标的时候 需要用到父VIew的尺寸 但是暂时无法拿到准确值(待完成下面操作)\n  //先使用默认值代替 在计算后 用偏移量更新真是坐标\n  final int layoutDirection = getLayoutDirection();\n  if (isLayoutRtl() && myWidth == -1) {\n      myWidth = DEFAULT_WIDTH;\n  }\n```\n\n#### 3  遍历水平关系的View\n```java\n    View[] views = mSortedHorizontalChildren;\n    int count = views.length;\n\n    for (int i = 0; i < count; i++) {\n        View child = views[i];\n        if (child.getVisibility() != GONE) {\n            LayoutParams params = (LayoutParams) child.getLayoutParams();\n            //根据方向获得子View中设置的规则\n            int[] rules = params.getRules(layoutDirection);\n            //将左右方向规则转换为左右的坐标\n            applyHorizontalSizeRules(params, myWidth, rules);\n            //测算水平方向的子View的尺寸\n            measureChildHorizontal(child, params, myWidth, myHeight);\n            //确定水平方向子View的位置\n            if (positionChildHorizontal(child, params, myWidth, isWrapContentWidth)) {\n                offsetHorizontalAxis = true;\n            }\n        }\n    }\n\n```\n相关方法\n```java\n    private void applyHorizontalSizeRules(LayoutParams childParams, int myWidth, int[] rules) {\n        RelativeLayout.LayoutParams anchorParams;\n        childParams.mLeft = VALUE_NOT_SET;\n        childParams.mRight = VALUE_NOT_SET;\n        //得到当前子View的layout_toLeftOf属性对应的View\n        anchorParams = getRelatedViewParams(rules, LEFT_OF);\n        if (anchorParams != null) {\n          //如果这个属性存在 则当前子View的右坐标是layout_toLeftOf对应的view的左坐标减去对应view的marginLeft的值和自身marginRight的值\n            childParams.mRight = anchorParams.mLeft - (anchorParams.leftMargin +\n                    childParams.rightMargin);\n        //如果alignWithParent为true alignWithParent取alignWithParentIfMissing\n        //如果layout_toLeftOf的view为空 或者gone 则将RelativeLayout当做被依赖的对象\n        } else if (childParams.alignWithParent && rules[LEFT_OF] != 0) {\n            //如果父容器RelativeLayout的宽度大于0\n            //则子View的右坐标为 父RelativeLayout的宽度减去 mPaddingRight 和自身的marginRight\n            if (myWidth >= 0) {\n                childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;\n            }\n        }\n\n        //类似的方法 得到左坐标(通过参数RIGHT_OF)\n        anchorParams = getRelatedViewParams(rules, RIGHT_OF);\n        if (anchorParams != null) {\n            childParams.mLeft = anchorParams.mRight + (anchorParams.rightMargin +\n                    childParams.leftMargin);\n        } else if (childParams.alignWithParent && rules[RIGHT_OF] != 0) {\n            childParams.mLeft = mPaddingLeft + childParams.leftMargin;\n        }\n        //类似的方法 得到左坐标 (通过参数ALIGN_LEFT)\n        anchorParams = getRelatedViewParams(rules, ALIGN_LEFT);\n        if (anchorParams != null) {\n            childParams.mLeft = anchorParams.mLeft + childParams.leftMargin;\n        } else if (childParams.alignWithParent && rules[ALIGN_LEFT] != 0) {\n            childParams.mLeft = mPaddingLeft + childParams.leftMargin;\n        }\n        //类似的方法 得到右坐标 (通过参数ALIGN_RIGHT)\n        anchorParams = getRelatedViewParams(rules, ALIGN_RIGHT);\n        if (anchorParams != null) {\n            childParams.mRight = anchorParams.mRight - childParams.rightMargin;\n        } else if (childParams.alignWithParent && rules[ALIGN_RIGHT] != 0) {\n            if (myWidth >= 0) {\n                childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;\n            }\n        }\n        //根据ALIGN_PARENT_LEFT 将自己放到父RelativeLayout的左边\n        if (0 != rules[ALIGN_PARENT_LEFT]) {\n            childParams.mLeft = mPaddingLeft + childParams.leftMargin;\n        }\n        //根据ALIGN_PARENT_RIGHT 将自己放到父RelativeLayout的右边\n        if (0 != rules[ALIGN_PARENT_RIGHT]) {\n            if (myWidth >= 0) {\n                childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;\n            }\n        }\n    }\n```\n```java\nprivate void measureChildHorizontal(View child, LayoutParams params, int myWidth, int myHeight) {\n  //获得child的宽度MeasureSpec\n    final int childWidthMeasureSpec = getChildMeasureSpec(params.mLeft, params.mRight,\n            params.width, params.leftMargin, params.rightMargin, mPaddingLeft, mPaddingRight,\n            myWidth);\n\n    final int childHeightMeasureSpec;\n    //在低于4.2的时候 mAllowBrokenMeasureSpecs为true\n    //当myHeight < 0 时 则根据父RelativeLayout设置其MeasureSpec模式\n    if (myHeight < 0 && !mAllowBrokenMeasureSpecs) {\n        //如果父RelativeLayout的height大于0  则 设置子view的MeasureSpec模式为EXACTLY\n        if (params.height >= 0) {\n            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(\n                    params.height, MeasureSpec.EXACTLY);\n        } else {\n            //反之 如果其小于0  则设置子View的MeasureSpec为UNSPECIFIED\n            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED);\n        }\n    } else {\n      //当当前myHeight >= 0\n      //判断当前高度是否与父RelativeLayout高度相同 设置heightMode\n      //根据maxHeight 和heightMode设置子View的MeasureSpec模式\n        final int maxHeight;\n        if (mMeasureVerticalWithPaddingMargin) {\n            maxHeight = Math.max(0, myHeight - mPaddingTop - mPaddingBottom\n                    - params.topMargin - params.bottomMargin);\n        } else {\n            maxHeight = Math.max(0, myHeight);\n        }\n        final int heightMode;\n        if (params.height == LayoutParams.MATCH_PARENT) {\n            heightMode = MeasureSpec.EXACTLY;\n        } else {\n            heightMode = MeasureSpec.AT_MOST;\n        }\n        childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(maxHeight, heightMode);\n    }\n    //获得了子View的WidthMeasureSpec和HeightMeasureSpec\n    //子View可以通过measure方法获取自身的size\n    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n}\n```\n```java\n/**\n    * Get a measure spec that accounts for all of the constraints on this view.\n    * This includes size constraints imposed by the RelativeLayout as well as\n    * the View's desired dimension.\n    *\n    * @param childStart The left or top field of the child's layout params\n    * @param childEnd The right or bottom field of the child's layout params\n    * @param childSize The child's desired size (the width or height field of\n    *        the child's layout params)\n    * @param startMargin The left or top margin\n    * @param endMargin The right or bottom margin\n    * @param startPadding mPaddingLeft or mPaddingTop\n    * @param endPadding mPaddingRight or mPaddingBottom\n    * @param mySize The width or height of this view (the RelativeLayout)\n    * @return MeasureSpec for the child\n    */\n   private int getChildMeasureSpec(int childStart, int childEnd,\n           int childSize, int startMargin, int endMargin, int startPadding,\n           int endPadding, int mySize) {\n       int childSpecMode = 0;\n       int childSpecSize = 0;\n\n       final boolean isUnspecified = mySize < 0;\n       //如果父RelativeLayout宽度小于0 版本号不小于4.2\n       if (isUnspecified && !mAllowBrokenMeasureSpecs) {\n            //如果子View的左边距和右边距都不为VALUE_NOT_SET\n            //且右边距坐标大于左边距坐标 则将其差当做宽度赋予View 设置模式为EXACTLY\n            //VALUE_NOT_SET = Integer.MIN_VALUE\n            /**\n             * Constant for the minimum {@code int} value, -2<sup>31</sup>.\n             */\n            //public static final int MIN_VALUE = 0x80000000;\n           if (childStart != VALUE_NOT_SET && childEnd != VALUE_NOT_SET) {\n               childSpecSize = Math.max(0, childEnd - childStart);\n               childSpecMode = MeasureSpec.EXACTLY;\n           } else if (childSize >= 0) {\n               // 如果childSpecSize >= 0 则赋值于childSpecSize\n               //同样设置模式为EXACTLY\n               childSpecSize = childSize;\n               childSpecMode = MeasureSpec.EXACTLY;\n           } else {\n               // 都不满足则设置模式为UNSPECIFIED\n               childSpecSize = 0;\n               childSpecMode = MeasureSpec.UNSPECIFIED;\n           }\n\n           return MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);\n       }\n\n       // 计算 开始和结束相关\n       int tempStart = childStart;\n       int tempEnd = childEnd;\n\n       //如果没有指定start值 则默认赋予 padding和merage的值\n       if (tempStart == VALUE_NOT_SET) {\n           tempStart = startPadding + startMargin;\n       }\n       //同上\n       if (tempEnd == VALUE_NOT_SET) {\n           tempEnd = mySize - endPadding - endMargin;\n       }\n\n       //指定最大可提供的大小\n       final int maxAvailable = tempEnd - tempStart;\n\n       if (childStart != VALUE_NOT_SET && childEnd != VALUE_NOT_SET) {\n           //如果Start和End都是有效值 根据isUnspecified设置specMode为UNSPECIFIED或EXACTLY\n           //并将设置对应的size\n           childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;\n           childSpecSize = Math.max(0, maxAvailable);\n       } else {\n          //反之 判断childSize的相关值\n           if (childSize >= 0) {\n               //设置模式为EXACTLY\n               //判断maxAvailable和childSize情况 取较大值设置为childSpecSize\n               childSpecMode = MeasureSpec.EXACTLY;\n\n               if (maxAvailable >= 0) {\n                   // We have a maximum size in this dimension.\n                   childSpecSize = Math.min(maxAvailable, childSize);\n               } else {\n                   // We can grow in this dimension.\n                   childSpecSize = childSize;\n               }\n           } else if (childSize == LayoutParams.MATCH_PARENT) {\n               //如果子View是match模式 参照isUnspecified设置相关\n               childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;\n               childSpecSize = Math.max(0, maxAvailable);\n           } else if (childSize == LayoutParams.WRAP_CONTENT) {\n               //在wrap进行设置\n               if (maxAvailable >= 0) {\n                   // We have a maximum size in this dimension.\n                   childSpecMode = MeasureSpec.AT_MOST;\n                   childSpecSize = maxAvailable;\n               } else {\n                   // We can grow in this dimension. Child can be as big as it\n                   // wants.\n                   childSpecMode = MeasureSpec.UNSPECIFIED;\n                   childSpecSize = 0;\n               }\n           }\n       }\n\n       return MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);\n   }\n```\n以上 完成了View的第一次测量  确定了View的大小 然后根据大小觉得把子view放在父RelativeLayout中的位置\n\n```java\nprivate boolean positionChildHorizontal(View child, LayoutParams params, int myWidth,\n        boolean wrapContent) {\n    //获取RelativeLayout的布局方向\n    final int layoutDirection = getLayoutDirection();\n    int[] rules = params.getRules(layoutDirection);\n\n    if (params.mLeft == VALUE_NOT_SET && params.mRight != VALUE_NOT_SET) {\n        // 如果右边界有效 左边界无效 根据右边界计算出左边界\n        params.mLeft = params.mRight - child.getMeasuredWidth();\n    } else if (params.mLeft != VALUE_NOT_SET && params.mRight == VALUE_NOT_SET) {\n        // 同上反之\n        params.mRight = params.mLeft + child.getMeasuredWidth();\n    } else if (params.mLeft == VALUE_NOT_SET && params.mRight == VALUE_NOT_SET) {\n        //都无效的时候\n\n        if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_HORIZONTAL] != 0) {\n          //设置了CENTER_IN_PARENT或者 CENTER_HORIZONTAL的情况下\n            if (!wrapContent) {\n              //非wrap情况下\n              //把子View水平中心固定在RelativeLayout的中心\n                centerHorizontal(child, params, myWidth);\n            } else {\n               //左边距为padding+margin\n               //右边距为左边距加上测量宽度\n                params.mLeft = mPaddingLeft + params.leftMargin;\n                params.mRight = params.mLeft + child.getMeasuredWidth();\n            }\n            return true;\n        } else {\n            //RTL右到左 布局方向\n            //LTR\u0010左到右 布局方向\n            if (isLayoutRtl()) {\n                params.mRight = myWidth - mPaddingRight- params.rightMargin;\n                params.mLeft = params.mRight - child.getMeasuredWidth();\n            } else {\n                params.mLeft = mPaddingLeft + params.leftMargin;\n                params.mRight = params.mLeft + child.getMeasuredWidth();\n            }\n        }\n    }\n    return rules[ALIGN_PARENT_END] != 0;\n    //当为CENTER_IN_PARENT  CENTER_HORIZONTAL ALIGN_PARENT_END三种情况之一时返回True\n}\n```\n\n#### 4 遍历竖直关系的View\n```java\n...\n  for (int i = 0; i < count; i++) {\n           final View child = views[i];\n           if (child.getVisibility() != GONE) {\n               final LayoutParams params = (LayoutParams) child.getLayoutParams();\n              //将竖直方向规则转换为坐标\n               applyVerticalSizeRules(params, myHeight, child.getBaseline());\n               //测量子View\n               measureChild(child, params, myWidth, myHeight);\n               //确定竖直方向子View的位置\n               if (positionChildVertical(child, params, myHeight, isWrapContentHeight)) {\n                   offsetVerticalAxis = true;\n               }\n              //首先判断是否为wrap模式\n               if (isWrapContentWidth) {\n                 //根据RTL或者LTR和版本进行区分\n                 //Build.VERSION_CODES.KITKAT = 19\n                 //主要对margin进行处理\n                   if (isLayoutRtl()) {\n                       if (targetSdkVersion < Build.VERSION_CODES.KITKAT) {\n                           width = Math.max(width, myWidth - params.mLeft);\n                       } else {\n                           width = Math.max(width, myWidth - params.mLeft - params.leftMargin);\n                       }\n                   } else {\n                       if (targetSdkVersion < Build.VERSION_CODES.KITKAT) {\n                           width = Math.max(width, params.mRight);\n                       } else {\n                           width = Math.max(width, params.mRight + params.rightMargin);\n                       }\n                   }\n               }\n               if (isWrapContentHeight) {\n                   if (targetSdkVersion < Build.VERSION_CODES.KITKAT) {\n                       height = Math.max(height, params.mBottom);\n                   } else {\n                       height = Math.max(height, params.mBottom + params.bottomMargin);\n                   }\n               }\n\n               if (child != ignore || verticalGravity) {\n                   left = Math.min(left, params.mLeft - params.leftMargin);\n                   top = Math.min(top, params.mTop - params.topMargin);\n               }\n\n               if (child != ignore || horizontalGravity) {\n                   right = Math.max(right, params.mRight + params.rightMargin);\n                   bottom = Math.max(bottom, params.mBottom + params.bottomMargin);\n               }\n           }\n       }\n...\n```\n\n#### 5 baseline计算\n```java\n// Use the top-start-most laid out view as the baseline. RTL offsets are\n// applied later, so we can use the left-most edge as the starting edge.\n    View baselineView = null;\n    LayoutParams baselineParams = null;\n    for (int i = 0; i < count; i++) {\n        final View child = views[i];\n        if (child.getVisibility() != GONE) {\n            final LayoutParams childParams = (LayoutParams) child.getLayoutParams();\n            if (baselineView == null || baselineParams == null\n                    || compareLayoutPosition(childParams, baselineParams) < 0) {\n                baselineView = child;\n                baselineParams = childParams;\n            }\n        }\n    }\n    mBaselineView = baselineView;\n```\n\n#### 6 宽度和高度修正\n```java\n    //如何是wrap模式\n    if (isWrapContentWidth) {\n            width += mPaddingRight;\n\n            if (mLayoutParams != null && mLayoutParams.width >= 0) {\n                width = Math.max(width, mLayoutParams.width);\n            }\n\n            width = Math.max(width, getSuggestedMinimumWidth());\n            width = resolveSize(width, widthMeasureSpec);\n\n            //在得到最后的width之后 对依赖RelativeLayout的子View添上偏移量\n            if (offsetHorizontalAxis) {\n                for (int i = 0; i < count; i++) {\n                    final View child = views[i];\n                    if (child.getVisibility() != GONE) {\n                        final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                        final int[] rules = params.getRules(layoutDirection);\n                        //对CENTER_IN_PARENT或者CENTER_HORIZONTAL的子View重测\n                        if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_HORIZONTAL] != 0) {\n                            centerHorizontal(child, params, width);\n                        //对ALIGN_PARENT_RIGHT重测\n                        } else if (rules[ALIGN_PARENT_RIGHT] != 0) {\n                            final int childWidth = child.getMeasuredWidth();\n                            params.mLeft = width - mPaddingRight - childWidth;\n                            params.mRight = params.mLeft + childWidth;\n                        }\n                    }\n                }\n            }\n        }\n        //同上\n        if (isWrapContentHeight) {\n            height += mPaddingBottom;\n\n            if (mLayoutParams != null && mLayoutParams.height >= 0) {\n                height = Math.max(height, mLayoutParams.height);\n            }\n\n            height = Math.max(height, getSuggestedMinimumHeight());\n            height = resolveSize(height, heightMeasureSpec);\n\n            if (offsetVerticalAxis) {\n                for (int i = 0; i < count; i++) {\n                    final View child = views[i];\n                    if (child.getVisibility() != GONE) {\n                        final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                        final int[] rules = params.getRules(layoutDirection);\n                        if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_VERTICAL] != 0) {\n                            centerVertical(child, params, height);\n                        } else if (rules[ALIGN_PARENT_BOTTOM] != 0) {\n                            final int childHeight = child.getMeasuredHeight();\n                            params.mTop = height - mPaddingBottom - childHeight;\n                            params.mBottom = params.mTop + childHeight;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        //根据gravity再次修正\n        if (horizontalGravity || verticalGravity) {\n            final Rect selfBounds = mSelfBounds;\n            selfBounds.set(mPaddingLeft, mPaddingTop, width - mPaddingRight,\n                    height - mPaddingBottom);\n\n            final Rect contentBounds = mContentBounds;\n            Gravity.apply(mGravity, right - left, bottom - top, selfBounds, contentBounds,\n                    layoutDirection);\n\n            final int horizontalOffset = contentBounds.left - left;\n            final int verticalOffset = contentBounds.top - top;\n            if (horizontalOffset != 0 || verticalOffset != 0) {\n                for (int i = 0; i < count; i++) {\n                    final View child = views[i];\n                    if (child.getVisibility() != GONE && child != ignore) {\n                        final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                        if (horizontalGravity) {\n                            params.mLeft += horizontalOffset;\n                            params.mRight += horizontalOffset;\n                        }\n                        if (verticalGravity) {\n                            params.mTop += verticalOffset;\n                            params.mBottom += verticalOffset;\n                        }\n                    }\n                }\n            }\n        }\n\n        //如果是RTL(右到左显示)则再次修改\n        if (isLayoutRtl()) {\n            final int offsetWidth = myWidth - width;\n            for (int i = 0; i < count; i++) {\n                final View child = views[i];\n                if (child.getVisibility() != GONE) {\n                    final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                    params.mLeft -= offsetWidth;\n                    params.mRight -= offsetWidth;\n                }\n            }\n        }\n```\n#### 简单总结\nRelativeLayout更加关注子View的left right top bottom值 并且优先级高于width和height\n\n\n\n### RelativeLayout的layout过程\n对于RelativeLayout来的 layout过程更多的根据子View的left right top bottom值来设定位置\n```java\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        //  The layout has actually already been performed and the positions\n        //  cached.  Apply the cached values to the children.\n        final int count = getChildCount();\n\n        for (int i = 0; i < count; i++) {\n            View child = getChildAt(i);\n            if (child.getVisibility() != GONE) {\n                RelativeLayout.LayoutParams st =\n                        (RelativeLayout.LayoutParams) child.getLayoutParams();\n                child.layout(st.mLeft, st.mTop, st.mRight, st.mBottom);\n            }\n        }\n    }\n```\n\n### RelativeLayout的draw过程\nRelativeLayout作为ViewGroup的子类 因为其性质原因  没有对draw过程进行修改\n\n\n以上\n","slug":"RelativeLayout 源码分析","published":1,"updated":"2020-03-13T09:33:05.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dv000oq7dq2fxl57lp","content":"<h2 id=\"RelativeLayout-源码分析\"><a href=\"#RelativeLayout-源码分析\" class=\"headerlink\" title=\"RelativeLayout  源码分析\"></a>RelativeLayout  源码分析</h2><blockquote>\n<p>继承自ViewGroup 没有重载onDraw方法 内部子View又是相对 只要计算出View的坐标 layout过程同样简单</p>\n</blockquote>\n<h3 id=\"measure过程\"><a href=\"#measure过程\" class=\"headerlink\" title=\"measure过程\"></a>measure过程</h3><h4 id=\"主要过程\"><a href=\"#主要过程\" class=\"headerlink\" title=\"主要过程\"></a>主要过程</h4><ol>\n<li>将内部View根据纵向关系和横向关系排序</li>\n<li>初始化相关变量</li>\n<li>遍历水平关系的View</li>\n<li>遍历竖直关系的View</li>\n<li>baseline计算</li>\n<li><p>宽度和高度修正</p>\n<a id=\"more\"></a>\n</li>\n</ol>\n<h4 id=\"1-将内部View根据纵向关系和横向关系排序\"><a href=\"#1-将内部View根据纵向关系和横向关系排序\" class=\"headerlink\" title=\"1 将内部View根据纵向关系和横向关系排序\"></a>1 将内部View根据纵向关系和横向关系排序</h4><blockquote>\n<p>layout_toRightOf 为横向关系  layout_below为纵向关系</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先会根据mDirtyHierarchy的值判断是否需要将子View重新排序</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (mDirtyHierarchy) &#123;</span><br><span class=\"line\">    mDirtyHierarchy = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    sortChildren();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相关调用方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mDirtyHierarchy的值只有在requestLayout方法下被更新</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">requestLayout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.requestLayout();</span><br><span class=\"line\">    mDirtyHierarchy = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sortChildren()方法对横向纵向关系的view的数组进行非空判断 用DependencyGraph进行判断</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sortChildren</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getChildCount();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mSortedVerticalChildren == <span class=\"keyword\">null</span> || mSortedVerticalChildren.length != count) &#123;</span><br><span class=\"line\">        mSortedVerticalChildren = <span class=\"keyword\">new</span> View[count];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mSortedHorizontalChildren == <span class=\"keyword\">null</span> || mSortedHorizontalChildren.length != count) &#123;</span><br><span class=\"line\">        mSortedHorizontalChildren = <span class=\"keyword\">new</span> View[count];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> DependencyGraph graph = mGraph;</span><br><span class=\"line\">    graph.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        graph.add(getChildAt(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    graph.getSortedViews(mSortedVerticalChildren, RULES_VERTICAL);</span><br><span class=\"line\">    graph.getSortedViews(mSortedHorizontalChildren, RULES_HORIZONTAL);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>DependencyGraph的相关方法</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DependencyGraph</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * Adds a view to the graph.</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> view The view to be added as a node to the graph.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//因为是图 根据view生成一个节点</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id = view.getId();</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Node node = Node.acquire(view);</span><br><span class=\"line\">            <span class=\"comment\">//如果是有效的id 则将该节点添加到List中</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (id != View.NO_ID) &#123;</span><br><span class=\"line\">                mKeyNodes.put(id, node);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            mNodes.add(node);</span><br><span class=\"line\">        &#125;     </span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">           * Builds a sorted list of views. The sorting order depends on the dependencies</span></span><br><span class=\"line\"><span class=\"comment\">           * between the view. For instance, if view C needs view A to be processed first</span></span><br><span class=\"line\"><span class=\"comment\">           * and view A needs view B to be processed first, the dependency graph</span></span><br><span class=\"line\"><span class=\"comment\">           * is: B -&gt; A -&gt; C. The sorted array will contain views B, A and C in this order.</span></span><br><span class=\"line\"><span class=\"comment\">           *</span></span><br><span class=\"line\"><span class=\"comment\">           * <span class=\"doctag\">@param</span> sorted The sorted list of views. The length of this array must</span></span><br><span class=\"line\"><span class=\"comment\">           *        be equal to getChildCount().</span></span><br><span class=\"line\"><span class=\"comment\">           * <span class=\"doctag\">@param</span> rules The list of rules to take into account.</span></span><br><span class=\"line\"><span class=\"comment\">           */</span></span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getSortedViews</span><span class=\"params\">(View[] sorted, <span class=\"keyword\">int</span>... rules)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//当前View找不到其它的可依赖的View时  作为root节点</span></span><br><span class=\"line\">              <span class=\"keyword\">final</span> ArrayDeque&lt;Node&gt; roots = findRoots(rules);</span><br><span class=\"line\">              <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">              Node node;</span><br><span class=\"line\">              <span class=\"comment\">//读取root的下一个node</span></span><br><span class=\"line\">              <span class=\"keyword\">while</span> ((node = roots.pollLast()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">final</span> View view = node.view;</span><br><span class=\"line\">                  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> key = view.getId();</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"comment\">//将符合规则的View加到 sorted中</span></span><br><span class=\"line\"></span><br><span class=\"line\">                  sorted[index++] = view;</span><br><span class=\"line\"></span><br><span class=\"line\">                  <span class=\"keyword\">final</span> ArrayMap&lt;Node, DependencyGraph&gt; dependents = node.dependents;</span><br><span class=\"line\">                  <span class=\"comment\">//dependents 依赖该node的node  (A C依赖B 则B的dependents中存A C)</span></span><br><span class=\"line\">                  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = dependents.size();</span><br><span class=\"line\">                  <span class=\"comment\">//遍历所有依赖自己的node</span></span><br><span class=\"line\">                  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">                      <span class=\"keyword\">final</span> Node dependent = dependents.keyAt(i);</span><br><span class=\"line\">                      <span class=\"comment\">//dependencies 是被依赖的的node的规则和node(A 依赖 B D 则dependencies存有B D )</span></span><br><span class=\"line\">                      <span class=\"keyword\">final</span> SparseArray&lt;Node&gt; dependencies = dependent.dependencies;</span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"comment\">//移除当前node和dependencies的依赖关系</span></span><br><span class=\"line\">                      dependencies.remove(key);</span><br><span class=\"line\">                      <span class=\"comment\">//如果解除依赖后没有其它依赖 则将该node也视为rootNode</span></span><br><span class=\"line\">                      <span class=\"keyword\">if</span> (dependencies.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                          roots.add(dependent);</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (index &lt; sorted.length) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Circular dependencies cannot exist in RelativeLayout\"</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>eg: A依赖B B依赖C 首先存入C 因为不依赖任何其它的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Finds the roots of the graph. A root is a node with no dependency and</span></span><br><span class=\"line\"><span class=\"comment\"> * with [0..n] dependents.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> rulesFilter The list of rules to consider when building the</span></span><br><span class=\"line\"><span class=\"comment\"> *        dependencies</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> A list of node, each being a root of the graph</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ArrayDeque&lt;Node&gt; <span class=\"title\">findRoots</span><span class=\"params\">(<span class=\"keyword\">int</span>[] rulesFilter)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//keyNodes为nodelist</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> SparseArray&lt;Node&gt; keyNodes = mKeyNodes;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ArrayList&lt;Node&gt; nodes = mNodes;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = nodes.size();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//初始化依赖该node的node和该node依赖的node相关参数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Node node = nodes.get(i);</span><br><span class=\"line\">        node.dependents.clear();</span><br><span class=\"line\">        node.dependencies.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历所有node  存入当前view和他所依赖的关系</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Node node = nodes.get(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> LayoutParams layoutParams = (LayoutParams) node.view.getLayoutParams();</span><br><span class=\"line\">        <span class=\"comment\">//取出当前View所有的依赖关系</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] rules = layoutParams.mRules;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> rulesCount = rulesFilter.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//遍历当前View所有的</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; rulesCount; j++) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//rule对应被依赖view的id</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> rule = rules[rulesFilter[j]];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rule &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//找到被依赖的node</span></span><br><span class=\"line\">                <span class=\"keyword\">final</span> Node dependency = keyNodes.get(rule);</span><br><span class=\"line\">                <span class=\"comment\">//跳过空view和本身</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dependency == <span class=\"keyword\">null</span> || dependency == node) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//添加依赖被依赖的node</span></span><br><span class=\"line\">                dependency.dependents.put(node, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">                node.dependencies.put(rule, dependency);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> ArrayDeque&lt;Node&gt; roots = mRoots;</span><br><span class=\"line\">    roots.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 再次遍历  如果该node的依赖关系为0 即该view不依赖任何view 则视为rootView</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Node node = nodes.get(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.dependencies.size() == <span class=\"number\">0</span>) roots.addLast(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> roots;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-初始化相关变量\"><a href=\"#2-初始化相关变量\" class=\"headerlink\" title=\"2 初始化相关变量\"></a>2 初始化相关变量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> myWidth = -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> myHeight = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> width = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> height = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果不是UNSPECIFIED模式 则将widthSize赋值于myWidth</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (widthMode != MeasureSpec.UNSPECIFIED) &#123;</span><br><span class=\"line\">    myWidth = widthSize;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 如果不是UNSPECIFIED模式 则将heightSize赋值于myHeight</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (heightMode != MeasureSpec.UNSPECIFIED) &#123;</span><br><span class=\"line\">    myHeight = heightSize;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果是EXACTLY模式 则将myWidth和myHeight记录</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;</span><br><span class=\"line\">    width = myWidth;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (heightMode == MeasureSpec.EXACTLY) &#123;</span><br><span class=\"line\">    height = myHeight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">View ignore = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">//判断是否为Start 和  top 确定左上角坐标</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> gravity = mGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> horizontalGravity = gravity != Gravity.START &amp;&amp; gravity != <span class=\"number\">0</span>;</span><br><span class=\"line\">gravity = mGravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> verticalGravity = gravity != Gravity.TOP &amp;&amp; gravity != <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> left = Integer.MAX_VALUE;</span><br><span class=\"line\"><span class=\"keyword\">int</span> top = Integer.MAX_VALUE;</span><br><span class=\"line\"><span class=\"keyword\">int</span> right = Integer.MIN_VALUE;</span><br><span class=\"line\"><span class=\"keyword\">int</span> bottom = Integer.MIN_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> offsetHorizontalAxis = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> offsetVerticalAxis = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">// 记录ignore的view</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((horizontalGravity || verticalGravity) &amp;&amp; mIgnoreGravity != View.NO_ID) &#123;</span><br><span class=\"line\">    ignore = findViewById(mIgnoreGravity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//宽度个高度是否为warp模式</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isWrapContentWidth = widthMode != MeasureSpec.EXACTLY;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isWrapContentHeight = heightMode != MeasureSpec.EXACTLY;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在计算和分配的子View的坐标的时候 需要用到父VIew的尺寸 但是暂时无法拿到准确值(待完成下面操作)</span></span><br><span class=\"line\"><span class=\"comment\">//先使用默认值代替 在计算后 用偏移量更新真是坐标</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isLayoutRtl() &amp;&amp; myWidth == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    myWidth = DEFAULT_WIDTH;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-遍历水平关系的View\"><a href=\"#3-遍历水平关系的View\" class=\"headerlink\" title=\"3  遍历水平关系的View\"></a>3  遍历水平关系的View</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View[] views = mSortedHorizontalChildren;</span><br><span class=\"line\"><span class=\"keyword\">int</span> count = views.length;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">    View child = views[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">        LayoutParams params = (LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">        <span class=\"comment\">//根据方向获得子View中设置的规则</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</span><br><span class=\"line\">        <span class=\"comment\">//将左右方向规则转换为左右的坐标</span></span><br><span class=\"line\">        applyHorizontalSizeRules(params, myWidth, rules);</span><br><span class=\"line\">        <span class=\"comment\">//测算水平方向的子View的尺寸</span></span><br><span class=\"line\">        measureChildHorizontal(child, params, myWidth, myHeight);</span><br><span class=\"line\">        <span class=\"comment\">//确定水平方向子View的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (positionChildHorizontal(child, params, myWidth, isWrapContentWidth)) &#123;</span><br><span class=\"line\">            offsetHorizontalAxis = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相关方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">applyHorizontalSizeRules</span><span class=\"params\">(LayoutParams childParams, <span class=\"keyword\">int</span> myWidth, <span class=\"keyword\">int</span>[] rules)</span> </span>&#123;</span><br><span class=\"line\">    RelativeLayout.LayoutParams anchorParams;</span><br><span class=\"line\">    childParams.mLeft = VALUE_NOT_SET;</span><br><span class=\"line\">    childParams.mRight = VALUE_NOT_SET;</span><br><span class=\"line\">    <span class=\"comment\">//得到当前子View的layout_toLeftOf属性对应的View</span></span><br><span class=\"line\">    anchorParams = getRelatedViewParams(rules, LEFT_OF);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果这个属性存在 则当前子View的右坐标是layout_toLeftOf对应的view的左坐标减去对应view的marginLeft的值和自身marginRight的值</span></span><br><span class=\"line\">        childParams.mRight = anchorParams.mLeft - (anchorParams.leftMargin +</span><br><span class=\"line\">                childParams.rightMargin);</span><br><span class=\"line\">    <span class=\"comment\">//如果alignWithParent为true alignWithParent取alignWithParentIfMissing</span></span><br><span class=\"line\">    <span class=\"comment\">//如果layout_toLeftOf的view为空 或者gone 则将RelativeLayout当做被依赖的对象</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[LEFT_OF] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果父容器RelativeLayout的宽度大于0</span></span><br><span class=\"line\">        <span class=\"comment\">//则子View的右坐标为 父RelativeLayout的宽度减去 mPaddingRight 和自身的marginRight</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (myWidth &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//类似的方法 得到左坐标(通过参数RIGHT_OF)</span></span><br><span class=\"line\">    anchorParams = getRelatedViewParams(rules, RIGHT_OF);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        childParams.mLeft = anchorParams.mRight + (anchorParams.rightMargin +</span><br><span class=\"line\">                childParams.leftMargin);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[RIGHT_OF] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        childParams.mLeft = mPaddingLeft + childParams.leftMargin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//类似的方法 得到左坐标 (通过参数ALIGN_LEFT)</span></span><br><span class=\"line\">    anchorParams = getRelatedViewParams(rules, ALIGN_LEFT);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        childParams.mLeft = anchorParams.mLeft + childParams.leftMargin;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[ALIGN_LEFT] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        childParams.mLeft = mPaddingLeft + childParams.leftMargin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//类似的方法 得到右坐标 (通过参数ALIGN_RIGHT)</span></span><br><span class=\"line\">    anchorParams = getRelatedViewParams(rules, ALIGN_RIGHT);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        childParams.mRight = anchorParams.mRight - childParams.rightMargin;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[ALIGN_RIGHT] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (myWidth &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//根据ALIGN_PARENT_LEFT 将自己放到父RelativeLayout的左边</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> != rules[ALIGN_PARENT_LEFT]) &#123;</span><br><span class=\"line\">        childParams.mLeft = mPaddingLeft + childParams.leftMargin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//根据ALIGN_PARENT_RIGHT 将自己放到父RelativeLayout的右边</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> != rules[ALIGN_PARENT_RIGHT]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (myWidth &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildHorizontal</span><span class=\"params\">(View child, LayoutParams params, <span class=\"keyword\">int</span> myWidth, <span class=\"keyword\">int</span> myHeight)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//获得child的宽度MeasureSpec</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(params.mLeft, params.mRight,</span><br><span class=\"line\">            params.width, params.leftMargin, params.rightMargin, mPaddingLeft, mPaddingRight,</span><br><span class=\"line\">            myWidth);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec;</span><br><span class=\"line\">    <span class=\"comment\">//在低于4.2的时候 mAllowBrokenMeasureSpecs为true</span></span><br><span class=\"line\">    <span class=\"comment\">//当myHeight &lt; 0 时 则根据父RelativeLayout设置其MeasureSpec模式</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (myHeight &lt; <span class=\"number\">0</span> &amp;&amp; !mAllowBrokenMeasureSpecs) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果父RelativeLayout的height大于0  则 设置子view的MeasureSpec模式为EXACTLY</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (params.height &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(</span><br><span class=\"line\">                    params.height, MeasureSpec.EXACTLY);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//反之 如果其小于0  则设置子View的MeasureSpec为UNSPECIFIED</span></span><br><span class=\"line\">            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(<span class=\"number\">0</span>, MeasureSpec.UNSPECIFIED);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//当当前myHeight &gt;= 0</span></span><br><span class=\"line\">      <span class=\"comment\">//判断当前高度是否与父RelativeLayout高度相同 设置heightMode</span></span><br><span class=\"line\">      <span class=\"comment\">//根据maxHeight 和heightMode设置子View的MeasureSpec模式</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maxHeight;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mMeasureVerticalWithPaddingMargin) &#123;</span><br><span class=\"line\">            maxHeight = Math.max(<span class=\"number\">0</span>, myHeight - mPaddingTop - mPaddingBottom</span><br><span class=\"line\">                    - params.topMargin - params.bottomMargin);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            maxHeight = Math.max(<span class=\"number\">0</span>, myHeight);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (params.height == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">            heightMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            heightMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(maxHeight, heightMode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获得了子View的WidthMeasureSpec和HeightMeasureSpec</span></span><br><span class=\"line\">    <span class=\"comment\">//子View可以通过measure方法获取自身的size</span></span><br><span class=\"line\">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Get a measure spec that accounts for all of the constraints on this view.</span></span><br><span class=\"line\"><span class=\"comment\">    * This includes size constraints imposed by the RelativeLayout as well as</span></span><br><span class=\"line\"><span class=\"comment\">    * the View's desired dimension.</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> childStart The left or top field of the child's layout params</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> childEnd The right or bottom field of the child's layout params</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> childSize The child's desired size (the width or height field of</span></span><br><span class=\"line\"><span class=\"comment\">    *        the child's layout params)</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> startMargin The left or top margin</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> endMargin The right or bottom margin</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> startPadding mPaddingLeft or mPaddingTop</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> endPadding mPaddingRight or mPaddingBottom</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> mySize The width or height of this view (the RelativeLayout)</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> MeasureSpec for the child</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> childStart, <span class=\"keyword\">int</span> childEnd,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           <span class=\"keyword\">int</span> childSize, <span class=\"keyword\">int</span> startMargin, <span class=\"keyword\">int</span> endMargin, <span class=\"keyword\">int</span> startPadding,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           <span class=\"keyword\">int</span> endPadding, <span class=\"keyword\">int</span> mySize)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> childSpecMode = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> childSpecSize = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isUnspecified = mySize &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"comment\">//如果父RelativeLayout宽度小于0 版本号不小于4.2</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (isUnspecified &amp;&amp; !mAllowBrokenMeasureSpecs) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果子View的左边距和右边距都不为VALUE_NOT_SET</span></span><br><span class=\"line\">            <span class=\"comment\">//且右边距坐标大于左边距坐标 则将其差当做宽度赋予View 设置模式为EXACTLY</span></span><br><span class=\"line\">            <span class=\"comment\">//VALUE_NOT_SET = Integer.MIN_VALUE</span></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * Constant for the minimum &#123;<span class=\"doctag\">@code</span> int&#125; value, -2&lt;sup&gt;31&lt;/sup&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"comment\">//public static final int MIN_VALUE = 0x80000000;</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (childStart != VALUE_NOT_SET &amp;&amp; childEnd != VALUE_NOT_SET) &#123;</span><br><span class=\"line\">               childSpecSize = Math.max(<span class=\"number\">0</span>, childEnd - childStart);</span><br><span class=\"line\">               childSpecMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childSize &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// 如果childSpecSize &gt;= 0 则赋值于childSpecSize</span></span><br><span class=\"line\">               <span class=\"comment\">//同样设置模式为EXACTLY</span></span><br><span class=\"line\">               childSpecSize = childSize;</span><br><span class=\"line\">               childSpecMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">// 都不满足则设置模式为UNSPECIFIED</span></span><br><span class=\"line\">               childSpecSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">               childSpecMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 计算 开始和结束相关</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> tempStart = childStart;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> tempEnd = childEnd;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//如果没有指定start值 则默认赋予 padding和merage的值</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (tempStart == VALUE_NOT_SET) &#123;</span><br><span class=\"line\">           tempStart = startPadding + startMargin;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//同上</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (tempEnd == VALUE_NOT_SET) &#123;</span><br><span class=\"line\">           tempEnd = mySize - endPadding - endMargin;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//指定最大可提供的大小</span></span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maxAvailable = tempEnd - tempStart;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (childStart != VALUE_NOT_SET &amp;&amp; childEnd != VALUE_NOT_SET) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//如果Start和End都是有效值 根据isUnspecified设置specMode为UNSPECIFIED或EXACTLY</span></span><br><span class=\"line\">           <span class=\"comment\">//并将设置对应的size</span></span><br><span class=\"line\">           childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;</span><br><span class=\"line\">           childSpecSize = Math.max(<span class=\"number\">0</span>, maxAvailable);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">//反之 判断childSize的相关值</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (childSize &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//设置模式为EXACTLY</span></span><br><span class=\"line\">               <span class=\"comment\">//判断maxAvailable和childSize情况 取较大值设置为childSpecSize</span></span><br><span class=\"line\">               childSpecMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (maxAvailable &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">// We have a maximum size in this dimension.</span></span><br><span class=\"line\">                   childSpecSize = Math.min(maxAvailable, childSize);</span><br><span class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                   <span class=\"comment\">// We can grow in this dimension.</span></span><br><span class=\"line\">                   childSpecSize = childSize;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childSize == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//如果子View是match模式 参照isUnspecified设置相关</span></span><br><span class=\"line\">               childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;</span><br><span class=\"line\">               childSpecSize = Math.max(<span class=\"number\">0</span>, maxAvailable);</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childSize == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//在wrap进行设置</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (maxAvailable &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">// We have a maximum size in this dimension.</span></span><br><span class=\"line\">                   childSpecMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">                   childSpecSize = maxAvailable;</span><br><span class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                   <span class=\"comment\">// We can grow in this dimension. Child can be as big as it</span></span><br><span class=\"line\">                   <span class=\"comment\">// wants.</span></span><br><span class=\"line\">                   childSpecMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">                   childSpecSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>以上 完成了View的第一次测量  确定了View的大小 然后根据大小觉得把子view放在父RelativeLayout中的位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">positionChildHorizontal</span><span class=\"params\">(View child, LayoutParams params, <span class=\"keyword\">int</span> myWidth,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> wrapContent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取RelativeLayout的布局方向</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (params.mLeft == VALUE_NOT_SET &amp;&amp; params.mRight != VALUE_NOT_SET) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果右边界有效 左边界无效 根据右边界计算出左边界</span></span><br><span class=\"line\">        params.mLeft = params.mRight - child.getMeasuredWidth();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params.mLeft != VALUE_NOT_SET &amp;&amp; params.mRight == VALUE_NOT_SET) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 同上反之</span></span><br><span class=\"line\">        params.mRight = params.mLeft + child.getMeasuredWidth();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params.mLeft == VALUE_NOT_SET &amp;&amp; params.mRight == VALUE_NOT_SET) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//都无效的时候</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rules[CENTER_IN_PARENT] != <span class=\"number\">0</span> || rules[CENTER_HORIZONTAL] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//设置了CENTER_IN_PARENT或者 CENTER_HORIZONTAL的情况下</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!wrapContent) &#123;</span><br><span class=\"line\">              <span class=\"comment\">//非wrap情况下</span></span><br><span class=\"line\">              <span class=\"comment\">//把子View水平中心固定在RelativeLayout的中心</span></span><br><span class=\"line\">                centerHorizontal(child, params, myWidth);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">//左边距为padding+margin</span></span><br><span class=\"line\">               <span class=\"comment\">//右边距为左边距加上测量宽度</span></span><br><span class=\"line\">                params.mLeft = mPaddingLeft + params.leftMargin;</span><br><span class=\"line\">                params.mRight = params.mLeft + child.getMeasuredWidth();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//RTL右到左 布局方向</span></span><br><span class=\"line\">            <span class=\"comment\">//LTR\u0010左到右 布局方向</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isLayoutRtl()) &#123;</span><br><span class=\"line\">                params.mRight = myWidth - mPaddingRight- params.rightMargin;</span><br><span class=\"line\">                params.mLeft = params.mRight - child.getMeasuredWidth();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                params.mLeft = mPaddingLeft + params.leftMargin;</span><br><span class=\"line\">                params.mRight = params.mLeft + child.getMeasuredWidth();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rules[ALIGN_PARENT_END] != <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//当为CENTER_IN_PARENT  CENTER_HORIZONTAL ALIGN_PARENT_END三种情况之一时返回True</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-遍历竖直关系的View\"><a href=\"#4-遍历竖直关系的View\" class=\"headerlink\" title=\"4 遍历竖直关系的View\"></a>4 遍历竖直关系的View</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">final</span> View child = views[i];</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">              <span class=\"comment\">//将竖直方向规则转换为坐标</span></span><br><span class=\"line\">               applyVerticalSizeRules(params, myHeight, child.getBaseline());</span><br><span class=\"line\">               <span class=\"comment\">//测量子View</span></span><br><span class=\"line\">               measureChild(child, params, myWidth, myHeight);</span><br><span class=\"line\">               <span class=\"comment\">//确定竖直方向子View的位置</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (positionChildVertical(child, params, myHeight, isWrapContentHeight)) &#123;</span><br><span class=\"line\">                   offsetVerticalAxis = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">              <span class=\"comment\">//首先判断是否为wrap模式</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (isWrapContentWidth) &#123;</span><br><span class=\"line\">                 <span class=\"comment\">//根据RTL或者LTR和版本进行区分</span></span><br><span class=\"line\">                 <span class=\"comment\">//Build.VERSION_CODES.KITKAT = 19</span></span><br><span class=\"line\">                 <span class=\"comment\">//主要对margin进行处理</span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (isLayoutRtl()) &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</span><br><span class=\"line\">                           width = Math.max(width, myWidth - params.mLeft);</span><br><span class=\"line\">                       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                           width = Math.max(width, myWidth - params.mLeft - params.leftMargin);</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</span><br><span class=\"line\">                           width = Math.max(width, params.mRight);</span><br><span class=\"line\">                       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                           width = Math.max(width, params.mRight + params.rightMargin);</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (isWrapContentHeight) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</span><br><span class=\"line\">                       height = Math.max(height, params.mBottom);</span><br><span class=\"line\">                   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                       height = Math.max(height, params.mBottom + params.bottomMargin);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (child != ignore || verticalGravity) &#123;</span><br><span class=\"line\">                   left = Math.min(left, params.mLeft - params.leftMargin);</span><br><span class=\"line\">                   top = Math.min(top, params.mTop - params.topMargin);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (child != ignore || horizontalGravity) &#123;</span><br><span class=\"line\">                   right = Math.max(right, params.mRight + params.rightMargin);</span><br><span class=\"line\">                   bottom = Math.max(bottom, params.mBottom + params.bottomMargin);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-baseline计算\"><a href=\"#5-baseline计算\" class=\"headerlink\" title=\"5 baseline计算\"></a>5 baseline计算</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Use the top-start-most laid out view as the baseline. RTL offsets are</span></span><br><span class=\"line\"><span class=\"comment\">// applied later, so we can use the left-most edge as the starting edge.</span></span><br><span class=\"line\">    View baselineView = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    LayoutParams baselineParams = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View child = views[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> LayoutParams childParams = (LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (baselineView == <span class=\"keyword\">null</span> || baselineParams == <span class=\"keyword\">null</span></span><br><span class=\"line\">                    || compareLayoutPosition(childParams, baselineParams) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                baselineView = child;</span><br><span class=\"line\">                baselineParams = childParams;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mBaselineView = baselineView;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-宽度和高度修正\"><a href=\"#6-宽度和高度修正\" class=\"headerlink\" title=\"6 宽度和高度修正\"></a>6 宽度和高度修正</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如何是wrap模式</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isWrapContentWidth) &#123;</span><br><span class=\"line\">        width += mPaddingRight;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mLayoutParams != <span class=\"keyword\">null</span> &amp;&amp; mLayoutParams.width &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            width = Math.max(width, mLayoutParams.width);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        width = Math.max(width, getSuggestedMinimumWidth());</span><br><span class=\"line\">        width = resolveSize(width, widthMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//在得到最后的width之后 对依赖RelativeLayout的子View添上偏移量</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (offsetHorizontalAxis) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> View child = views[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</span><br><span class=\"line\">                    <span class=\"comment\">//对CENTER_IN_PARENT或者CENTER_HORIZONTAL的子View重测</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (rules[CENTER_IN_PARENT] != <span class=\"number\">0</span> || rules[CENTER_HORIZONTAL] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        centerHorizontal(child, params, width);</span><br><span class=\"line\">                    <span class=\"comment\">//对ALIGN_PARENT_RIGHT重测</span></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rules[ALIGN_PARENT_RIGHT] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = child.getMeasuredWidth();</span><br><span class=\"line\">                        params.mLeft = width - mPaddingRight - childWidth;</span><br><span class=\"line\">                        params.mRight = params.mLeft + childWidth;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//同上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isWrapContentHeight) &#123;</span><br><span class=\"line\">        height += mPaddingBottom;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mLayoutParams != <span class=\"keyword\">null</span> &amp;&amp; mLayoutParams.height &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            height = Math.max(height, mLayoutParams.height);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        height = Math.max(height, getSuggestedMinimumHeight());</span><br><span class=\"line\">        height = resolveSize(height, heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (offsetVerticalAxis) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> View child = views[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (rules[CENTER_IN_PARENT] != <span class=\"number\">0</span> || rules[CENTER_VERTICAL] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        centerVertical(child, params, height);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rules[ALIGN_PARENT_BOTTOM] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</span><br><span class=\"line\">                        params.mTop = height - mPaddingBottom - childHeight;</span><br><span class=\"line\">                        params.mBottom = params.mTop + childHeight;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据gravity再次修正</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (horizontalGravity || verticalGravity) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Rect selfBounds = mSelfBounds;</span><br><span class=\"line\">        selfBounds.set(mPaddingLeft, mPaddingTop, width - mPaddingRight,</span><br><span class=\"line\">                height - mPaddingBottom);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Rect contentBounds = mContentBounds;</span><br><span class=\"line\">        Gravity.apply(mGravity, right - left, bottom - top, selfBounds, contentBounds,</span><br><span class=\"line\">                layoutDirection);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> horizontalOffset = contentBounds.left - left;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> verticalOffset = contentBounds.top - top;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (horizontalOffset != <span class=\"number\">0</span> || verticalOffset != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> View child = views[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (child.getVisibility() != GONE &amp;&amp; child != ignore) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (horizontalGravity) &#123;</span><br><span class=\"line\">                        params.mLeft += horizontalOffset;</span><br><span class=\"line\">                        params.mRight += horizontalOffset;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (verticalGravity) &#123;</span><br><span class=\"line\">                        params.mTop += verticalOffset;</span><br><span class=\"line\">                        params.mBottom += verticalOffset;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果是RTL(右到左显示)则再次修改</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isLayoutRtl()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> offsetWidth = myWidth - width;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View child = views[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">                params.mLeft -= offsetWidth;</span><br><span class=\"line\">                params.mRight -= offsetWidth;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"简单总结\"><a href=\"#简单总结\" class=\"headerlink\" title=\"简单总结\"></a>简单总结</h4><p>RelativeLayout更加关注子View的left right top bottom值 并且优先级高于width和height</p>\n<h3 id=\"RelativeLayout的layout过程\"><a href=\"#RelativeLayout的layout过程\" class=\"headerlink\" title=\"RelativeLayout的layout过程\"></a>RelativeLayout的layout过程</h3><p>对于RelativeLayout来的 layout过程更多的根据子View的left right top bottom值来设定位置<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//  The layout has actually already been performed and the positions</span></span><br><span class=\"line\">    <span class=\"comment\">//  cached.  Apply the cached values to the children.</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getChildCount();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        View child = getChildAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">            RelativeLayout.LayoutParams st =</span><br><span class=\"line\">                    (RelativeLayout.LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">            child.layout(st.mLeft, st.mTop, st.mRight, st.mBottom);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"RelativeLayout的draw过程\"><a href=\"#RelativeLayout的draw过程\" class=\"headerlink\" title=\"RelativeLayout的draw过程\"></a>RelativeLayout的draw过程</h3><p>RelativeLayout作为ViewGroup的子类 因为其性质原因  没有对draw过程进行修改</p>\n<p>以上</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"RelativeLayout-源码分析\"><a href=\"#RelativeLayout-源码分析\" class=\"headerlink\" title=\"RelativeLayout  源码分析\"></a>RelativeLayout  源码分析</h2><blockquote>\n<p>继承自ViewGroup 没有重载onDraw方法 内部子View又是相对 只要计算出View的坐标 layout过程同样简单</p>\n</blockquote>\n<h3 id=\"measure过程\"><a href=\"#measure过程\" class=\"headerlink\" title=\"measure过程\"></a>measure过程</h3><h4 id=\"主要过程\"><a href=\"#主要过程\" class=\"headerlink\" title=\"主要过程\"></a>主要过程</h4><ol>\n<li>将内部View根据纵向关系和横向关系排序</li>\n<li>初始化相关变量</li>\n<li>遍历水平关系的View</li>\n<li>遍历竖直关系的View</li>\n<li>baseline计算</li>\n<li><p>宽度和高度修正</p>","more":"</li>\n</ol>\n<h4 id=\"1-将内部View根据纵向关系和横向关系排序\"><a href=\"#1-将内部View根据纵向关系和横向关系排序\" class=\"headerlink\" title=\"1 将内部View根据纵向关系和横向关系排序\"></a>1 将内部View根据纵向关系和横向关系排序</h4><blockquote>\n<p>layout_toRightOf 为横向关系  layout_below为纵向关系</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先会根据mDirtyHierarchy的值判断是否需要将子View重新排序</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (mDirtyHierarchy) &#123;</span><br><span class=\"line\">    mDirtyHierarchy = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    sortChildren();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相关调用方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mDirtyHierarchy的值只有在requestLayout方法下被更新</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">requestLayout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.requestLayout();</span><br><span class=\"line\">    mDirtyHierarchy = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sortChildren()方法对横向纵向关系的view的数组进行非空判断 用DependencyGraph进行判断</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sortChildren</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getChildCount();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mSortedVerticalChildren == <span class=\"keyword\">null</span> || mSortedVerticalChildren.length != count) &#123;</span><br><span class=\"line\">        mSortedVerticalChildren = <span class=\"keyword\">new</span> View[count];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mSortedHorizontalChildren == <span class=\"keyword\">null</span> || mSortedHorizontalChildren.length != count) &#123;</span><br><span class=\"line\">        mSortedHorizontalChildren = <span class=\"keyword\">new</span> View[count];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> DependencyGraph graph = mGraph;</span><br><span class=\"line\">    graph.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        graph.add(getChildAt(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    graph.getSortedViews(mSortedVerticalChildren, RULES_VERTICAL);</span><br><span class=\"line\">    graph.getSortedViews(mSortedHorizontalChildren, RULES_HORIZONTAL);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>DependencyGraph的相关方法</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DependencyGraph</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * Adds a view to the graph.</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> view The view to be added as a node to the graph.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//因为是图 根据view生成一个节点</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id = view.getId();</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Node node = Node.acquire(view);</span><br><span class=\"line\">            <span class=\"comment\">//如果是有效的id 则将该节点添加到List中</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (id != View.NO_ID) &#123;</span><br><span class=\"line\">                mKeyNodes.put(id, node);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            mNodes.add(node);</span><br><span class=\"line\">        &#125;     </span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">           * Builds a sorted list of views. The sorting order depends on the dependencies</span></span><br><span class=\"line\"><span class=\"comment\">           * between the view. For instance, if view C needs view A to be processed first</span></span><br><span class=\"line\"><span class=\"comment\">           * and view A needs view B to be processed first, the dependency graph</span></span><br><span class=\"line\"><span class=\"comment\">           * is: B -&gt; A -&gt; C. The sorted array will contain views B, A and C in this order.</span></span><br><span class=\"line\"><span class=\"comment\">           *</span></span><br><span class=\"line\"><span class=\"comment\">           * <span class=\"doctag\">@param</span> sorted The sorted list of views. The length of this array must</span></span><br><span class=\"line\"><span class=\"comment\">           *        be equal to getChildCount().</span></span><br><span class=\"line\"><span class=\"comment\">           * <span class=\"doctag\">@param</span> rules The list of rules to take into account.</span></span><br><span class=\"line\"><span class=\"comment\">           */</span></span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getSortedViews</span><span class=\"params\">(View[] sorted, <span class=\"keyword\">int</span>... rules)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//当前View找不到其它的可依赖的View时  作为root节点</span></span><br><span class=\"line\">              <span class=\"keyword\">final</span> ArrayDeque&lt;Node&gt; roots = findRoots(rules);</span><br><span class=\"line\">              <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">              Node node;</span><br><span class=\"line\">              <span class=\"comment\">//读取root的下一个node</span></span><br><span class=\"line\">              <span class=\"keyword\">while</span> ((node = roots.pollLast()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">final</span> View view = node.view;</span><br><span class=\"line\">                  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> key = view.getId();</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"comment\">//将符合规则的View加到 sorted中</span></span><br><span class=\"line\"></span><br><span class=\"line\">                  sorted[index++] = view;</span><br><span class=\"line\"></span><br><span class=\"line\">                  <span class=\"keyword\">final</span> ArrayMap&lt;Node, DependencyGraph&gt; dependents = node.dependents;</span><br><span class=\"line\">                  <span class=\"comment\">//dependents 依赖该node的node  (A C依赖B 则B的dependents中存A C)</span></span><br><span class=\"line\">                  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = dependents.size();</span><br><span class=\"line\">                  <span class=\"comment\">//遍历所有依赖自己的node</span></span><br><span class=\"line\">                  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">                      <span class=\"keyword\">final</span> Node dependent = dependents.keyAt(i);</span><br><span class=\"line\">                      <span class=\"comment\">//dependencies 是被依赖的的node的规则和node(A 依赖 B D 则dependencies存有B D )</span></span><br><span class=\"line\">                      <span class=\"keyword\">final</span> SparseArray&lt;Node&gt; dependencies = dependent.dependencies;</span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"comment\">//移除当前node和dependencies的依赖关系</span></span><br><span class=\"line\">                      dependencies.remove(key);</span><br><span class=\"line\">                      <span class=\"comment\">//如果解除依赖后没有其它依赖 则将该node也视为rootNode</span></span><br><span class=\"line\">                      <span class=\"keyword\">if</span> (dependencies.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                          roots.add(dependent);</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (index &lt; sorted.length) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Circular dependencies cannot exist in RelativeLayout\"</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>eg: A依赖B B依赖C 首先存入C 因为不依赖任何其它的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Finds the roots of the graph. A root is a node with no dependency and</span></span><br><span class=\"line\"><span class=\"comment\"> * with [0..n] dependents.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> rulesFilter The list of rules to consider when building the</span></span><br><span class=\"line\"><span class=\"comment\"> *        dependencies</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> A list of node, each being a root of the graph</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ArrayDeque&lt;Node&gt; <span class=\"title\">findRoots</span><span class=\"params\">(<span class=\"keyword\">int</span>[] rulesFilter)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//keyNodes为nodelist</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> SparseArray&lt;Node&gt; keyNodes = mKeyNodes;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ArrayList&lt;Node&gt; nodes = mNodes;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = nodes.size();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//初始化依赖该node的node和该node依赖的node相关参数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Node node = nodes.get(i);</span><br><span class=\"line\">        node.dependents.clear();</span><br><span class=\"line\">        node.dependencies.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历所有node  存入当前view和他所依赖的关系</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Node node = nodes.get(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> LayoutParams layoutParams = (LayoutParams) node.view.getLayoutParams();</span><br><span class=\"line\">        <span class=\"comment\">//取出当前View所有的依赖关系</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] rules = layoutParams.mRules;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> rulesCount = rulesFilter.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//遍历当前View所有的</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; rulesCount; j++) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//rule对应被依赖view的id</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> rule = rules[rulesFilter[j]];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rule &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//找到被依赖的node</span></span><br><span class=\"line\">                <span class=\"keyword\">final</span> Node dependency = keyNodes.get(rule);</span><br><span class=\"line\">                <span class=\"comment\">//跳过空view和本身</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dependency == <span class=\"keyword\">null</span> || dependency == node) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//添加依赖被依赖的node</span></span><br><span class=\"line\">                dependency.dependents.put(node, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">                node.dependencies.put(rule, dependency);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> ArrayDeque&lt;Node&gt; roots = mRoots;</span><br><span class=\"line\">    roots.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 再次遍历  如果该node的依赖关系为0 即该view不依赖任何view 则视为rootView</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Node node = nodes.get(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.dependencies.size() == <span class=\"number\">0</span>) roots.addLast(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> roots;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-初始化相关变量\"><a href=\"#2-初始化相关变量\" class=\"headerlink\" title=\"2 初始化相关变量\"></a>2 初始化相关变量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> myWidth = -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> myHeight = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> width = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> height = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果不是UNSPECIFIED模式 则将widthSize赋值于myWidth</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (widthMode != MeasureSpec.UNSPECIFIED) &#123;</span><br><span class=\"line\">    myWidth = widthSize;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 如果不是UNSPECIFIED模式 则将heightSize赋值于myHeight</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (heightMode != MeasureSpec.UNSPECIFIED) &#123;</span><br><span class=\"line\">    myHeight = heightSize;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果是EXACTLY模式 则将myWidth和myHeight记录</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;</span><br><span class=\"line\">    width = myWidth;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (heightMode == MeasureSpec.EXACTLY) &#123;</span><br><span class=\"line\">    height = myHeight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">View ignore = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">//判断是否为Start 和  top 确定左上角坐标</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> gravity = mGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> horizontalGravity = gravity != Gravity.START &amp;&amp; gravity != <span class=\"number\">0</span>;</span><br><span class=\"line\">gravity = mGravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> verticalGravity = gravity != Gravity.TOP &amp;&amp; gravity != <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> left = Integer.MAX_VALUE;</span><br><span class=\"line\"><span class=\"keyword\">int</span> top = Integer.MAX_VALUE;</span><br><span class=\"line\"><span class=\"keyword\">int</span> right = Integer.MIN_VALUE;</span><br><span class=\"line\"><span class=\"keyword\">int</span> bottom = Integer.MIN_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> offsetHorizontalAxis = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> offsetVerticalAxis = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">// 记录ignore的view</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((horizontalGravity || verticalGravity) &amp;&amp; mIgnoreGravity != View.NO_ID) &#123;</span><br><span class=\"line\">    ignore = findViewById(mIgnoreGravity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//宽度个高度是否为warp模式</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isWrapContentWidth = widthMode != MeasureSpec.EXACTLY;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isWrapContentHeight = heightMode != MeasureSpec.EXACTLY;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在计算和分配的子View的坐标的时候 需要用到父VIew的尺寸 但是暂时无法拿到准确值(待完成下面操作)</span></span><br><span class=\"line\"><span class=\"comment\">//先使用默认值代替 在计算后 用偏移量更新真是坐标</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isLayoutRtl() &amp;&amp; myWidth == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    myWidth = DEFAULT_WIDTH;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-遍历水平关系的View\"><a href=\"#3-遍历水平关系的View\" class=\"headerlink\" title=\"3  遍历水平关系的View\"></a>3  遍历水平关系的View</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View[] views = mSortedHorizontalChildren;</span><br><span class=\"line\"><span class=\"keyword\">int</span> count = views.length;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">    View child = views[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">        LayoutParams params = (LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">        <span class=\"comment\">//根据方向获得子View中设置的规则</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</span><br><span class=\"line\">        <span class=\"comment\">//将左右方向规则转换为左右的坐标</span></span><br><span class=\"line\">        applyHorizontalSizeRules(params, myWidth, rules);</span><br><span class=\"line\">        <span class=\"comment\">//测算水平方向的子View的尺寸</span></span><br><span class=\"line\">        measureChildHorizontal(child, params, myWidth, myHeight);</span><br><span class=\"line\">        <span class=\"comment\">//确定水平方向子View的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (positionChildHorizontal(child, params, myWidth, isWrapContentWidth)) &#123;</span><br><span class=\"line\">            offsetHorizontalAxis = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相关方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">applyHorizontalSizeRules</span><span class=\"params\">(LayoutParams childParams, <span class=\"keyword\">int</span> myWidth, <span class=\"keyword\">int</span>[] rules)</span> </span>&#123;</span><br><span class=\"line\">    RelativeLayout.LayoutParams anchorParams;</span><br><span class=\"line\">    childParams.mLeft = VALUE_NOT_SET;</span><br><span class=\"line\">    childParams.mRight = VALUE_NOT_SET;</span><br><span class=\"line\">    <span class=\"comment\">//得到当前子View的layout_toLeftOf属性对应的View</span></span><br><span class=\"line\">    anchorParams = getRelatedViewParams(rules, LEFT_OF);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果这个属性存在 则当前子View的右坐标是layout_toLeftOf对应的view的左坐标减去对应view的marginLeft的值和自身marginRight的值</span></span><br><span class=\"line\">        childParams.mRight = anchorParams.mLeft - (anchorParams.leftMargin +</span><br><span class=\"line\">                childParams.rightMargin);</span><br><span class=\"line\">    <span class=\"comment\">//如果alignWithParent为true alignWithParent取alignWithParentIfMissing</span></span><br><span class=\"line\">    <span class=\"comment\">//如果layout_toLeftOf的view为空 或者gone 则将RelativeLayout当做被依赖的对象</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[LEFT_OF] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果父容器RelativeLayout的宽度大于0</span></span><br><span class=\"line\">        <span class=\"comment\">//则子View的右坐标为 父RelativeLayout的宽度减去 mPaddingRight 和自身的marginRight</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (myWidth &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//类似的方法 得到左坐标(通过参数RIGHT_OF)</span></span><br><span class=\"line\">    anchorParams = getRelatedViewParams(rules, RIGHT_OF);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        childParams.mLeft = anchorParams.mRight + (anchorParams.rightMargin +</span><br><span class=\"line\">                childParams.leftMargin);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[RIGHT_OF] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        childParams.mLeft = mPaddingLeft + childParams.leftMargin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//类似的方法 得到左坐标 (通过参数ALIGN_LEFT)</span></span><br><span class=\"line\">    anchorParams = getRelatedViewParams(rules, ALIGN_LEFT);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        childParams.mLeft = anchorParams.mLeft + childParams.leftMargin;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[ALIGN_LEFT] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        childParams.mLeft = mPaddingLeft + childParams.leftMargin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//类似的方法 得到右坐标 (通过参数ALIGN_RIGHT)</span></span><br><span class=\"line\">    anchorParams = getRelatedViewParams(rules, ALIGN_RIGHT);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        childParams.mRight = anchorParams.mRight - childParams.rightMargin;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[ALIGN_RIGHT] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (myWidth &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//根据ALIGN_PARENT_LEFT 将自己放到父RelativeLayout的左边</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> != rules[ALIGN_PARENT_LEFT]) &#123;</span><br><span class=\"line\">        childParams.mLeft = mPaddingLeft + childParams.leftMargin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//根据ALIGN_PARENT_RIGHT 将自己放到父RelativeLayout的右边</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> != rules[ALIGN_PARENT_RIGHT]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (myWidth &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildHorizontal</span><span class=\"params\">(View child, LayoutParams params, <span class=\"keyword\">int</span> myWidth, <span class=\"keyword\">int</span> myHeight)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//获得child的宽度MeasureSpec</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(params.mLeft, params.mRight,</span><br><span class=\"line\">            params.width, params.leftMargin, params.rightMargin, mPaddingLeft, mPaddingRight,</span><br><span class=\"line\">            myWidth);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec;</span><br><span class=\"line\">    <span class=\"comment\">//在低于4.2的时候 mAllowBrokenMeasureSpecs为true</span></span><br><span class=\"line\">    <span class=\"comment\">//当myHeight &lt; 0 时 则根据父RelativeLayout设置其MeasureSpec模式</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (myHeight &lt; <span class=\"number\">0</span> &amp;&amp; !mAllowBrokenMeasureSpecs) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果父RelativeLayout的height大于0  则 设置子view的MeasureSpec模式为EXACTLY</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (params.height &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(</span><br><span class=\"line\">                    params.height, MeasureSpec.EXACTLY);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//反之 如果其小于0  则设置子View的MeasureSpec为UNSPECIFIED</span></span><br><span class=\"line\">            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(<span class=\"number\">0</span>, MeasureSpec.UNSPECIFIED);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//当当前myHeight &gt;= 0</span></span><br><span class=\"line\">      <span class=\"comment\">//判断当前高度是否与父RelativeLayout高度相同 设置heightMode</span></span><br><span class=\"line\">      <span class=\"comment\">//根据maxHeight 和heightMode设置子View的MeasureSpec模式</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maxHeight;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mMeasureVerticalWithPaddingMargin) &#123;</span><br><span class=\"line\">            maxHeight = Math.max(<span class=\"number\">0</span>, myHeight - mPaddingTop - mPaddingBottom</span><br><span class=\"line\">                    - params.topMargin - params.bottomMargin);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            maxHeight = Math.max(<span class=\"number\">0</span>, myHeight);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (params.height == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">            heightMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            heightMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(maxHeight, heightMode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获得了子View的WidthMeasureSpec和HeightMeasureSpec</span></span><br><span class=\"line\">    <span class=\"comment\">//子View可以通过measure方法获取自身的size</span></span><br><span class=\"line\">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Get a measure spec that accounts for all of the constraints on this view.</span></span><br><span class=\"line\"><span class=\"comment\">    * This includes size constraints imposed by the RelativeLayout as well as</span></span><br><span class=\"line\"><span class=\"comment\">    * the View's desired dimension.</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> childStart The left or top field of the child's layout params</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> childEnd The right or bottom field of the child's layout params</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> childSize The child's desired size (the width or height field of</span></span><br><span class=\"line\"><span class=\"comment\">    *        the child's layout params)</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> startMargin The left or top margin</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> endMargin The right or bottom margin</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> startPadding mPaddingLeft or mPaddingTop</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> endPadding mPaddingRight or mPaddingBottom</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> mySize The width or height of this view (the RelativeLayout)</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> MeasureSpec for the child</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> childStart, <span class=\"keyword\">int</span> childEnd,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           <span class=\"keyword\">int</span> childSize, <span class=\"keyword\">int</span> startMargin, <span class=\"keyword\">int</span> endMargin, <span class=\"keyword\">int</span> startPadding,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           <span class=\"keyword\">int</span> endPadding, <span class=\"keyword\">int</span> mySize)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> childSpecMode = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> childSpecSize = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isUnspecified = mySize &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"comment\">//如果父RelativeLayout宽度小于0 版本号不小于4.2</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (isUnspecified &amp;&amp; !mAllowBrokenMeasureSpecs) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果子View的左边距和右边距都不为VALUE_NOT_SET</span></span><br><span class=\"line\">            <span class=\"comment\">//且右边距坐标大于左边距坐标 则将其差当做宽度赋予View 设置模式为EXACTLY</span></span><br><span class=\"line\">            <span class=\"comment\">//VALUE_NOT_SET = Integer.MIN_VALUE</span></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * Constant for the minimum &#123;<span class=\"doctag\">@code</span> int&#125; value, -2&lt;sup&gt;31&lt;/sup&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"comment\">//public static final int MIN_VALUE = 0x80000000;</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (childStart != VALUE_NOT_SET &amp;&amp; childEnd != VALUE_NOT_SET) &#123;</span><br><span class=\"line\">               childSpecSize = Math.max(<span class=\"number\">0</span>, childEnd - childStart);</span><br><span class=\"line\">               childSpecMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childSize &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// 如果childSpecSize &gt;= 0 则赋值于childSpecSize</span></span><br><span class=\"line\">               <span class=\"comment\">//同样设置模式为EXACTLY</span></span><br><span class=\"line\">               childSpecSize = childSize;</span><br><span class=\"line\">               childSpecMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">// 都不满足则设置模式为UNSPECIFIED</span></span><br><span class=\"line\">               childSpecSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">               childSpecMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 计算 开始和结束相关</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> tempStart = childStart;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> tempEnd = childEnd;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//如果没有指定start值 则默认赋予 padding和merage的值</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (tempStart == VALUE_NOT_SET) &#123;</span><br><span class=\"line\">           tempStart = startPadding + startMargin;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//同上</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (tempEnd == VALUE_NOT_SET) &#123;</span><br><span class=\"line\">           tempEnd = mySize - endPadding - endMargin;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//指定最大可提供的大小</span></span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maxAvailable = tempEnd - tempStart;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (childStart != VALUE_NOT_SET &amp;&amp; childEnd != VALUE_NOT_SET) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//如果Start和End都是有效值 根据isUnspecified设置specMode为UNSPECIFIED或EXACTLY</span></span><br><span class=\"line\">           <span class=\"comment\">//并将设置对应的size</span></span><br><span class=\"line\">           childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;</span><br><span class=\"line\">           childSpecSize = Math.max(<span class=\"number\">0</span>, maxAvailable);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">//反之 判断childSize的相关值</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (childSize &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//设置模式为EXACTLY</span></span><br><span class=\"line\">               <span class=\"comment\">//判断maxAvailable和childSize情况 取较大值设置为childSpecSize</span></span><br><span class=\"line\">               childSpecMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (maxAvailable &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">// We have a maximum size in this dimension.</span></span><br><span class=\"line\">                   childSpecSize = Math.min(maxAvailable, childSize);</span><br><span class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                   <span class=\"comment\">// We can grow in this dimension.</span></span><br><span class=\"line\">                   childSpecSize = childSize;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childSize == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//如果子View是match模式 参照isUnspecified设置相关</span></span><br><span class=\"line\">               childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;</span><br><span class=\"line\">               childSpecSize = Math.max(<span class=\"number\">0</span>, maxAvailable);</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childSize == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//在wrap进行设置</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (maxAvailable &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">// We have a maximum size in this dimension.</span></span><br><span class=\"line\">                   childSpecMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">                   childSpecSize = maxAvailable;</span><br><span class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                   <span class=\"comment\">// We can grow in this dimension. Child can be as big as it</span></span><br><span class=\"line\">                   <span class=\"comment\">// wants.</span></span><br><span class=\"line\">                   childSpecMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">                   childSpecSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>以上 完成了View的第一次测量  确定了View的大小 然后根据大小觉得把子view放在父RelativeLayout中的位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">positionChildHorizontal</span><span class=\"params\">(View child, LayoutParams params, <span class=\"keyword\">int</span> myWidth,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> wrapContent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取RelativeLayout的布局方向</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (params.mLeft == VALUE_NOT_SET &amp;&amp; params.mRight != VALUE_NOT_SET) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果右边界有效 左边界无效 根据右边界计算出左边界</span></span><br><span class=\"line\">        params.mLeft = params.mRight - child.getMeasuredWidth();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params.mLeft != VALUE_NOT_SET &amp;&amp; params.mRight == VALUE_NOT_SET) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 同上反之</span></span><br><span class=\"line\">        params.mRight = params.mLeft + child.getMeasuredWidth();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params.mLeft == VALUE_NOT_SET &amp;&amp; params.mRight == VALUE_NOT_SET) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//都无效的时候</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rules[CENTER_IN_PARENT] != <span class=\"number\">0</span> || rules[CENTER_HORIZONTAL] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//设置了CENTER_IN_PARENT或者 CENTER_HORIZONTAL的情况下</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!wrapContent) &#123;</span><br><span class=\"line\">              <span class=\"comment\">//非wrap情况下</span></span><br><span class=\"line\">              <span class=\"comment\">//把子View水平中心固定在RelativeLayout的中心</span></span><br><span class=\"line\">                centerHorizontal(child, params, myWidth);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">//左边距为padding+margin</span></span><br><span class=\"line\">               <span class=\"comment\">//右边距为左边距加上测量宽度</span></span><br><span class=\"line\">                params.mLeft = mPaddingLeft + params.leftMargin;</span><br><span class=\"line\">                params.mRight = params.mLeft + child.getMeasuredWidth();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//RTL右到左 布局方向</span></span><br><span class=\"line\">            <span class=\"comment\">//LTR\u0010左到右 布局方向</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isLayoutRtl()) &#123;</span><br><span class=\"line\">                params.mRight = myWidth - mPaddingRight- params.rightMargin;</span><br><span class=\"line\">                params.mLeft = params.mRight - child.getMeasuredWidth();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                params.mLeft = mPaddingLeft + params.leftMargin;</span><br><span class=\"line\">                params.mRight = params.mLeft + child.getMeasuredWidth();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rules[ALIGN_PARENT_END] != <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//当为CENTER_IN_PARENT  CENTER_HORIZONTAL ALIGN_PARENT_END三种情况之一时返回True</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-遍历竖直关系的View\"><a href=\"#4-遍历竖直关系的View\" class=\"headerlink\" title=\"4 遍历竖直关系的View\"></a>4 遍历竖直关系的View</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">final</span> View child = views[i];</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">              <span class=\"comment\">//将竖直方向规则转换为坐标</span></span><br><span class=\"line\">               applyVerticalSizeRules(params, myHeight, child.getBaseline());</span><br><span class=\"line\">               <span class=\"comment\">//测量子View</span></span><br><span class=\"line\">               measureChild(child, params, myWidth, myHeight);</span><br><span class=\"line\">               <span class=\"comment\">//确定竖直方向子View的位置</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (positionChildVertical(child, params, myHeight, isWrapContentHeight)) &#123;</span><br><span class=\"line\">                   offsetVerticalAxis = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">              <span class=\"comment\">//首先判断是否为wrap模式</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (isWrapContentWidth) &#123;</span><br><span class=\"line\">                 <span class=\"comment\">//根据RTL或者LTR和版本进行区分</span></span><br><span class=\"line\">                 <span class=\"comment\">//Build.VERSION_CODES.KITKAT = 19</span></span><br><span class=\"line\">                 <span class=\"comment\">//主要对margin进行处理</span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (isLayoutRtl()) &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</span><br><span class=\"line\">                           width = Math.max(width, myWidth - params.mLeft);</span><br><span class=\"line\">                       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                           width = Math.max(width, myWidth - params.mLeft - params.leftMargin);</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</span><br><span class=\"line\">                           width = Math.max(width, params.mRight);</span><br><span class=\"line\">                       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                           width = Math.max(width, params.mRight + params.rightMargin);</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (isWrapContentHeight) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</span><br><span class=\"line\">                       height = Math.max(height, params.mBottom);</span><br><span class=\"line\">                   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                       height = Math.max(height, params.mBottom + params.bottomMargin);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (child != ignore || verticalGravity) &#123;</span><br><span class=\"line\">                   left = Math.min(left, params.mLeft - params.leftMargin);</span><br><span class=\"line\">                   top = Math.min(top, params.mTop - params.topMargin);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (child != ignore || horizontalGravity) &#123;</span><br><span class=\"line\">                   right = Math.max(right, params.mRight + params.rightMargin);</span><br><span class=\"line\">                   bottom = Math.max(bottom, params.mBottom + params.bottomMargin);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-baseline计算\"><a href=\"#5-baseline计算\" class=\"headerlink\" title=\"5 baseline计算\"></a>5 baseline计算</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Use the top-start-most laid out view as the baseline. RTL offsets are</span></span><br><span class=\"line\"><span class=\"comment\">// applied later, so we can use the left-most edge as the starting edge.</span></span><br><span class=\"line\">    View baselineView = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    LayoutParams baselineParams = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View child = views[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> LayoutParams childParams = (LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (baselineView == <span class=\"keyword\">null</span> || baselineParams == <span class=\"keyword\">null</span></span><br><span class=\"line\">                    || compareLayoutPosition(childParams, baselineParams) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                baselineView = child;</span><br><span class=\"line\">                baselineParams = childParams;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mBaselineView = baselineView;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-宽度和高度修正\"><a href=\"#6-宽度和高度修正\" class=\"headerlink\" title=\"6 宽度和高度修正\"></a>6 宽度和高度修正</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如何是wrap模式</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isWrapContentWidth) &#123;</span><br><span class=\"line\">        width += mPaddingRight;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mLayoutParams != <span class=\"keyword\">null</span> &amp;&amp; mLayoutParams.width &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            width = Math.max(width, mLayoutParams.width);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        width = Math.max(width, getSuggestedMinimumWidth());</span><br><span class=\"line\">        width = resolveSize(width, widthMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//在得到最后的width之后 对依赖RelativeLayout的子View添上偏移量</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (offsetHorizontalAxis) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> View child = views[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</span><br><span class=\"line\">                    <span class=\"comment\">//对CENTER_IN_PARENT或者CENTER_HORIZONTAL的子View重测</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (rules[CENTER_IN_PARENT] != <span class=\"number\">0</span> || rules[CENTER_HORIZONTAL] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        centerHorizontal(child, params, width);</span><br><span class=\"line\">                    <span class=\"comment\">//对ALIGN_PARENT_RIGHT重测</span></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rules[ALIGN_PARENT_RIGHT] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = child.getMeasuredWidth();</span><br><span class=\"line\">                        params.mLeft = width - mPaddingRight - childWidth;</span><br><span class=\"line\">                        params.mRight = params.mLeft + childWidth;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//同上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isWrapContentHeight) &#123;</span><br><span class=\"line\">        height += mPaddingBottom;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mLayoutParams != <span class=\"keyword\">null</span> &amp;&amp; mLayoutParams.height &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            height = Math.max(height, mLayoutParams.height);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        height = Math.max(height, getSuggestedMinimumHeight());</span><br><span class=\"line\">        height = resolveSize(height, heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (offsetVerticalAxis) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> View child = views[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (rules[CENTER_IN_PARENT] != <span class=\"number\">0</span> || rules[CENTER_VERTICAL] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        centerVertical(child, params, height);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rules[ALIGN_PARENT_BOTTOM] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</span><br><span class=\"line\">                        params.mTop = height - mPaddingBottom - childHeight;</span><br><span class=\"line\">                        params.mBottom = params.mTop + childHeight;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据gravity再次修正</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (horizontalGravity || verticalGravity) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Rect selfBounds = mSelfBounds;</span><br><span class=\"line\">        selfBounds.set(mPaddingLeft, mPaddingTop, width - mPaddingRight,</span><br><span class=\"line\">                height - mPaddingBottom);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Rect contentBounds = mContentBounds;</span><br><span class=\"line\">        Gravity.apply(mGravity, right - left, bottom - top, selfBounds, contentBounds,</span><br><span class=\"line\">                layoutDirection);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> horizontalOffset = contentBounds.left - left;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> verticalOffset = contentBounds.top - top;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (horizontalOffset != <span class=\"number\">0</span> || verticalOffset != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> View child = views[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (child.getVisibility() != GONE &amp;&amp; child != ignore) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (horizontalGravity) &#123;</span><br><span class=\"line\">                        params.mLeft += horizontalOffset;</span><br><span class=\"line\">                        params.mRight += horizontalOffset;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (verticalGravity) &#123;</span><br><span class=\"line\">                        params.mTop += verticalOffset;</span><br><span class=\"line\">                        params.mBottom += verticalOffset;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果是RTL(右到左显示)则再次修改</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isLayoutRtl()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> offsetWidth = myWidth - width;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View child = views[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">                params.mLeft -= offsetWidth;</span><br><span class=\"line\">                params.mRight -= offsetWidth;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"简单总结\"><a href=\"#简单总结\" class=\"headerlink\" title=\"简单总结\"></a>简单总结</h4><p>RelativeLayout更加关注子View的left right top bottom值 并且优先级高于width和height</p>\n<h3 id=\"RelativeLayout的layout过程\"><a href=\"#RelativeLayout的layout过程\" class=\"headerlink\" title=\"RelativeLayout的layout过程\"></a>RelativeLayout的layout过程</h3><p>对于RelativeLayout来的 layout过程更多的根据子View的left right top bottom值来设定位置<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//  The layout has actually already been performed and the positions</span></span><br><span class=\"line\">    <span class=\"comment\">//  cached.  Apply the cached values to the children.</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getChildCount();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        View child = getChildAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">            RelativeLayout.LayoutParams st =</span><br><span class=\"line\">                    (RelativeLayout.LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">            child.layout(st.mLeft, st.mTop, st.mRight, st.mBottom);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"RelativeLayout的draw过程\"><a href=\"#RelativeLayout的draw过程\" class=\"headerlink\" title=\"RelativeLayout的draw过程\"></a>RelativeLayout的draw过程</h3><p>RelativeLayout作为ViewGroup的子类 因为其性质原因  没有对draw过程进行修改</p>\n<p>以上</p>"},{"title":"RpgMaker入门教程1","date":"2017-04-24T03:23:46.000Z","_content":"\n>RPG Maker是一个十分优秀的rpg游戏制作引擎 恩 一个被定义为游戏的游戏引擎 可以用来十分便捷的制作rpg游戏 有兴趣的可以尝试一下 满足自己想做游戏的愿望\n\n本文主要根据[官方文档](http://tkool.jp/products/rpgvx/lecture)相关进行翻译并添加了部分个人的理解和帮助 部分文意和理解可能所有差异 欢迎讨论 翻译的主体的的是RpgMaker的VX版本 我使用的是RpgMaker的Mv版本 部分ui界面可能有所不同 基本功能都是一样的 MV版本的[官方初级教程](http://tkool.jp/mv/guide/index.html)可以参考这里 关于RogMaker的相关版本说明可以[参考这里](http://tkool.jp/sp/valueplus/index) 至于学习的建议 版本来说MV的版本扩展性更强 也可以适用于更多的平台 但是本教程的内容对这两个版本都是通用的\n\n<!-- more -->\n\n**转载请注明出处**\n\n# 第一回 决定你的RPG形象\n\n(再次原谅我的野生翻译)\n\n在这个教程中 我们将介绍如何使用\"RPGMakerVX\"(原文使用的版本)来制作一个简单的RPG. 原则上,我们将使用\"RPGMakerVX\"的正式版本，但使用\"RPGMakerVX\"的试用版也可以完成这些.\n\n## Step1 决定你的RPG形象\n\n在开始制作之前,你要要构建你的Rpg游戏,就像是建筑的蓝图图,需要好好斟酌一下.\n\n![index1_1](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/419123.jpg)\n\n直接做一个十分宏大的游戏是比较困难的,所以我们要开始尝试做一个小游戏来熟悉整个流程.这里我们的主题是\"英雄打败魔王\",希望能为你们带来灵感\n\n**写出你的想法**\n\n让我们总结一下英雄打败魔王的流程\n\n我们需要将你脑中的想法记录下来,比如记在笔记本电脑中,在之后的开发中你可能会想到更多的灵感,不过这个时候记录下游戏的主干就好\n\n例) 英雄打败魔王的流程\n\n![原文件](http://tkool.jp/assets/files/products_rpgvx_lecture_point1_1.jpg)\n\n![野生翻译的我](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/9489569.jpg)\n\n\n主要的流程大概是这样,现在,我们要决定英雄是如何打败魔王的\n\n有的人会说 \"我已经将所有的形象都记在脑中了\" 但是当你开始做事的时候 这些事情往往都被你忘记了. 可能在开发的过程中就想到了一个新的想法.再忘记这些想法之前要将这些想法记录下来是十分重要的.\n***\n\n在考虑游戏的流程的时候,你可能也会考虑到角色的名称或者主角的个性,除此之外还要考虑物品的名称特征和魔法,怪物.这些都有助于游戏的形象更加的完事,即使是那些当前游戏有没直接相关的想法,也可能为以后的开发有所帮助.\n\n第一回就到这里了 在这之后,你讲直接参与到实际的开发过程中\n***\n","source":"_posts/RpgMaker入门教程1.md","raw":"---\ntitle: RpgMaker入门教程1\ndate: 2017-04-24 11:23:46\ntags: [\"Rpg Maker\" ]\ncategories : \"RpgMaker 教程\"\n---\n\n>RPG Maker是一个十分优秀的rpg游戏制作引擎 恩 一个被定义为游戏的游戏引擎 可以用来十分便捷的制作rpg游戏 有兴趣的可以尝试一下 满足自己想做游戏的愿望\n\n本文主要根据[官方文档](http://tkool.jp/products/rpgvx/lecture)相关进行翻译并添加了部分个人的理解和帮助 部分文意和理解可能所有差异 欢迎讨论 翻译的主体的的是RpgMaker的VX版本 我使用的是RpgMaker的Mv版本 部分ui界面可能有所不同 基本功能都是一样的 MV版本的[官方初级教程](http://tkool.jp/mv/guide/index.html)可以参考这里 关于RogMaker的相关版本说明可以[参考这里](http://tkool.jp/sp/valueplus/index) 至于学习的建议 版本来说MV的版本扩展性更强 也可以适用于更多的平台 但是本教程的内容对这两个版本都是通用的\n\n<!-- more -->\n\n**转载请注明出处**\n\n# 第一回 决定你的RPG形象\n\n(再次原谅我的野生翻译)\n\n在这个教程中 我们将介绍如何使用\"RPGMakerVX\"(原文使用的版本)来制作一个简单的RPG. 原则上,我们将使用\"RPGMakerVX\"的正式版本，但使用\"RPGMakerVX\"的试用版也可以完成这些.\n\n## Step1 决定你的RPG形象\n\n在开始制作之前,你要要构建你的Rpg游戏,就像是建筑的蓝图图,需要好好斟酌一下.\n\n![index1_1](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/419123.jpg)\n\n直接做一个十分宏大的游戏是比较困难的,所以我们要开始尝试做一个小游戏来熟悉整个流程.这里我们的主题是\"英雄打败魔王\",希望能为你们带来灵感\n\n**写出你的想法**\n\n让我们总结一下英雄打败魔王的流程\n\n我们需要将你脑中的想法记录下来,比如记在笔记本电脑中,在之后的开发中你可能会想到更多的灵感,不过这个时候记录下游戏的主干就好\n\n例) 英雄打败魔王的流程\n\n![原文件](http://tkool.jp/assets/files/products_rpgvx_lecture_point1_1.jpg)\n\n![野生翻译的我](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/9489569.jpg)\n\n\n主要的流程大概是这样,现在,我们要决定英雄是如何打败魔王的\n\n有的人会说 \"我已经将所有的形象都记在脑中了\" 但是当你开始做事的时候 这些事情往往都被你忘记了. 可能在开发的过程中就想到了一个新的想法.再忘记这些想法之前要将这些想法记录下来是十分重要的.\n***\n\n在考虑游戏的流程的时候,你可能也会考虑到角色的名称或者主角的个性,除此之外还要考虑物品的名称特征和魔法,怪物.这些都有助于游戏的形象更加的完事,即使是那些当前游戏有没直接相关的想法,也可能为以后的开发有所帮助.\n\n第一回就到这里了 在这之后,你讲直接参与到实际的开发过程中\n***\n","slug":"RpgMaker入门教程1","published":1,"updated":"2020-03-13T09:33:05.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dw000pq7dqwk8ytcgu","content":"<blockquote>\n<p>RPG Maker是一个十分优秀的rpg游戏制作引擎 恩 一个被定义为游戏的游戏引擎 可以用来十分便捷的制作rpg游戏 有兴趣的可以尝试一下 满足自己想做游戏的愿望</p>\n</blockquote>\n<p>本文主要根据<a href=\"http://tkool.jp/products/rpgvx/lecture\" target=\"_blank\" rel=\"noopener\">官方文档</a>相关进行翻译并添加了部分个人的理解和帮助 部分文意和理解可能所有差异 欢迎讨论 翻译的主体的的是RpgMaker的VX版本 我使用的是RpgMaker的Mv版本 部分ui界面可能有所不同 基本功能都是一样的 MV版本的<a href=\"http://tkool.jp/mv/guide/index.html\" target=\"_blank\" rel=\"noopener\">官方初级教程</a>可以参考这里 关于RogMaker的相关版本说明可以<a href=\"http://tkool.jp/sp/valueplus/index\" target=\"_blank\" rel=\"noopener\">参考这里</a> 至于学习的建议 版本来说MV的版本扩展性更强 也可以适用于更多的平台 但是本教程的内容对这两个版本都是通用的</p>\n<a id=\"more\"></a>\n<p><strong>转载请注明出处</strong></p>\n<h1 id=\"第一回-决定你的RPG形象\"><a href=\"#第一回-决定你的RPG形象\" class=\"headerlink\" title=\"第一回 决定你的RPG形象\"></a>第一回 决定你的RPG形象</h1><p>(再次原谅我的野生翻译)</p>\n<p>在这个教程中 我们将介绍如何使用”RPGMakerVX”(原文使用的版本)来制作一个简单的RPG. 原则上,我们将使用”RPGMakerVX”的正式版本，但使用”RPGMakerVX”的试用版也可以完成这些.</p>\n<h2 id=\"Step1-决定你的RPG形象\"><a href=\"#Step1-决定你的RPG形象\" class=\"headerlink\" title=\"Step1 决定你的RPG形象\"></a>Step1 决定你的RPG形象</h2><p>在开始制作之前,你要要构建你的Rpg游戏,就像是建筑的蓝图图,需要好好斟酌一下.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/419123.jpg\" alt=\"index1_1\"></p>\n<p>直接做一个十分宏大的游戏是比较困难的,所以我们要开始尝试做一个小游戏来熟悉整个流程.这里我们的主题是”英雄打败魔王”,希望能为你们带来灵感</p>\n<p><strong>写出你的想法</strong></p>\n<p>让我们总结一下英雄打败魔王的流程</p>\n<p>我们需要将你脑中的想法记录下来,比如记在笔记本电脑中,在之后的开发中你可能会想到更多的灵感,不过这个时候记录下游戏的主干就好</p>\n<p>例) 英雄打败魔王的流程</p>\n<p><img src=\"http://tkool.jp/assets/files/products_rpgvx_lecture_point1_1.jpg\" alt=\"原文件\"></p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/9489569.jpg\" alt=\"野生翻译的我\"></p>\n<p>主要的流程大概是这样,现在,我们要决定英雄是如何打败魔王的</p>\n<p>有的人会说 “我已经将所有的形象都记在脑中了” 但是当你开始做事的时候 这些事情往往都被你忘记了. 可能在开发的过程中就想到了一个新的想法.再忘记这些想法之前要将这些想法记录下来是十分重要的.</p>\n<hr>\n<p>在考虑游戏的流程的时候,你可能也会考虑到角色的名称或者主角的个性,除此之外还要考虑物品的名称特征和魔法,怪物.这些都有助于游戏的形象更加的完事,即使是那些当前游戏有没直接相关的想法,也可能为以后的开发有所帮助.</p>\n<p>第一回就到这里了 在这之后,你讲直接参与到实际的开发过程中</p>\n<hr>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>RPG Maker是一个十分优秀的rpg游戏制作引擎 恩 一个被定义为游戏的游戏引擎 可以用来十分便捷的制作rpg游戏 有兴趣的可以尝试一下 满足自己想做游戏的愿望</p>\n</blockquote>\n<p>本文主要根据<a href=\"http://tkool.jp/products/rpgvx/lecture\" target=\"_blank\" rel=\"noopener\">官方文档</a>相关进行翻译并添加了部分个人的理解和帮助 部分文意和理解可能所有差异 欢迎讨论 翻译的主体的的是RpgMaker的VX版本 我使用的是RpgMaker的Mv版本 部分ui界面可能有所不同 基本功能都是一样的 MV版本的<a href=\"http://tkool.jp/mv/guide/index.html\" target=\"_blank\" rel=\"noopener\">官方初级教程</a>可以参考这里 关于RogMaker的相关版本说明可以<a href=\"http://tkool.jp/sp/valueplus/index\" target=\"_blank\" rel=\"noopener\">参考这里</a> 至于学习的建议 版本来说MV的版本扩展性更强 也可以适用于更多的平台 但是本教程的内容对这两个版本都是通用的</p>","more":"<p><strong>转载请注明出处</strong></p>\n<h1 id=\"第一回-决定你的RPG形象\"><a href=\"#第一回-决定你的RPG形象\" class=\"headerlink\" title=\"第一回 决定你的RPG形象\"></a>第一回 决定你的RPG形象</h1><p>(再次原谅我的野生翻译)</p>\n<p>在这个教程中 我们将介绍如何使用”RPGMakerVX”(原文使用的版本)来制作一个简单的RPG. 原则上,我们将使用”RPGMakerVX”的正式版本，但使用”RPGMakerVX”的试用版也可以完成这些.</p>\n<h2 id=\"Step1-决定你的RPG形象\"><a href=\"#Step1-决定你的RPG形象\" class=\"headerlink\" title=\"Step1 决定你的RPG形象\"></a>Step1 决定你的RPG形象</h2><p>在开始制作之前,你要要构建你的Rpg游戏,就像是建筑的蓝图图,需要好好斟酌一下.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/419123.jpg\" alt=\"index1_1\"></p>\n<p>直接做一个十分宏大的游戏是比较困难的,所以我们要开始尝试做一个小游戏来熟悉整个流程.这里我们的主题是”英雄打败魔王”,希望能为你们带来灵感</p>\n<p><strong>写出你的想法</strong></p>\n<p>让我们总结一下英雄打败魔王的流程</p>\n<p>我们需要将你脑中的想法记录下来,比如记在笔记本电脑中,在之后的开发中你可能会想到更多的灵感,不过这个时候记录下游戏的主干就好</p>\n<p>例) 英雄打败魔王的流程</p>\n<p><img src=\"http://tkool.jp/assets/files/products_rpgvx_lecture_point1_1.jpg\" alt=\"原文件\"></p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/9489569.jpg\" alt=\"野生翻译的我\"></p>\n<p>主要的流程大概是这样,现在,我们要决定英雄是如何打败魔王的</p>\n<p>有的人会说 “我已经将所有的形象都记在脑中了” 但是当你开始做事的时候 这些事情往往都被你忘记了. 可能在开发的过程中就想到了一个新的想法.再忘记这些想法之前要将这些想法记录下来是十分重要的.</p>\n<hr>\n<p>在考虑游戏的流程的时候,你可能也会考虑到角色的名称或者主角的个性,除此之外还要考虑物品的名称特征和魔法,怪物.这些都有助于游戏的形象更加的完事,即使是那些当前游戏有没直接相关的想法,也可能为以后的开发有所帮助.</p>\n<p>第一回就到这里了 在这之后,你讲直接参与到实际的开发过程中</p>\n<hr>"},{"title":"RpgMaker入门教程2","_content":"\n>上一回的翻译过后发现好多迷之翻译 这里开始决定不再完全依靠原文 部分文本有所删减并增加大量个人经验\n\n# 第二回 游戏的蓝图\n\n这里第二回的初学者教程\n\n在第一回中我们设计了整体的流程图\n\n<!-- more -->\n\n![野生翻译的我](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/34278468.jpg)\n\n这一回中我们将继续做游戏的开发工作\n\n  试用版本可能不包含部分图片资源\n\n## Step2 创建一个新的项目\n\n现在,我们要创建一个新项目,让我们启动程序,在菜单 文件-新建项目中\n\n![新建项目的画面](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/94169312.jpg)\n\n文件名游戏名什么的 应该不需要解释了\n\n## Step3  制作地图前的准备\n\n让我们绘制一个野外的地图来做作为冒险的舞台,最初的世界地图的宽和高都是100(Vx版本),因为他需要展示很多的信息,初次之外我们还会制作很多30*30的详细地图\n\n在MAO001的对象中右键选择地图设置,设定地图的参数\n\n![地图设置详情](http://ooymoxvz4.bkt.clouddn.com/17-5-1/52613111-file_1493638260381_5383.png)\n\n除了有地图的大小还可以设置BGM和遇敌详情\n\n**改变地图的大小**\n将地图的宽和高通过地图属性的宽度和高度设置为30\n\n**更改选择的BGM**\n通过改变BGM的设定来变更当前地图的BGN音效,选择自动切换BGM,点击下方的 … 按钮显来选择音效在这里选择Filed1的BGM音效, 在后面的章节中我会介绍出现敌人的选项\n\n![更改地图的BGM](http://ooymoxvz4.bkt.clouddn.com/17-5-1/32630686-file_1493638217096_7a85.png)\n\n## Step4 绘制地图\n\n如果你准备好了 那么让我开始绘制地图\n\n![选择地图编辑模式](https://tkool.jp/assets/files/products_rpgvx_lecture_icon_map.jpg)\n\n选择地图编辑模式\n\n![在Vx版本中是这个图标](http://ooymoxvz4.bkt.clouddn.com/17-4-26/71169897-file_1493213165192_16ef4.png)\n\n选择草原来填充地图\n\n![草原填充的岛屿](http://ooymoxvz4.bkt.clouddn.com/17-5-1/36027520-file_1493638702937_14efd.png)\n\n草原填充的岛屿\n\n*在Mv的版本中最初应该是有个已经填充好的岛屿 其余的部分都没有任何素材 可以先通过将所有元素都用水来填充再使用草原来建造岛屿*\n\n最开始设计的时候可能不需要考虑十分详细的细节,下面让我们完成世界地图的图像\n\n![填充了地形的地图](http://ooymoxvz4.bkt.clouddn.com/17-5-1/77053165-file_1493638505309_17ac8.png)\n\n*官方文档的地图设计 因为素材原因等 可能不是完全的符合 用心体会就好*\n\n关于上面那几个按钮的作用 没买中文版本的简单接介绍一下 (其实就是官方的提示)\n\n![地形绘制工具](http://ooymoxvz4.bkt.clouddn.com/17-4-26/82249656-file_1493214362168_4f75.png)\n\n左起第一个是画笔 手绘画块 就是一次绘制一个所选的素材\n\n第二个是长方形(?这么随意的名字么) 绘制一个长方形的所选素材块\n\n第三个是椭圆 画个椭圆的素材快\n\n第四个泛滥填充 将素材在选中的闭合区域下填满所有\n\n最后一个是阴影笔 用于绘制阴影效果\n\n到了这个时候  我们可以看一看之前做的流程图,因为大陆是被分成了一个岛屿,所以我们要用到船或飞艇.在这个基础上我们根绝不同岛屿的定位对岛屿的细节进行下处理\n\n![优化过细节的地图](http://ooymoxvz4.bkt.clouddn.com/17-5-1/40941914-file_1493639072500_153b8.png)\n\n其实这里大概的地图分布做到了就好 不需要完全一致\n\n![将地点信息加入的地图](http://ooymoxvz4.bkt.clouddn.com/17-5-1/67713814-file_1493639307993_d908.png)\n\n## Step5 确定初始地点\n\n现在我们将世界地图绘制完成了 在运行测试一下游戏之前 我们要确定初始出现的位置\n\n![选择时间模式](http://ooymoxvz4.bkt.clouddn.com/17-4-28/60240045-file_1493385729977_a1f9.png)\n\n在工具栏中选择事件模式\n\n![确定人物的初始位置事件](http://ooymoxvz4.bkt.clouddn.com/17-5-1/20021705-file_1493639376264_c109.png)\n\n在该位置右键选择 设置初始位置 玩家\n\n![设置玩家的初始位置](http://ooymoxvz4.bkt.clouddn.com/17-5-1/87143828-file_1493639524953_5ce8.png)\n\n可以看到人物的初始位置被设置到这里了  我们可以运行一下游戏 在世界中走走  这里还没涉及到城堡和城镇的交互 在后面我们将做这些处理\n","source":"_posts/RpgMaker教程2.md","raw":"---\ntitle: RpgMaker入门教程2\ntags: [\"Rpg Maker\" ]\ncategories : \"RpgMaker 教程\"\n---\n\n>上一回的翻译过后发现好多迷之翻译 这里开始决定不再完全依靠原文 部分文本有所删减并增加大量个人经验\n\n# 第二回 游戏的蓝图\n\n这里第二回的初学者教程\n\n在第一回中我们设计了整体的流程图\n\n<!-- more -->\n\n![野生翻译的我](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/34278468.jpg)\n\n这一回中我们将继续做游戏的开发工作\n\n  试用版本可能不包含部分图片资源\n\n## Step2 创建一个新的项目\n\n现在,我们要创建一个新项目,让我们启动程序,在菜单 文件-新建项目中\n\n![新建项目的画面](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/94169312.jpg)\n\n文件名游戏名什么的 应该不需要解释了\n\n## Step3  制作地图前的准备\n\n让我们绘制一个野外的地图来做作为冒险的舞台,最初的世界地图的宽和高都是100(Vx版本),因为他需要展示很多的信息,初次之外我们还会制作很多30*30的详细地图\n\n在MAO001的对象中右键选择地图设置,设定地图的参数\n\n![地图设置详情](http://ooymoxvz4.bkt.clouddn.com/17-5-1/52613111-file_1493638260381_5383.png)\n\n除了有地图的大小还可以设置BGM和遇敌详情\n\n**改变地图的大小**\n将地图的宽和高通过地图属性的宽度和高度设置为30\n\n**更改选择的BGM**\n通过改变BGM的设定来变更当前地图的BGN音效,选择自动切换BGM,点击下方的 … 按钮显来选择音效在这里选择Filed1的BGM音效, 在后面的章节中我会介绍出现敌人的选项\n\n![更改地图的BGM](http://ooymoxvz4.bkt.clouddn.com/17-5-1/32630686-file_1493638217096_7a85.png)\n\n## Step4 绘制地图\n\n如果你准备好了 那么让我开始绘制地图\n\n![选择地图编辑模式](https://tkool.jp/assets/files/products_rpgvx_lecture_icon_map.jpg)\n\n选择地图编辑模式\n\n![在Vx版本中是这个图标](http://ooymoxvz4.bkt.clouddn.com/17-4-26/71169897-file_1493213165192_16ef4.png)\n\n选择草原来填充地图\n\n![草原填充的岛屿](http://ooymoxvz4.bkt.clouddn.com/17-5-1/36027520-file_1493638702937_14efd.png)\n\n草原填充的岛屿\n\n*在Mv的版本中最初应该是有个已经填充好的岛屿 其余的部分都没有任何素材 可以先通过将所有元素都用水来填充再使用草原来建造岛屿*\n\n最开始设计的时候可能不需要考虑十分详细的细节,下面让我们完成世界地图的图像\n\n![填充了地形的地图](http://ooymoxvz4.bkt.clouddn.com/17-5-1/77053165-file_1493638505309_17ac8.png)\n\n*官方文档的地图设计 因为素材原因等 可能不是完全的符合 用心体会就好*\n\n关于上面那几个按钮的作用 没买中文版本的简单接介绍一下 (其实就是官方的提示)\n\n![地形绘制工具](http://ooymoxvz4.bkt.clouddn.com/17-4-26/82249656-file_1493214362168_4f75.png)\n\n左起第一个是画笔 手绘画块 就是一次绘制一个所选的素材\n\n第二个是长方形(?这么随意的名字么) 绘制一个长方形的所选素材块\n\n第三个是椭圆 画个椭圆的素材快\n\n第四个泛滥填充 将素材在选中的闭合区域下填满所有\n\n最后一个是阴影笔 用于绘制阴影效果\n\n到了这个时候  我们可以看一看之前做的流程图,因为大陆是被分成了一个岛屿,所以我们要用到船或飞艇.在这个基础上我们根绝不同岛屿的定位对岛屿的细节进行下处理\n\n![优化过细节的地图](http://ooymoxvz4.bkt.clouddn.com/17-5-1/40941914-file_1493639072500_153b8.png)\n\n其实这里大概的地图分布做到了就好 不需要完全一致\n\n![将地点信息加入的地图](http://ooymoxvz4.bkt.clouddn.com/17-5-1/67713814-file_1493639307993_d908.png)\n\n## Step5 确定初始地点\n\n现在我们将世界地图绘制完成了 在运行测试一下游戏之前 我们要确定初始出现的位置\n\n![选择时间模式](http://ooymoxvz4.bkt.clouddn.com/17-4-28/60240045-file_1493385729977_a1f9.png)\n\n在工具栏中选择事件模式\n\n![确定人物的初始位置事件](http://ooymoxvz4.bkt.clouddn.com/17-5-1/20021705-file_1493639376264_c109.png)\n\n在该位置右键选择 设置初始位置 玩家\n\n![设置玩家的初始位置](http://ooymoxvz4.bkt.clouddn.com/17-5-1/87143828-file_1493639524953_5ce8.png)\n\n可以看到人物的初始位置被设置到这里了  我们可以运行一下游戏 在世界中走走  这里还没涉及到城堡和城镇的交互 在后面我们将做这些处理\n","slug":"RpgMaker教程2","published":1,"date":"2020-03-13T09:33:05.453Z","updated":"2020-03-13T09:33:05.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dx000qq7dqpdmd9q3c","content":"<blockquote>\n<p>上一回的翻译过后发现好多迷之翻译 这里开始决定不再完全依靠原文 部分文本有所删减并增加大量个人经验</p>\n</blockquote>\n<h1 id=\"第二回-游戏的蓝图\"><a href=\"#第二回-游戏的蓝图\" class=\"headerlink\" title=\"第二回 游戏的蓝图\"></a>第二回 游戏的蓝图</h1><p>这里第二回的初学者教程</p>\n<p>在第一回中我们设计了整体的流程图</p>\n<a id=\"more\"></a>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/34278468.jpg\" alt=\"野生翻译的我\"></p>\n<p>这一回中我们将继续做游戏的开发工作</p>\n<p>  试用版本可能不包含部分图片资源</p>\n<h2 id=\"Step2-创建一个新的项目\"><a href=\"#Step2-创建一个新的项目\" class=\"headerlink\" title=\"Step2 创建一个新的项目\"></a>Step2 创建一个新的项目</h2><p>现在,我们要创建一个新项目,让我们启动程序,在菜单 文件-新建项目中</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/94169312.jpg\" alt=\"新建项目的画面\"></p>\n<p>文件名游戏名什么的 应该不需要解释了</p>\n<h2 id=\"Step3-制作地图前的准备\"><a href=\"#Step3-制作地图前的准备\" class=\"headerlink\" title=\"Step3  制作地图前的准备\"></a>Step3  制作地图前的准备</h2><p>让我们绘制一个野外的地图来做作为冒险的舞台,最初的世界地图的宽和高都是100(Vx版本),因为他需要展示很多的信息,初次之外我们还会制作很多30*30的详细地图</p>\n<p>在MAO001的对象中右键选择地图设置,设定地图的参数</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/52613111-file_1493638260381_5383.png\" alt=\"地图设置详情\"></p>\n<p>除了有地图的大小还可以设置BGM和遇敌详情</p>\n<p><strong>改变地图的大小</strong><br>将地图的宽和高通过地图属性的宽度和高度设置为30</p>\n<p><strong>更改选择的BGM</strong><br>通过改变BGM的设定来变更当前地图的BGN音效,选择自动切换BGM,点击下方的 … 按钮显来选择音效在这里选择Filed1的BGM音效, 在后面的章节中我会介绍出现敌人的选项</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/32630686-file_1493638217096_7a85.png\" alt=\"更改地图的BGM\"></p>\n<h2 id=\"Step4-绘制地图\"><a href=\"#Step4-绘制地图\" class=\"headerlink\" title=\"Step4 绘制地图\"></a>Step4 绘制地图</h2><p>如果你准备好了 那么让我开始绘制地图</p>\n<p><img src=\"https://tkool.jp/assets/files/products_rpgvx_lecture_icon_map.jpg\" alt=\"选择地图编辑模式\"></p>\n<p>选择地图编辑模式</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-4-26/71169897-file_1493213165192_16ef4.png\" alt=\"在Vx版本中是这个图标\"></p>\n<p>选择草原来填充地图</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/36027520-file_1493638702937_14efd.png\" alt=\"草原填充的岛屿\"></p>\n<p>草原填充的岛屿</p>\n<p><em>在Mv的版本中最初应该是有个已经填充好的岛屿 其余的部分都没有任何素材 可以先通过将所有元素都用水来填充再使用草原来建造岛屿</em></p>\n<p>最开始设计的时候可能不需要考虑十分详细的细节,下面让我们完成世界地图的图像</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/77053165-file_1493638505309_17ac8.png\" alt=\"填充了地形的地图\"></p>\n<p><em>官方文档的地图设计 因为素材原因等 可能不是完全的符合 用心体会就好</em></p>\n<p>关于上面那几个按钮的作用 没买中文版本的简单接介绍一下 (其实就是官方的提示)</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-4-26/82249656-file_1493214362168_4f75.png\" alt=\"地形绘制工具\"></p>\n<p>左起第一个是画笔 手绘画块 就是一次绘制一个所选的素材</p>\n<p>第二个是长方形(?这么随意的名字么) 绘制一个长方形的所选素材块</p>\n<p>第三个是椭圆 画个椭圆的素材快</p>\n<p>第四个泛滥填充 将素材在选中的闭合区域下填满所有</p>\n<p>最后一个是阴影笔 用于绘制阴影效果</p>\n<p>到了这个时候  我们可以看一看之前做的流程图,因为大陆是被分成了一个岛屿,所以我们要用到船或飞艇.在这个基础上我们根绝不同岛屿的定位对岛屿的细节进行下处理</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/40941914-file_1493639072500_153b8.png\" alt=\"优化过细节的地图\"></p>\n<p>其实这里大概的地图分布做到了就好 不需要完全一致</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/67713814-file_1493639307993_d908.png\" alt=\"将地点信息加入的地图\"></p>\n<h2 id=\"Step5-确定初始地点\"><a href=\"#Step5-确定初始地点\" class=\"headerlink\" title=\"Step5 确定初始地点\"></a>Step5 确定初始地点</h2><p>现在我们将世界地图绘制完成了 在运行测试一下游戏之前 我们要确定初始出现的位置</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-4-28/60240045-file_1493385729977_a1f9.png\" alt=\"选择时间模式\"></p>\n<p>在工具栏中选择事件模式</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/20021705-file_1493639376264_c109.png\" alt=\"确定人物的初始位置事件\"></p>\n<p>在该位置右键选择 设置初始位置 玩家</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/87143828-file_1493639524953_5ce8.png\" alt=\"设置玩家的初始位置\"></p>\n<p>可以看到人物的初始位置被设置到这里了  我们可以运行一下游戏 在世界中走走  这里还没涉及到城堡和城镇的交互 在后面我们将做这些处理</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>上一回的翻译过后发现好多迷之翻译 这里开始决定不再完全依靠原文 部分文本有所删减并增加大量个人经验</p>\n</blockquote>\n<h1 id=\"第二回-游戏的蓝图\"><a href=\"#第二回-游戏的蓝图\" class=\"headerlink\" title=\"第二回 游戏的蓝图\"></a>第二回 游戏的蓝图</h1><p>这里第二回的初学者教程</p>\n<p>在第一回中我们设计了整体的流程图</p>","more":"<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/34278468.jpg\" alt=\"野生翻译的我\"></p>\n<p>这一回中我们将继续做游戏的开发工作</p>\n<p>  试用版本可能不包含部分图片资源</p>\n<h2 id=\"Step2-创建一个新的项目\"><a href=\"#Step2-创建一个新的项目\" class=\"headerlink\" title=\"Step2 创建一个新的项目\"></a>Step2 创建一个新的项目</h2><p>现在,我们要创建一个新项目,让我们启动程序,在菜单 文件-新建项目中</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/94169312.jpg\" alt=\"新建项目的画面\"></p>\n<p>文件名游戏名什么的 应该不需要解释了</p>\n<h2 id=\"Step3-制作地图前的准备\"><a href=\"#Step3-制作地图前的准备\" class=\"headerlink\" title=\"Step3  制作地图前的准备\"></a>Step3  制作地图前的准备</h2><p>让我们绘制一个野外的地图来做作为冒险的舞台,最初的世界地图的宽和高都是100(Vx版本),因为他需要展示很多的信息,初次之外我们还会制作很多30*30的详细地图</p>\n<p>在MAO001的对象中右键选择地图设置,设定地图的参数</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/52613111-file_1493638260381_5383.png\" alt=\"地图设置详情\"></p>\n<p>除了有地图的大小还可以设置BGM和遇敌详情</p>\n<p><strong>改变地图的大小</strong><br>将地图的宽和高通过地图属性的宽度和高度设置为30</p>\n<p><strong>更改选择的BGM</strong><br>通过改变BGM的设定来变更当前地图的BGN音效,选择自动切换BGM,点击下方的 … 按钮显来选择音效在这里选择Filed1的BGM音效, 在后面的章节中我会介绍出现敌人的选项</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/32630686-file_1493638217096_7a85.png\" alt=\"更改地图的BGM\"></p>\n<h2 id=\"Step4-绘制地图\"><a href=\"#Step4-绘制地图\" class=\"headerlink\" title=\"Step4 绘制地图\"></a>Step4 绘制地图</h2><p>如果你准备好了 那么让我开始绘制地图</p>\n<p><img src=\"https://tkool.jp/assets/files/products_rpgvx_lecture_icon_map.jpg\" alt=\"选择地图编辑模式\"></p>\n<p>选择地图编辑模式</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-4-26/71169897-file_1493213165192_16ef4.png\" alt=\"在Vx版本中是这个图标\"></p>\n<p>选择草原来填充地图</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/36027520-file_1493638702937_14efd.png\" alt=\"草原填充的岛屿\"></p>\n<p>草原填充的岛屿</p>\n<p><em>在Mv的版本中最初应该是有个已经填充好的岛屿 其余的部分都没有任何素材 可以先通过将所有元素都用水来填充再使用草原来建造岛屿</em></p>\n<p>最开始设计的时候可能不需要考虑十分详细的细节,下面让我们完成世界地图的图像</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/77053165-file_1493638505309_17ac8.png\" alt=\"填充了地形的地图\"></p>\n<p><em>官方文档的地图设计 因为素材原因等 可能不是完全的符合 用心体会就好</em></p>\n<p>关于上面那几个按钮的作用 没买中文版本的简单接介绍一下 (其实就是官方的提示)</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-4-26/82249656-file_1493214362168_4f75.png\" alt=\"地形绘制工具\"></p>\n<p>左起第一个是画笔 手绘画块 就是一次绘制一个所选的素材</p>\n<p>第二个是长方形(?这么随意的名字么) 绘制一个长方形的所选素材块</p>\n<p>第三个是椭圆 画个椭圆的素材快</p>\n<p>第四个泛滥填充 将素材在选中的闭合区域下填满所有</p>\n<p>最后一个是阴影笔 用于绘制阴影效果</p>\n<p>到了这个时候  我们可以看一看之前做的流程图,因为大陆是被分成了一个岛屿,所以我们要用到船或飞艇.在这个基础上我们根绝不同岛屿的定位对岛屿的细节进行下处理</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/40941914-file_1493639072500_153b8.png\" alt=\"优化过细节的地图\"></p>\n<p>其实这里大概的地图分布做到了就好 不需要完全一致</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/67713814-file_1493639307993_d908.png\" alt=\"将地点信息加入的地图\"></p>\n<h2 id=\"Step5-确定初始地点\"><a href=\"#Step5-确定初始地点\" class=\"headerlink\" title=\"Step5 确定初始地点\"></a>Step5 确定初始地点</h2><p>现在我们将世界地图绘制完成了 在运行测试一下游戏之前 我们要确定初始出现的位置</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-4-28/60240045-file_1493385729977_a1f9.png\" alt=\"选择时间模式\"></p>\n<p>在工具栏中选择事件模式</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/20021705-file_1493639376264_c109.png\" alt=\"确定人物的初始位置事件\"></p>\n<p>在该位置右键选择 设置初始位置 玩家</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/87143828-file_1493639524953_5ce8.png\" alt=\"设置玩家的初始位置\"></p>\n<p>可以看到人物的初始位置被设置到这里了  我们可以运行一下游戏 在世界中走走  这里还没涉及到城堡和城镇的交互 在后面我们将做这些处理</p>"},{"title":"RpgMaker教程3","date":"2017-10-04T09:05:26.000Z","_content":"\n> 开始填坑的我\n\n# RpgMaker入门教程3\n\n## 第三回 让我们开始制作城堡\n在第二回中我们创建了一个新的项目 并制作了世界地图\n\n![第二回创建的世界地图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/53054520.jpg)\n\n<!-- more -->\n\n下一个阶段 我们将创建对应标识(城镇及地下城)的内容\n\n### Step6 开始制作城堡的地图\n#### 创建一个新的地图\n在编辑器左下角的\"世界地图\"标签中右键 选择新建地图 来创建一个新的地图\n\n![冒险开始的城堡地图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/41194854.jpg)\n\n根据上面图片对新的地图属性进行设置,将地图名称更改为“冒险开始的城堡地图” ,地图大小设置为默认宽度17和高度13,它是一个只有一个屏幕的大小的地图,别忘了设置BGM.\n\n#### 绘制城堡地图\n我们要绘制一张地图,我们想象一下国王在城堡中生活的场景\n\n![城堡内国王生活的地方](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/29932479.jpg)\n\n通过瓷砖 柱子 还有进行装饰,并将国王放在地图的中间,并在下部设置一个出人口.\n\n### Step7 创建一个简单的\"场所移动\"时间\n\n刚刚创建的地图之间是互相独立的,我们要通过\"事件\"来将不同的地图相互联系起来.\n\n下面我来简单介绍一下什么是 \"事件\"\n\n在RPG Maker中,我们常常使用\"事件\",这是游戏中发生的事件的统称.比如城镇中的提示,宝箱和宝物,地图之间的连接,现在开始你可以显示交流和使用物品,任何游戏中发生的事情都是使用的事件.\n\n#### 将世界地图和城堡的地图连接\n\n在RPG Maker中,我们使用\"事件\"功能很方便,可以很方便的创建一个\"事件\",只需要在菜单中选择事件模式.\n\n![选择事件模式](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/20019323.jpg)\n\n![快速创建事件](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/69495280.jpg)\n\n<center>快速创建一个\"事件\"</center>\n\n将鼠标移动到城堡的出口位置,右键选择 快速创建事件->场所移动 的事件\n\n![场所移动事件的对话框](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/46059419.jpg)\n\n<center>场所移动事件的对话框</center>\n\n选择后会显示一个用于创建 场所移动 事件的对话框\n\n\n![目的地地图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/97806613.jpg)\n\n<center>目的地地图</center>\n\n在目的地地图中,选择\"世界地图\",双击指定目标坐标.关于\"方向\"是目标移动后指向的位置.如果没有特殊要求,可以直接使用默认的设置.\n\n选择\"确认\"后\"开始城堡\"->\"世界地图\"的场所移动事件就完成了\n\n现在你可以从\"城堡地图\"移动到世界地图,但是还不能从\"世界地图\"移动到\"开始城堡\".通过同样的方式,我们创建一个\"世界地图\"到\"城堡地图\"的场景事件.\n\n![快速创建事件](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/35890321.jpg)\n<center>快速创建事件</center>\n\n将光标移动到指定位置 创建一个\"场景移动\"事件.\n\n![指定目的地及坐标](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/52224203.jpg)\n<center>指定目的地及坐标</center>\n\n像之前一样 将目的地设置为城堡地图的入口位置,这样我们就能在\"世界地图\"和\"城堡地图\"之间移动了.\n\n只有从一个位置移动到另一个位置的\"场景移动\"世界是失败的.这样会让我们的游戏只能单向运动.最后我们别忘了测试一下两个场景能否正常的连接.\n","source":"_posts/RpgMaker教程3.md","raw":"---\ntitle: RpgMaker教程3\ndate: 2017-10-04 17:05:26\ntags: [\"Rpg Maker\" ]\ncategories : \"RpgMaker 教程\"\n---\n\n> 开始填坑的我\n\n# RpgMaker入门教程3\n\n## 第三回 让我们开始制作城堡\n在第二回中我们创建了一个新的项目 并制作了世界地图\n\n![第二回创建的世界地图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/53054520.jpg)\n\n<!-- more -->\n\n下一个阶段 我们将创建对应标识(城镇及地下城)的内容\n\n### Step6 开始制作城堡的地图\n#### 创建一个新的地图\n在编辑器左下角的\"世界地图\"标签中右键 选择新建地图 来创建一个新的地图\n\n![冒险开始的城堡地图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/41194854.jpg)\n\n根据上面图片对新的地图属性进行设置,将地图名称更改为“冒险开始的城堡地图” ,地图大小设置为默认宽度17和高度13,它是一个只有一个屏幕的大小的地图,别忘了设置BGM.\n\n#### 绘制城堡地图\n我们要绘制一张地图,我们想象一下国王在城堡中生活的场景\n\n![城堡内国王生活的地方](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/29932479.jpg)\n\n通过瓷砖 柱子 还有进行装饰,并将国王放在地图的中间,并在下部设置一个出人口.\n\n### Step7 创建一个简单的\"场所移动\"时间\n\n刚刚创建的地图之间是互相独立的,我们要通过\"事件\"来将不同的地图相互联系起来.\n\n下面我来简单介绍一下什么是 \"事件\"\n\n在RPG Maker中,我们常常使用\"事件\",这是游戏中发生的事件的统称.比如城镇中的提示,宝箱和宝物,地图之间的连接,现在开始你可以显示交流和使用物品,任何游戏中发生的事情都是使用的事件.\n\n#### 将世界地图和城堡的地图连接\n\n在RPG Maker中,我们使用\"事件\"功能很方便,可以很方便的创建一个\"事件\",只需要在菜单中选择事件模式.\n\n![选择事件模式](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/20019323.jpg)\n\n![快速创建事件](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/69495280.jpg)\n\n<center>快速创建一个\"事件\"</center>\n\n将鼠标移动到城堡的出口位置,右键选择 快速创建事件->场所移动 的事件\n\n![场所移动事件的对话框](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/46059419.jpg)\n\n<center>场所移动事件的对话框</center>\n\n选择后会显示一个用于创建 场所移动 事件的对话框\n\n\n![目的地地图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/97806613.jpg)\n\n<center>目的地地图</center>\n\n在目的地地图中,选择\"世界地图\",双击指定目标坐标.关于\"方向\"是目标移动后指向的位置.如果没有特殊要求,可以直接使用默认的设置.\n\n选择\"确认\"后\"开始城堡\"->\"世界地图\"的场所移动事件就完成了\n\n现在你可以从\"城堡地图\"移动到世界地图,但是还不能从\"世界地图\"移动到\"开始城堡\".通过同样的方式,我们创建一个\"世界地图\"到\"城堡地图\"的场景事件.\n\n![快速创建事件](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/35890321.jpg)\n<center>快速创建事件</center>\n\n将光标移动到指定位置 创建一个\"场景移动\"事件.\n\n![指定目的地及坐标](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/52224203.jpg)\n<center>指定目的地及坐标</center>\n\n像之前一样 将目的地设置为城堡地图的入口位置,这样我们就能在\"世界地图\"和\"城堡地图\"之间移动了.\n\n只有从一个位置移动到另一个位置的\"场景移动\"世界是失败的.这样会让我们的游戏只能单向运动.最后我们别忘了测试一下两个场景能否正常的连接.\n","slug":"RpgMaker教程3","published":1,"updated":"2020-03-13T09:33:05.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dy000rq7dqe3ixt1n3","content":"<blockquote>\n<p>开始填坑的我</p>\n</blockquote>\n<h1 id=\"RpgMaker入门教程3\"><a href=\"#RpgMaker入门教程3\" class=\"headerlink\" title=\"RpgMaker入门教程3\"></a>RpgMaker入门教程3</h1><h2 id=\"第三回-让我们开始制作城堡\"><a href=\"#第三回-让我们开始制作城堡\" class=\"headerlink\" title=\"第三回 让我们开始制作城堡\"></a>第三回 让我们开始制作城堡</h2><p>在第二回中我们创建了一个新的项目 并制作了世界地图</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/53054520.jpg\" alt=\"第二回创建的世界地图\"></p>\n<a id=\"more\"></a>\n<p>下一个阶段 我们将创建对应标识(城镇及地下城)的内容</p>\n<h3 id=\"Step6-开始制作城堡的地图\"><a href=\"#Step6-开始制作城堡的地图\" class=\"headerlink\" title=\"Step6 开始制作城堡的地图\"></a>Step6 开始制作城堡的地图</h3><h4 id=\"创建一个新的地图\"><a href=\"#创建一个新的地图\" class=\"headerlink\" title=\"创建一个新的地图\"></a>创建一个新的地图</h4><p>在编辑器左下角的”世界地图”标签中右键 选择新建地图 来创建一个新的地图</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/41194854.jpg\" alt=\"冒险开始的城堡地图\"></p>\n<p>根据上面图片对新的地图属性进行设置,将地图名称更改为“冒险开始的城堡地图” ,地图大小设置为默认宽度17和高度13,它是一个只有一个屏幕的大小的地图,别忘了设置BGM.</p>\n<h4 id=\"绘制城堡地图\"><a href=\"#绘制城堡地图\" class=\"headerlink\" title=\"绘制城堡地图\"></a>绘制城堡地图</h4><p>我们要绘制一张地图,我们想象一下国王在城堡中生活的场景</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/29932479.jpg\" alt=\"城堡内国王生活的地方\"></p>\n<p>通过瓷砖 柱子 还有进行装饰,并将国王放在地图的中间,并在下部设置一个出人口.</p>\n<h3 id=\"Step7-创建一个简单的”场所移动”时间\"><a href=\"#Step7-创建一个简单的”场所移动”时间\" class=\"headerlink\" title=\"Step7 创建一个简单的”场所移动”时间\"></a>Step7 创建一个简单的”场所移动”时间</h3><p>刚刚创建的地图之间是互相独立的,我们要通过”事件”来将不同的地图相互联系起来.</p>\n<p>下面我来简单介绍一下什么是 “事件”</p>\n<p>在RPG Maker中,我们常常使用”事件”,这是游戏中发生的事件的统称.比如城镇中的提示,宝箱和宝物,地图之间的连接,现在开始你可以显示交流和使用物品,任何游戏中发生的事情都是使用的事件.</p>\n<h4 id=\"将世界地图和城堡的地图连接\"><a href=\"#将世界地图和城堡的地图连接\" class=\"headerlink\" title=\"将世界地图和城堡的地图连接\"></a>将世界地图和城堡的地图连接</h4><p>在RPG Maker中,我们使用”事件”功能很方便,可以很方便的创建一个”事件”,只需要在菜单中选择事件模式.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/20019323.jpg\" alt=\"选择事件模式\"></p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/69495280.jpg\" alt=\"快速创建事件\"></p>\n<center>快速创建一个”事件”</center>\n\n<p>将鼠标移动到城堡的出口位置,右键选择 快速创建事件-&gt;场所移动 的事件</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/46059419.jpg\" alt=\"场所移动事件的对话框\"></p>\n<center>场所移动事件的对话框</center>\n\n<p>选择后会显示一个用于创建 场所移动 事件的对话框</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/97806613.jpg\" alt=\"目的地地图\"></p>\n<center>目的地地图</center>\n\n<p>在目的地地图中,选择”世界地图”,双击指定目标坐标.关于”方向”是目标移动后指向的位置.如果没有特殊要求,可以直接使用默认的设置.</p>\n<p>选择”确认”后”开始城堡”-&gt;”世界地图”的场所移动事件就完成了</p>\n<p>现在你可以从”城堡地图”移动到世界地图,但是还不能从”世界地图”移动到”开始城堡”.通过同样的方式,我们创建一个”世界地图”到”城堡地图”的场景事件.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/35890321.jpg\" alt=\"快速创建事件\"></p>\n<center>快速创建事件</center>\n\n<p>将光标移动到指定位置 创建一个”场景移动”事件.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/52224203.jpg\" alt=\"指定目的地及坐标\"></p>\n<center>指定目的地及坐标</center>\n\n<p>像之前一样 将目的地设置为城堡地图的入口位置,这样我们就能在”世界地图”和”城堡地图”之间移动了.</p>\n<p>只有从一个位置移动到另一个位置的”场景移动”世界是失败的.这样会让我们的游戏只能单向运动.最后我们别忘了测试一下两个场景能否正常的连接.</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>开始填坑的我</p>\n</blockquote>\n<h1 id=\"RpgMaker入门教程3\"><a href=\"#RpgMaker入门教程3\" class=\"headerlink\" title=\"RpgMaker入门教程3\"></a>RpgMaker入门教程3</h1><h2 id=\"第三回-让我们开始制作城堡\"><a href=\"#第三回-让我们开始制作城堡\" class=\"headerlink\" title=\"第三回 让我们开始制作城堡\"></a>第三回 让我们开始制作城堡</h2><p>在第二回中我们创建了一个新的项目 并制作了世界地图</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/53054520.jpg\" alt=\"第二回创建的世界地图\"></p>","more":"<p>下一个阶段 我们将创建对应标识(城镇及地下城)的内容</p>\n<h3 id=\"Step6-开始制作城堡的地图\"><a href=\"#Step6-开始制作城堡的地图\" class=\"headerlink\" title=\"Step6 开始制作城堡的地图\"></a>Step6 开始制作城堡的地图</h3><h4 id=\"创建一个新的地图\"><a href=\"#创建一个新的地图\" class=\"headerlink\" title=\"创建一个新的地图\"></a>创建一个新的地图</h4><p>在编辑器左下角的”世界地图”标签中右键 选择新建地图 来创建一个新的地图</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/41194854.jpg\" alt=\"冒险开始的城堡地图\"></p>\n<p>根据上面图片对新的地图属性进行设置,将地图名称更改为“冒险开始的城堡地图” ,地图大小设置为默认宽度17和高度13,它是一个只有一个屏幕的大小的地图,别忘了设置BGM.</p>\n<h4 id=\"绘制城堡地图\"><a href=\"#绘制城堡地图\" class=\"headerlink\" title=\"绘制城堡地图\"></a>绘制城堡地图</h4><p>我们要绘制一张地图,我们想象一下国王在城堡中生活的场景</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/29932479.jpg\" alt=\"城堡内国王生活的地方\"></p>\n<p>通过瓷砖 柱子 还有进行装饰,并将国王放在地图的中间,并在下部设置一个出人口.</p>\n<h3 id=\"Step7-创建一个简单的”场所移动”时间\"><a href=\"#Step7-创建一个简单的”场所移动”时间\" class=\"headerlink\" title=\"Step7 创建一个简单的”场所移动”时间\"></a>Step7 创建一个简单的”场所移动”时间</h3><p>刚刚创建的地图之间是互相独立的,我们要通过”事件”来将不同的地图相互联系起来.</p>\n<p>下面我来简单介绍一下什么是 “事件”</p>\n<p>在RPG Maker中,我们常常使用”事件”,这是游戏中发生的事件的统称.比如城镇中的提示,宝箱和宝物,地图之间的连接,现在开始你可以显示交流和使用物品,任何游戏中发生的事情都是使用的事件.</p>\n<h4 id=\"将世界地图和城堡的地图连接\"><a href=\"#将世界地图和城堡的地图连接\" class=\"headerlink\" title=\"将世界地图和城堡的地图连接\"></a>将世界地图和城堡的地图连接</h4><p>在RPG Maker中,我们使用”事件”功能很方便,可以很方便的创建一个”事件”,只需要在菜单中选择事件模式.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/20019323.jpg\" alt=\"选择事件模式\"></p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/69495280.jpg\" alt=\"快速创建事件\"></p>\n<center>快速创建一个”事件”</center>\n\n<p>将鼠标移动到城堡的出口位置,右键选择 快速创建事件-&gt;场所移动 的事件</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/46059419.jpg\" alt=\"场所移动事件的对话框\"></p>\n<center>场所移动事件的对话框</center>\n\n<p>选择后会显示一个用于创建 场所移动 事件的对话框</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/97806613.jpg\" alt=\"目的地地图\"></p>\n<center>目的地地图</center>\n\n<p>在目的地地图中,选择”世界地图”,双击指定目标坐标.关于”方向”是目标移动后指向的位置.如果没有特殊要求,可以直接使用默认的设置.</p>\n<p>选择”确认”后”开始城堡”-&gt;”世界地图”的场所移动事件就完成了</p>\n<p>现在你可以从”城堡地图”移动到世界地图,但是还不能从”世界地图”移动到”开始城堡”.通过同样的方式,我们创建一个”世界地图”到”城堡地图”的场景事件.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/35890321.jpg\" alt=\"快速创建事件\"></p>\n<center>快速创建事件</center>\n\n<p>将光标移动到指定位置 创建一个”场景移动”事件.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/52224203.jpg\" alt=\"指定目的地及坐标\"></p>\n<center>指定目的地及坐标</center>\n\n<p>像之前一样 将目的地设置为城堡地图的入口位置,这样我们就能在”世界地图”和”城堡地图”之间移动了.</p>\n<p>只有从一个位置移动到另一个位置的”场景移动”世界是失败的.这样会让我们的游戏只能单向运动.最后我们别忘了测试一下两个场景能否正常的连接.</p>"},{"title":"RpgMaker教程4","date":"2017-10-04T15:10:45.000Z","_content":"\n# RpgMaker教程4\n\n在第三回教程中,我们使用了简单的\"场景事件\" 来进行两个地图页面之间的交互\n\n![开始冒险的城堡](http://upload-images.jianshu.io/upload_images/2191286-47ef05686cbbb51f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<!-- more -->\n\n这一回中我们要在城堡中和国王开始交谈.在这里我将使用\"开关\"\n\n## Step8 和国王进行交谈\n\n我们要设置一个国王,来告诉我们的主角 冒险的目的(打败魔王)\n\n### 启动事件编辑器\n\n![事件编辑器](http://upload-images.jianshu.io/upload_images/2191286-70f0ac6c12ca4c00.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<center>将模式设置为事件模式</center>\n\n![指定国王的位置](http://upload-images.jianshu.io/upload_images/2191286-fbeea0bea2505551.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<center>指定国王的位置</center>\n\n将光标放置在王座的坐标中.\n\n![新建事件\n](http://ooymoxvz4.bkt.clouddn.com/17-10-4/53707291.jpg)\n\n<center>右键选择 新建</center>\n\n右键单击弹出弹出菜单,然后选择事件\n\n![事件编辑页面](http://upload-images.jianshu.io/upload_images/2191286-8b9e1fde48b0a92d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<center>事件编辑页面</center>\n\n> 创建事件\n\n创建事件的时候打开此事件编辑器,在事件编辑器中可以对事件的出现条件及事件的执行进行调整.看起来有很多的条目,不过根据不同的事件内容可以设置项目的默认设置.\n\n\n### 选择显示的图像\n\n选择游戏中事件显示的时候展示的图像\n\n![时间编辑器-图像](http://upload-images.jianshu.io/upload_images/2191286-8dfedd03f90c52c8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>事件编辑器->图像</center>\n\n双击展示图像的部分\n\n![从列表中选择一个图像](http://upload-images.jianshu.io/upload_images/2191286-5e7c97711284c47f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<center>从列表中选择一个图像</center>\n\n### 输入文本信息\n\n输入国王对主角的对话,双击\"执行内容\"中的\"♦\"标识,显示事件指令的列表页面.\n\n> 事件指令\n事件指令是用于创建事件的指令.根据你需要的操作,会通过不同的命令来实现事件.\n\n![事件指令列表第一页](http://upload-images.jianshu.io/upload_images/2191286-2c9ebf3abf0bf0b2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<center>事件指令列表第一页</center>\n\n如果需要在游戏中显示文字对话类的功能,使用\"显示文字\"事件指令\n\n\n![显示文字对话框](http://upload-images.jianshu.io/upload_images/2191286-0b917fef630ff4ed.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<center>显示文字对话框</center>\n\n在\"文本\"部分输入文字.我们把国王需要说的话输入文本中.最多可以在一个消息窗口中显示四行文字.\n\n![国王的对话](http://upload-images.jianshu.io/upload_images/2191286-20458f394eed3670.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>国王的对话</center>\n\n### 在对话中显示脸部的图形\n\n双击\"脸部\"选择脸部图形.脸部图形的设置不是必要的,但是这里要描述一个很严肃的事情,我们要展示国王的面貌.\n\n![脸部图像选择](http://upload-images.jianshu.io/upload_images/2191286-9f0262e06c85f237.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>脸部图像选择</center>\n\n\n![国王的面貌设置成功](http://upload-images.jianshu.io/upload_images/2191286-146c21ef452ee476.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>国王的面貌设置成功</center>\n\n\n![事件设置完成](http://upload-images.jianshu.io/upload_images/2191286-3e1a536d9f9af8d4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>最后,我们确认我们所设置的时间</center>\n\n## Step9 \"开关\"事件管理\n\n让我们来看看国王的事件能否正常运作,进入城堡地图,与国王交谈.\n\n![与国王进行对话](http://upload-images.jianshu.io/upload_images/2191286-9ebc5d0b4690f3c9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<center>与国王进行对话</center>\n\n在这里我们可以和国王正常的对话,但是每次对话的时候都显示同样的对话,再第二次和国王对话的时候我们需要展示另一端文字.\n\n>开关\n开关是游戏中的对逻辑进行处理的一个重要的部分.单个开关可以在两个状态之间进行切换.即on和off,所有开关的初始状态都为off.例如,当我们想要记录\"我和国王的对话\"时,就打开开关.那就意味着\"某个开关是on\"=\"我和国王对话\" 你可以将某个开关的状态作为一个标记.\n\n\n通过开关 我们记录和国王的对话,当第二次和国王对话时显示不同的文字.\n\n重新打开之前的事件.\n\n![在活动编辑中打开和国王对话的事件](http://upload-images.jianshu.io/upload_images/2191286-a50f527843eec9e3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>在事件编辑中打开和国王对话的事件</center>\n\n![选择开关操作](http://upload-images.jianshu.io/upload_images/2191286-24f629a49b906998.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>选择开关操作</center>\n\n在事件编辑的页面中 选择最下方的\"◆\"的标记 并选择 游戏基础-> 开关操作\n\n![开关操作页面](http://upload-images.jianshu.io/upload_images/2191286-6d223212a0a7116a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>开关操作页面</center>\n\n\n![切换选择开关](http://upload-images.jianshu.io/upload_images/2191286-b64d80cb92b44f44.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>切换选择开关</center>\n\n![为开关命名](http://upload-images.jianshu.io/upload_images/2191286-ab6ec9d8d7f64c94.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>为开关命名</center>\n\n![将操作设置为\"on\"状态](http://upload-images.jianshu.io/upload_images/2191286-bde5b49ef5f4a4f8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>将操作设置为\"on\"状态</center>\n\n选择开关操作中的,单个模式,选择右边的[...]按钮,切换到选择开关页面,并选择\"0001\"开关.每个开关都可以单独命名,为了方便后面的使用,我们可以设置一个描述性的名称.我们把0001的开关设置为\"与国王的对话\",确认后将该开关的操作设置为\"on\"状态.\n\n![设置完成后效果](http://upload-images.jianshu.io/upload_images/2191286-398fafad12b6b8a1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>设置完成后效果</center>\n\n## Step10 通过开关控制事件的内容\n\n我们可以使用开关来控制\"与国王的交谈\"的内容.接下来,当我们第二次和国王交谈后,我们将通过开关来控制事件.\n\n![创建新的事件页](http://upload-images.jianshu.io/upload_images/2191286-85b25259c15883b2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>创建新的事件页面</center>\n\n我们创建第二个标签页.通过不同的标签页,我们可以对同一个事件设置不同的执行情况.\n\n\n![新的页面内容](http://upload-images.jianshu.io/upload_images/2191286-92813e94b7b43592.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<center>新的页面内容</center>\n\n在新的标签页中我们设置当我们第二次及之后和国王对话时的事件.\n\n![设定出现条件](http://upload-images.jianshu.io/upload_images/2191286-f4129882a8c71f22.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>设定出现条件</center>\n\n首先在标签页中设置\"出现条件\"中的\"开关\"部分,并将其指定为开关\"0001:与国王的对话\".通过这样的设置,当开关\"0001:与国王的对话\"的状态为\"on\"时就会执行第二个事件页的内容,而不是第一事件页.\n\n![设置新的事件](http://upload-images.jianshu.io/upload_images/2191286-92a4dc319fbe789c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>设置新的事件</center>\n\n\n在第二个事件页中设置新的对话事件.\n\n\n![和国王的第一次对话](http://upload-images.jianshu.io/upload_images/2191286-8054c3e7012b0c30.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>和国王的第一次对话</center>\n\n![和国王的第二次对话](http://upload-images.jianshu.io/upload_images/2191286-da9387434807dc4d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>和国王的第二次对话</center>\n\n至此 我们完成了和国王的对话事件œ\n","source":"_posts/RpgMaker教程4.md","raw":"---\ntitle: RpgMaker教程4\ndate: 2017-10-04 23:10:45\ntags: [\"Rpg Maker\" ]\ncategories : \"RpgMaker 教程\"\n---\n\n# RpgMaker教程4\n\n在第三回教程中,我们使用了简单的\"场景事件\" 来进行两个地图页面之间的交互\n\n![开始冒险的城堡](http://upload-images.jianshu.io/upload_images/2191286-47ef05686cbbb51f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<!-- more -->\n\n这一回中我们要在城堡中和国王开始交谈.在这里我将使用\"开关\"\n\n## Step8 和国王进行交谈\n\n我们要设置一个国王,来告诉我们的主角 冒险的目的(打败魔王)\n\n### 启动事件编辑器\n\n![事件编辑器](http://upload-images.jianshu.io/upload_images/2191286-70f0ac6c12ca4c00.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<center>将模式设置为事件模式</center>\n\n![指定国王的位置](http://upload-images.jianshu.io/upload_images/2191286-fbeea0bea2505551.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<center>指定国王的位置</center>\n\n将光标放置在王座的坐标中.\n\n![新建事件\n](http://ooymoxvz4.bkt.clouddn.com/17-10-4/53707291.jpg)\n\n<center>右键选择 新建</center>\n\n右键单击弹出弹出菜单,然后选择事件\n\n![事件编辑页面](http://upload-images.jianshu.io/upload_images/2191286-8b9e1fde48b0a92d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<center>事件编辑页面</center>\n\n> 创建事件\n\n创建事件的时候打开此事件编辑器,在事件编辑器中可以对事件的出现条件及事件的执行进行调整.看起来有很多的条目,不过根据不同的事件内容可以设置项目的默认设置.\n\n\n### 选择显示的图像\n\n选择游戏中事件显示的时候展示的图像\n\n![时间编辑器-图像](http://upload-images.jianshu.io/upload_images/2191286-8dfedd03f90c52c8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>事件编辑器->图像</center>\n\n双击展示图像的部分\n\n![从列表中选择一个图像](http://upload-images.jianshu.io/upload_images/2191286-5e7c97711284c47f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<center>从列表中选择一个图像</center>\n\n### 输入文本信息\n\n输入国王对主角的对话,双击\"执行内容\"中的\"♦\"标识,显示事件指令的列表页面.\n\n> 事件指令\n事件指令是用于创建事件的指令.根据你需要的操作,会通过不同的命令来实现事件.\n\n![事件指令列表第一页](http://upload-images.jianshu.io/upload_images/2191286-2c9ebf3abf0bf0b2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<center>事件指令列表第一页</center>\n\n如果需要在游戏中显示文字对话类的功能,使用\"显示文字\"事件指令\n\n\n![显示文字对话框](http://upload-images.jianshu.io/upload_images/2191286-0b917fef630ff4ed.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<center>显示文字对话框</center>\n\n在\"文本\"部分输入文字.我们把国王需要说的话输入文本中.最多可以在一个消息窗口中显示四行文字.\n\n![国王的对话](http://upload-images.jianshu.io/upload_images/2191286-20458f394eed3670.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>国王的对话</center>\n\n### 在对话中显示脸部的图形\n\n双击\"脸部\"选择脸部图形.脸部图形的设置不是必要的,但是这里要描述一个很严肃的事情,我们要展示国王的面貌.\n\n![脸部图像选择](http://upload-images.jianshu.io/upload_images/2191286-9f0262e06c85f237.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>脸部图像选择</center>\n\n\n![国王的面貌设置成功](http://upload-images.jianshu.io/upload_images/2191286-146c21ef452ee476.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>国王的面貌设置成功</center>\n\n\n![事件设置完成](http://upload-images.jianshu.io/upload_images/2191286-3e1a536d9f9af8d4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>最后,我们确认我们所设置的时间</center>\n\n## Step9 \"开关\"事件管理\n\n让我们来看看国王的事件能否正常运作,进入城堡地图,与国王交谈.\n\n![与国王进行对话](http://upload-images.jianshu.io/upload_images/2191286-9ebc5d0b4690f3c9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<center>与国王进行对话</center>\n\n在这里我们可以和国王正常的对话,但是每次对话的时候都显示同样的对话,再第二次和国王对话的时候我们需要展示另一端文字.\n\n>开关\n开关是游戏中的对逻辑进行处理的一个重要的部分.单个开关可以在两个状态之间进行切换.即on和off,所有开关的初始状态都为off.例如,当我们想要记录\"我和国王的对话\"时,就打开开关.那就意味着\"某个开关是on\"=\"我和国王对话\" 你可以将某个开关的状态作为一个标记.\n\n\n通过开关 我们记录和国王的对话,当第二次和国王对话时显示不同的文字.\n\n重新打开之前的事件.\n\n![在活动编辑中打开和国王对话的事件](http://upload-images.jianshu.io/upload_images/2191286-a50f527843eec9e3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>在事件编辑中打开和国王对话的事件</center>\n\n![选择开关操作](http://upload-images.jianshu.io/upload_images/2191286-24f629a49b906998.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>选择开关操作</center>\n\n在事件编辑的页面中 选择最下方的\"◆\"的标记 并选择 游戏基础-> 开关操作\n\n![开关操作页面](http://upload-images.jianshu.io/upload_images/2191286-6d223212a0a7116a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>开关操作页面</center>\n\n\n![切换选择开关](http://upload-images.jianshu.io/upload_images/2191286-b64d80cb92b44f44.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>切换选择开关</center>\n\n![为开关命名](http://upload-images.jianshu.io/upload_images/2191286-ab6ec9d8d7f64c94.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>为开关命名</center>\n\n![将操作设置为\"on\"状态](http://upload-images.jianshu.io/upload_images/2191286-bde5b49ef5f4a4f8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>将操作设置为\"on\"状态</center>\n\n选择开关操作中的,单个模式,选择右边的[...]按钮,切换到选择开关页面,并选择\"0001\"开关.每个开关都可以单独命名,为了方便后面的使用,我们可以设置一个描述性的名称.我们把0001的开关设置为\"与国王的对话\",确认后将该开关的操作设置为\"on\"状态.\n\n![设置完成后效果](http://upload-images.jianshu.io/upload_images/2191286-398fafad12b6b8a1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>设置完成后效果</center>\n\n## Step10 通过开关控制事件的内容\n\n我们可以使用开关来控制\"与国王的交谈\"的内容.接下来,当我们第二次和国王交谈后,我们将通过开关来控制事件.\n\n![创建新的事件页](http://upload-images.jianshu.io/upload_images/2191286-85b25259c15883b2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>创建新的事件页面</center>\n\n我们创建第二个标签页.通过不同的标签页,我们可以对同一个事件设置不同的执行情况.\n\n\n![新的页面内容](http://upload-images.jianshu.io/upload_images/2191286-92813e94b7b43592.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<center>新的页面内容</center>\n\n在新的标签页中我们设置当我们第二次及之后和国王对话时的事件.\n\n![设定出现条件](http://upload-images.jianshu.io/upload_images/2191286-f4129882a8c71f22.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>设定出现条件</center>\n\n首先在标签页中设置\"出现条件\"中的\"开关\"部分,并将其指定为开关\"0001:与国王的对话\".通过这样的设置,当开关\"0001:与国王的对话\"的状态为\"on\"时就会执行第二个事件页的内容,而不是第一事件页.\n\n![设置新的事件](http://upload-images.jianshu.io/upload_images/2191286-92a4dc319fbe789c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>设置新的事件</center>\n\n\n在第二个事件页中设置新的对话事件.\n\n\n![和国王的第一次对话](http://upload-images.jianshu.io/upload_images/2191286-8054c3e7012b0c30.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>和国王的第一次对话</center>\n\n![和国王的第二次对话](http://upload-images.jianshu.io/upload_images/2191286-da9387434807dc4d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<center>和国王的第二次对话</center>\n\n至此 我们完成了和国王的对话事件œ\n","slug":"RpgMaker教程4","published":1,"updated":"2020-03-13T09:33:05.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dy000sq7dqctwk4ieb","content":"<h1 id=\"RpgMaker教程4\"><a href=\"#RpgMaker教程4\" class=\"headerlink\" title=\"RpgMaker教程4\"></a>RpgMaker教程4</h1><p>在第三回教程中,我们使用了简单的”场景事件” 来进行两个地图页面之间的交互</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-47ef05686cbbb51f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"开始冒险的城堡\"></p>\n<a id=\"more\"></a>\n<p>这一回中我们要在城堡中和国王开始交谈.在这里我将使用”开关”</p>\n<h2 id=\"Step8-和国王进行交谈\"><a href=\"#Step8-和国王进行交谈\" class=\"headerlink\" title=\"Step8 和国王进行交谈\"></a>Step8 和国王进行交谈</h2><p>我们要设置一个国王,来告诉我们的主角 冒险的目的(打败魔王)</p>\n<h3 id=\"启动事件编辑器\"><a href=\"#启动事件编辑器\" class=\"headerlink\" title=\"启动事件编辑器\"></a>启动事件编辑器</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-70f0ac6c12ca4c00.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"事件编辑器\"></p>\n<center>将模式设置为事件模式</center>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-fbeea0bea2505551.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"指定国王的位置\"></p>\n<center>指定国王的位置</center>\n\n<p>将光标放置在王座的坐标中.</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-10-4/53707291.jpg\" alt=\"新建事件\n\"></p>\n<center>右键选择 新建</center>\n\n<p>右键单击弹出弹出菜单,然后选择事件</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-8b9e1fde48b0a92d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"事件编辑页面\"></p>\n<center>事件编辑页面</center>\n\n<blockquote>\n<p>创建事件</p>\n</blockquote>\n<p>创建事件的时候打开此事件编辑器,在事件编辑器中可以对事件的出现条件及事件的执行进行调整.看起来有很多的条目,不过根据不同的事件内容可以设置项目的默认设置.</p>\n<h3 id=\"选择显示的图像\"><a href=\"#选择显示的图像\" class=\"headerlink\" title=\"选择显示的图像\"></a>选择显示的图像</h3><p>选择游戏中事件显示的时候展示的图像</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-8dfedd03f90c52c8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"时间编辑器-图像\"></p>\n<center>事件编辑器-&gt;图像</center>\n\n<p>双击展示图像的部分</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-5e7c97711284c47f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"从列表中选择一个图像\"></p>\n<center>从列表中选择一个图像</center>\n\n<h3 id=\"输入文本信息\"><a href=\"#输入文本信息\" class=\"headerlink\" title=\"输入文本信息\"></a>输入文本信息</h3><p>输入国王对主角的对话,双击”执行内容”中的”♦”标识,显示事件指令的列表页面.</p>\n<blockquote>\n<p>事件指令<br>事件指令是用于创建事件的指令.根据你需要的操作,会通过不同的命令来实现事件.</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-2c9ebf3abf0bf0b2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"事件指令列表第一页\"></p>\n<center>事件指令列表第一页</center>\n\n<p>如果需要在游戏中显示文字对话类的功能,使用”显示文字”事件指令</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-0b917fef630ff4ed.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"显示文字对话框\"></p>\n<center>显示文字对话框</center>\n\n<p>在”文本”部分输入文字.我们把国王需要说的话输入文本中.最多可以在一个消息窗口中显示四行文字.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-20458f394eed3670.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"国王的对话\"></p>\n<center>国王的对话</center>\n\n<h3 id=\"在对话中显示脸部的图形\"><a href=\"#在对话中显示脸部的图形\" class=\"headerlink\" title=\"在对话中显示脸部的图形\"></a>在对话中显示脸部的图形</h3><p>双击”脸部”选择脸部图形.脸部图形的设置不是必要的,但是这里要描述一个很严肃的事情,我们要展示国王的面貌.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-9f0262e06c85f237.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"脸部图像选择\"></p>\n<center>脸部图像选择</center>\n\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-146c21ef452ee476.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"国王的面貌设置成功\"></p>\n<center>国王的面貌设置成功</center>\n\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-3e1a536d9f9af8d4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"事件设置完成\"></p>\n<center>最后,我们确认我们所设置的时间</center>\n\n<h2 id=\"Step9-“开关”事件管理\"><a href=\"#Step9-“开关”事件管理\" class=\"headerlink\" title=\"Step9 “开关”事件管理\"></a>Step9 “开关”事件管理</h2><p>让我们来看看国王的事件能否正常运作,进入城堡地图,与国王交谈.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-9ebc5d0b4690f3c9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"与国王进行对话\"></p>\n<center>与国王进行对话</center>\n\n<p>在这里我们可以和国王正常的对话,但是每次对话的时候都显示同样的对话,再第二次和国王对话的时候我们需要展示另一端文字.</p>\n<blockquote>\n<p>开关<br>开关是游戏中的对逻辑进行处理的一个重要的部分.单个开关可以在两个状态之间进行切换.即on和off,所有开关的初始状态都为off.例如,当我们想要记录”我和国王的对话”时,就打开开关.那就意味着”某个开关是on”=”我和国王对话” 你可以将某个开关的状态作为一个标记.</p>\n</blockquote>\n<p>通过开关 我们记录和国王的对话,当第二次和国王对话时显示不同的文字.</p>\n<p>重新打开之前的事件.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-a50f527843eec9e3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"在活动编辑中打开和国王对话的事件\"></p>\n<center>在事件编辑中打开和国王对话的事件</center>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-24f629a49b906998.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选择开关操作\"></p>\n<center>选择开关操作</center>\n\n<p>在事件编辑的页面中 选择最下方的”◆”的标记 并选择 游戏基础-&gt; 开关操作</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-6d223212a0a7116a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"开关操作页面\"></p>\n<center>开关操作页面</center>\n\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-b64d80cb92b44f44.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"切换选择开关\"></p>\n<center>切换选择开关</center>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-ab6ec9d8d7f64c94.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"为开关命名\"></p>\n<center>为开关命名</center>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-bde5b49ef5f4a4f8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"将操作设置为&quot;on&quot;状态\"></p>\n<center>将操作设置为”on”状态</center>\n\n<p>选择开关操作中的,单个模式,选择右边的[…]按钮,切换到选择开关页面,并选择”0001”开关.每个开关都可以单独命名,为了方便后面的使用,我们可以设置一个描述性的名称.我们把0001的开关设置为”与国王的对话”,确认后将该开关的操作设置为”on”状态.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-398fafad12b6b8a1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设置完成后效果\"></p>\n<center>设置完成后效果</center>\n\n<h2 id=\"Step10-通过开关控制事件的内容\"><a href=\"#Step10-通过开关控制事件的内容\" class=\"headerlink\" title=\"Step10 通过开关控制事件的内容\"></a>Step10 通过开关控制事件的内容</h2><p>我们可以使用开关来控制”与国王的交谈”的内容.接下来,当我们第二次和国王交谈后,我们将通过开关来控制事件.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-85b25259c15883b2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"创建新的事件页\"></p>\n<center>创建新的事件页面</center>\n\n<p>我们创建第二个标签页.通过不同的标签页,我们可以对同一个事件设置不同的执行情况.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-92813e94b7b43592.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"新的页面内容\"></p>\n<center>新的页面内容</center>\n\n<p>在新的标签页中我们设置当我们第二次及之后和国王对话时的事件.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-f4129882a8c71f22.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设定出现条件\"></p>\n<center>设定出现条件</center>\n\n<p>首先在标签页中设置”出现条件”中的”开关”部分,并将其指定为开关”0001:与国王的对话”.通过这样的设置,当开关”0001:与国王的对话”的状态为”on”时就会执行第二个事件页的内容,而不是第一事件页.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-92a4dc319fbe789c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设置新的事件\"></p>\n<center>设置新的事件</center>\n\n\n<p>在第二个事件页中设置新的对话事件.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-8054c3e7012b0c30.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"和国王的第一次对话\"></p>\n<center>和国王的第一次对话</center>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-da9387434807dc4d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"和国王的第二次对话\"></p>\n<center>和国王的第二次对话</center>\n\n<p>至此 我们完成了和国王的对话事件œ</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"RpgMaker教程4\"><a href=\"#RpgMaker教程4\" class=\"headerlink\" title=\"RpgMaker教程4\"></a>RpgMaker教程4</h1><p>在第三回教程中,我们使用了简单的”场景事件” 来进行两个地图页面之间的交互</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-47ef05686cbbb51f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"开始冒险的城堡\"></p>","more":"<p>这一回中我们要在城堡中和国王开始交谈.在这里我将使用”开关”</p>\n<h2 id=\"Step8-和国王进行交谈\"><a href=\"#Step8-和国王进行交谈\" class=\"headerlink\" title=\"Step8 和国王进行交谈\"></a>Step8 和国王进行交谈</h2><p>我们要设置一个国王,来告诉我们的主角 冒险的目的(打败魔王)</p>\n<h3 id=\"启动事件编辑器\"><a href=\"#启动事件编辑器\" class=\"headerlink\" title=\"启动事件编辑器\"></a>启动事件编辑器</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-70f0ac6c12ca4c00.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"事件编辑器\"></p>\n<center>将模式设置为事件模式</center>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-fbeea0bea2505551.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"指定国王的位置\"></p>\n<center>指定国王的位置</center>\n\n<p>将光标放置在王座的坐标中.</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-10-4/53707291.jpg\" alt=\"新建事件\n\"></p>\n<center>右键选择 新建</center>\n\n<p>右键单击弹出弹出菜单,然后选择事件</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-8b9e1fde48b0a92d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"事件编辑页面\"></p>\n<center>事件编辑页面</center>\n\n<blockquote>\n<p>创建事件</p>\n</blockquote>\n<p>创建事件的时候打开此事件编辑器,在事件编辑器中可以对事件的出现条件及事件的执行进行调整.看起来有很多的条目,不过根据不同的事件内容可以设置项目的默认设置.</p>\n<h3 id=\"选择显示的图像\"><a href=\"#选择显示的图像\" class=\"headerlink\" title=\"选择显示的图像\"></a>选择显示的图像</h3><p>选择游戏中事件显示的时候展示的图像</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-8dfedd03f90c52c8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"时间编辑器-图像\"></p>\n<center>事件编辑器-&gt;图像</center>\n\n<p>双击展示图像的部分</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-5e7c97711284c47f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"从列表中选择一个图像\"></p>\n<center>从列表中选择一个图像</center>\n\n<h3 id=\"输入文本信息\"><a href=\"#输入文本信息\" class=\"headerlink\" title=\"输入文本信息\"></a>输入文本信息</h3><p>输入国王对主角的对话,双击”执行内容”中的”♦”标识,显示事件指令的列表页面.</p>\n<blockquote>\n<p>事件指令<br>事件指令是用于创建事件的指令.根据你需要的操作,会通过不同的命令来实现事件.</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-2c9ebf3abf0bf0b2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"事件指令列表第一页\"></p>\n<center>事件指令列表第一页</center>\n\n<p>如果需要在游戏中显示文字对话类的功能,使用”显示文字”事件指令</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-0b917fef630ff4ed.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"显示文字对话框\"></p>\n<center>显示文字对话框</center>\n\n<p>在”文本”部分输入文字.我们把国王需要说的话输入文本中.最多可以在一个消息窗口中显示四行文字.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-20458f394eed3670.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"国王的对话\"></p>\n<center>国王的对话</center>\n\n<h3 id=\"在对话中显示脸部的图形\"><a href=\"#在对话中显示脸部的图形\" class=\"headerlink\" title=\"在对话中显示脸部的图形\"></a>在对话中显示脸部的图形</h3><p>双击”脸部”选择脸部图形.脸部图形的设置不是必要的,但是这里要描述一个很严肃的事情,我们要展示国王的面貌.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-9f0262e06c85f237.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"脸部图像选择\"></p>\n<center>脸部图像选择</center>\n\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-146c21ef452ee476.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"国王的面貌设置成功\"></p>\n<center>国王的面貌设置成功</center>\n\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-3e1a536d9f9af8d4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"事件设置完成\"></p>\n<center>最后,我们确认我们所设置的时间</center>\n\n<h2 id=\"Step9-“开关”事件管理\"><a href=\"#Step9-“开关”事件管理\" class=\"headerlink\" title=\"Step9 “开关”事件管理\"></a>Step9 “开关”事件管理</h2><p>让我们来看看国王的事件能否正常运作,进入城堡地图,与国王交谈.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-9ebc5d0b4690f3c9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"与国王进行对话\"></p>\n<center>与国王进行对话</center>\n\n<p>在这里我们可以和国王正常的对话,但是每次对话的时候都显示同样的对话,再第二次和国王对话的时候我们需要展示另一端文字.</p>\n<blockquote>\n<p>开关<br>开关是游戏中的对逻辑进行处理的一个重要的部分.单个开关可以在两个状态之间进行切换.即on和off,所有开关的初始状态都为off.例如,当我们想要记录”我和国王的对话”时,就打开开关.那就意味着”某个开关是on”=”我和国王对话” 你可以将某个开关的状态作为一个标记.</p>\n</blockquote>\n<p>通过开关 我们记录和国王的对话,当第二次和国王对话时显示不同的文字.</p>\n<p>重新打开之前的事件.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-a50f527843eec9e3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"在活动编辑中打开和国王对话的事件\"></p>\n<center>在事件编辑中打开和国王对话的事件</center>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-24f629a49b906998.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选择开关操作\"></p>\n<center>选择开关操作</center>\n\n<p>在事件编辑的页面中 选择最下方的”◆”的标记 并选择 游戏基础-&gt; 开关操作</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-6d223212a0a7116a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"开关操作页面\"></p>\n<center>开关操作页面</center>\n\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-b64d80cb92b44f44.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"切换选择开关\"></p>\n<center>切换选择开关</center>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-ab6ec9d8d7f64c94.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"为开关命名\"></p>\n<center>为开关命名</center>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-bde5b49ef5f4a4f8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"将操作设置为&quot;on&quot;状态\"></p>\n<center>将操作设置为”on”状态</center>\n\n<p>选择开关操作中的,单个模式,选择右边的[…]按钮,切换到选择开关页面,并选择”0001”开关.每个开关都可以单独命名,为了方便后面的使用,我们可以设置一个描述性的名称.我们把0001的开关设置为”与国王的对话”,确认后将该开关的操作设置为”on”状态.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-398fafad12b6b8a1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设置完成后效果\"></p>\n<center>设置完成后效果</center>\n\n<h2 id=\"Step10-通过开关控制事件的内容\"><a href=\"#Step10-通过开关控制事件的内容\" class=\"headerlink\" title=\"Step10 通过开关控制事件的内容\"></a>Step10 通过开关控制事件的内容</h2><p>我们可以使用开关来控制”与国王的交谈”的内容.接下来,当我们第二次和国王交谈后,我们将通过开关来控制事件.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-85b25259c15883b2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"创建新的事件页\"></p>\n<center>创建新的事件页面</center>\n\n<p>我们创建第二个标签页.通过不同的标签页,我们可以对同一个事件设置不同的执行情况.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-92813e94b7b43592.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"新的页面内容\"></p>\n<center>新的页面内容</center>\n\n<p>在新的标签页中我们设置当我们第二次及之后和国王对话时的事件.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-f4129882a8c71f22.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设定出现条件\"></p>\n<center>设定出现条件</center>\n\n<p>首先在标签页中设置”出现条件”中的”开关”部分,并将其指定为开关”0001:与国王的对话”.通过这样的设置,当开关”0001:与国王的对话”的状态为”on”时就会执行第二个事件页的内容,而不是第一事件页.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-92a4dc319fbe789c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设置新的事件\"></p>\n<center>设置新的事件</center>\n\n\n<p>在第二个事件页中设置新的对话事件.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-8054c3e7012b0c30.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"和国王的第一次对话\"></p>\n<center>和国王的第一次对话</center>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-da9387434807dc4d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"和国王的第二次对话\"></p>\n<center>和国王的第二次对话</center>\n\n<p>至此 我们完成了和国王的对话事件œ</p>"},{"title":"RpgMaker教程5","date":"2017-10-06T13:14:13.000Z","_content":"# RpgMaker教程5\n\n## Step11 让我们创造一个英雄角色\n\n在RpgMaker的数据库中默认初始化设置了一些数据,例如角色,怪物等数据.\n\n![打开游戏的数据库](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/22028.jpg)\n打开游戏中的数据库\n<!-- more -->\n\n![数据库页面](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/42542596.jpg)\n<center>数据库页面,根据版本或者设置不同,可能部分数据不同</center>\n\n### 创建应该一个新的角色\n\n我们可以在\"数据库\"中的\"角色\"标签中对角色进行编辑.\n\n![变更角色最大数量](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/894305.jpg)\n\n我们在左下方的部分可以设置最大角色数量.当前是1,如果想要设置更多的角色,要先修改最大角色数量.如果我们创建一个新的角色,就先将最大角色设置为2.\n\n![设置最大角色数量为2](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/16724796.jpg)\n<center>设置最大角色数量为2</center>\n\n设置最大角色数量为2,新的角色还没有设置内容,所以只显示了\"0002\"\n\n### 设置角色名称\n\n![设置角色名称](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/71726307.jpg)\n\n<center>设置角色名称</center>\n\n我们设置角色的名称为\"王富贵\",我们还可以设置角色的昵称和简称的内容.\n\n### 设置角色形象\n\n![设置角色图像](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/55925694.jpg)\n<center>设置角色图像</center>\n\n\n![设置角色脸图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/53965285.jpg)\n<center>设置角色脸图</center>\n\n\n![设置角色行走图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/15362978.jpg)\n\n<center>设置角色行走图</center>\n\n![设置角色战斗图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/93210400.jpg)\n\n<center>设置角色战斗图</center>\n\n通过双击\"角色\"标签\"图像\"位置的三个不同图像部分来设置不同需求时的图像.\n\n### 设置角色职业\n\n![设置角色职业](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/81607793.jpg)\n\n通过下拉菜单来选择默认提供的几个职业.\n\n### 设置职业信息\n\n> 不同版本的面板有做不同 已mv版本为主.\n\n![数据库职业标签](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/99759838.jpg)\n\n<center>数据库职业标签</center>\n\n#### 设置经验值曲线\n![经验值曲线](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/14243586.jpg)\n<center>经验值曲线</center>\n\n我们可以根据需求和职业特色来针对不同的职业设置不同的经验曲线\n\n#### 设置能力曲线\n\n![能力曲线](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/83684284.jpg)\n\n<center>能力缺陷</center>\n\n\n![能力值设置](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/42873202.jpg)\n\n<center>能力值设置</center>\n\n同样可以通过各种参数设置具有职业特色职业能力曲线.\n\n#### 设置职业技能\n\n![设置职业技能](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/3792988.jpg)\n\n<center>设置职业技能</center>\n\n![数据库技能标签](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/90806645.jpg)\n\n<center>数据库技能标签</center>\n\n关于角色的技能可以通过技能标签页面来进行修改.\n\n### 设置角色初始装备\n\n![角色初始装备](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/96995937.jpg)\n\n<center>角色初始装备</center>\n\n![武器标签页](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/28111494.jpg)\n\n<center>武器标签页</center>\n\n可以切换到武器标签页对武器进行编辑,针对不同的角色可以针对的设置不同的初始武器.\n\n### 设置角色特性\n\n![角色特性面板](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/93585120.jpg)\n\n<center>角色特性面板</center>\n\n![设置角色特性](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/27242709.jpg)\n\n<center>设置角色特性</center>\n\n### 设置初始角色队伍\n\n![系统页面](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/87720825.jpg)\n\n<center>系统页面</center>\n\n![初始队伍编辑](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/77422347.jpg)\n<center>初始队伍编辑</center>\n\n选择\"系统\"标签页,可以看到初始队伍的面板,右键已经添加的角色,可以对初始队伍的角色进行编辑和删除.\n\n设置成功并保存后,让我们进入游戏打开菜单,测试一下我们的初始队伍是否和期望的一样.\n\n\n![游戏中的菜单页面](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/50304687.jpg)\n\n<center>游戏中的菜单页面</center>\n\n可以看到,我们针对初始队伍的设置是成功的.\n","source":"_posts/RpgMaker教程5.md","raw":"---\ntitle: RpgMaker教程5\ndate: 2017-10-06 21:14:13\ncategories : \"RpgMaker 教程\"\n---\n# RpgMaker教程5\n\n## Step11 让我们创造一个英雄角色\n\n在RpgMaker的数据库中默认初始化设置了一些数据,例如角色,怪物等数据.\n\n![打开游戏的数据库](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/22028.jpg)\n打开游戏中的数据库\n<!-- more -->\n\n![数据库页面](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/42542596.jpg)\n<center>数据库页面,根据版本或者设置不同,可能部分数据不同</center>\n\n### 创建应该一个新的角色\n\n我们可以在\"数据库\"中的\"角色\"标签中对角色进行编辑.\n\n![变更角色最大数量](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/894305.jpg)\n\n我们在左下方的部分可以设置最大角色数量.当前是1,如果想要设置更多的角色,要先修改最大角色数量.如果我们创建一个新的角色,就先将最大角色设置为2.\n\n![设置最大角色数量为2](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/16724796.jpg)\n<center>设置最大角色数量为2</center>\n\n设置最大角色数量为2,新的角色还没有设置内容,所以只显示了\"0002\"\n\n### 设置角色名称\n\n![设置角色名称](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/71726307.jpg)\n\n<center>设置角色名称</center>\n\n我们设置角色的名称为\"王富贵\",我们还可以设置角色的昵称和简称的内容.\n\n### 设置角色形象\n\n![设置角色图像](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/55925694.jpg)\n<center>设置角色图像</center>\n\n\n![设置角色脸图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/53965285.jpg)\n<center>设置角色脸图</center>\n\n\n![设置角色行走图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/15362978.jpg)\n\n<center>设置角色行走图</center>\n\n![设置角色战斗图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/93210400.jpg)\n\n<center>设置角色战斗图</center>\n\n通过双击\"角色\"标签\"图像\"位置的三个不同图像部分来设置不同需求时的图像.\n\n### 设置角色职业\n\n![设置角色职业](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/81607793.jpg)\n\n通过下拉菜单来选择默认提供的几个职业.\n\n### 设置职业信息\n\n> 不同版本的面板有做不同 已mv版本为主.\n\n![数据库职业标签](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/99759838.jpg)\n\n<center>数据库职业标签</center>\n\n#### 设置经验值曲线\n![经验值曲线](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/14243586.jpg)\n<center>经验值曲线</center>\n\n我们可以根据需求和职业特色来针对不同的职业设置不同的经验曲线\n\n#### 设置能力曲线\n\n![能力曲线](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/83684284.jpg)\n\n<center>能力缺陷</center>\n\n\n![能力值设置](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/42873202.jpg)\n\n<center>能力值设置</center>\n\n同样可以通过各种参数设置具有职业特色职业能力曲线.\n\n#### 设置职业技能\n\n![设置职业技能](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/3792988.jpg)\n\n<center>设置职业技能</center>\n\n![数据库技能标签](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/90806645.jpg)\n\n<center>数据库技能标签</center>\n\n关于角色的技能可以通过技能标签页面来进行修改.\n\n### 设置角色初始装备\n\n![角色初始装备](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/96995937.jpg)\n\n<center>角色初始装备</center>\n\n![武器标签页](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/28111494.jpg)\n\n<center>武器标签页</center>\n\n可以切换到武器标签页对武器进行编辑,针对不同的角色可以针对的设置不同的初始武器.\n\n### 设置角色特性\n\n![角色特性面板](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/93585120.jpg)\n\n<center>角色特性面板</center>\n\n![设置角色特性](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/27242709.jpg)\n\n<center>设置角色特性</center>\n\n### 设置初始角色队伍\n\n![系统页面](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/87720825.jpg)\n\n<center>系统页面</center>\n\n![初始队伍编辑](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/77422347.jpg)\n<center>初始队伍编辑</center>\n\n选择\"系统\"标签页,可以看到初始队伍的面板,右键已经添加的角色,可以对初始队伍的角色进行编辑和删除.\n\n设置成功并保存后,让我们进入游戏打开菜单,测试一下我们的初始队伍是否和期望的一样.\n\n\n![游戏中的菜单页面](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/50304687.jpg)\n\n<center>游戏中的菜单页面</center>\n\n可以看到,我们针对初始队伍的设置是成功的.\n","slug":"RpgMaker教程5","published":1,"updated":"2020-03-13T09:33:05.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5dz000tq7dq5bgh5zl9","content":"<h1 id=\"RpgMaker教程5\"><a href=\"#RpgMaker教程5\" class=\"headerlink\" title=\"RpgMaker教程5\"></a>RpgMaker教程5</h1><h2 id=\"Step11-让我们创造一个英雄角色\"><a href=\"#Step11-让我们创造一个英雄角色\" class=\"headerlink\" title=\"Step11 让我们创造一个英雄角色\"></a>Step11 让我们创造一个英雄角色</h2><p>在RpgMaker的数据库中默认初始化设置了一些数据,例如角色,怪物等数据.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/22028.jpg\" alt=\"打开游戏的数据库\"><br>打开游戏中的数据库<br><a id=\"more\"></a></p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/42542596.jpg\" alt=\"数据库页面\"></p>\n<center>数据库页面,根据版本或者设置不同,可能部分数据不同</center>\n\n<h3 id=\"创建应该一个新的角色\"><a href=\"#创建应该一个新的角色\" class=\"headerlink\" title=\"创建应该一个新的角色\"></a>创建应该一个新的角色</h3><p>我们可以在”数据库”中的”角色”标签中对角色进行编辑.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/894305.jpg\" alt=\"变更角色最大数量\"></p>\n<p>我们在左下方的部分可以设置最大角色数量.当前是1,如果想要设置更多的角色,要先修改最大角色数量.如果我们创建一个新的角色,就先将最大角色设置为2.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/16724796.jpg\" alt=\"设置最大角色数量为2\"></p>\n<center>设置最大角色数量为2</center>\n\n<p>设置最大角色数量为2,新的角色还没有设置内容,所以只显示了”0002”</p>\n<h3 id=\"设置角色名称\"><a href=\"#设置角色名称\" class=\"headerlink\" title=\"设置角色名称\"></a>设置角色名称</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/71726307.jpg\" alt=\"设置角色名称\"></p>\n<center>设置角色名称</center>\n\n<p>我们设置角色的名称为”王富贵”,我们还可以设置角色的昵称和简称的内容.</p>\n<h3 id=\"设置角色形象\"><a href=\"#设置角色形象\" class=\"headerlink\" title=\"设置角色形象\"></a>设置角色形象</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/55925694.jpg\" alt=\"设置角色图像\"></p>\n<center>设置角色图像</center>\n\n\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/53965285.jpg\" alt=\"设置角色脸图\"></p>\n<center>设置角色脸图</center>\n\n\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/15362978.jpg\" alt=\"设置角色行走图\"></p>\n<center>设置角色行走图</center>\n\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/93210400.jpg\" alt=\"设置角色战斗图\"></p>\n<center>设置角色战斗图</center>\n\n<p>通过双击”角色”标签”图像”位置的三个不同图像部分来设置不同需求时的图像.</p>\n<h3 id=\"设置角色职业\"><a href=\"#设置角色职业\" class=\"headerlink\" title=\"设置角色职业\"></a>设置角色职业</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/81607793.jpg\" alt=\"设置角色职业\"></p>\n<p>通过下拉菜单来选择默认提供的几个职业.</p>\n<h3 id=\"设置职业信息\"><a href=\"#设置职业信息\" class=\"headerlink\" title=\"设置职业信息\"></a>设置职业信息</h3><blockquote>\n<p>不同版本的面板有做不同 已mv版本为主.</p>\n</blockquote>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/99759838.jpg\" alt=\"数据库职业标签\"></p>\n<center>数据库职业标签</center>\n\n<h4 id=\"设置经验值曲线\"><a href=\"#设置经验值曲线\" class=\"headerlink\" title=\"设置经验值曲线\"></a>设置经验值曲线</h4><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/14243586.jpg\" alt=\"经验值曲线\"></p>\n<center>经验值曲线</center>\n\n<p>我们可以根据需求和职业特色来针对不同的职业设置不同的经验曲线</p>\n<h4 id=\"设置能力曲线\"><a href=\"#设置能力曲线\" class=\"headerlink\" title=\"设置能力曲线\"></a>设置能力曲线</h4><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/83684284.jpg\" alt=\"能力曲线\"></p>\n<center>能力缺陷</center>\n\n\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/42873202.jpg\" alt=\"能力值设置\"></p>\n<center>能力值设置</center>\n\n<p>同样可以通过各种参数设置具有职业特色职业能力曲线.</p>\n<h4 id=\"设置职业技能\"><a href=\"#设置职业技能\" class=\"headerlink\" title=\"设置职业技能\"></a>设置职业技能</h4><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/3792988.jpg\" alt=\"设置职业技能\"></p>\n<center>设置职业技能</center>\n\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/90806645.jpg\" alt=\"数据库技能标签\"></p>\n<center>数据库技能标签</center>\n\n<p>关于角色的技能可以通过技能标签页面来进行修改.</p>\n<h3 id=\"设置角色初始装备\"><a href=\"#设置角色初始装备\" class=\"headerlink\" title=\"设置角色初始装备\"></a>设置角色初始装备</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/96995937.jpg\" alt=\"角色初始装备\"></p>\n<center>角色初始装备</center>\n\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/28111494.jpg\" alt=\"武器标签页\"></p>\n<center>武器标签页</center>\n\n<p>可以切换到武器标签页对武器进行编辑,针对不同的角色可以针对的设置不同的初始武器.</p>\n<h3 id=\"设置角色特性\"><a href=\"#设置角色特性\" class=\"headerlink\" title=\"设置角色特性\"></a>设置角色特性</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/93585120.jpg\" alt=\"角色特性面板\"></p>\n<center>角色特性面板</center>\n\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/27242709.jpg\" alt=\"设置角色特性\"></p>\n<center>设置角色特性</center>\n\n<h3 id=\"设置初始角色队伍\"><a href=\"#设置初始角色队伍\" class=\"headerlink\" title=\"设置初始角色队伍\"></a>设置初始角色队伍</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/87720825.jpg\" alt=\"系统页面\"></p>\n<center>系统页面</center>\n\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/77422347.jpg\" alt=\"初始队伍编辑\"></p>\n<center>初始队伍编辑</center>\n\n<p>选择”系统”标签页,可以看到初始队伍的面板,右键已经添加的角色,可以对初始队伍的角色进行编辑和删除.</p>\n<p>设置成功并保存后,让我们进入游戏打开菜单,测试一下我们的初始队伍是否和期望的一样.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/50304687.jpg\" alt=\"游戏中的菜单页面\"></p>\n<center>游戏中的菜单页面</center>\n\n<p>可以看到,我们针对初始队伍的设置是成功的.</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"RpgMaker教程5\"><a href=\"#RpgMaker教程5\" class=\"headerlink\" title=\"RpgMaker教程5\"></a>RpgMaker教程5</h1><h2 id=\"Step11-让我们创造一个英雄角色\"><a href=\"#Step11-让我们创造一个英雄角色\" class=\"headerlink\" title=\"Step11 让我们创造一个英雄角色\"></a>Step11 让我们创造一个英雄角色</h2><p>在RpgMaker的数据库中默认初始化设置了一些数据,例如角色,怪物等数据.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/22028.jpg\" alt=\"打开游戏的数据库\"><br>打开游戏中的数据库<br>","more":"</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/42542596.jpg\" alt=\"数据库页面\"></p>\n<center>数据库页面,根据版本或者设置不同,可能部分数据不同</center>\n\n<h3 id=\"创建应该一个新的角色\"><a href=\"#创建应该一个新的角色\" class=\"headerlink\" title=\"创建应该一个新的角色\"></a>创建应该一个新的角色</h3><p>我们可以在”数据库”中的”角色”标签中对角色进行编辑.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/894305.jpg\" alt=\"变更角色最大数量\"></p>\n<p>我们在左下方的部分可以设置最大角色数量.当前是1,如果想要设置更多的角色,要先修改最大角色数量.如果我们创建一个新的角色,就先将最大角色设置为2.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/16724796.jpg\" alt=\"设置最大角色数量为2\"></p>\n<center>设置最大角色数量为2</center>\n\n<p>设置最大角色数量为2,新的角色还没有设置内容,所以只显示了”0002”</p>\n<h3 id=\"设置角色名称\"><a href=\"#设置角色名称\" class=\"headerlink\" title=\"设置角色名称\"></a>设置角色名称</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/71726307.jpg\" alt=\"设置角色名称\"></p>\n<center>设置角色名称</center>\n\n<p>我们设置角色的名称为”王富贵”,我们还可以设置角色的昵称和简称的内容.</p>\n<h3 id=\"设置角色形象\"><a href=\"#设置角色形象\" class=\"headerlink\" title=\"设置角色形象\"></a>设置角色形象</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/55925694.jpg\" alt=\"设置角色图像\"></p>\n<center>设置角色图像</center>\n\n\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/53965285.jpg\" alt=\"设置角色脸图\"></p>\n<center>设置角色脸图</center>\n\n\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/15362978.jpg\" alt=\"设置角色行走图\"></p>\n<center>设置角色行走图</center>\n\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/93210400.jpg\" alt=\"设置角色战斗图\"></p>\n<center>设置角色战斗图</center>\n\n<p>通过双击”角色”标签”图像”位置的三个不同图像部分来设置不同需求时的图像.</p>\n<h3 id=\"设置角色职业\"><a href=\"#设置角色职业\" class=\"headerlink\" title=\"设置角色职业\"></a>设置角色职业</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/81607793.jpg\" alt=\"设置角色职业\"></p>\n<p>通过下拉菜单来选择默认提供的几个职业.</p>\n<h3 id=\"设置职业信息\"><a href=\"#设置职业信息\" class=\"headerlink\" title=\"设置职业信息\"></a>设置职业信息</h3><blockquote>\n<p>不同版本的面板有做不同 已mv版本为主.</p>\n</blockquote>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/99759838.jpg\" alt=\"数据库职业标签\"></p>\n<center>数据库职业标签</center>\n\n<h4 id=\"设置经验值曲线\"><a href=\"#设置经验值曲线\" class=\"headerlink\" title=\"设置经验值曲线\"></a>设置经验值曲线</h4><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/14243586.jpg\" alt=\"经验值曲线\"></p>\n<center>经验值曲线</center>\n\n<p>我们可以根据需求和职业特色来针对不同的职业设置不同的经验曲线</p>\n<h4 id=\"设置能力曲线\"><a href=\"#设置能力曲线\" class=\"headerlink\" title=\"设置能力曲线\"></a>设置能力曲线</h4><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/83684284.jpg\" alt=\"能力曲线\"></p>\n<center>能力缺陷</center>\n\n\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/42873202.jpg\" alt=\"能力值设置\"></p>\n<center>能力值设置</center>\n\n<p>同样可以通过各种参数设置具有职业特色职业能力曲线.</p>\n<h4 id=\"设置职业技能\"><a href=\"#设置职业技能\" class=\"headerlink\" title=\"设置职业技能\"></a>设置职业技能</h4><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/3792988.jpg\" alt=\"设置职业技能\"></p>\n<center>设置职业技能</center>\n\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/90806645.jpg\" alt=\"数据库技能标签\"></p>\n<center>数据库技能标签</center>\n\n<p>关于角色的技能可以通过技能标签页面来进行修改.</p>\n<h3 id=\"设置角色初始装备\"><a href=\"#设置角色初始装备\" class=\"headerlink\" title=\"设置角色初始装备\"></a>设置角色初始装备</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/96995937.jpg\" alt=\"角色初始装备\"></p>\n<center>角色初始装备</center>\n\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/28111494.jpg\" alt=\"武器标签页\"></p>\n<center>武器标签页</center>\n\n<p>可以切换到武器标签页对武器进行编辑,针对不同的角色可以针对的设置不同的初始武器.</p>\n<h3 id=\"设置角色特性\"><a href=\"#设置角色特性\" class=\"headerlink\" title=\"设置角色特性\"></a>设置角色特性</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/93585120.jpg\" alt=\"角色特性面板\"></p>\n<center>角色特性面板</center>\n\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/27242709.jpg\" alt=\"设置角色特性\"></p>\n<center>设置角色特性</center>\n\n<h3 id=\"设置初始角色队伍\"><a href=\"#设置初始角色队伍\" class=\"headerlink\" title=\"设置初始角色队伍\"></a>设置初始角色队伍</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/87720825.jpg\" alt=\"系统页面\"></p>\n<center>系统页面</center>\n\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/77422347.jpg\" alt=\"初始队伍编辑\"></p>\n<center>初始队伍编辑</center>\n\n<p>选择”系统”标签页,可以看到初始队伍的面板,右键已经添加的角色,可以对初始队伍的角色进行编辑和删除.</p>\n<p>设置成功并保存后,让我们进入游戏打开菜单,测试一下我们的初始队伍是否和期望的一样.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/50304687.jpg\" alt=\"游戏中的菜单页面\"></p>\n<center>游戏中的菜单页面</center>\n\n<p>可以看到,我们针对初始队伍的设置是成功的.</p>"},{"title":"Android View 相关源码分析之三 View的绘制过程","date":"2017-02-03T09:48:05.000Z","_content":"\n# Android View\n>Android View框架相关  View的测量 布局 绘制过程\nLinearLayout RelativeLayout实现源码分析\n\n\n\n## View的测量 布局 绘制过程\n\n### 测量之前的事情\nView的整个绘制流程是开始于ViewRootImpl类的performTraversals方法(1k行)  根据相关设置来觉得十分要重新执行相关功能\n```java\n  private void performTraversals() {\n    // cache mView since it is used so much below...\n    final View host = mView;\n    ...\n    int childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);\n    int childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);\n    ...\n    //measure\n    mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n    ...\n    //layout\n    mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());\n    ...\n    //draw\n    mView.draw(canvas);\n    ...\n  }\n  ```\n  <!-- more -->\n\n  ```java\n  private static int getRootMeasureSpec(int windowSize, int rootDimension) {\n        int measureSpec;\n        switch (rootDimension) {\n\n        case ViewGroup.LayoutParams.MATCH_PARENT:\n            // Window can't resize. Force root view to be windowSize.\n            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);\n            break;\n        ...\n        }\n        return measureSpec;\n    }\n  ```\nView 绘制整体流程图如下\n\n![View绘制整体流程图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/43941602.jpg)\n\n### measure源码分析\n\n结论:\n* measure的过程就是父View向子View递归调用view.measure方法 (measure中回调onMeasure方法)的过程\n\n* measure方法是 final的 只能重载onMeasure方法\n\n* 最顶层的DocerView的MeasureSpec由ViewRootImpl的getRootMeasureSpec方法提供 LayoutParams的参数为MATCH_PARENT specMode是EXACTLY，specSize为物理屏幕大小\n\n* 只要是ViewGroup的子类就必须要求LayoutParams继承子MarginLayoutParams 否则无法使用layout_margin参数\n\n* View的getMeasuredWidth()和getMeasuredHeight()方法来获取View测量的宽高，要必须保证这两个方法在onMeasure流程之后被调用才能返回有效值。\n\n\n\n![View measure过程](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/11065619.jpg)\n\n```java\n/**\n * <p>\n * This is called to find out how big a view should be. The parent supplies constraint information in the width and height parameters.\n * </p>\n *\n * <p>\n * The actual measurement work of a view is performed in\n * {@link #onMeasure(int, int)}, called by this method. Therefore, only\n * {@link #onMeasure(int, int)} can and must be overridden by subclasses.\n * </p>\n *\n *\n * @param widthMeasureSpec Horizontal space requirements as imposed by the\n *        parent\n * @param heightMeasureSpec Vertical space requirements as imposed by the\n *        parent\n *\n * @see #onMeasure(int, int)\n */\n //没舍得删这些注释  感觉重要的事情都说了   为了计算整个View树的实际大小 设置实际的高和宽 每个子View都是根据父视图和自身决定实际宽高的 在onMeasure()方法中进行实际测量.传入widthMeasureSpec和heightMeasureSpec参数来表示了父View的规格 不但传入了模式 还传入了size 而对于DecorView来说 传入的模式一般为EXACTLY模式 size对应屏幕的宽高. 所以说子View的大小是父子View共同决定的\npublic final void measure(int widthMeasureSpec, int heightMeasureSpec) {\n\n               // measure ourselves, this should set the measured dimension flag back\n               onMeasure(widthMeasureSpec, heightMeasureSpec);\n   }\n```\n\nMeasureSpec内部类\n\nMeasureSpec是View的内部类 int型，由高2位规格模式specMode和低30位具体尺寸specSize组成 其中specMode只有三种\n* MeasureSpec.EXACTLY //确定模式，父View希望子View的大小是确定的，由specSize决定；\n* MeasureSpec.AT_MOST //最多模式，父View希望子View的大小最多是specSize指定的值；\n* MeasureSpec.UNSPECIFIED //未指定模式，父View完全依据子View的设计值来决定；\n\nonMeasure()方法\n\n```java\n    /**\n     * <p>\n     * Measure the view and its content to determine the measured width and the\n     * measured height. This method is invoked by {@link #measure(int, int)} and\n     * should be overridden by subclasses to provide accurate and efficient\n     * measurement of their contents.\n     * </p>\n     *\n     * <p>\n     * <strong>CONTRACT:</strong> When overriding this method, you\n     * <em>must</em> call {@link #setMeasuredDimension(int, int)} to store the\n     * measured width and height of this view. Failure to do so will trigger an\n     * <code>IllegalStateException</code>, thrown by\n     * {@link #measure(int, int)}. Calling the superclass'\n     * {@link #onMeasure(int, int)} is a valid use.\n     * </p>\n     *\n     * <p>\n     * The base class implementation of measure defaults to the background size,\n     * unless a larger size is allowed by the MeasureSpec. Subclasses should\n     * override {@link #onMeasure(int, int)} to provide better measurements of\n     * their content.\n     * </p>\n     *\n     * <p>\n     * If this method is overridden, it is the subclass's responsibility to make\n     * sure the measured height and width are at least the view's minimum height\n     * and width ({@link #getSuggestedMinimumHeight()} and\n     * {@link #getSuggestedMinimumWidth()}).\n     * </p>\n     *\n     * @param widthMeasureSpec horizontal space requirements as imposed by the parent.\n     *                         The requirements are encoded with\n     *                         {@link android.view.View.MeasureSpec}.\n     * @param heightMeasureSpec vertical space requirements as imposed by the parent.\n     *                         The requirements are encoded with\n     *                         {@link android.view.View.MeasureSpec}.\n     *\n     * @see #getMeasuredWidth()\n     * @see #getMeasuredHeight()\n     * @see #setMeasuredDimension(int, int)\n     * @see #getSuggestedMinimumHeight()\n     * @see #getSuggestedMinimumWidth()\n     * @see android.view.View.MeasureSpec#getMode(int)\n     * @see android.view.View.MeasureSpec#getSize(int)\n     */\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n    }\n```\ngetDefaultSize方法相关\n```java\n  public static int getDefaultSize(int size, int measureSpec) {\n    int result = size;\n    //通过measureSpec得到mode和size\n    int specMode = MeasureSpec.getMode(measureSpec);\n    int specSize = MeasureSpec.getSize(measureSpec);\n\n    switch (specMode) {\n    case MeasureSpec.UNSPECIFIED:\n        result = size;\n        break;\n    case MeasureSpec.AT_MOST:\n    case MeasureSpec.EXACTLY:\n        result = specSize;\n        break;\n    }\n    return result;\n  }\n\n  //最小宽度和高度由View的Background尺寸和View的minXXX共同决定\n  protected int getSuggestedMinimumHeight() {\n      return (mBackground == null) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());\n\n  }\n  protected int getSuggestedMinimumWidth() {\n      return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());\n  }\n```\nsetMeasuredDimension方法 对View的成员变量measuredWidth和measuredHeight变量赋值 也就是说该方法最终决定了View的大小\n```java\n  protected final void setMeasuredDimension(int measuredWidth, int measuredHeight) {\n      boolean optical = isLayoutModeOptical(this);\n      if (optical != isLayoutModeOptical(mParent)) {\n          Insets insets = getOpticalInsets();\n          int opticalWidth  = insets.left + insets.right;\n          int opticalHeight = insets.top  + insets.bottom;\n\n          measuredWidth  += optical ? opticalWidth  : -opticalWidth;\n          measuredHeight += optical ? opticalHeight : -opticalHeight;\n      }\n      setMeasuredDimensionRaw(measuredWidth, measuredHeight);\n  }\n\n  public boolean isLayoutRequested() {\n    return (mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT;\n  }\n\n  private void setMeasuredDimensionRaw(int measuredWidth, int measuredHeight) {\n    mMeasuredWidth = measuredWidth;\n    mMeasuredHeight = measuredHeight;\n\n    mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;\n  }\n```\n\n至此一次最基础的View的measure过程就完成了  但是由于View可以嵌套  所以measure是递归传递的所以ViewGroup中需要对其子类进行measure过程 measureChildren方法实质为循环调用measureChild方法\n\n而measureChild和measureChildWithMargins的区别是后者将margin和padding也作为了子视图的大小\n\n一下分析measureChildWithMargins方法\n```java\n  protected void measureChildWithMargins(View child,\n          int parentWidthMeasureSpec, int widthUsed,\n          int parentHeightMeasureSpec, int heightUsed) {\n      //获取当前子视图的LayoutParams\n      final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();\n      //设定子View的测量规格\n      final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\n              mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin\n                      + widthUsed, lp.width);\n      final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\n              mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin\n                      + heightUsed, lp.height);\n      //子view的继续调用\n      child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n  }\n\n  //在getChildMeasureSpec中通过父View和本身的模式共同决定当前View的size\n  public static int getChildMeasureSpec(int spec, int padding, int childDimension) {\n        //获取当前父View的mode和size\n        int specMode = MeasureSpec.getMode(spec);\n        int specSize = MeasureSpec.getSize(spec);\n        //获取父View的的剩余大小\n        int size = Math.max(0, specSize - padding);\n        //定义结果变量\n        int resultSize = 0;\n        int resultMode = 0;\n        //根据对应的mode做处理\n        //通过父View和本身的模式共同决定当前View的size\n        switch (specMode) {\n        // Parent has imposed an exact size on us\n        case MeasureSpec.EXACTLY:\n            if (childDimension >= 0) {\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size. So be it.\n                resultSize = size;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent has imposed a maximum size on us\n        case MeasureSpec.AT_MOST:\n            if (childDimension >= 0) {\n                // Child wants a specific size... so be it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size, but our size is not fixed.\n                // Constrain child to not be bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent asked to see how big we want to be\n        case MeasureSpec.UNSPECIFIED:\n            if (childDimension >= 0) {\n                // Child wants a specific size... let him have it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size... find out how big it should\n                // be\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size.... find out how\n                // big it should be\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            }\n            break;\n        }\n        //将size和mode整合为MeasureSpec模式后返回\n        return MeasureSpec.makeMeasureSpec(resultSize, resultMode);\n    }\n\n```\n\n### layout源码分析\nView layout整体流程与measure过程基本一样\n\n结论:\n* 需要根据ViewGroup本身的情况讨论 LinearLayout下会更看重子View的height和width 来安排对应位置 而RelativeLayout则更加关注子View的left right top bottom值 并且优先级高于width和height 甚至在部分自定义ViewGroup中 measure可能是无用的   直接使用layout方法来设置子View的位置也可以\n* ViewGroup需要实现自己的layout逻辑\n* layout_XXX中的各个熟悉都是针对子View的父ViewGroup的\n* 同样使用View的getWidth()和getHeight()方法来获取View测量的宽高 必须保证这两个方法在onLayout流程之后被调用才能返回有效值\n\n```java\n  /**\n     * Assign a size and position to a view and all of its\n     * descendants\n     *\n     * <p>This is the second phase of the layout mechanism.\n     * (The first is measuring). In this phase, each parent calls\n     * layout on all of its children to position them.\n     * This is typically done using the child measurements\n     * that were stored in the measure pass().</p>\n     *\n     * <p>Derived classes should not override this method.\n     * Derived classes with children should override\n     * onLayout. In that method, they should\n     * call layout on each of their children.</p>\n     *\n     * @param l Left position, relative to parent\n     * @param t Top position, relative to parent\n     * @param r Right position, relative to parent\n     * @param b Bottom position, relative to parent\n     */\n\n     //同样注解写的很好了  分派给他和他的所有的子视图大小和位置\n    @SuppressWarnings({\"unchecked\"})\n    public void layout(int l, int t, int r, int b) {\n        if ((mPrivateFlags3 & PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != 0) {\n            onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);\n            mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n        }\n         //调用setFrame方法把参数分别赋值于\n        int oldL = mLeft;\n        int oldT = mTop;\n        int oldB = mBottom;\n        int oldR = mRight;\n        //判断view的位置是否发生过变化 , 确定是否对当前view重新layout\n        boolean changed = isLayoutModeOptical(mParent) ?\n                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);\n\n\n        if (changed || (mPrivateFlags & PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) {\n            //调用onLayout\n            onLayout(changed, l, t, r, b);\n            mPrivateFlags &= ~PFLAG_LAYOUT_REQUIRED;\n            ListenerInfo li = mListenerInfo;\n            if (li != null && li.mOnLayoutChangeListeners != null) {\n                ArrayList<OnLayoutChangeListener> listenersCopy =\n                        (ArrayList<OnLayoutChangeListener>)li.mOnLayoutChangeListeners.clone();\n                int numListeners = listenersCopy.size();\n                for (int i = 0; i < numListeners; ++i) {\n                    listenersCopy.get(i).onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB);\n                }\n            }\n        }\n\n        mPrivateFlags &= ~PFLAG_FORCE_LAYOUT;\n        mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;\n    }\n```\n\nonLyayout方法\n```java\n  View中\n  protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n  }\n  ViewGroup中\n  protected abstract void onLayout(boolean changed,\n        int l, int t, int r, int b);\n```\n\n均是空方法  后面会就LinearLayout和RelativeLayout源码进行分析\n\n### draw源码分析\n\nView的draw流程图如下\n\n![Viewdraw](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/85888827.jpg)\n\n结论:\n* View需要在子类中实现onDraw的过程\n* 在ViewGroup中 会调用其子View的方法 顺序与子view的添加顺序一致\n\n\ndraw的源码也很长 但是官方也给出给出了draw的过程\n```java\n  public void draw(Canvas canvas) {\n     ...\n     /*\n      * Draw traversal performs several drawing steps which must be executed\n      * in the appropriate order:\n      *\n      *      1. Draw the background\n      *      2. If necessary, save the canvas' layers to prepare for fading\n      *      3. Draw view's content\n      *      4. Draw children\n      *      5. If necessary, draw the fading edges and restore layers\n      *      6. Draw decorations (scrollbars for instance)\n      */\n\n     // Step 1, draw the background, if needed\n     ...\n     if (!dirtyOpaque) {\n         drawBackground(canvas);\n     }\n\n     // skip step 2 & 5 if possible (common case)\n     ...\n\n     // Step 2, save the canvas' layers\n     ...\n         if (drawTop) {\n             canvas.saveLayer(left, top, right, top + length, null, flags);\n         }\n     ...\n\n     // Step 3, draw the content\n     if (!dirtyOpaque) onDraw(canvas);\n\n     // Step 4, draw the children\n     dispatchDraw(canvas);\n\n     // Step 5, draw the fade effect and restore layers\n     ...\n     if (drawTop) {\n         matrix.setScale(1, fadeHeight * topFadeStrength);\n         matrix.postTranslate(left, top);\n         fade.setLocalMatrix(matrix);\n         p.setShader(fade);\n         canvas.drawRect(left, top, right, top + length, p);\n     }\n     ...\n\n     // Step 6, draw decorations (scrollbars)\n     onDrawScrollBars(canvas);\n     ...\n }\n```\n\n#### Step 1, draw the background, if needed\n```java\n  // Step 1, draw the background, if needed\n  //如果需要的话绘制背景\n\n  if (!dirtyOpaque) {\n      drawBackground(canvas);\n  }\n```\n\n```java\n  private void drawBackground(Canvas canvas) {\n\n    \t//通过xml中属性background或者代码中setBackGroundColor\\setBackgroundResource等方法赋值的背景drawable\n        final Drawable background = mBackground;\n        if (background == null) {\n            return;\n        }\n\n        //根据layout中确定的view位置来设置背景的绘制区域\n        setBackgroundBounds();\n\n\n        // 如果需要的话使用显示列表\n        //canvas.isHardwareAccelerated() 硬件加速判定\n        //硬件加速时会将图层缓存到GPU上 而不是重绘View的每一层\n        if (canvas.isHardwareAccelerated() && mAttachInfo != null\n                && mAttachInfo.mHardwareRenderer != null) {\n            mBackgroundRenderNode = getDrawableRenderNode(background, mBackgroundRenderNode);\n\n            final RenderNode renderNode = mBackgroundRenderNode;\n            if (renderNode != null && renderNode.isValid()) {\n                setBackgroundRenderNodeProperties(renderNode);\n                ((DisplayListCanvas) canvas).drawRenderNode(renderNode);\n                return;\n            }\n        }\n\n        final int scrollX = mScrollX;\n        final int scrollY = mScrollY;\n        //调用Drawable的draw方法来完成背景的绘制工作\n        if ((scrollX | scrollY) == 0) {\n            background.draw(canvas);\n        } else {\n            canvas.translate(scrollX, scrollY);\n            background.draw(canvas);\n            canvas.translate(-scrollX, -scrollY);\n        }\n    }\n\n\n    void setBackgroundBounds() {\n    if (mBackgroundSizeChanged && mBackground != null) {\n        mBackground.setBounds(0, 0,  mRight - mLeft, mBottom - mTop);\n        mBackgroundSizeChanged = false;\n        rebuildOutline();\n    }\n  }\n```\n\n\n#### Step 2, save the canvas' layers\n```java\n  // Step 2, save the canvas' layers\n  //保存绘制图层\n\n         if (drawTop) {\n             canvas.saveLayer(left, top, right, top + length, null, flags);\n         }\n\n```\n\n#### Step 3, draw the content\n```java\n  // Step 3, draw the content\n  //对View的内容进行绘制\n  if (!dirtyOpaque) onDraw(canvas);\n```\n```java\n  /**\n  * Implement this to do your drawing.\n  *\n  * @param canvas the canvas on which the background will be drawn\n  */\n  //onDraw也是空方法需要子类根据自身去实现相应的\n  protected void onDraw(Canvas canvas) {\n  }\n\n```\n\n#### Step 4, draw the children\n```java\n  // Step 4, draw the children\n  //绘制其子View\n  dispatchDraw(canvas);\n```\n\n```java\n  /**\n   * Called by draw to draw the child views. This may be overridden\n   * by derived classes to gain control just before its children are drawn\n   * (but after its own view has been drawn).\n   * @param canvas the canvas on which to draw the view\n   */\n  protected void dispatchDraw(Canvas canvas) {\n  //dispatchDraw同样空方法 与onDraw不同的是dispatchDraw在ViewGroup中被重写\n  }\n```\n\nViewGroup\n```java\n  //dispatchDraw方法中根据子View的不同情况 包括但不只包括该View是否显示 是否有进入或消失动画等进行了部分的调整\n  protected void dispatchDraw(Canvas canvas) {\n      ...\n        more |= drawChild(canvas, transientChild, drawingTime);\n      ...    \n  }\n\n  protected boolean drawChild(Canvas canvas, View child, long drawingTime) {\n    return child.draw(canvas, this, drawingTime);\n  }\n```\n#### Step 5, draw the fade effect and restore layers\n\n```java\n  // Step 5, draw the fade effect and restore layers\n  //绘制过度效果和恢复图层\n  if (drawTop) {\n      matrix.setScale(1, fadeHeight * topFadeStrength);\n      matrix.postTranslate(left, top);\n      fade.setLocalMatrix(matrix);\n      p.setShader(fade);\n      canvas.drawRect(left, top, right, top + length, p);\n  }\n```\n\n####  Step 6, draw decorations (scrollbars)\n```java\n  // Step 6, draw decorations (scrollbars)\n  //对滚动条进行绘制\n  onDrawScrollBars(canvas);\n```\n","source":"_posts/View 绘制源码分析.md","raw":"---\ntitle: Android View 相关源码分析之三 View的绘制过程\ndate: 2017-02-03 17:48:05\ntags: [\"android\" , \"view\" , \"源码\"]\ncategories: \"android\"\n---\n\n# Android View\n>Android View框架相关  View的测量 布局 绘制过程\nLinearLayout RelativeLayout实现源码分析\n\n\n\n## View的测量 布局 绘制过程\n\n### 测量之前的事情\nView的整个绘制流程是开始于ViewRootImpl类的performTraversals方法(1k行)  根据相关设置来觉得十分要重新执行相关功能\n```java\n  private void performTraversals() {\n    // cache mView since it is used so much below...\n    final View host = mView;\n    ...\n    int childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);\n    int childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);\n    ...\n    //measure\n    mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n    ...\n    //layout\n    mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());\n    ...\n    //draw\n    mView.draw(canvas);\n    ...\n  }\n  ```\n  <!-- more -->\n\n  ```java\n  private static int getRootMeasureSpec(int windowSize, int rootDimension) {\n        int measureSpec;\n        switch (rootDimension) {\n\n        case ViewGroup.LayoutParams.MATCH_PARENT:\n            // Window can't resize. Force root view to be windowSize.\n            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);\n            break;\n        ...\n        }\n        return measureSpec;\n    }\n  ```\nView 绘制整体流程图如下\n\n![View绘制整体流程图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/43941602.jpg)\n\n### measure源码分析\n\n结论:\n* measure的过程就是父View向子View递归调用view.measure方法 (measure中回调onMeasure方法)的过程\n\n* measure方法是 final的 只能重载onMeasure方法\n\n* 最顶层的DocerView的MeasureSpec由ViewRootImpl的getRootMeasureSpec方法提供 LayoutParams的参数为MATCH_PARENT specMode是EXACTLY，specSize为物理屏幕大小\n\n* 只要是ViewGroup的子类就必须要求LayoutParams继承子MarginLayoutParams 否则无法使用layout_margin参数\n\n* View的getMeasuredWidth()和getMeasuredHeight()方法来获取View测量的宽高，要必须保证这两个方法在onMeasure流程之后被调用才能返回有效值。\n\n\n\n![View measure过程](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/11065619.jpg)\n\n```java\n/**\n * <p>\n * This is called to find out how big a view should be. The parent supplies constraint information in the width and height parameters.\n * </p>\n *\n * <p>\n * The actual measurement work of a view is performed in\n * {@link #onMeasure(int, int)}, called by this method. Therefore, only\n * {@link #onMeasure(int, int)} can and must be overridden by subclasses.\n * </p>\n *\n *\n * @param widthMeasureSpec Horizontal space requirements as imposed by the\n *        parent\n * @param heightMeasureSpec Vertical space requirements as imposed by the\n *        parent\n *\n * @see #onMeasure(int, int)\n */\n //没舍得删这些注释  感觉重要的事情都说了   为了计算整个View树的实际大小 设置实际的高和宽 每个子View都是根据父视图和自身决定实际宽高的 在onMeasure()方法中进行实际测量.传入widthMeasureSpec和heightMeasureSpec参数来表示了父View的规格 不但传入了模式 还传入了size 而对于DecorView来说 传入的模式一般为EXACTLY模式 size对应屏幕的宽高. 所以说子View的大小是父子View共同决定的\npublic final void measure(int widthMeasureSpec, int heightMeasureSpec) {\n\n               // measure ourselves, this should set the measured dimension flag back\n               onMeasure(widthMeasureSpec, heightMeasureSpec);\n   }\n```\n\nMeasureSpec内部类\n\nMeasureSpec是View的内部类 int型，由高2位规格模式specMode和低30位具体尺寸specSize组成 其中specMode只有三种\n* MeasureSpec.EXACTLY //确定模式，父View希望子View的大小是确定的，由specSize决定；\n* MeasureSpec.AT_MOST //最多模式，父View希望子View的大小最多是specSize指定的值；\n* MeasureSpec.UNSPECIFIED //未指定模式，父View完全依据子View的设计值来决定；\n\nonMeasure()方法\n\n```java\n    /**\n     * <p>\n     * Measure the view and its content to determine the measured width and the\n     * measured height. This method is invoked by {@link #measure(int, int)} and\n     * should be overridden by subclasses to provide accurate and efficient\n     * measurement of their contents.\n     * </p>\n     *\n     * <p>\n     * <strong>CONTRACT:</strong> When overriding this method, you\n     * <em>must</em> call {@link #setMeasuredDimension(int, int)} to store the\n     * measured width and height of this view. Failure to do so will trigger an\n     * <code>IllegalStateException</code>, thrown by\n     * {@link #measure(int, int)}. Calling the superclass'\n     * {@link #onMeasure(int, int)} is a valid use.\n     * </p>\n     *\n     * <p>\n     * The base class implementation of measure defaults to the background size,\n     * unless a larger size is allowed by the MeasureSpec. Subclasses should\n     * override {@link #onMeasure(int, int)} to provide better measurements of\n     * their content.\n     * </p>\n     *\n     * <p>\n     * If this method is overridden, it is the subclass's responsibility to make\n     * sure the measured height and width are at least the view's minimum height\n     * and width ({@link #getSuggestedMinimumHeight()} and\n     * {@link #getSuggestedMinimumWidth()}).\n     * </p>\n     *\n     * @param widthMeasureSpec horizontal space requirements as imposed by the parent.\n     *                         The requirements are encoded with\n     *                         {@link android.view.View.MeasureSpec}.\n     * @param heightMeasureSpec vertical space requirements as imposed by the parent.\n     *                         The requirements are encoded with\n     *                         {@link android.view.View.MeasureSpec}.\n     *\n     * @see #getMeasuredWidth()\n     * @see #getMeasuredHeight()\n     * @see #setMeasuredDimension(int, int)\n     * @see #getSuggestedMinimumHeight()\n     * @see #getSuggestedMinimumWidth()\n     * @see android.view.View.MeasureSpec#getMode(int)\n     * @see android.view.View.MeasureSpec#getSize(int)\n     */\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n    }\n```\ngetDefaultSize方法相关\n```java\n  public static int getDefaultSize(int size, int measureSpec) {\n    int result = size;\n    //通过measureSpec得到mode和size\n    int specMode = MeasureSpec.getMode(measureSpec);\n    int specSize = MeasureSpec.getSize(measureSpec);\n\n    switch (specMode) {\n    case MeasureSpec.UNSPECIFIED:\n        result = size;\n        break;\n    case MeasureSpec.AT_MOST:\n    case MeasureSpec.EXACTLY:\n        result = specSize;\n        break;\n    }\n    return result;\n  }\n\n  //最小宽度和高度由View的Background尺寸和View的minXXX共同决定\n  protected int getSuggestedMinimumHeight() {\n      return (mBackground == null) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());\n\n  }\n  protected int getSuggestedMinimumWidth() {\n      return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());\n  }\n```\nsetMeasuredDimension方法 对View的成员变量measuredWidth和measuredHeight变量赋值 也就是说该方法最终决定了View的大小\n```java\n  protected final void setMeasuredDimension(int measuredWidth, int measuredHeight) {\n      boolean optical = isLayoutModeOptical(this);\n      if (optical != isLayoutModeOptical(mParent)) {\n          Insets insets = getOpticalInsets();\n          int opticalWidth  = insets.left + insets.right;\n          int opticalHeight = insets.top  + insets.bottom;\n\n          measuredWidth  += optical ? opticalWidth  : -opticalWidth;\n          measuredHeight += optical ? opticalHeight : -opticalHeight;\n      }\n      setMeasuredDimensionRaw(measuredWidth, measuredHeight);\n  }\n\n  public boolean isLayoutRequested() {\n    return (mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT;\n  }\n\n  private void setMeasuredDimensionRaw(int measuredWidth, int measuredHeight) {\n    mMeasuredWidth = measuredWidth;\n    mMeasuredHeight = measuredHeight;\n\n    mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;\n  }\n```\n\n至此一次最基础的View的measure过程就完成了  但是由于View可以嵌套  所以measure是递归传递的所以ViewGroup中需要对其子类进行measure过程 measureChildren方法实质为循环调用measureChild方法\n\n而measureChild和measureChildWithMargins的区别是后者将margin和padding也作为了子视图的大小\n\n一下分析measureChildWithMargins方法\n```java\n  protected void measureChildWithMargins(View child,\n          int parentWidthMeasureSpec, int widthUsed,\n          int parentHeightMeasureSpec, int heightUsed) {\n      //获取当前子视图的LayoutParams\n      final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();\n      //设定子View的测量规格\n      final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\n              mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin\n                      + widthUsed, lp.width);\n      final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\n              mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin\n                      + heightUsed, lp.height);\n      //子view的继续调用\n      child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n  }\n\n  //在getChildMeasureSpec中通过父View和本身的模式共同决定当前View的size\n  public static int getChildMeasureSpec(int spec, int padding, int childDimension) {\n        //获取当前父View的mode和size\n        int specMode = MeasureSpec.getMode(spec);\n        int specSize = MeasureSpec.getSize(spec);\n        //获取父View的的剩余大小\n        int size = Math.max(0, specSize - padding);\n        //定义结果变量\n        int resultSize = 0;\n        int resultMode = 0;\n        //根据对应的mode做处理\n        //通过父View和本身的模式共同决定当前View的size\n        switch (specMode) {\n        // Parent has imposed an exact size on us\n        case MeasureSpec.EXACTLY:\n            if (childDimension >= 0) {\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size. So be it.\n                resultSize = size;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent has imposed a maximum size on us\n        case MeasureSpec.AT_MOST:\n            if (childDimension >= 0) {\n                // Child wants a specific size... so be it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size, but our size is not fixed.\n                // Constrain child to not be bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent asked to see how big we want to be\n        case MeasureSpec.UNSPECIFIED:\n            if (childDimension >= 0) {\n                // Child wants a specific size... let him have it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size... find out how big it should\n                // be\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size.... find out how\n                // big it should be\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            }\n            break;\n        }\n        //将size和mode整合为MeasureSpec模式后返回\n        return MeasureSpec.makeMeasureSpec(resultSize, resultMode);\n    }\n\n```\n\n### layout源码分析\nView layout整体流程与measure过程基本一样\n\n结论:\n* 需要根据ViewGroup本身的情况讨论 LinearLayout下会更看重子View的height和width 来安排对应位置 而RelativeLayout则更加关注子View的left right top bottom值 并且优先级高于width和height 甚至在部分自定义ViewGroup中 measure可能是无用的   直接使用layout方法来设置子View的位置也可以\n* ViewGroup需要实现自己的layout逻辑\n* layout_XXX中的各个熟悉都是针对子View的父ViewGroup的\n* 同样使用View的getWidth()和getHeight()方法来获取View测量的宽高 必须保证这两个方法在onLayout流程之后被调用才能返回有效值\n\n```java\n  /**\n     * Assign a size and position to a view and all of its\n     * descendants\n     *\n     * <p>This is the second phase of the layout mechanism.\n     * (The first is measuring). In this phase, each parent calls\n     * layout on all of its children to position them.\n     * This is typically done using the child measurements\n     * that were stored in the measure pass().</p>\n     *\n     * <p>Derived classes should not override this method.\n     * Derived classes with children should override\n     * onLayout. In that method, they should\n     * call layout on each of their children.</p>\n     *\n     * @param l Left position, relative to parent\n     * @param t Top position, relative to parent\n     * @param r Right position, relative to parent\n     * @param b Bottom position, relative to parent\n     */\n\n     //同样注解写的很好了  分派给他和他的所有的子视图大小和位置\n    @SuppressWarnings({\"unchecked\"})\n    public void layout(int l, int t, int r, int b) {\n        if ((mPrivateFlags3 & PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != 0) {\n            onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);\n            mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n        }\n         //调用setFrame方法把参数分别赋值于\n        int oldL = mLeft;\n        int oldT = mTop;\n        int oldB = mBottom;\n        int oldR = mRight;\n        //判断view的位置是否发生过变化 , 确定是否对当前view重新layout\n        boolean changed = isLayoutModeOptical(mParent) ?\n                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);\n\n\n        if (changed || (mPrivateFlags & PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) {\n            //调用onLayout\n            onLayout(changed, l, t, r, b);\n            mPrivateFlags &= ~PFLAG_LAYOUT_REQUIRED;\n            ListenerInfo li = mListenerInfo;\n            if (li != null && li.mOnLayoutChangeListeners != null) {\n                ArrayList<OnLayoutChangeListener> listenersCopy =\n                        (ArrayList<OnLayoutChangeListener>)li.mOnLayoutChangeListeners.clone();\n                int numListeners = listenersCopy.size();\n                for (int i = 0; i < numListeners; ++i) {\n                    listenersCopy.get(i).onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB);\n                }\n            }\n        }\n\n        mPrivateFlags &= ~PFLAG_FORCE_LAYOUT;\n        mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;\n    }\n```\n\nonLyayout方法\n```java\n  View中\n  protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n  }\n  ViewGroup中\n  protected abstract void onLayout(boolean changed,\n        int l, int t, int r, int b);\n```\n\n均是空方法  后面会就LinearLayout和RelativeLayout源码进行分析\n\n### draw源码分析\n\nView的draw流程图如下\n\n![Viewdraw](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/85888827.jpg)\n\n结论:\n* View需要在子类中实现onDraw的过程\n* 在ViewGroup中 会调用其子View的方法 顺序与子view的添加顺序一致\n\n\ndraw的源码也很长 但是官方也给出给出了draw的过程\n```java\n  public void draw(Canvas canvas) {\n     ...\n     /*\n      * Draw traversal performs several drawing steps which must be executed\n      * in the appropriate order:\n      *\n      *      1. Draw the background\n      *      2. If necessary, save the canvas' layers to prepare for fading\n      *      3. Draw view's content\n      *      4. Draw children\n      *      5. If necessary, draw the fading edges and restore layers\n      *      6. Draw decorations (scrollbars for instance)\n      */\n\n     // Step 1, draw the background, if needed\n     ...\n     if (!dirtyOpaque) {\n         drawBackground(canvas);\n     }\n\n     // skip step 2 & 5 if possible (common case)\n     ...\n\n     // Step 2, save the canvas' layers\n     ...\n         if (drawTop) {\n             canvas.saveLayer(left, top, right, top + length, null, flags);\n         }\n     ...\n\n     // Step 3, draw the content\n     if (!dirtyOpaque) onDraw(canvas);\n\n     // Step 4, draw the children\n     dispatchDraw(canvas);\n\n     // Step 5, draw the fade effect and restore layers\n     ...\n     if (drawTop) {\n         matrix.setScale(1, fadeHeight * topFadeStrength);\n         matrix.postTranslate(left, top);\n         fade.setLocalMatrix(matrix);\n         p.setShader(fade);\n         canvas.drawRect(left, top, right, top + length, p);\n     }\n     ...\n\n     // Step 6, draw decorations (scrollbars)\n     onDrawScrollBars(canvas);\n     ...\n }\n```\n\n#### Step 1, draw the background, if needed\n```java\n  // Step 1, draw the background, if needed\n  //如果需要的话绘制背景\n\n  if (!dirtyOpaque) {\n      drawBackground(canvas);\n  }\n```\n\n```java\n  private void drawBackground(Canvas canvas) {\n\n    \t//通过xml中属性background或者代码中setBackGroundColor\\setBackgroundResource等方法赋值的背景drawable\n        final Drawable background = mBackground;\n        if (background == null) {\n            return;\n        }\n\n        //根据layout中确定的view位置来设置背景的绘制区域\n        setBackgroundBounds();\n\n\n        // 如果需要的话使用显示列表\n        //canvas.isHardwareAccelerated() 硬件加速判定\n        //硬件加速时会将图层缓存到GPU上 而不是重绘View的每一层\n        if (canvas.isHardwareAccelerated() && mAttachInfo != null\n                && mAttachInfo.mHardwareRenderer != null) {\n            mBackgroundRenderNode = getDrawableRenderNode(background, mBackgroundRenderNode);\n\n            final RenderNode renderNode = mBackgroundRenderNode;\n            if (renderNode != null && renderNode.isValid()) {\n                setBackgroundRenderNodeProperties(renderNode);\n                ((DisplayListCanvas) canvas).drawRenderNode(renderNode);\n                return;\n            }\n        }\n\n        final int scrollX = mScrollX;\n        final int scrollY = mScrollY;\n        //调用Drawable的draw方法来完成背景的绘制工作\n        if ((scrollX | scrollY) == 0) {\n            background.draw(canvas);\n        } else {\n            canvas.translate(scrollX, scrollY);\n            background.draw(canvas);\n            canvas.translate(-scrollX, -scrollY);\n        }\n    }\n\n\n    void setBackgroundBounds() {\n    if (mBackgroundSizeChanged && mBackground != null) {\n        mBackground.setBounds(0, 0,  mRight - mLeft, mBottom - mTop);\n        mBackgroundSizeChanged = false;\n        rebuildOutline();\n    }\n  }\n```\n\n\n#### Step 2, save the canvas' layers\n```java\n  // Step 2, save the canvas' layers\n  //保存绘制图层\n\n         if (drawTop) {\n             canvas.saveLayer(left, top, right, top + length, null, flags);\n         }\n\n```\n\n#### Step 3, draw the content\n```java\n  // Step 3, draw the content\n  //对View的内容进行绘制\n  if (!dirtyOpaque) onDraw(canvas);\n```\n```java\n  /**\n  * Implement this to do your drawing.\n  *\n  * @param canvas the canvas on which the background will be drawn\n  */\n  //onDraw也是空方法需要子类根据自身去实现相应的\n  protected void onDraw(Canvas canvas) {\n  }\n\n```\n\n#### Step 4, draw the children\n```java\n  // Step 4, draw the children\n  //绘制其子View\n  dispatchDraw(canvas);\n```\n\n```java\n  /**\n   * Called by draw to draw the child views. This may be overridden\n   * by derived classes to gain control just before its children are drawn\n   * (but after its own view has been drawn).\n   * @param canvas the canvas on which to draw the view\n   */\n  protected void dispatchDraw(Canvas canvas) {\n  //dispatchDraw同样空方法 与onDraw不同的是dispatchDraw在ViewGroup中被重写\n  }\n```\n\nViewGroup\n```java\n  //dispatchDraw方法中根据子View的不同情况 包括但不只包括该View是否显示 是否有进入或消失动画等进行了部分的调整\n  protected void dispatchDraw(Canvas canvas) {\n      ...\n        more |= drawChild(canvas, transientChild, drawingTime);\n      ...    \n  }\n\n  protected boolean drawChild(Canvas canvas, View child, long drawingTime) {\n    return child.draw(canvas, this, drawingTime);\n  }\n```\n#### Step 5, draw the fade effect and restore layers\n\n```java\n  // Step 5, draw the fade effect and restore layers\n  //绘制过度效果和恢复图层\n  if (drawTop) {\n      matrix.setScale(1, fadeHeight * topFadeStrength);\n      matrix.postTranslate(left, top);\n      fade.setLocalMatrix(matrix);\n      p.setShader(fade);\n      canvas.drawRect(left, top, right, top + length, p);\n  }\n```\n\n####  Step 6, draw decorations (scrollbars)\n```java\n  // Step 6, draw decorations (scrollbars)\n  //对滚动条进行绘制\n  onDrawScrollBars(canvas);\n```\n","slug":"View 绘制源码分析","published":1,"updated":"2020-03-13T09:33:05.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5e0000uq7dqtit97h8q","content":"<h1 id=\"Android-View\"><a href=\"#Android-View\" class=\"headerlink\" title=\"Android View\"></a>Android View</h1><blockquote>\n<p>Android View框架相关  View的测量 布局 绘制过程<br>LinearLayout RelativeLayout实现源码分析</p>\n</blockquote>\n<h2 id=\"View的测量-布局-绘制过程\"><a href=\"#View的测量-布局-绘制过程\" class=\"headerlink\" title=\"View的测量 布局 绘制过程\"></a>View的测量 布局 绘制过程</h2><h3 id=\"测量之前的事情\"><a href=\"#测量之前的事情\" class=\"headerlink\" title=\"测量之前的事情\"></a>测量之前的事情</h3><p>View的整个绘制流程是开始于ViewRootImpl类的performTraversals方法(1k行)  根据相关设置来觉得十分要重新执行相关功能<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performTraversals</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// cache mView since it is used so much below...</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> View host = mView;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">int</span> childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">//measure</span></span><br><span class=\"line\">  mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">//layout</span></span><br><span class=\"line\">  mView.layout(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mView.getMeasuredWidth(), mView.getMeasuredHeight());</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">//draw</span></span><br><span class=\"line\">  mView.draw(canvas);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n  <a id=\"more\"></a>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getRootMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> windowSize, <span class=\"keyword\">int</span> rootDimension)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> measureSpec;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (rootDimension) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">case</span> ViewGroup.LayoutParams.MATCH_PARENT:</span><br><span class=\"line\">          <span class=\"comment\">// Window can't resize. Force root view to be windowSize.</span></span><br><span class=\"line\">          measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> measureSpec;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>View 绘制整体流程图如下</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/43941602.jpg\" alt=\"View绘制整体流程图\"></p>\n<h3 id=\"measure源码分析\"><a href=\"#measure源码分析\" class=\"headerlink\" title=\"measure源码分析\"></a>measure源码分析</h3><p>结论:</p>\n<ul>\n<li><p>measure的过程就是父View向子View递归调用view.measure方法 (measure中回调onMeasure方法)的过程</p>\n</li>\n<li><p>measure方法是 final的 只能重载onMeasure方法</p>\n</li>\n<li><p>最顶层的DocerView的MeasureSpec由ViewRootImpl的getRootMeasureSpec方法提供 LayoutParams的参数为MATCH_PARENT specMode是EXACTLY，specSize为物理屏幕大小</p>\n</li>\n<li><p>只要是ViewGroup的子类就必须要求LayoutParams继承子MarginLayoutParams 否则无法使用layout_margin参数</p>\n</li>\n<li><p>View的getMeasuredWidth()和getMeasuredHeight()方法来获取View测量的宽高，要必须保证这两个方法在onMeasure流程之后被调用才能返回有效值。</p>\n</li>\n</ul>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/11065619.jpg\" alt=\"View measure过程\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * This is called to find out how big a view should be. The parent supplies constraint information in the width and height parameters.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * The actual measurement work of a view is performed in</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125;, called by this method. Therefore, only</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; can and must be overridden by subclasses.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> widthMeasureSpec Horizontal space requirements as imposed by the</span></span><br><span class=\"line\"><span class=\"comment\"> *        parent</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> heightMeasureSpec Vertical space requirements as imposed by the</span></span><br><span class=\"line\"><span class=\"comment\"> *        parent</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #onMeasure(int, int)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">//没舍得删这些注释  感觉重要的事情都说了   为了计算整个View树的实际大小 设置实际的高和宽 每个子View都是根据父视图和自身决定实际宽高的 在onMeasure()方法中进行实际测量.传入widthMeasureSpec和heightMeasureSpec参数来表示了父View的规格 不但传入了模式 还传入了size 而对于DecorView来说 传入的模式一般为EXACTLY模式 size对应屏幕的宽高. 所以说子View的大小是父子View共同决定的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">measure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"comment\">// measure ourselves, this should set the measured dimension flag back</span></span><br><span class=\"line\">               onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>MeasureSpec内部类</p>\n<p>MeasureSpec是View的内部类 int型，由高2位规格模式specMode和低30位具体尺寸specSize组成 其中specMode只有三种</p>\n<ul>\n<li>MeasureSpec.EXACTLY //确定模式，父View希望子View的大小是确定的，由specSize决定；</li>\n<li>MeasureSpec.AT_MOST //最多模式，父View希望子View的大小最多是specSize指定的值；</li>\n<li>MeasureSpec.UNSPECIFIED //未指定模式，父View完全依据子View的设计值来决定；</li>\n</ul>\n<p>onMeasure()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Measure the view and its content to determine the measured width and the</span></span><br><span class=\"line\"><span class=\"comment\"> * measured height. This method is invoked by &#123;<span class=\"doctag\">@link</span> #measure(int, int)&#125; and</span></span><br><span class=\"line\"><span class=\"comment\"> * should be overridden by subclasses to provide accurate and efficient</span></span><br><span class=\"line\"><span class=\"comment\"> * measurement of their contents.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;strong&gt;CONTRACT:&lt;/strong&gt; When overriding this method, you</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;em&gt;must&lt;/em&gt; call &#123;<span class=\"doctag\">@link</span> #setMeasuredDimension(int, int)&#125; to store the</span></span><br><span class=\"line\"><span class=\"comment\"> * measured width and height of this view. Failure to do so will trigger an</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;code&gt;IllegalStateException&lt;/code&gt;, thrown by</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #measure(int, int)&#125;. Calling the superclass'</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; is a valid use.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * The base class implementation of measure defaults to the background size,</span></span><br><span class=\"line\"><span class=\"comment\"> * unless a larger size is allowed by the MeasureSpec. Subclasses should</span></span><br><span class=\"line\"><span class=\"comment\"> * override &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; to provide better measurements of</span></span><br><span class=\"line\"><span class=\"comment\"> * their content.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * If this method is overridden, it is the subclass's responsibility to make</span></span><br><span class=\"line\"><span class=\"comment\"> * sure the measured height and width are at least the view's minimum height</span></span><br><span class=\"line\"><span class=\"comment\"> * and width (&#123;<span class=\"doctag\">@link</span> #getSuggestedMinimumHeight()&#125; and</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #getSuggestedMinimumWidth()&#125;).</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> widthMeasureSpec horizontal space requirements as imposed by the parent.</span></span><br><span class=\"line\"><span class=\"comment\"> *                         The requirements are encoded with</span></span><br><span class=\"line\"><span class=\"comment\"> *                         &#123;<span class=\"doctag\">@link</span> android.view.View.MeasureSpec&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> heightMeasureSpec vertical space requirements as imposed by the parent.</span></span><br><span class=\"line\"><span class=\"comment\"> *                         The requirements are encoded with</span></span><br><span class=\"line\"><span class=\"comment\"> *                         &#123;<span class=\"doctag\">@link</span> android.view.View.MeasureSpec&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #getMeasuredWidth()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #getMeasuredHeight()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #setMeasuredDimension(int, int)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #getSuggestedMinimumHeight()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #getSuggestedMinimumWidth()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> android.view.View.MeasureSpec#getMode(int)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> android.view.View.MeasureSpec#getSize(int)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class=\"line\">            getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>getDefaultSize方法相关<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> result = size;</span><br><span class=\"line\">  <span class=\"comment\">//通过measureSpec得到mode和size</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (specMode) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">      result = size;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</span><br><span class=\"line\">  <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</span><br><span class=\"line\">      result = specSize;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最小宽度和高度由View的Background尺寸和View的minXXX共同决定</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumHeight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumWidth</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>setMeasuredDimension方法 对View的成员变量measuredWidth和measuredHeight变量赋值 也就是说该方法最终决定了View的大小<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasuredDimension</span><span class=\"params\">(<span class=\"keyword\">int</span> measuredWidth, <span class=\"keyword\">int</span> measuredHeight)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> optical = isLayoutModeOptical(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (optical != isLayoutModeOptical(mParent)) &#123;</span><br><span class=\"line\">        Insets insets = getOpticalInsets();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> opticalWidth  = insets.left + insets.right;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> opticalHeight = insets.top  + insets.bottom;</span><br><span class=\"line\"></span><br><span class=\"line\">        measuredWidth  += optical ? opticalWidth  : -opticalWidth;</span><br><span class=\"line\">        measuredHeight += optical ? opticalHeight : -opticalHeight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setMeasuredDimensionRaw(measuredWidth, measuredHeight);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLayoutRequested</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (mPrivateFlags &amp; PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasuredDimensionRaw</span><span class=\"params\">(<span class=\"keyword\">int</span> measuredWidth, <span class=\"keyword\">int</span> measuredHeight)</span> </span>&#123;</span><br><span class=\"line\">  mMeasuredWidth = measuredWidth;</span><br><span class=\"line\">  mMeasuredHeight = measuredHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">  mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>至此一次最基础的View的measure过程就完成了  但是由于View可以嵌套  所以measure是递归传递的所以ViewGroup中需要对其子类进行measure过程 measureChildren方法实质为循环调用measureChild方法</p>\n<p>而measureChild和measureChildWithMargins的区别是后者将margin和padding也作为了子视图的大小</p>\n<p>一下分析measureChildWithMargins方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildWithMargins</span><span class=\"params\">(View child,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> parentWidthMeasureSpec, <span class=\"keyword\">int</span> widthUsed,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> parentHeightMeasureSpec, <span class=\"keyword\">int</span> heightUsed)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取当前子视图的LayoutParams</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</span><br><span class=\"line\">    <span class=\"comment\">//设定子View的测量规格</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</span><br><span class=\"line\">            mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin</span><br><span class=\"line\">                    + widthUsed, lp.width);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</span><br><span class=\"line\">            mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin</span><br><span class=\"line\">                    + heightUsed, lp.height);</span><br><span class=\"line\">    <span class=\"comment\">//子view的继续调用</span></span><br><span class=\"line\">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在getChildMeasureSpec中通过父View和本身的模式共同决定当前View的size</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec, <span class=\"keyword\">int</span> padding, <span class=\"keyword\">int</span> childDimension)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//获取当前父View的mode和size</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</span><br><span class=\"line\">      <span class=\"comment\">//获取父View的的剩余大小</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>, specSize - padding);</span><br><span class=\"line\">      <span class=\"comment\">//定义结果变量</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"comment\">//根据对应的mode做处理</span></span><br><span class=\"line\">      <span class=\"comment\">//通过父View和本身的模式共同决定当前View的size</span></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (specMode) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Parent has imposed an exact size on us</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">              resultSize = childDimension;</span><br><span class=\"line\">              resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// Child wants to be our size. So be it.</span></span><br><span class=\"line\">              resultSize = size;</span><br><span class=\"line\">              resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// Child wants to determine its own size. It can't be</span></span><br><span class=\"line\">              <span class=\"comment\">// bigger than us.</span></span><br><span class=\"line\">              resultSize = size;</span><br><span class=\"line\">              resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Parent has imposed a maximum size on us</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// Child wants a specific size... so be it</span></span><br><span class=\"line\">              resultSize = childDimension;</span><br><span class=\"line\">              resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// Child wants to be our size, but our size is not fixed.</span></span><br><span class=\"line\">              <span class=\"comment\">// Constrain child to not be bigger than us.</span></span><br><span class=\"line\">              resultSize = size;</span><br><span class=\"line\">              resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// Child wants to determine its own size. It can't be</span></span><br><span class=\"line\">              <span class=\"comment\">// bigger than us.</span></span><br><span class=\"line\">              resultSize = size;</span><br><span class=\"line\">              resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Parent asked to see how big we want to be</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// Child wants a specific size... let him have it</span></span><br><span class=\"line\">              resultSize = childDimension;</span><br><span class=\"line\">              resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// Child wants to be our size... find out how big it should</span></span><br><span class=\"line\">              <span class=\"comment\">// be</span></span><br><span class=\"line\">              resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</span><br><span class=\"line\">              resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// Child wants to determine its own size.... find out how</span></span><br><span class=\"line\">              <span class=\"comment\">// big it should be</span></span><br><span class=\"line\">              resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</span><br><span class=\"line\">              resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//将size和mode整合为MeasureSpec模式后返回</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"layout源码分析\"><a href=\"#layout源码分析\" class=\"headerlink\" title=\"layout源码分析\"></a>layout源码分析</h3><p>View layout整体流程与measure过程基本一样</p>\n<p>结论:</p>\n<ul>\n<li>需要根据ViewGroup本身的情况讨论 LinearLayout下会更看重子View的height和width 来安排对应位置 而RelativeLayout则更加关注子View的left right top bottom值 并且优先级高于width和height 甚至在部分自定义ViewGroup中 measure可能是无用的   直接使用layout方法来设置子View的位置也可以</li>\n<li>ViewGroup需要实现自己的layout逻辑</li>\n<li>layout_XXX中的各个熟悉都是针对子View的父ViewGroup的</li>\n<li>同样使用View的getWidth()和getHeight()方法来获取View测量的宽高 必须保证这两个方法在onLayout流程之后被调用才能返回有效值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Assign a size and position to a view and all of its</span></span><br><span class=\"line\"><span class=\"comment\">   * descendants</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;p&gt;This is the second phase of the layout mechanism.</span></span><br><span class=\"line\"><span class=\"comment\">   * (The first is measuring). In this phase, each parent calls</span></span><br><span class=\"line\"><span class=\"comment\">   * layout on all of its children to position them.</span></span><br><span class=\"line\"><span class=\"comment\">   * This is typically done using the child measurements</span></span><br><span class=\"line\"><span class=\"comment\">   * that were stored in the measure pass().&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;p&gt;Derived classes should not override this method.</span></span><br><span class=\"line\"><span class=\"comment\">   * Derived classes with children should override</span></span><br><span class=\"line\"><span class=\"comment\">   * onLayout. In that method, they should</span></span><br><span class=\"line\"><span class=\"comment\">   * call layout on each of their children.&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> l Left position, relative to parent</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> t Top position, relative to parent</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> r Right position, relative to parent</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> b Bottom position, relative to parent</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//同样注解写的很好了  分派给他和他的所有的子视图大小和位置</span></span><br><span class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"unchecked\"</span>&#125;)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</span><br><span class=\"line\">          mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">       <span class=\"comment\">//调用setFrame方法把参数分别赋值于</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> oldL = mLeft;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> oldT = mTop;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> oldB = mBottom;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> oldR = mRight;</span><br><span class=\"line\">      <span class=\"comment\">//判断view的位置是否发生过变化 , 确定是否对当前view重新layout</span></span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> changed = isLayoutModeOptical(mParent) ?</span><br><span class=\"line\">              setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//调用onLayout</span></span><br><span class=\"line\">          onLayout(changed, l, t, r, b);</span><br><span class=\"line\">          mPrivateFlags &amp;= ~PFLAG_LAYOUT_REQUIRED;</span><br><span class=\"line\">          ListenerInfo li = mListenerInfo;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnLayoutChangeListeners != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">              ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =</span><br><span class=\"line\">                      (ArrayList&lt;OnLayoutChangeListener&gt;)li.mOnLayoutChangeListeners.clone();</span><br><span class=\"line\">              <span class=\"keyword\">int</span> numListeners = listenersCopy.size();</span><br><span class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numListeners; ++i) &#123;</span><br><span class=\"line\">                  listenersCopy.get(i).onLayoutChange(<span class=\"keyword\">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      mPrivateFlags &amp;= ~PFLAG_FORCE_LAYOUT;</span><br><span class=\"line\">      mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>onLyayout方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View中</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ViewGroup中</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>均是空方法  后面会就LinearLayout和RelativeLayout源码进行分析</p>\n<h3 id=\"draw源码分析\"><a href=\"#draw源码分析\" class=\"headerlink\" title=\"draw源码分析\"></a>draw源码分析</h3><p>View的draw流程图如下</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/85888827.jpg\" alt=\"Viewdraw\"></p>\n<p>结论:</p>\n<ul>\n<li>View需要在子类中实现onDraw的过程</li>\n<li>在ViewGroup中 会调用其子View的方法 顺序与子view的添加顺序一致</li>\n</ul>\n<p>draw的源码也很长 但是官方也给出给出了draw的过程<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Draw traversal performs several drawing steps which must be executed</span></span><br><span class=\"line\"><span class=\"comment\">     * in the appropriate order:</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *      1. Draw the background</span></span><br><span class=\"line\"><span class=\"comment\">     *      2. If necessary, save the canvas' layers to prepare for fading</span></span><br><span class=\"line\"><span class=\"comment\">     *      3. Draw view's content</span></span><br><span class=\"line\"><span class=\"comment\">     *      4. Draw children</span></span><br><span class=\"line\"><span class=\"comment\">     *      5. If necessary, draw the fading edges and restore layers</span></span><br><span class=\"line\"><span class=\"comment\">     *      6. Draw decorations (scrollbars for instance)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 1, draw the background, if needed</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!dirtyOpaque) &#123;</span><br><span class=\"line\">        drawBackground(canvas);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// skip step 2 &amp; 5 if possible (common case)</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 2, save the canvas' layers</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (drawTop) &#123;</span><br><span class=\"line\">            canvas.saveLayer(left, top, right, top + length, <span class=\"keyword\">null</span>, flags);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 3, draw the content</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!dirtyOpaque) onDraw(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 4, draw the children</span></span><br><span class=\"line\">    dispatchDraw(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 5, draw the fade effect and restore layers</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (drawTop) &#123;</span><br><span class=\"line\">        matrix.setScale(<span class=\"number\">1</span>, fadeHeight * topFadeStrength);</span><br><span class=\"line\">        matrix.postTranslate(left, top);</span><br><span class=\"line\">        fade.setLocalMatrix(matrix);</span><br><span class=\"line\">        p.setShader(fade);</span><br><span class=\"line\">        canvas.drawRect(left, top, right, top + length, p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 6, draw decorations (scrollbars)</span></span><br><span class=\"line\">    onDrawScrollBars(canvas);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Step-1-draw-the-background-if-needed\"><a href=\"#Step-1-draw-the-background-if-needed\" class=\"headerlink\" title=\"Step 1, draw the background, if needed\"></a>Step 1, draw the background, if needed</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Step 1, draw the background, if needed</span></span><br><span class=\"line\"><span class=\"comment\">//如果需要的话绘制背景</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!dirtyOpaque) &#123;</span><br><span class=\"line\">    drawBackground(canvas);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">drawBackground</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  \t<span class=\"comment\">//通过xml中属性background或者代码中setBackGroundColor\\setBackgroundResource等方法赋值的背景drawable</span></span><br><span class=\"line\">      <span class=\"keyword\">final</span> Drawable background = mBackground;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (background == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//根据layout中确定的view位置来设置背景的绘制区域</span></span><br><span class=\"line\">      setBackgroundBounds();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果需要的话使用显示列表</span></span><br><span class=\"line\">      <span class=\"comment\">//canvas.isHardwareAccelerated() 硬件加速判定</span></span><br><span class=\"line\">      <span class=\"comment\">//硬件加速时会将图层缓存到GPU上 而不是重绘View的每一层</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (canvas.isHardwareAccelerated() &amp;&amp; mAttachInfo != <span class=\"keyword\">null</span></span><br><span class=\"line\">              &amp;&amp; mAttachInfo.mHardwareRenderer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          mBackgroundRenderNode = getDrawableRenderNode(background, mBackgroundRenderNode);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">final</span> RenderNode renderNode = mBackgroundRenderNode;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (renderNode != <span class=\"keyword\">null</span> &amp;&amp; renderNode.isValid()) &#123;</span><br><span class=\"line\">              setBackgroundRenderNodeProperties(renderNode);</span><br><span class=\"line\">              ((DisplayListCanvas) canvas).drawRenderNode(renderNode);</span><br><span class=\"line\">              <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrollX = mScrollX;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrollY = mScrollY;</span><br><span class=\"line\">      <span class=\"comment\">//调用Drawable的draw方法来完成背景的绘制工作</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((scrollX | scrollY) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          background.draw(canvas);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          canvas.translate(scrollX, scrollY);</span><br><span class=\"line\">          background.draw(canvas);</span><br><span class=\"line\">          canvas.translate(-scrollX, -scrollY);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setBackgroundBounds</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mBackgroundSizeChanged &amp;&amp; mBackground != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      mBackground.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>,  mRight - mLeft, mBottom - mTop);</span><br><span class=\"line\">      mBackgroundSizeChanged = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      rebuildOutline();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-2-save-the-canvas’-layers\"><a href=\"#Step-2-save-the-canvas’-layers\" class=\"headerlink\" title=\"Step 2, save the canvas’ layers\"></a>Step 2, save the canvas’ layers</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Step 2, save the canvas' layers</span></span><br><span class=\"line\"><span class=\"comment\">//保存绘制图层</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (drawTop) &#123;</span><br><span class=\"line\">           canvas.saveLayer(left, top, right, top + length, <span class=\"keyword\">null</span>, flags);</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-3-draw-the-content\"><a href=\"#Step-3-draw-the-content\" class=\"headerlink\" title=\"Step 3, draw the content\"></a>Step 3, draw the content</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Step 3, draw the content</span></span><br><span class=\"line\"><span class=\"comment\">//对View的内容进行绘制</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!dirtyOpaque) onDraw(canvas);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Implement this to do your drawing.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> canvas the canvas on which the background will be drawn</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">//onDraw也是空方法需要子类根据自身去实现相应的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-4-draw-the-children\"><a href=\"#Step-4-draw-the-children\" class=\"headerlink\" title=\"Step 4, draw the children\"></a>Step 4, draw the children</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Step 4, draw the children</span></span><br><span class=\"line\"><span class=\"comment\">//绘制其子View</span></span><br><span class=\"line\">dispatchDraw(canvas);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Called by draw to draw the child views. This may be overridden</span></span><br><span class=\"line\"><span class=\"comment\"> * by derived classes to gain control just before its children are drawn</span></span><br><span class=\"line\"><span class=\"comment\"> * (but after its own view has been drawn).</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> canvas the canvas on which to draw the view</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//dispatchDraw同样空方法 与onDraw不同的是dispatchDraw在ViewGroup中被重写</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ViewGroup<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dispatchDraw方法中根据子View的不同情况 包括但不只包括该View是否显示 是否有进入或消失动画等进行了部分的调整</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">      more |= drawChild(canvas, transientChild, drawingTime);</span><br><span class=\"line\">    ...    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">drawChild</span><span class=\"params\">(Canvas canvas, View child, <span class=\"keyword\">long</span> drawingTime)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> child.draw(canvas, <span class=\"keyword\">this</span>, drawingTime);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Step-5-draw-the-fade-effect-and-restore-layers\"><a href=\"#Step-5-draw-the-fade-effect-and-restore-layers\" class=\"headerlink\" title=\"Step 5, draw the fade effect and restore layers\"></a>Step 5, draw the fade effect and restore layers</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Step 5, draw the fade effect and restore layers</span></span><br><span class=\"line\"><span class=\"comment\">//绘制过度效果和恢复图层</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (drawTop) &#123;</span><br><span class=\"line\">    matrix.setScale(<span class=\"number\">1</span>, fadeHeight * topFadeStrength);</span><br><span class=\"line\">    matrix.postTranslate(left, top);</span><br><span class=\"line\">    fade.setLocalMatrix(matrix);</span><br><span class=\"line\">    p.setShader(fade);</span><br><span class=\"line\">    canvas.drawRect(left, top, right, top + length, p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-6-draw-decorations-scrollbars\"><a href=\"#Step-6-draw-decorations-scrollbars\" class=\"headerlink\" title=\"Step 6, draw decorations (scrollbars)\"></a>Step 6, draw decorations (scrollbars)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Step 6, draw decorations (scrollbars)</span></span><br><span class=\"line\"><span class=\"comment\">//对滚动条进行绘制</span></span><br><span class=\"line\">onDrawScrollBars(canvas);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"Android-View\"><a href=\"#Android-View\" class=\"headerlink\" title=\"Android View\"></a>Android View</h1><blockquote>\n<p>Android View框架相关  View的测量 布局 绘制过程<br>LinearLayout RelativeLayout实现源码分析</p>\n</blockquote>\n<h2 id=\"View的测量-布局-绘制过程\"><a href=\"#View的测量-布局-绘制过程\" class=\"headerlink\" title=\"View的测量 布局 绘制过程\"></a>View的测量 布局 绘制过程</h2><h3 id=\"测量之前的事情\"><a href=\"#测量之前的事情\" class=\"headerlink\" title=\"测量之前的事情\"></a>测量之前的事情</h3><p>View的整个绘制流程是开始于ViewRootImpl类的performTraversals方法(1k行)  根据相关设置来觉得十分要重新执行相关功能<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performTraversals</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// cache mView since it is used so much below...</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> View host = mView;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">int</span> childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">//measure</span></span><br><span class=\"line\">  mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">//layout</span></span><br><span class=\"line\">  mView.layout(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mView.getMeasuredWidth(), mView.getMeasuredHeight());</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">//draw</span></span><br><span class=\"line\">  mView.draw(canvas);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getRootMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> windowSize, <span class=\"keyword\">int</span> rootDimension)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> measureSpec;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (rootDimension) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">case</span> ViewGroup.LayoutParams.MATCH_PARENT:</span><br><span class=\"line\">          <span class=\"comment\">// Window can't resize. Force root view to be windowSize.</span></span><br><span class=\"line\">          measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> measureSpec;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>View 绘制整体流程图如下</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/43941602.jpg\" alt=\"View绘制整体流程图\"></p>\n<h3 id=\"measure源码分析\"><a href=\"#measure源码分析\" class=\"headerlink\" title=\"measure源码分析\"></a>measure源码分析</h3><p>结论:</p>\n<ul>\n<li><p>measure的过程就是父View向子View递归调用view.measure方法 (measure中回调onMeasure方法)的过程</p>\n</li>\n<li><p>measure方法是 final的 只能重载onMeasure方法</p>\n</li>\n<li><p>最顶层的DocerView的MeasureSpec由ViewRootImpl的getRootMeasureSpec方法提供 LayoutParams的参数为MATCH_PARENT specMode是EXACTLY，specSize为物理屏幕大小</p>\n</li>\n<li><p>只要是ViewGroup的子类就必须要求LayoutParams继承子MarginLayoutParams 否则无法使用layout_margin参数</p>\n</li>\n<li><p>View的getMeasuredWidth()和getMeasuredHeight()方法来获取View测量的宽高，要必须保证这两个方法在onMeasure流程之后被调用才能返回有效值。</p>\n</li>\n</ul>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/11065619.jpg\" alt=\"View measure过程\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * This is called to find out how big a view should be. The parent supplies constraint information in the width and height parameters.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * The actual measurement work of a view is performed in</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125;, called by this method. Therefore, only</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; can and must be overridden by subclasses.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> widthMeasureSpec Horizontal space requirements as imposed by the</span></span><br><span class=\"line\"><span class=\"comment\"> *        parent</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> heightMeasureSpec Vertical space requirements as imposed by the</span></span><br><span class=\"line\"><span class=\"comment\"> *        parent</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #onMeasure(int, int)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">//没舍得删这些注释  感觉重要的事情都说了   为了计算整个View树的实际大小 设置实际的高和宽 每个子View都是根据父视图和自身决定实际宽高的 在onMeasure()方法中进行实际测量.传入widthMeasureSpec和heightMeasureSpec参数来表示了父View的规格 不但传入了模式 还传入了size 而对于DecorView来说 传入的模式一般为EXACTLY模式 size对应屏幕的宽高. 所以说子View的大小是父子View共同决定的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">measure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"comment\">// measure ourselves, this should set the measured dimension flag back</span></span><br><span class=\"line\">               onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>MeasureSpec内部类</p>\n<p>MeasureSpec是View的内部类 int型，由高2位规格模式specMode和低30位具体尺寸specSize组成 其中specMode只有三种</p>\n<ul>\n<li>MeasureSpec.EXACTLY //确定模式，父View希望子View的大小是确定的，由specSize决定；</li>\n<li>MeasureSpec.AT_MOST //最多模式，父View希望子View的大小最多是specSize指定的值；</li>\n<li>MeasureSpec.UNSPECIFIED //未指定模式，父View完全依据子View的设计值来决定；</li>\n</ul>\n<p>onMeasure()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Measure the view and its content to determine the measured width and the</span></span><br><span class=\"line\"><span class=\"comment\"> * measured height. This method is invoked by &#123;<span class=\"doctag\">@link</span> #measure(int, int)&#125; and</span></span><br><span class=\"line\"><span class=\"comment\"> * should be overridden by subclasses to provide accurate and efficient</span></span><br><span class=\"line\"><span class=\"comment\"> * measurement of their contents.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;strong&gt;CONTRACT:&lt;/strong&gt; When overriding this method, you</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;em&gt;must&lt;/em&gt; call &#123;<span class=\"doctag\">@link</span> #setMeasuredDimension(int, int)&#125; to store the</span></span><br><span class=\"line\"><span class=\"comment\"> * measured width and height of this view. Failure to do so will trigger an</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;code&gt;IllegalStateException&lt;/code&gt;, thrown by</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #measure(int, int)&#125;. Calling the superclass'</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; is a valid use.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * The base class implementation of measure defaults to the background size,</span></span><br><span class=\"line\"><span class=\"comment\"> * unless a larger size is allowed by the MeasureSpec. Subclasses should</span></span><br><span class=\"line\"><span class=\"comment\"> * override &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; to provide better measurements of</span></span><br><span class=\"line\"><span class=\"comment\"> * their content.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * If this method is overridden, it is the subclass's responsibility to make</span></span><br><span class=\"line\"><span class=\"comment\"> * sure the measured height and width are at least the view's minimum height</span></span><br><span class=\"line\"><span class=\"comment\"> * and width (&#123;<span class=\"doctag\">@link</span> #getSuggestedMinimumHeight()&#125; and</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #getSuggestedMinimumWidth()&#125;).</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> widthMeasureSpec horizontal space requirements as imposed by the parent.</span></span><br><span class=\"line\"><span class=\"comment\"> *                         The requirements are encoded with</span></span><br><span class=\"line\"><span class=\"comment\"> *                         &#123;<span class=\"doctag\">@link</span> android.view.View.MeasureSpec&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> heightMeasureSpec vertical space requirements as imposed by the parent.</span></span><br><span class=\"line\"><span class=\"comment\"> *                         The requirements are encoded with</span></span><br><span class=\"line\"><span class=\"comment\"> *                         &#123;<span class=\"doctag\">@link</span> android.view.View.MeasureSpec&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #getMeasuredWidth()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #getMeasuredHeight()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #setMeasuredDimension(int, int)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #getSuggestedMinimumHeight()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #getSuggestedMinimumWidth()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> android.view.View.MeasureSpec#getMode(int)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> android.view.View.MeasureSpec#getSize(int)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class=\"line\">            getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>getDefaultSize方法相关<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> result = size;</span><br><span class=\"line\">  <span class=\"comment\">//通过measureSpec得到mode和size</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (specMode) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">      result = size;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</span><br><span class=\"line\">  <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</span><br><span class=\"line\">      result = specSize;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最小宽度和高度由View的Background尺寸和View的minXXX共同决定</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumHeight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumWidth</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>setMeasuredDimension方法 对View的成员变量measuredWidth和measuredHeight变量赋值 也就是说该方法最终决定了View的大小<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasuredDimension</span><span class=\"params\">(<span class=\"keyword\">int</span> measuredWidth, <span class=\"keyword\">int</span> measuredHeight)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> optical = isLayoutModeOptical(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (optical != isLayoutModeOptical(mParent)) &#123;</span><br><span class=\"line\">        Insets insets = getOpticalInsets();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> opticalWidth  = insets.left + insets.right;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> opticalHeight = insets.top  + insets.bottom;</span><br><span class=\"line\"></span><br><span class=\"line\">        measuredWidth  += optical ? opticalWidth  : -opticalWidth;</span><br><span class=\"line\">        measuredHeight += optical ? opticalHeight : -opticalHeight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setMeasuredDimensionRaw(measuredWidth, measuredHeight);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLayoutRequested</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (mPrivateFlags &amp; PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasuredDimensionRaw</span><span class=\"params\">(<span class=\"keyword\">int</span> measuredWidth, <span class=\"keyword\">int</span> measuredHeight)</span> </span>&#123;</span><br><span class=\"line\">  mMeasuredWidth = measuredWidth;</span><br><span class=\"line\">  mMeasuredHeight = measuredHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">  mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>至此一次最基础的View的measure过程就完成了  但是由于View可以嵌套  所以measure是递归传递的所以ViewGroup中需要对其子类进行measure过程 measureChildren方法实质为循环调用measureChild方法</p>\n<p>而measureChild和measureChildWithMargins的区别是后者将margin和padding也作为了子视图的大小</p>\n<p>一下分析measureChildWithMargins方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildWithMargins</span><span class=\"params\">(View child,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> parentWidthMeasureSpec, <span class=\"keyword\">int</span> widthUsed,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> parentHeightMeasureSpec, <span class=\"keyword\">int</span> heightUsed)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取当前子视图的LayoutParams</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</span><br><span class=\"line\">    <span class=\"comment\">//设定子View的测量规格</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</span><br><span class=\"line\">            mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin</span><br><span class=\"line\">                    + widthUsed, lp.width);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</span><br><span class=\"line\">            mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin</span><br><span class=\"line\">                    + heightUsed, lp.height);</span><br><span class=\"line\">    <span class=\"comment\">//子view的继续调用</span></span><br><span class=\"line\">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在getChildMeasureSpec中通过父View和本身的模式共同决定当前View的size</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec, <span class=\"keyword\">int</span> padding, <span class=\"keyword\">int</span> childDimension)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//获取当前父View的mode和size</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</span><br><span class=\"line\">      <span class=\"comment\">//获取父View的的剩余大小</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>, specSize - padding);</span><br><span class=\"line\">      <span class=\"comment\">//定义结果变量</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"comment\">//根据对应的mode做处理</span></span><br><span class=\"line\">      <span class=\"comment\">//通过父View和本身的模式共同决定当前View的size</span></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (specMode) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Parent has imposed an exact size on us</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">              resultSize = childDimension;</span><br><span class=\"line\">              resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// Child wants to be our size. So be it.</span></span><br><span class=\"line\">              resultSize = size;</span><br><span class=\"line\">              resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// Child wants to determine its own size. It can't be</span></span><br><span class=\"line\">              <span class=\"comment\">// bigger than us.</span></span><br><span class=\"line\">              resultSize = size;</span><br><span class=\"line\">              resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Parent has imposed a maximum size on us</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// Child wants a specific size... so be it</span></span><br><span class=\"line\">              resultSize = childDimension;</span><br><span class=\"line\">              resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// Child wants to be our size, but our size is not fixed.</span></span><br><span class=\"line\">              <span class=\"comment\">// Constrain child to not be bigger than us.</span></span><br><span class=\"line\">              resultSize = size;</span><br><span class=\"line\">              resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// Child wants to determine its own size. It can't be</span></span><br><span class=\"line\">              <span class=\"comment\">// bigger than us.</span></span><br><span class=\"line\">              resultSize = size;</span><br><span class=\"line\">              resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Parent asked to see how big we want to be</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// Child wants a specific size... let him have it</span></span><br><span class=\"line\">              resultSize = childDimension;</span><br><span class=\"line\">              resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// Child wants to be our size... find out how big it should</span></span><br><span class=\"line\">              <span class=\"comment\">// be</span></span><br><span class=\"line\">              resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</span><br><span class=\"line\">              resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// Child wants to determine its own size.... find out how</span></span><br><span class=\"line\">              <span class=\"comment\">// big it should be</span></span><br><span class=\"line\">              resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</span><br><span class=\"line\">              resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//将size和mode整合为MeasureSpec模式后返回</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"layout源码分析\"><a href=\"#layout源码分析\" class=\"headerlink\" title=\"layout源码分析\"></a>layout源码分析</h3><p>View layout整体流程与measure过程基本一样</p>\n<p>结论:</p>\n<ul>\n<li>需要根据ViewGroup本身的情况讨论 LinearLayout下会更看重子View的height和width 来安排对应位置 而RelativeLayout则更加关注子View的left right top bottom值 并且优先级高于width和height 甚至在部分自定义ViewGroup中 measure可能是无用的   直接使用layout方法来设置子View的位置也可以</li>\n<li>ViewGroup需要实现自己的layout逻辑</li>\n<li>layout_XXX中的各个熟悉都是针对子View的父ViewGroup的</li>\n<li>同样使用View的getWidth()和getHeight()方法来获取View测量的宽高 必须保证这两个方法在onLayout流程之后被调用才能返回有效值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Assign a size and position to a view and all of its</span></span><br><span class=\"line\"><span class=\"comment\">   * descendants</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;p&gt;This is the second phase of the layout mechanism.</span></span><br><span class=\"line\"><span class=\"comment\">   * (The first is measuring). In this phase, each parent calls</span></span><br><span class=\"line\"><span class=\"comment\">   * layout on all of its children to position them.</span></span><br><span class=\"line\"><span class=\"comment\">   * This is typically done using the child measurements</span></span><br><span class=\"line\"><span class=\"comment\">   * that were stored in the measure pass().&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;p&gt;Derived classes should not override this method.</span></span><br><span class=\"line\"><span class=\"comment\">   * Derived classes with children should override</span></span><br><span class=\"line\"><span class=\"comment\">   * onLayout. In that method, they should</span></span><br><span class=\"line\"><span class=\"comment\">   * call layout on each of their children.&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> l Left position, relative to parent</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> t Top position, relative to parent</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> r Right position, relative to parent</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> b Bottom position, relative to parent</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//同样注解写的很好了  分派给他和他的所有的子视图大小和位置</span></span><br><span class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"unchecked\"</span>&#125;)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</span><br><span class=\"line\">          mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">       <span class=\"comment\">//调用setFrame方法把参数分别赋值于</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> oldL = mLeft;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> oldT = mTop;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> oldB = mBottom;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> oldR = mRight;</span><br><span class=\"line\">      <span class=\"comment\">//判断view的位置是否发生过变化 , 确定是否对当前view重新layout</span></span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> changed = isLayoutModeOptical(mParent) ?</span><br><span class=\"line\">              setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//调用onLayout</span></span><br><span class=\"line\">          onLayout(changed, l, t, r, b);</span><br><span class=\"line\">          mPrivateFlags &amp;= ~PFLAG_LAYOUT_REQUIRED;</span><br><span class=\"line\">          ListenerInfo li = mListenerInfo;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnLayoutChangeListeners != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">              ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =</span><br><span class=\"line\">                      (ArrayList&lt;OnLayoutChangeListener&gt;)li.mOnLayoutChangeListeners.clone();</span><br><span class=\"line\">              <span class=\"keyword\">int</span> numListeners = listenersCopy.size();</span><br><span class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numListeners; ++i) &#123;</span><br><span class=\"line\">                  listenersCopy.get(i).onLayoutChange(<span class=\"keyword\">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      mPrivateFlags &amp;= ~PFLAG_FORCE_LAYOUT;</span><br><span class=\"line\">      mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>onLyayout方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View中</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ViewGroup中</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>均是空方法  后面会就LinearLayout和RelativeLayout源码进行分析</p>\n<h3 id=\"draw源码分析\"><a href=\"#draw源码分析\" class=\"headerlink\" title=\"draw源码分析\"></a>draw源码分析</h3><p>View的draw流程图如下</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/85888827.jpg\" alt=\"Viewdraw\"></p>\n<p>结论:</p>\n<ul>\n<li>View需要在子类中实现onDraw的过程</li>\n<li>在ViewGroup中 会调用其子View的方法 顺序与子view的添加顺序一致</li>\n</ul>\n<p>draw的源码也很长 但是官方也给出给出了draw的过程<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Draw traversal performs several drawing steps which must be executed</span></span><br><span class=\"line\"><span class=\"comment\">     * in the appropriate order:</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *      1. Draw the background</span></span><br><span class=\"line\"><span class=\"comment\">     *      2. If necessary, save the canvas' layers to prepare for fading</span></span><br><span class=\"line\"><span class=\"comment\">     *      3. Draw view's content</span></span><br><span class=\"line\"><span class=\"comment\">     *      4. Draw children</span></span><br><span class=\"line\"><span class=\"comment\">     *      5. If necessary, draw the fading edges and restore layers</span></span><br><span class=\"line\"><span class=\"comment\">     *      6. Draw decorations (scrollbars for instance)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 1, draw the background, if needed</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!dirtyOpaque) &#123;</span><br><span class=\"line\">        drawBackground(canvas);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// skip step 2 &amp; 5 if possible (common case)</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 2, save the canvas' layers</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (drawTop) &#123;</span><br><span class=\"line\">            canvas.saveLayer(left, top, right, top + length, <span class=\"keyword\">null</span>, flags);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 3, draw the content</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!dirtyOpaque) onDraw(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 4, draw the children</span></span><br><span class=\"line\">    dispatchDraw(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 5, draw the fade effect and restore layers</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (drawTop) &#123;</span><br><span class=\"line\">        matrix.setScale(<span class=\"number\">1</span>, fadeHeight * topFadeStrength);</span><br><span class=\"line\">        matrix.postTranslate(left, top);</span><br><span class=\"line\">        fade.setLocalMatrix(matrix);</span><br><span class=\"line\">        p.setShader(fade);</span><br><span class=\"line\">        canvas.drawRect(left, top, right, top + length, p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 6, draw decorations (scrollbars)</span></span><br><span class=\"line\">    onDrawScrollBars(canvas);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Step-1-draw-the-background-if-needed\"><a href=\"#Step-1-draw-the-background-if-needed\" class=\"headerlink\" title=\"Step 1, draw the background, if needed\"></a>Step 1, draw the background, if needed</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Step 1, draw the background, if needed</span></span><br><span class=\"line\"><span class=\"comment\">//如果需要的话绘制背景</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!dirtyOpaque) &#123;</span><br><span class=\"line\">    drawBackground(canvas);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">drawBackground</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  \t<span class=\"comment\">//通过xml中属性background或者代码中setBackGroundColor\\setBackgroundResource等方法赋值的背景drawable</span></span><br><span class=\"line\">      <span class=\"keyword\">final</span> Drawable background = mBackground;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (background == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//根据layout中确定的view位置来设置背景的绘制区域</span></span><br><span class=\"line\">      setBackgroundBounds();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果需要的话使用显示列表</span></span><br><span class=\"line\">      <span class=\"comment\">//canvas.isHardwareAccelerated() 硬件加速判定</span></span><br><span class=\"line\">      <span class=\"comment\">//硬件加速时会将图层缓存到GPU上 而不是重绘View的每一层</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (canvas.isHardwareAccelerated() &amp;&amp; mAttachInfo != <span class=\"keyword\">null</span></span><br><span class=\"line\">              &amp;&amp; mAttachInfo.mHardwareRenderer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          mBackgroundRenderNode = getDrawableRenderNode(background, mBackgroundRenderNode);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">final</span> RenderNode renderNode = mBackgroundRenderNode;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (renderNode != <span class=\"keyword\">null</span> &amp;&amp; renderNode.isValid()) &#123;</span><br><span class=\"line\">              setBackgroundRenderNodeProperties(renderNode);</span><br><span class=\"line\">              ((DisplayListCanvas) canvas).drawRenderNode(renderNode);</span><br><span class=\"line\">              <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrollX = mScrollX;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrollY = mScrollY;</span><br><span class=\"line\">      <span class=\"comment\">//调用Drawable的draw方法来完成背景的绘制工作</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((scrollX | scrollY) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          background.draw(canvas);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          canvas.translate(scrollX, scrollY);</span><br><span class=\"line\">          background.draw(canvas);</span><br><span class=\"line\">          canvas.translate(-scrollX, -scrollY);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setBackgroundBounds</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mBackgroundSizeChanged &amp;&amp; mBackground != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      mBackground.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>,  mRight - mLeft, mBottom - mTop);</span><br><span class=\"line\">      mBackgroundSizeChanged = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      rebuildOutline();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-2-save-the-canvas’-layers\"><a href=\"#Step-2-save-the-canvas’-layers\" class=\"headerlink\" title=\"Step 2, save the canvas’ layers\"></a>Step 2, save the canvas’ layers</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Step 2, save the canvas' layers</span></span><br><span class=\"line\"><span class=\"comment\">//保存绘制图层</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (drawTop) &#123;</span><br><span class=\"line\">           canvas.saveLayer(left, top, right, top + length, <span class=\"keyword\">null</span>, flags);</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-3-draw-the-content\"><a href=\"#Step-3-draw-the-content\" class=\"headerlink\" title=\"Step 3, draw the content\"></a>Step 3, draw the content</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Step 3, draw the content</span></span><br><span class=\"line\"><span class=\"comment\">//对View的内容进行绘制</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!dirtyOpaque) onDraw(canvas);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Implement this to do your drawing.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> canvas the canvas on which the background will be drawn</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">//onDraw也是空方法需要子类根据自身去实现相应的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-4-draw-the-children\"><a href=\"#Step-4-draw-the-children\" class=\"headerlink\" title=\"Step 4, draw the children\"></a>Step 4, draw the children</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Step 4, draw the children</span></span><br><span class=\"line\"><span class=\"comment\">//绘制其子View</span></span><br><span class=\"line\">dispatchDraw(canvas);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Called by draw to draw the child views. This may be overridden</span></span><br><span class=\"line\"><span class=\"comment\"> * by derived classes to gain control just before its children are drawn</span></span><br><span class=\"line\"><span class=\"comment\"> * (but after its own view has been drawn).</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> canvas the canvas on which to draw the view</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//dispatchDraw同样空方法 与onDraw不同的是dispatchDraw在ViewGroup中被重写</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ViewGroup<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dispatchDraw方法中根据子View的不同情况 包括但不只包括该View是否显示 是否有进入或消失动画等进行了部分的调整</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">      more |= drawChild(canvas, transientChild, drawingTime);</span><br><span class=\"line\">    ...    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">drawChild</span><span class=\"params\">(Canvas canvas, View child, <span class=\"keyword\">long</span> drawingTime)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> child.draw(canvas, <span class=\"keyword\">this</span>, drawingTime);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Step-5-draw-the-fade-effect-and-restore-layers\"><a href=\"#Step-5-draw-the-fade-effect-and-restore-layers\" class=\"headerlink\" title=\"Step 5, draw the fade effect and restore layers\"></a>Step 5, draw the fade effect and restore layers</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Step 5, draw the fade effect and restore layers</span></span><br><span class=\"line\"><span class=\"comment\">//绘制过度效果和恢复图层</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (drawTop) &#123;</span><br><span class=\"line\">    matrix.setScale(<span class=\"number\">1</span>, fadeHeight * topFadeStrength);</span><br><span class=\"line\">    matrix.postTranslate(left, top);</span><br><span class=\"line\">    fade.setLocalMatrix(matrix);</span><br><span class=\"line\">    p.setShader(fade);</span><br><span class=\"line\">    canvas.drawRect(left, top, right, top + length, p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-6-draw-decorations-scrollbars\"><a href=\"#Step-6-draw-decorations-scrollbars\" class=\"headerlink\" title=\"Step 6, draw decorations (scrollbars)\"></a>Step 6, draw decorations (scrollbars)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Step 6, draw decorations (scrollbars)</span></span><br><span class=\"line\"><span class=\"comment\">//对滚动条进行绘制</span></span><br><span class=\"line\">onDrawScrollBars(canvas);</span><br></pre></td></tr></table></figure>"},{"title":"Android自定义View之仪表盘","date":"2017-08-10T14:33:13.000Z","_content":"\n# Android自定义View之仪表盘\n\n>又是新系列（坑） 感觉都很零碎，能积累一些是一些了\n\n## 背景\n随着项目开发 越来越多的需求被摆在面前 其中不免涉及到定制的功能\n其中仪表盘也是一个很常用的功能\n<!-- more -->\n\n## 效果图\n![效果图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/25082465.jpg)\n\n## 设计过程\n### 外侧渐变圆环\n![外侧圆环效果](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/78850293.jpg)\n### 外侧刻度盘及文字显示\n![外侧刻度盘及文字显示](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/30532330.jpg)\n### 指针显示\n![指针显示](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/72116334.jpg)\n### 内部圆环及文字展示\n![内部圆环及文字展示](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/81417498.jpg)\n\n## 代码实现\n### 自定义组件显示优化\n\n设置自定义组件的时候要优化组件的高度\n\n```java\n  protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n      int width = MeasureSpec.getSize(widthMeasureSpec);\n      int heitht = width / 2 / 4 * 5;\n      initIndex(width / 2);\n      //优化组件高度\n      setMeasuredDimension(width, heitht);\n  }\n```\n\n### onDraw()过程\n\n```java\n  protected void onDraw(Canvas canvas) {\n      //禁用硬件加速\n      setLayerType(LAYER_TYPE_SOFTWARE, null);\n      //外侧颜色指示圆环\n      initRing(canvas);\n      //刻度文字\n      initScale(canvas);\n      //指针\n      initPointer(canvas);\n      //提示内容\n      initText(canvas);\n  }\n```\n\n主要还是这个四个绘制的过程\n\n## 外侧颜色指示圆环\n1. 首先绘制的前一部分的红黄渐变圆环\n这个圆环并不是一个180度的圆环 而是一个两百度的圆环 下侧再实现水平的效果\n2. 绘制后一部分的绿色渐变圆环\n3. 修正底部的效果 修改成水平的效果\n4. 绘制内部半圆 遮盖住渐变的半圆\n\n```java\nprivate void initRing(Canvas canvas) {\n    paint.setAntiAlias(true);\n    paint.setStrokeWidth(2);\n    canvas.save();\n    //canvas中心移动到中间\n    canvas.translate(canvas.getWidth()/2, r);\n\n\n    //前100红黄渐变圆环\n    paint.setStyle(Paint.Style.FILL);\n    //设置渐变的颜色范围\n    int[] colors = {Color.parseColor(\"#F95A37\"), Color.parseColor(\"#f9cf45\")};\n    //设置的渐变起止位置\n    float[] positions = {0.5f - 10f/180f * 0.5f, 0.5f + 0.5f * 5f / 6f};\n    //设置渐变的蒙版\n    SweepGradient sweepGradient = new SweepGradient(0, 0, colors, positions);\n    paint.setShader(sweepGradient);\n    rect = new RectF( -length, -length, length, length);\n    //绘制圆环\n    canvas.drawArc(rect, 170, 10f + 180f / 6f * 5f, true, paint);\n\n\n\n    //100之后绿色渐变圆环\n    paint.setStyle(Paint.Style.FILL);\n    canvas.rotate(10,0f,0f);\n    int[] colors2 = {Color.parseColor(\"#79D062\"),  Color.parseColor(\"#3FBF55\")};\n    float[] positions2 = {0.5f + 0.5f * ( 144f / 180f), 1.0f};\n    sweepGradient = new SweepGradient(0, 0, colors2, positions2);\n    paint.setShader(sweepGradient);\n    rect = new RectF( -length, -length, length, length);\n    canvas.drawArc(rect, 180f + 180f * (140f / 180f), 180f / 6 + 10, true, paint);\n\n\n\n    canvas.restore();\n    canvas.save();\n    canvas.translate(canvas.getWidth()/2, r);\n\n    //绘制描边效果的画笔\n    strokePain = new Paint(paint);\n    strokePain.setColor(0x3f979797);\n    strokePain.setStrokeWidth(10);\n    strokePain.setShader(null);\n    strokePain.setStyle(Paint.Style.STROKE);\n    canvas.drawArc(rect, 170, 200, true, strokePain);\n\n\n\n    canvas.restore();\n    canvas.save();\n    canvas.translate(canvas.getWidth()/2, r);\n\n    //底边水平\n    paint.setShader(null);\n    paint.setColor(backGroundColor);\n    paint.setStyle(Paint.Style.FILL);\n    canvas.drawRect(-length  , (float) (Math.sin(Math.toRadians(10) ) * length /3f * 2f), length  ,  (float) (Math.sin(Math.toRadians(10)) * length  + 100) , paint);\n    canvas.drawRect(-length  , (float) (Math.sin(Math.toRadians(10) ) * length /3f * 2f), length  ,  (float) (Math.sin(Math.toRadians(10) ) * length /3f * 2f) , strokePain);\n\n\n    //内部背景色填充\n    paint.setColor(backGroundColor);\n    paint.setShader(null);\n    rect = new RectF( - (length - length / 3f  - 2), -(length / 3f * 2f - 2), length - length / 3f -2 , length / 3f * 2f - 2);\n    canvas.drawArc(rect, 170, 200, true, strokePain);\n    canvas.drawArc(rect, 0, 360, true, paint);\n\n\n\n}\n```\n\n## 外侧刻度盘及文字显示\n旋转画布绘制对应角度的显示及刻度\n\n```java\n  private void initScale(Canvas canvas) {\n      canvas.restore();\n      canvas.save();\n      canvas.translate(canvas.getWidth()/2, r);\n      paint.setColor(Color.parseColor(\"#999999\"));\n\n      tmpPaint = new Paint(paint); //刻度画笔对象\n      tmpPaint.setStrokeWidth(1);\n      tmpPaint.setTextSize(35);\n      tmpPaint.setTextAlign(Paint.Align.CENTER);\n\n      canvas.rotate(-90,0f,0f);\n\n      float  y = length;\n      y = - y;\n      int count = 12; //总刻度数\n      paint.setColor(backGroundColor);\n\n      float tempRou = 180 / 12f;\n      //每次旋转的角度\n      paint.setColor(Color.WHITE);\n      paint.setStrokeWidth(5);\n\n      //绘制刻度和百分比\n      for (int i = 0 ; i <= count ; i++){\n          if (i % 2 == 0 ) {\n              canvas.drawText(String.valueOf((i) * 10), 0, y - 20f, tmpPaint);\n          }\n          canvas.drawLine(0f, y , 0, y + length / 15, paint);\n          canvas.rotate(tempRou,0f,0f);\n      }\n\n  }\n```\n\n## 指针显示\n\n指针显示的比较简单也是唯二需要变化的之一\n\n指针的绘制比较简单 根据传入的角度(百分比)旋转对应的角度 填充绘制一个三角形\n\n```java\n  private void initPointer(Canvas canvas) {\n      paint.setColor(Color.BLACK);\n\n\n      canvas.restore();\n      canvas.save();\n      canvas.translate(canvas.getWidth()/2, r);\n      float change;\n\n      if (perPoint < 1 ){\n          change = perPoint * 180;\n      }else {\n          change = 180;\n      }\n\n      //根据参数得到旋转角度\n      canvas.rotate(-90 + change,0f,0f);\n\n      //绘制三角形形成指针\n      Path path = new Path();\n      path.moveTo(0 , pointLength);\n      path.lineTo(-10 , 0);\n      path.lineTo(10,0);\n      path.lineTo(0 , pointLength);\n      path.close();\n\n      canvas.drawPath(path, paint);\n\n  }\n```\n\n## 内部圆环及文字展示\n\n先绘制一个带阴影的圆环 再居中绘制提示的文本信息\n\n```java\n  private void initText(Canvas canvas) {\n      //抗锯齿\n      canvas.setDrawFilter(new PaintFlagsDrawFilter(0, Paint.ANTI_ALIAS_FLAG|Paint.FILTER_BITMAP_FLAG));\n      canvas.restore();\n      canvas.save();\n      canvas.translate(canvas.getWidth()/2, r);\n\n      float rIndex = length ;\n\n      //设置文字展示的圆环\n      paint.setColor(Color.parseColor(\"#eeeeee\"));\n      paint.setShader(null);\n      paint.setShadowLayer(5, 0, 0, 0x54000000);\n      rect = new RectF( - (rIndex/ 3 ), - (rIndex / 3), rIndex / 3, rIndex / 3);\n      canvas.drawArc(rect, 0, 360, true, paint);\n\n      paint.clearShadowLayer();\n\n      canvas.restore();\n      canvas.save();\n      canvas.translate(canvas.getWidth()/2f , r);\n\n\n      textPaint.setStrokeWidth(1);\n      textPaint.setAntiAlias(true);\n\n      textPaint.setTextSize(60);\n      textPaint.setColor(Color.parseColor(\"#fc6555\"));\n      textPaint.setTextAlign(Paint.Align.RIGHT);\n\n\n      //判断指数变化及颜色设定\n      int _per = (int) (per * 120);\n\n      if (_per < 60){\n          textPaint.setColor(Color.parseColor(\"#ff6450\"));\n      }else if (_per < 100) {\n          textPaint.setColor(Color.parseColor(\"#f5a623\"));\n      }else {\n          textPaint.setColor(Color.parseColor(\"#79d062\"));\n      }\n\n      float swidth = textPaint.measureText(String.valueOf(_per));\n      //计算偏移量 是的数字和百分号整体居中显示\n      swidth =   (swidth - (swidth + 22) / 2);\n\n\n      canvas.translate( swidth , 0);\n      canvas.drawText(\"\" + _per, 0, 0, textPaint);\n\n      textPaint.setTextSize(30);\n      textPaint.setTextAlign(Paint.Align.LEFT);\n\n      canvas.drawText(\"%\" , 0, 0, textPaint);\n      textPaint.setTextAlign(Paint.Align.CENTER);\n      textPaint.setColor(Color.parseColor(\"#999999\"));\n\n\n      canvas.restore();\n      canvas.save();\n      canvas.translate(canvas.getWidth()/2  , r + length / 3 /2 );\n      canvas.drawText(\"完成率\" , 0, 0, textPaint);\n\n  }\n```\n\n## 更新动画\n使用ValueAnimator实现指针的转动动画效果\n\n```java\n  public void cgangePer(float per ){\n      this.perOld = this.per;\n      this.per = per;\n      ValueAnimator va =  ValueAnimator.ofFloat(perOld,per);\n      va.setDuration(1000);\n      va.setInterpolator(new OvershootInterpolator());\n      va.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n          @Override\n          public void onAnimationUpdate(ValueAnimator animation) {\n              perPoint = (float) animation.getAnimatedValue();\n              invalidate();\n          }\n      });\n      va.start();\n\n  }\n```\n\n这个仪表盘的实现就完成了  具体的代码可以查看[我的github](https://github.com/clwater/AndroidDashBoard.git)\n","source":"_posts/android自定义View之仪表盘.md","raw":"---\ntitle: Android自定义View之仪表盘\ndate: 2017-08-10 22:33:13\ntags: [\"android\" , \"view\" , \"自定义\"]\ncategories : \"Android自定义View\"\n---\n\n# Android自定义View之仪表盘\n\n>又是新系列（坑） 感觉都很零碎，能积累一些是一些了\n\n## 背景\n随着项目开发 越来越多的需求被摆在面前 其中不免涉及到定制的功能\n其中仪表盘也是一个很常用的功能\n<!-- more -->\n\n## 效果图\n![效果图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/25082465.jpg)\n\n## 设计过程\n### 外侧渐变圆环\n![外侧圆环效果](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/78850293.jpg)\n### 外侧刻度盘及文字显示\n![外侧刻度盘及文字显示](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/30532330.jpg)\n### 指针显示\n![指针显示](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/72116334.jpg)\n### 内部圆环及文字展示\n![内部圆环及文字展示](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/81417498.jpg)\n\n## 代码实现\n### 自定义组件显示优化\n\n设置自定义组件的时候要优化组件的高度\n\n```java\n  protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n      int width = MeasureSpec.getSize(widthMeasureSpec);\n      int heitht = width / 2 / 4 * 5;\n      initIndex(width / 2);\n      //优化组件高度\n      setMeasuredDimension(width, heitht);\n  }\n```\n\n### onDraw()过程\n\n```java\n  protected void onDraw(Canvas canvas) {\n      //禁用硬件加速\n      setLayerType(LAYER_TYPE_SOFTWARE, null);\n      //外侧颜色指示圆环\n      initRing(canvas);\n      //刻度文字\n      initScale(canvas);\n      //指针\n      initPointer(canvas);\n      //提示内容\n      initText(canvas);\n  }\n```\n\n主要还是这个四个绘制的过程\n\n## 外侧颜色指示圆环\n1. 首先绘制的前一部分的红黄渐变圆环\n这个圆环并不是一个180度的圆环 而是一个两百度的圆环 下侧再实现水平的效果\n2. 绘制后一部分的绿色渐变圆环\n3. 修正底部的效果 修改成水平的效果\n4. 绘制内部半圆 遮盖住渐变的半圆\n\n```java\nprivate void initRing(Canvas canvas) {\n    paint.setAntiAlias(true);\n    paint.setStrokeWidth(2);\n    canvas.save();\n    //canvas中心移动到中间\n    canvas.translate(canvas.getWidth()/2, r);\n\n\n    //前100红黄渐变圆环\n    paint.setStyle(Paint.Style.FILL);\n    //设置渐变的颜色范围\n    int[] colors = {Color.parseColor(\"#F95A37\"), Color.parseColor(\"#f9cf45\")};\n    //设置的渐变起止位置\n    float[] positions = {0.5f - 10f/180f * 0.5f, 0.5f + 0.5f * 5f / 6f};\n    //设置渐变的蒙版\n    SweepGradient sweepGradient = new SweepGradient(0, 0, colors, positions);\n    paint.setShader(sweepGradient);\n    rect = new RectF( -length, -length, length, length);\n    //绘制圆环\n    canvas.drawArc(rect, 170, 10f + 180f / 6f * 5f, true, paint);\n\n\n\n    //100之后绿色渐变圆环\n    paint.setStyle(Paint.Style.FILL);\n    canvas.rotate(10,0f,0f);\n    int[] colors2 = {Color.parseColor(\"#79D062\"),  Color.parseColor(\"#3FBF55\")};\n    float[] positions2 = {0.5f + 0.5f * ( 144f / 180f), 1.0f};\n    sweepGradient = new SweepGradient(0, 0, colors2, positions2);\n    paint.setShader(sweepGradient);\n    rect = new RectF( -length, -length, length, length);\n    canvas.drawArc(rect, 180f + 180f * (140f / 180f), 180f / 6 + 10, true, paint);\n\n\n\n    canvas.restore();\n    canvas.save();\n    canvas.translate(canvas.getWidth()/2, r);\n\n    //绘制描边效果的画笔\n    strokePain = new Paint(paint);\n    strokePain.setColor(0x3f979797);\n    strokePain.setStrokeWidth(10);\n    strokePain.setShader(null);\n    strokePain.setStyle(Paint.Style.STROKE);\n    canvas.drawArc(rect, 170, 200, true, strokePain);\n\n\n\n    canvas.restore();\n    canvas.save();\n    canvas.translate(canvas.getWidth()/2, r);\n\n    //底边水平\n    paint.setShader(null);\n    paint.setColor(backGroundColor);\n    paint.setStyle(Paint.Style.FILL);\n    canvas.drawRect(-length  , (float) (Math.sin(Math.toRadians(10) ) * length /3f * 2f), length  ,  (float) (Math.sin(Math.toRadians(10)) * length  + 100) , paint);\n    canvas.drawRect(-length  , (float) (Math.sin(Math.toRadians(10) ) * length /3f * 2f), length  ,  (float) (Math.sin(Math.toRadians(10) ) * length /3f * 2f) , strokePain);\n\n\n    //内部背景色填充\n    paint.setColor(backGroundColor);\n    paint.setShader(null);\n    rect = new RectF( - (length - length / 3f  - 2), -(length / 3f * 2f - 2), length - length / 3f -2 , length / 3f * 2f - 2);\n    canvas.drawArc(rect, 170, 200, true, strokePain);\n    canvas.drawArc(rect, 0, 360, true, paint);\n\n\n\n}\n```\n\n## 外侧刻度盘及文字显示\n旋转画布绘制对应角度的显示及刻度\n\n```java\n  private void initScale(Canvas canvas) {\n      canvas.restore();\n      canvas.save();\n      canvas.translate(canvas.getWidth()/2, r);\n      paint.setColor(Color.parseColor(\"#999999\"));\n\n      tmpPaint = new Paint(paint); //刻度画笔对象\n      tmpPaint.setStrokeWidth(1);\n      tmpPaint.setTextSize(35);\n      tmpPaint.setTextAlign(Paint.Align.CENTER);\n\n      canvas.rotate(-90,0f,0f);\n\n      float  y = length;\n      y = - y;\n      int count = 12; //总刻度数\n      paint.setColor(backGroundColor);\n\n      float tempRou = 180 / 12f;\n      //每次旋转的角度\n      paint.setColor(Color.WHITE);\n      paint.setStrokeWidth(5);\n\n      //绘制刻度和百分比\n      for (int i = 0 ; i <= count ; i++){\n          if (i % 2 == 0 ) {\n              canvas.drawText(String.valueOf((i) * 10), 0, y - 20f, tmpPaint);\n          }\n          canvas.drawLine(0f, y , 0, y + length / 15, paint);\n          canvas.rotate(tempRou,0f,0f);\n      }\n\n  }\n```\n\n## 指针显示\n\n指针显示的比较简单也是唯二需要变化的之一\n\n指针的绘制比较简单 根据传入的角度(百分比)旋转对应的角度 填充绘制一个三角形\n\n```java\n  private void initPointer(Canvas canvas) {\n      paint.setColor(Color.BLACK);\n\n\n      canvas.restore();\n      canvas.save();\n      canvas.translate(canvas.getWidth()/2, r);\n      float change;\n\n      if (perPoint < 1 ){\n          change = perPoint * 180;\n      }else {\n          change = 180;\n      }\n\n      //根据参数得到旋转角度\n      canvas.rotate(-90 + change,0f,0f);\n\n      //绘制三角形形成指针\n      Path path = new Path();\n      path.moveTo(0 , pointLength);\n      path.lineTo(-10 , 0);\n      path.lineTo(10,0);\n      path.lineTo(0 , pointLength);\n      path.close();\n\n      canvas.drawPath(path, paint);\n\n  }\n```\n\n## 内部圆环及文字展示\n\n先绘制一个带阴影的圆环 再居中绘制提示的文本信息\n\n```java\n  private void initText(Canvas canvas) {\n      //抗锯齿\n      canvas.setDrawFilter(new PaintFlagsDrawFilter(0, Paint.ANTI_ALIAS_FLAG|Paint.FILTER_BITMAP_FLAG));\n      canvas.restore();\n      canvas.save();\n      canvas.translate(canvas.getWidth()/2, r);\n\n      float rIndex = length ;\n\n      //设置文字展示的圆环\n      paint.setColor(Color.parseColor(\"#eeeeee\"));\n      paint.setShader(null);\n      paint.setShadowLayer(5, 0, 0, 0x54000000);\n      rect = new RectF( - (rIndex/ 3 ), - (rIndex / 3), rIndex / 3, rIndex / 3);\n      canvas.drawArc(rect, 0, 360, true, paint);\n\n      paint.clearShadowLayer();\n\n      canvas.restore();\n      canvas.save();\n      canvas.translate(canvas.getWidth()/2f , r);\n\n\n      textPaint.setStrokeWidth(1);\n      textPaint.setAntiAlias(true);\n\n      textPaint.setTextSize(60);\n      textPaint.setColor(Color.parseColor(\"#fc6555\"));\n      textPaint.setTextAlign(Paint.Align.RIGHT);\n\n\n      //判断指数变化及颜色设定\n      int _per = (int) (per * 120);\n\n      if (_per < 60){\n          textPaint.setColor(Color.parseColor(\"#ff6450\"));\n      }else if (_per < 100) {\n          textPaint.setColor(Color.parseColor(\"#f5a623\"));\n      }else {\n          textPaint.setColor(Color.parseColor(\"#79d062\"));\n      }\n\n      float swidth = textPaint.measureText(String.valueOf(_per));\n      //计算偏移量 是的数字和百分号整体居中显示\n      swidth =   (swidth - (swidth + 22) / 2);\n\n\n      canvas.translate( swidth , 0);\n      canvas.drawText(\"\" + _per, 0, 0, textPaint);\n\n      textPaint.setTextSize(30);\n      textPaint.setTextAlign(Paint.Align.LEFT);\n\n      canvas.drawText(\"%\" , 0, 0, textPaint);\n      textPaint.setTextAlign(Paint.Align.CENTER);\n      textPaint.setColor(Color.parseColor(\"#999999\"));\n\n\n      canvas.restore();\n      canvas.save();\n      canvas.translate(canvas.getWidth()/2  , r + length / 3 /2 );\n      canvas.drawText(\"完成率\" , 0, 0, textPaint);\n\n  }\n```\n\n## 更新动画\n使用ValueAnimator实现指针的转动动画效果\n\n```java\n  public void cgangePer(float per ){\n      this.perOld = this.per;\n      this.per = per;\n      ValueAnimator va =  ValueAnimator.ofFloat(perOld,per);\n      va.setDuration(1000);\n      va.setInterpolator(new OvershootInterpolator());\n      va.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n          @Override\n          public void onAnimationUpdate(ValueAnimator animation) {\n              perPoint = (float) animation.getAnimatedValue();\n              invalidate();\n          }\n      });\n      va.start();\n\n  }\n```\n\n这个仪表盘的实现就完成了  具体的代码可以查看[我的github](https://github.com/clwater/AndroidDashBoard.git)\n","slug":"android自定义View之仪表盘","published":1,"updated":"2020-03-13T09:33:05.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5e0000vq7dqlndvacos","content":"<h1 id=\"Android自定义View之仪表盘\"><a href=\"#Android自定义View之仪表盘\" class=\"headerlink\" title=\"Android自定义View之仪表盘\"></a>Android自定义View之仪表盘</h1><blockquote>\n<p>又是新系列（坑） 感觉都很零碎，能积累一些是一些了</p>\n</blockquote>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>随着项目开发 越来越多的需求被摆在面前 其中不免涉及到定制的功能<br>其中仪表盘也是一个很常用的功能<br><a id=\"more\"></a></p>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/25082465.jpg\" alt=\"效果图\"></p>\n<h2 id=\"设计过程\"><a href=\"#设计过程\" class=\"headerlink\" title=\"设计过程\"></a>设计过程</h2><h3 id=\"外侧渐变圆环\"><a href=\"#外侧渐变圆环\" class=\"headerlink\" title=\"外侧渐变圆环\"></a>外侧渐变圆环</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/78850293.jpg\" alt=\"外侧圆环效果\"></p>\n<h3 id=\"外侧刻度盘及文字显示\"><a href=\"#外侧刻度盘及文字显示\" class=\"headerlink\" title=\"外侧刻度盘及文字显示\"></a>外侧刻度盘及文字显示</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/30532330.jpg\" alt=\"外侧刻度盘及文字显示\"></p>\n<h3 id=\"指针显示\"><a href=\"#指针显示\" class=\"headerlink\" title=\"指针显示\"></a>指针显示</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/72116334.jpg\" alt=\"指针显示\"></p>\n<h3 id=\"内部圆环及文字展示\"><a href=\"#内部圆环及文字展示\" class=\"headerlink\" title=\"内部圆环及文字展示\"></a>内部圆环及文字展示</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/81417498.jpg\" alt=\"内部圆环及文字展示\"></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"自定义组件显示优化\"><a href=\"#自定义组件显示优化\" class=\"headerlink\" title=\"自定义组件显示优化\"></a>自定义组件显示优化</h3><p>设置自定义组件的时候要优化组件的高度</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> width = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> heitht = width / <span class=\"number\">2</span> / <span class=\"number\">4</span> * <span class=\"number\">5</span>;</span><br><span class=\"line\">    initIndex(width / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">//优化组件高度</span></span><br><span class=\"line\">    setMeasuredDimension(width, heitht);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"onDraw-过程\"><a href=\"#onDraw-过程\" class=\"headerlink\" title=\"onDraw()过程\"></a>onDraw()过程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//禁用硬件加速</span></span><br><span class=\"line\">    setLayerType(LAYER_TYPE_SOFTWARE, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">//外侧颜色指示圆环</span></span><br><span class=\"line\">    initRing(canvas);</span><br><span class=\"line\">    <span class=\"comment\">//刻度文字</span></span><br><span class=\"line\">    initScale(canvas);</span><br><span class=\"line\">    <span class=\"comment\">//指针</span></span><br><span class=\"line\">    initPointer(canvas);</span><br><span class=\"line\">    <span class=\"comment\">//提示内容</span></span><br><span class=\"line\">    initText(canvas);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要还是这个四个绘制的过程</p>\n<h2 id=\"外侧颜色指示圆环\"><a href=\"#外侧颜色指示圆环\" class=\"headerlink\" title=\"外侧颜色指示圆环\"></a>外侧颜色指示圆环</h2><ol>\n<li>首先绘制的前一部分的红黄渐变圆环<br>这个圆环并不是一个180度的圆环 而是一个两百度的圆环 下侧再实现水平的效果</li>\n<li>绘制后一部分的绿色渐变圆环</li>\n<li>修正底部的效果 修改成水平的效果</li>\n<li>绘制内部半圆 遮盖住渐变的半圆</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initRing</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    paint.setAntiAlias(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    paint.setStrokeWidth(<span class=\"number\">2</span>);</span><br><span class=\"line\">    canvas.save();</span><br><span class=\"line\">    <span class=\"comment\">//canvas中心移动到中间</span></span><br><span class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//前100红黄渐变圆环</span></span><br><span class=\"line\">    paint.setStyle(Paint.Style.FILL);</span><br><span class=\"line\">    <span class=\"comment\">//设置渐变的颜色范围</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] colors = &#123;Color.parseColor(<span class=\"string\">\"#F95A37\"</span>), Color.parseColor(<span class=\"string\">\"#f9cf45\"</span>)&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//设置的渐变起止位置</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span>[] positions = &#123;<span class=\"number\">0.5f</span> - <span class=\"number\">10f</span>/<span class=\"number\">180f</span> * <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span> + <span class=\"number\">0.5f</span> * <span class=\"number\">5f</span> / <span class=\"number\">6f</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//设置渐变的蒙版</span></span><br><span class=\"line\">    SweepGradient sweepGradient = <span class=\"keyword\">new</span> SweepGradient(<span class=\"number\">0</span>, <span class=\"number\">0</span>, colors, positions);</span><br><span class=\"line\">    paint.setShader(sweepGradient);</span><br><span class=\"line\">    rect = <span class=\"keyword\">new</span> RectF( -length, -length, length, length);</span><br><span class=\"line\">    <span class=\"comment\">//绘制圆环</span></span><br><span class=\"line\">    canvas.drawArc(rect, <span class=\"number\">170</span>, <span class=\"number\">10f</span> + <span class=\"number\">180f</span> / <span class=\"number\">6f</span> * <span class=\"number\">5f</span>, <span class=\"keyword\">true</span>, paint);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//100之后绿色渐变圆环</span></span><br><span class=\"line\">    paint.setStyle(Paint.Style.FILL);</span><br><span class=\"line\">    canvas.rotate(<span class=\"number\">10</span>,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] colors2 = &#123;Color.parseColor(<span class=\"string\">\"#79D062\"</span>),  Color.parseColor(<span class=\"string\">\"#3FBF55\"</span>)&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">float</span>[] positions2 = &#123;<span class=\"number\">0.5f</span> + <span class=\"number\">0.5f</span> * ( <span class=\"number\">144f</span> / <span class=\"number\">180f</span>), <span class=\"number\">1.0f</span>&#125;;</span><br><span class=\"line\">    sweepGradient = <span class=\"keyword\">new</span> SweepGradient(<span class=\"number\">0</span>, <span class=\"number\">0</span>, colors2, positions2);</span><br><span class=\"line\">    paint.setShader(sweepGradient);</span><br><span class=\"line\">    rect = <span class=\"keyword\">new</span> RectF( -length, -length, length, length);</span><br><span class=\"line\">    canvas.drawArc(rect, <span class=\"number\">180f</span> + <span class=\"number\">180f</span> * (<span class=\"number\">140f</span> / <span class=\"number\">180f</span>), <span class=\"number\">180f</span> / <span class=\"number\">6</span> + <span class=\"number\">10</span>, <span class=\"keyword\">true</span>, paint);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.restore();</span><br><span class=\"line\">    canvas.save();</span><br><span class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制描边效果的画笔</span></span><br><span class=\"line\">    strokePain = <span class=\"keyword\">new</span> Paint(paint);</span><br><span class=\"line\">    strokePain.setColor(<span class=\"number\">0x3f979797</span>);</span><br><span class=\"line\">    strokePain.setStrokeWidth(<span class=\"number\">10</span>);</span><br><span class=\"line\">    strokePain.setShader(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    strokePain.setStyle(Paint.Style.STROKE);</span><br><span class=\"line\">    canvas.drawArc(rect, <span class=\"number\">170</span>, <span class=\"number\">200</span>, <span class=\"keyword\">true</span>, strokePain);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.restore();</span><br><span class=\"line\">    canvas.save();</span><br><span class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//底边水平</span></span><br><span class=\"line\">    paint.setShader(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    paint.setColor(backGroundColor);</span><br><span class=\"line\">    paint.setStyle(Paint.Style.FILL);</span><br><span class=\"line\">    canvas.drawRect(-length  , (<span class=\"keyword\">float</span>) (Math.sin(Math.toRadians(<span class=\"number\">10</span>) ) * length /<span class=\"number\">3f</span> * <span class=\"number\">2f</span>), length  ,  (<span class=\"keyword\">float</span>) (Math.sin(Math.toRadians(<span class=\"number\">10</span>)) * length  + <span class=\"number\">100</span>) , paint);</span><br><span class=\"line\">    canvas.drawRect(-length  , (<span class=\"keyword\">float</span>) (Math.sin(Math.toRadians(<span class=\"number\">10</span>) ) * length /<span class=\"number\">3f</span> * <span class=\"number\">2f</span>), length  ,  (<span class=\"keyword\">float</span>) (Math.sin(Math.toRadians(<span class=\"number\">10</span>) ) * length /<span class=\"number\">3f</span> * <span class=\"number\">2f</span>) , strokePain);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//内部背景色填充</span></span><br><span class=\"line\">    paint.setColor(backGroundColor);</span><br><span class=\"line\">    paint.setShader(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    rect = <span class=\"keyword\">new</span> RectF( - (length - length / <span class=\"number\">3f</span>  - <span class=\"number\">2</span>), -(length / <span class=\"number\">3f</span> * <span class=\"number\">2f</span> - <span class=\"number\">2</span>), length - length / <span class=\"number\">3f</span> -<span class=\"number\">2</span> , length / <span class=\"number\">3f</span> * <span class=\"number\">2f</span> - <span class=\"number\">2</span>);</span><br><span class=\"line\">    canvas.drawArc(rect, <span class=\"number\">170</span>, <span class=\"number\">200</span>, <span class=\"keyword\">true</span>, strokePain);</span><br><span class=\"line\">    canvas.drawArc(rect, <span class=\"number\">0</span>, <span class=\"number\">360</span>, <span class=\"keyword\">true</span>, paint);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"外侧刻度盘及文字显示-1\"><a href=\"#外侧刻度盘及文字显示-1\" class=\"headerlink\" title=\"外侧刻度盘及文字显示\"></a>外侧刻度盘及文字显示</h2><p>旋转画布绘制对应角度的显示及刻度</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initScale</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    canvas.restore();</span><br><span class=\"line\">    canvas.save();</span><br><span class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</span><br><span class=\"line\">    paint.setColor(Color.parseColor(<span class=\"string\">\"#999999\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    tmpPaint = <span class=\"keyword\">new</span> Paint(paint); <span class=\"comment\">//刻度画笔对象</span></span><br><span class=\"line\">    tmpPaint.setStrokeWidth(<span class=\"number\">1</span>);</span><br><span class=\"line\">    tmpPaint.setTextSize(<span class=\"number\">35</span>);</span><br><span class=\"line\">    tmpPaint.setTextAlign(Paint.Align.CENTER);</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.rotate(-<span class=\"number\">90</span>,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">float</span>  y = length;</span><br><span class=\"line\">    y = - y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">12</span>; <span class=\"comment\">//总刻度数</span></span><br><span class=\"line\">    paint.setColor(backGroundColor);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">float</span> tempRou = <span class=\"number\">180</span> / <span class=\"number\">12f</span>;</span><br><span class=\"line\">    <span class=\"comment\">//每次旋转的角度</span></span><br><span class=\"line\">    paint.setColor(Color.WHITE);</span><br><span class=\"line\">    paint.setStrokeWidth(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制刻度和百分比</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt;= count ; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">            canvas.drawText(String.valueOf((i) * <span class=\"number\">10</span>), <span class=\"number\">0</span>, y - <span class=\"number\">20f</span>, tmpPaint);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        canvas.drawLine(<span class=\"number\">0f</span>, y , <span class=\"number\">0</span>, y + length / <span class=\"number\">15</span>, paint);</span><br><span class=\"line\">        canvas.rotate(tempRou,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"指针显示-1\"><a href=\"#指针显示-1\" class=\"headerlink\" title=\"指针显示\"></a>指针显示</h2><p>指针显示的比较简单也是唯二需要变化的之一</p>\n<p>指针的绘制比较简单 根据传入的角度(百分比)旋转对应的角度 填充绘制一个三角形</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initPointer</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    paint.setColor(Color.BLACK);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.restore();</span><br><span class=\"line\">    canvas.save();</span><br><span class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</span><br><span class=\"line\">    <span class=\"keyword\">float</span> change;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (perPoint &lt; <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">        change = perPoint * <span class=\"number\">180</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        change = <span class=\"number\">180</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据参数得到旋转角度</span></span><br><span class=\"line\">    canvas.rotate(-<span class=\"number\">90</span> + change,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制三角形形成指针</span></span><br><span class=\"line\">    Path path = <span class=\"keyword\">new</span> Path();</span><br><span class=\"line\">    path.moveTo(<span class=\"number\">0</span> , pointLength);</span><br><span class=\"line\">    path.lineTo(-<span class=\"number\">10</span> , <span class=\"number\">0</span>);</span><br><span class=\"line\">    path.lineTo(<span class=\"number\">10</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    path.lineTo(<span class=\"number\">0</span> , pointLength);</span><br><span class=\"line\">    path.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.drawPath(path, paint);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"内部圆环及文字展示-1\"><a href=\"#内部圆环及文字展示-1\" class=\"headerlink\" title=\"内部圆环及文字展示\"></a>内部圆环及文字展示</h2><p>先绘制一个带阴影的圆环 再居中绘制提示的文本信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initText</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//抗锯齿</span></span><br><span class=\"line\">    canvas.setDrawFilter(<span class=\"keyword\">new</span> PaintFlagsDrawFilter(<span class=\"number\">0</span>, Paint.ANTI_ALIAS_FLAG|Paint.FILTER_BITMAP_FLAG));</span><br><span class=\"line\">    canvas.restore();</span><br><span class=\"line\">    canvas.save();</span><br><span class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">float</span> rIndex = length ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置文字展示的圆环</span></span><br><span class=\"line\">    paint.setColor(Color.parseColor(<span class=\"string\">\"#eeeeee\"</span>));</span><br><span class=\"line\">    paint.setShader(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    paint.setShadowLayer(<span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0x54000000</span>);</span><br><span class=\"line\">    rect = <span class=\"keyword\">new</span> RectF( - (rIndex/ <span class=\"number\">3</span> ), - (rIndex / <span class=\"number\">3</span>), rIndex / <span class=\"number\">3</span>, rIndex / <span class=\"number\">3</span>);</span><br><span class=\"line\">    canvas.drawArc(rect, <span class=\"number\">0</span>, <span class=\"number\">360</span>, <span class=\"keyword\">true</span>, paint);</span><br><span class=\"line\"></span><br><span class=\"line\">    paint.clearShadowLayer();</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.restore();</span><br><span class=\"line\">    canvas.save();</span><br><span class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2f</span> , r);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    textPaint.setStrokeWidth(<span class=\"number\">1</span>);</span><br><span class=\"line\">    textPaint.setAntiAlias(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    textPaint.setTextSize(<span class=\"number\">60</span>);</span><br><span class=\"line\">    textPaint.setColor(Color.parseColor(<span class=\"string\">\"#fc6555\"</span>));</span><br><span class=\"line\">    textPaint.setTextAlign(Paint.Align.RIGHT);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断指数变化及颜色设定</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> _per = (<span class=\"keyword\">int</span>) (per * <span class=\"number\">120</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_per &lt; <span class=\"number\">60</span>)&#123;</span><br><span class=\"line\">        textPaint.setColor(Color.parseColor(<span class=\"string\">\"#ff6450\"</span>));</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_per &lt; <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">        textPaint.setColor(Color.parseColor(<span class=\"string\">\"#f5a623\"</span>));</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        textPaint.setColor(Color.parseColor(<span class=\"string\">\"#79d062\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">float</span> swidth = textPaint.measureText(String.valueOf(_per));</span><br><span class=\"line\">    <span class=\"comment\">//计算偏移量 是的数字和百分号整体居中显示</span></span><br><span class=\"line\">    swidth =   (swidth - (swidth + <span class=\"number\">22</span>) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.translate( swidth , <span class=\"number\">0</span>);</span><br><span class=\"line\">    canvas.drawText(<span class=\"string\">\"\"</span> + _per, <span class=\"number\">0</span>, <span class=\"number\">0</span>, textPaint);</span><br><span class=\"line\"></span><br><span class=\"line\">    textPaint.setTextSize(<span class=\"number\">30</span>);</span><br><span class=\"line\">    textPaint.setTextAlign(Paint.Align.LEFT);</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.drawText(<span class=\"string\">\"%\"</span> , <span class=\"number\">0</span>, <span class=\"number\">0</span>, textPaint);</span><br><span class=\"line\">    textPaint.setTextAlign(Paint.Align.CENTER);</span><br><span class=\"line\">    textPaint.setColor(Color.parseColor(<span class=\"string\">\"#999999\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.restore();</span><br><span class=\"line\">    canvas.save();</span><br><span class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>  , r + length / <span class=\"number\">3</span> /<span class=\"number\">2</span> );</span><br><span class=\"line\">    canvas.drawText(<span class=\"string\">\"完成率\"</span> , <span class=\"number\">0</span>, <span class=\"number\">0</span>, textPaint);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新动画\"><a href=\"#更新动画\" class=\"headerlink\" title=\"更新动画\"></a>更新动画</h2><p>使用ValueAnimator实现指针的转动动画效果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cgangePer</span><span class=\"params\">(<span class=\"keyword\">float</span> per )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.perOld = <span class=\"keyword\">this</span>.per;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.per = per;</span><br><span class=\"line\">    ValueAnimator va =  ValueAnimator.ofFloat(perOld,per);</span><br><span class=\"line\">    va.setDuration(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    va.setInterpolator(<span class=\"keyword\">new</span> OvershootInterpolator());</span><br><span class=\"line\">    va.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator animation)</span> </span>&#123;</span><br><span class=\"line\">            perPoint = (<span class=\"keyword\">float</span>) animation.getAnimatedValue();</span><br><span class=\"line\">            invalidate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    va.start();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个仪表盘的实现就完成了  具体的代码可以查看<a href=\"https://github.com/clwater/AndroidDashBoard.git\" target=\"_blank\" rel=\"noopener\">我的github</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Android自定义View之仪表盘\"><a href=\"#Android自定义View之仪表盘\" class=\"headerlink\" title=\"Android自定义View之仪表盘\"></a>Android自定义View之仪表盘</h1><blockquote>\n<p>又是新系列（坑） 感觉都很零碎，能积累一些是一些了</p>\n</blockquote>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>随着项目开发 越来越多的需求被摆在面前 其中不免涉及到定制的功能<br>其中仪表盘也是一个很常用的功能<br>","more":"</p>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/25082465.jpg\" alt=\"效果图\"></p>\n<h2 id=\"设计过程\"><a href=\"#设计过程\" class=\"headerlink\" title=\"设计过程\"></a>设计过程</h2><h3 id=\"外侧渐变圆环\"><a href=\"#外侧渐变圆环\" class=\"headerlink\" title=\"外侧渐变圆环\"></a>外侧渐变圆环</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/78850293.jpg\" alt=\"外侧圆环效果\"></p>\n<h3 id=\"外侧刻度盘及文字显示\"><a href=\"#外侧刻度盘及文字显示\" class=\"headerlink\" title=\"外侧刻度盘及文字显示\"></a>外侧刻度盘及文字显示</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/30532330.jpg\" alt=\"外侧刻度盘及文字显示\"></p>\n<h3 id=\"指针显示\"><a href=\"#指针显示\" class=\"headerlink\" title=\"指针显示\"></a>指针显示</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/72116334.jpg\" alt=\"指针显示\"></p>\n<h3 id=\"内部圆环及文字展示\"><a href=\"#内部圆环及文字展示\" class=\"headerlink\" title=\"内部圆环及文字展示\"></a>内部圆环及文字展示</h3><p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/81417498.jpg\" alt=\"内部圆环及文字展示\"></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"自定义组件显示优化\"><a href=\"#自定义组件显示优化\" class=\"headerlink\" title=\"自定义组件显示优化\"></a>自定义组件显示优化</h3><p>设置自定义组件的时候要优化组件的高度</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> width = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> heitht = width / <span class=\"number\">2</span> / <span class=\"number\">4</span> * <span class=\"number\">5</span>;</span><br><span class=\"line\">    initIndex(width / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">//优化组件高度</span></span><br><span class=\"line\">    setMeasuredDimension(width, heitht);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"onDraw-过程\"><a href=\"#onDraw-过程\" class=\"headerlink\" title=\"onDraw()过程\"></a>onDraw()过程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//禁用硬件加速</span></span><br><span class=\"line\">    setLayerType(LAYER_TYPE_SOFTWARE, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">//外侧颜色指示圆环</span></span><br><span class=\"line\">    initRing(canvas);</span><br><span class=\"line\">    <span class=\"comment\">//刻度文字</span></span><br><span class=\"line\">    initScale(canvas);</span><br><span class=\"line\">    <span class=\"comment\">//指针</span></span><br><span class=\"line\">    initPointer(canvas);</span><br><span class=\"line\">    <span class=\"comment\">//提示内容</span></span><br><span class=\"line\">    initText(canvas);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要还是这个四个绘制的过程</p>\n<h2 id=\"外侧颜色指示圆环\"><a href=\"#外侧颜色指示圆环\" class=\"headerlink\" title=\"外侧颜色指示圆环\"></a>外侧颜色指示圆环</h2><ol>\n<li>首先绘制的前一部分的红黄渐变圆环<br>这个圆环并不是一个180度的圆环 而是一个两百度的圆环 下侧再实现水平的效果</li>\n<li>绘制后一部分的绿色渐变圆环</li>\n<li>修正底部的效果 修改成水平的效果</li>\n<li>绘制内部半圆 遮盖住渐变的半圆</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initRing</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    paint.setAntiAlias(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    paint.setStrokeWidth(<span class=\"number\">2</span>);</span><br><span class=\"line\">    canvas.save();</span><br><span class=\"line\">    <span class=\"comment\">//canvas中心移动到中间</span></span><br><span class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//前100红黄渐变圆环</span></span><br><span class=\"line\">    paint.setStyle(Paint.Style.FILL);</span><br><span class=\"line\">    <span class=\"comment\">//设置渐变的颜色范围</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] colors = &#123;Color.parseColor(<span class=\"string\">\"#F95A37\"</span>), Color.parseColor(<span class=\"string\">\"#f9cf45\"</span>)&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//设置的渐变起止位置</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span>[] positions = &#123;<span class=\"number\">0.5f</span> - <span class=\"number\">10f</span>/<span class=\"number\">180f</span> * <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span> + <span class=\"number\">0.5f</span> * <span class=\"number\">5f</span> / <span class=\"number\">6f</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//设置渐变的蒙版</span></span><br><span class=\"line\">    SweepGradient sweepGradient = <span class=\"keyword\">new</span> SweepGradient(<span class=\"number\">0</span>, <span class=\"number\">0</span>, colors, positions);</span><br><span class=\"line\">    paint.setShader(sweepGradient);</span><br><span class=\"line\">    rect = <span class=\"keyword\">new</span> RectF( -length, -length, length, length);</span><br><span class=\"line\">    <span class=\"comment\">//绘制圆环</span></span><br><span class=\"line\">    canvas.drawArc(rect, <span class=\"number\">170</span>, <span class=\"number\">10f</span> + <span class=\"number\">180f</span> / <span class=\"number\">6f</span> * <span class=\"number\">5f</span>, <span class=\"keyword\">true</span>, paint);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//100之后绿色渐变圆环</span></span><br><span class=\"line\">    paint.setStyle(Paint.Style.FILL);</span><br><span class=\"line\">    canvas.rotate(<span class=\"number\">10</span>,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] colors2 = &#123;Color.parseColor(<span class=\"string\">\"#79D062\"</span>),  Color.parseColor(<span class=\"string\">\"#3FBF55\"</span>)&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">float</span>[] positions2 = &#123;<span class=\"number\">0.5f</span> + <span class=\"number\">0.5f</span> * ( <span class=\"number\">144f</span> / <span class=\"number\">180f</span>), <span class=\"number\">1.0f</span>&#125;;</span><br><span class=\"line\">    sweepGradient = <span class=\"keyword\">new</span> SweepGradient(<span class=\"number\">0</span>, <span class=\"number\">0</span>, colors2, positions2);</span><br><span class=\"line\">    paint.setShader(sweepGradient);</span><br><span class=\"line\">    rect = <span class=\"keyword\">new</span> RectF( -length, -length, length, length);</span><br><span class=\"line\">    canvas.drawArc(rect, <span class=\"number\">180f</span> + <span class=\"number\">180f</span> * (<span class=\"number\">140f</span> / <span class=\"number\">180f</span>), <span class=\"number\">180f</span> / <span class=\"number\">6</span> + <span class=\"number\">10</span>, <span class=\"keyword\">true</span>, paint);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.restore();</span><br><span class=\"line\">    canvas.save();</span><br><span class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制描边效果的画笔</span></span><br><span class=\"line\">    strokePain = <span class=\"keyword\">new</span> Paint(paint);</span><br><span class=\"line\">    strokePain.setColor(<span class=\"number\">0x3f979797</span>);</span><br><span class=\"line\">    strokePain.setStrokeWidth(<span class=\"number\">10</span>);</span><br><span class=\"line\">    strokePain.setShader(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    strokePain.setStyle(Paint.Style.STROKE);</span><br><span class=\"line\">    canvas.drawArc(rect, <span class=\"number\">170</span>, <span class=\"number\">200</span>, <span class=\"keyword\">true</span>, strokePain);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.restore();</span><br><span class=\"line\">    canvas.save();</span><br><span class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//底边水平</span></span><br><span class=\"line\">    paint.setShader(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    paint.setColor(backGroundColor);</span><br><span class=\"line\">    paint.setStyle(Paint.Style.FILL);</span><br><span class=\"line\">    canvas.drawRect(-length  , (<span class=\"keyword\">float</span>) (Math.sin(Math.toRadians(<span class=\"number\">10</span>) ) * length /<span class=\"number\">3f</span> * <span class=\"number\">2f</span>), length  ,  (<span class=\"keyword\">float</span>) (Math.sin(Math.toRadians(<span class=\"number\">10</span>)) * length  + <span class=\"number\">100</span>) , paint);</span><br><span class=\"line\">    canvas.drawRect(-length  , (<span class=\"keyword\">float</span>) (Math.sin(Math.toRadians(<span class=\"number\">10</span>) ) * length /<span class=\"number\">3f</span> * <span class=\"number\">2f</span>), length  ,  (<span class=\"keyword\">float</span>) (Math.sin(Math.toRadians(<span class=\"number\">10</span>) ) * length /<span class=\"number\">3f</span> * <span class=\"number\">2f</span>) , strokePain);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//内部背景色填充</span></span><br><span class=\"line\">    paint.setColor(backGroundColor);</span><br><span class=\"line\">    paint.setShader(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    rect = <span class=\"keyword\">new</span> RectF( - (length - length / <span class=\"number\">3f</span>  - <span class=\"number\">2</span>), -(length / <span class=\"number\">3f</span> * <span class=\"number\">2f</span> - <span class=\"number\">2</span>), length - length / <span class=\"number\">3f</span> -<span class=\"number\">2</span> , length / <span class=\"number\">3f</span> * <span class=\"number\">2f</span> - <span class=\"number\">2</span>);</span><br><span class=\"line\">    canvas.drawArc(rect, <span class=\"number\">170</span>, <span class=\"number\">200</span>, <span class=\"keyword\">true</span>, strokePain);</span><br><span class=\"line\">    canvas.drawArc(rect, <span class=\"number\">0</span>, <span class=\"number\">360</span>, <span class=\"keyword\">true</span>, paint);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"外侧刻度盘及文字显示-1\"><a href=\"#外侧刻度盘及文字显示-1\" class=\"headerlink\" title=\"外侧刻度盘及文字显示\"></a>外侧刻度盘及文字显示</h2><p>旋转画布绘制对应角度的显示及刻度</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initScale</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    canvas.restore();</span><br><span class=\"line\">    canvas.save();</span><br><span class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</span><br><span class=\"line\">    paint.setColor(Color.parseColor(<span class=\"string\">\"#999999\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    tmpPaint = <span class=\"keyword\">new</span> Paint(paint); <span class=\"comment\">//刻度画笔对象</span></span><br><span class=\"line\">    tmpPaint.setStrokeWidth(<span class=\"number\">1</span>);</span><br><span class=\"line\">    tmpPaint.setTextSize(<span class=\"number\">35</span>);</span><br><span class=\"line\">    tmpPaint.setTextAlign(Paint.Align.CENTER);</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.rotate(-<span class=\"number\">90</span>,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">float</span>  y = length;</span><br><span class=\"line\">    y = - y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">12</span>; <span class=\"comment\">//总刻度数</span></span><br><span class=\"line\">    paint.setColor(backGroundColor);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">float</span> tempRou = <span class=\"number\">180</span> / <span class=\"number\">12f</span>;</span><br><span class=\"line\">    <span class=\"comment\">//每次旋转的角度</span></span><br><span class=\"line\">    paint.setColor(Color.WHITE);</span><br><span class=\"line\">    paint.setStrokeWidth(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制刻度和百分比</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt;= count ; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">            canvas.drawText(String.valueOf((i) * <span class=\"number\">10</span>), <span class=\"number\">0</span>, y - <span class=\"number\">20f</span>, tmpPaint);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        canvas.drawLine(<span class=\"number\">0f</span>, y , <span class=\"number\">0</span>, y + length / <span class=\"number\">15</span>, paint);</span><br><span class=\"line\">        canvas.rotate(tempRou,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"指针显示-1\"><a href=\"#指针显示-1\" class=\"headerlink\" title=\"指针显示\"></a>指针显示</h2><p>指针显示的比较简单也是唯二需要变化的之一</p>\n<p>指针的绘制比较简单 根据传入的角度(百分比)旋转对应的角度 填充绘制一个三角形</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initPointer</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    paint.setColor(Color.BLACK);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.restore();</span><br><span class=\"line\">    canvas.save();</span><br><span class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</span><br><span class=\"line\">    <span class=\"keyword\">float</span> change;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (perPoint &lt; <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">        change = perPoint * <span class=\"number\">180</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        change = <span class=\"number\">180</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据参数得到旋转角度</span></span><br><span class=\"line\">    canvas.rotate(-<span class=\"number\">90</span> + change,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制三角形形成指针</span></span><br><span class=\"line\">    Path path = <span class=\"keyword\">new</span> Path();</span><br><span class=\"line\">    path.moveTo(<span class=\"number\">0</span> , pointLength);</span><br><span class=\"line\">    path.lineTo(-<span class=\"number\">10</span> , <span class=\"number\">0</span>);</span><br><span class=\"line\">    path.lineTo(<span class=\"number\">10</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    path.lineTo(<span class=\"number\">0</span> , pointLength);</span><br><span class=\"line\">    path.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.drawPath(path, paint);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"内部圆环及文字展示-1\"><a href=\"#内部圆环及文字展示-1\" class=\"headerlink\" title=\"内部圆环及文字展示\"></a>内部圆环及文字展示</h2><p>先绘制一个带阴影的圆环 再居中绘制提示的文本信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initText</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//抗锯齿</span></span><br><span class=\"line\">    canvas.setDrawFilter(<span class=\"keyword\">new</span> PaintFlagsDrawFilter(<span class=\"number\">0</span>, Paint.ANTI_ALIAS_FLAG|Paint.FILTER_BITMAP_FLAG));</span><br><span class=\"line\">    canvas.restore();</span><br><span class=\"line\">    canvas.save();</span><br><span class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">float</span> rIndex = length ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置文字展示的圆环</span></span><br><span class=\"line\">    paint.setColor(Color.parseColor(<span class=\"string\">\"#eeeeee\"</span>));</span><br><span class=\"line\">    paint.setShader(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    paint.setShadowLayer(<span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0x54000000</span>);</span><br><span class=\"line\">    rect = <span class=\"keyword\">new</span> RectF( - (rIndex/ <span class=\"number\">3</span> ), - (rIndex / <span class=\"number\">3</span>), rIndex / <span class=\"number\">3</span>, rIndex / <span class=\"number\">3</span>);</span><br><span class=\"line\">    canvas.drawArc(rect, <span class=\"number\">0</span>, <span class=\"number\">360</span>, <span class=\"keyword\">true</span>, paint);</span><br><span class=\"line\"></span><br><span class=\"line\">    paint.clearShadowLayer();</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.restore();</span><br><span class=\"line\">    canvas.save();</span><br><span class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2f</span> , r);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    textPaint.setStrokeWidth(<span class=\"number\">1</span>);</span><br><span class=\"line\">    textPaint.setAntiAlias(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    textPaint.setTextSize(<span class=\"number\">60</span>);</span><br><span class=\"line\">    textPaint.setColor(Color.parseColor(<span class=\"string\">\"#fc6555\"</span>));</span><br><span class=\"line\">    textPaint.setTextAlign(Paint.Align.RIGHT);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断指数变化及颜色设定</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> _per = (<span class=\"keyword\">int</span>) (per * <span class=\"number\">120</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_per &lt; <span class=\"number\">60</span>)&#123;</span><br><span class=\"line\">        textPaint.setColor(Color.parseColor(<span class=\"string\">\"#ff6450\"</span>));</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_per &lt; <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">        textPaint.setColor(Color.parseColor(<span class=\"string\">\"#f5a623\"</span>));</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        textPaint.setColor(Color.parseColor(<span class=\"string\">\"#79d062\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">float</span> swidth = textPaint.measureText(String.valueOf(_per));</span><br><span class=\"line\">    <span class=\"comment\">//计算偏移量 是的数字和百分号整体居中显示</span></span><br><span class=\"line\">    swidth =   (swidth - (swidth + <span class=\"number\">22</span>) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.translate( swidth , <span class=\"number\">0</span>);</span><br><span class=\"line\">    canvas.drawText(<span class=\"string\">\"\"</span> + _per, <span class=\"number\">0</span>, <span class=\"number\">0</span>, textPaint);</span><br><span class=\"line\"></span><br><span class=\"line\">    textPaint.setTextSize(<span class=\"number\">30</span>);</span><br><span class=\"line\">    textPaint.setTextAlign(Paint.Align.LEFT);</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.drawText(<span class=\"string\">\"%\"</span> , <span class=\"number\">0</span>, <span class=\"number\">0</span>, textPaint);</span><br><span class=\"line\">    textPaint.setTextAlign(Paint.Align.CENTER);</span><br><span class=\"line\">    textPaint.setColor(Color.parseColor(<span class=\"string\">\"#999999\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.restore();</span><br><span class=\"line\">    canvas.save();</span><br><span class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>  , r + length / <span class=\"number\">3</span> /<span class=\"number\">2</span> );</span><br><span class=\"line\">    canvas.drawText(<span class=\"string\">\"完成率\"</span> , <span class=\"number\">0</span>, <span class=\"number\">0</span>, textPaint);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新动画\"><a href=\"#更新动画\" class=\"headerlink\" title=\"更新动画\"></a>更新动画</h2><p>使用ValueAnimator实现指针的转动动画效果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cgangePer</span><span class=\"params\">(<span class=\"keyword\">float</span> per )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.perOld = <span class=\"keyword\">this</span>.per;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.per = per;</span><br><span class=\"line\">    ValueAnimator va =  ValueAnimator.ofFloat(perOld,per);</span><br><span class=\"line\">    va.setDuration(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    va.setInterpolator(<span class=\"keyword\">new</span> OvershootInterpolator());</span><br><span class=\"line\">    va.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator animation)</span> </span>&#123;</span><br><span class=\"line\">            perPoint = (<span class=\"keyword\">float</span>) animation.getAnimatedValue();</span><br><span class=\"line\">            invalidate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    va.start();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个仪表盘的实现就完成了  具体的代码可以查看<a href=\"https://github.com/clwater/AndroidDashBoard.git\" target=\"_blank\" rel=\"noopener\">我的github</a></p>"},{"title":"Android自定义View之星球运动","date":"2018-02-25T11:33:13.000Z","_content":"# Android自定义View 星球运动\n\n>在dribbble闲逛的时候发现的一个有意思的星球运动的动画,刚好最近时间尚可,就简单实现了一下中间运动的部分,又是因为时间的原因,开头位移的部分没有完成.\n\n<!-- more -->\n![dribbble中发现的动画](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/19201885.jpg)\n这是在dribbble中发现的动画\n\n![自己实现的动画](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/92078484.jpg)\n这是我自己实现的效果...  总觉得我这个星球有点胖...  因为胖所以转的慢么这是.速度等细节还有优化的余地\n\n## 设计过程\n老办法,先分解动画的构成.整个动画可以看做是一个自旋的星球从右上角由小变大的移动到屏幕的中央的.\n\n星球的位移及缩放不说(其实是最近有需求,暂时没时间完善),主要完善了星球的旋转及尾部的处理.\n\n最底层是背景的星星闪烁,每次在星球一定范围内随机出现,并缩放就好\n\n最开始设计尾部效果的时候,是在没列中设计了两端线.再不断的运行及移动.但是实现起来很乱.最后采用了先绘制所有尾部展示的内容,然后在用和背景一样的颜色部分遮盖并移动此部分形成视觉上的效果的方法.(也可以设置PorterDuff模式来展示).设计过程中的效果如下\n\n![尾部效果1](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/93671679.jpg)\n\n![尾部效果2](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/22878685.jpg)\n\n星球的设计,星球的本身使用简单的遮盖和贝塞尔曲线就能完成一个较为满意的星球背景.\n\n![星球背景](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/67915702.jpg)\n\n重点是星球地表的设计以及星球自转下的地表样式的移动.解决的方法是是先绘制三个重复并连续的地表样式,通过移动整个地表样式模拟星球的转动.最后通过PorterDuff来控制展示的部分和星球的位置重合.\n\n未开启PorterDuff模式时绘制的样式如下:\n\n![地貌的设置](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/86724391.jpg)\n\n开启PorterDuff模式后再指定位置展示指定形状的图形如下:\n\n![开启PorterDuff模式](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/99450653.jpg)\n\n最后再移动设置好的星球地貌就可以模拟出星球转动的效果了\n\n## 代码实现\n### 背景的星星\n```java\nprivate fun drawStarts(canvas: Canvas, perIndexInAll: Float) {\n    //背景的星星在星球附近的一定范围内随机出现\n    val maxRand = 800\n\n    canvas.translate(-maxRand / 2F , -maxRand / 2F)\n    val Random = Random(perIndexInAll.toInt().toLong())\n\n    //绘制背景的星星\n    for (index in 0..4){\n        drawStart(canvas ,  Random.nextFloat() * maxRand , Random.nextFloat() * maxRand , perIndex)\n    }\n\n    canvas.translate(maxRand / 2F , maxRand / 2F)\n}\n\n//绘制背景的星星内容\n//绘制背景的星星内容\nprivate fun drawStart(canvas: Canvas, x: Float, y: Float, per: Float) {\n    var per = per\n    //这个部分是为了让星星实现从小到大后再从大到小的变动\n    if (per >= 1.0F){\n        per -= 1F\n    }\n    if (per <= 0.5F){\n        per *= 2\n    }else{\n        per = (1 - per) * 2\n    }\n\n    canvas.save()\n    canvas.translate(x , y)\n\n    canvas.scale(per , per)\n\n    val paint = Paint()\n    paint.color = 0xff78D8DF.toInt()\n\n    val startLength = 30F\n    val startOffset = startLength / 3F\n\n    //通过路径描绘星星的形状\n    val path = Path()\n    path.moveTo(0F , startLength)\n    path.lineTo(startOffset , startOffset )\n    path.lineTo(startLength , 0F)\n    path.lineTo(startOffset  , -startOffset )\n    path.lineTo(0F , -startLength)\n    path.lineTo(-startOffset  , -startOffset )\n    path.lineTo(-startLength , 0F)\n    path.lineTo(-startOffset  , startOffset )\n    path.lineTo(0F , startLength)\n\n    canvas.drawPath(path , paint)\n\n    paint.color = viewBackgroundColor\n    //通过缩小绘制星星内部形状\n    canvas.scale(0.3F , 0.3F)\n    canvas.drawPath(path , paint)\n\n    canvas.restore()\n}\n```\n\n### 星球外部\n```java\nprivate fun drawGas(canvas: Canvas, index: Float) {\n    canvas.save()\n    canvas.rotate(45F)\n\n    val gasWidth = 18F\n    val baseR = baseR * 0.7F\n    val absBaseR = baseR / 5F\n\n    val paint = Paint()\n    paint.strokeWidth = gasWidth\n    paint.style = Paint.Style.STROKE\n    paint.color = 0xff2F3768.toInt()\n\n    val paintArc = Paint()\n    paintArc.color = 0xff2F3768.toInt()\n\n    val gasLength = baseR * 2F\n    canvas.save()\n\n    val gsaL = gasWidth / 2F * 3\n    var maxGasLength = (gasLength + gsaL ) / 2\n    var index = index\n\n    canvas.scale(1F , -1F)\n\n    //绘制星球后面的气流情况\n    //舍不得那么多定义好的变量\n    //又不想写个参数很多的函数,就这么实现了\n    canvas.save()\n    canvas.translate(baseR , baseR * 1.2F)\n    canvas.translate(0F , absBaseR)\n    //drawLines函数一个绘制两头带半圆的线段\n    drawLines(0F, maxGasLength, canvas, paint)\n    drawWhite( maxGasLength * index, gasWidth , gsaL * 2 , canvas)\n    drawWhite( maxGasLength * (index - 1 ) * 1.1F, gasWidth , gsaL * 2 , canvas)\n    drawWhite( maxGasLength * (index + 1 ) * 1.1F, gasWidth , gsaL * 2 , canvas)\n    canvas.restore()\n\n    index = index + 0.3F\n\n    //.....没有写函数就不上重复的代码了\n\n    val rectf = RectF(-baseR , -baseR , baseR ,baseR)\n    canvas.drawArc(rectf , 0F , 180F , false , paint)\n\n    canvas.drawLine(baseR ,0F ,  baseR ,  -baseR, paint)\n    canvas.drawLine(-baseR ,0F ,  -baseR ,  -baseR, paint)\n\n    canvas.restore()\n}\n\n//绘制尾部空白部分\nprivate fun drawWhite(offset: Float, gasWidth: Float, gsaL : Float , canvas: Canvas) {\n    val r = gasWidth / 2F\n\n    canvas.save()\n    canvas.translate( 0F , offset - 2 * gsaL )\n\n    val pointPaint = Paint()\n    pointPaint.strokeWidth = 20F\n    pointPaint.color = Color.RED\n\n    //通过贝塞尔曲线绘制半圆效果\n    val path = Path()\n    path.moveTo(-r , gsaL)\n    path.cubicTo(\n            - r * C ,  gsaL - r,\n            r * C ,  gsaL - r,\n            r , gsaL\n    )\n\n    path.lineTo(r , - gsaL)\n    path.cubicTo(\n            r * C ,  - gsaL + r,\n            -r * C ,  - gsaL + r,\n            -r , - gsaL\n    )\n\n    path.lineTo(-r , gsaL * 1.5F)\n\n    val paint = Paint()\n    paint.color = viewBackgroundColor\n    canvas.drawPath(path , paint)\n\n    canvas.restore()\n}\n```\n\n### 星球\n\n```java\nprivate fun drawPlanet(canvas: Canvas , index : Float) {\n    //设置原图层\n    val srcB = makeSrc(index)\n    //设置遮罩层\n    //遮罩层只有一和星球大小一样的圆\n    val dstB = makeDst(index)\n\n    val paint = Paint()\n    canvas.saveLayer(-baseR, -baseR, baseR , baseR, null, Canvas.ALL_SAVE_FLAG)\n    //绘制遮罩层\n    canvas.drawBitmap(dstB,  -baseR / 2F, -baseR / 2F , paint)\n    //设置遮罩模式为SRC_IN显示原图层中原图层与遮罩层相交部分\n    paint.xfermode = PorterDuffXfermode(PorterDuff.Mode.SRC_IN)\n    canvas.drawBitmap(srcB, width / -2F, height / -2F , paint)\n    paint.xfermode = null\n}\n\n\n//设置源图层\nfun makeSrc(index :Float): Bitmap {\n    val bm = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bm)\n    canvas.translate(width.toFloat() / 2F , height.toFloat() / 2F)\n\n    val paint = Paint()\n    paint.color = 0xff57BEC6.toInt()\n    paint.style = Paint.Style.FILL\n\n    val rectf = RectF(-baseR / 2F, -baseR / 2F, baseR / 2F, baseR / 2F)\n    canvas.drawArc(rectf , 0F , 360F , true , paint)\n\n    canvas.save()\n\n\n    //绘制星球背景\n    paint.color = 0xff78D7DE.toInt()\n    var baseR = baseR * 0.9.toFloat()\n    val rectf2 = RectF(-baseR / 2F, -baseR / 2F, baseR / 2F, baseR / 2F)\n    canvas.translate(baseR / 6F , baseR / 6F)\n    canvas.drawArc(rectf2 , 0F , 360F , true , paint)\n\n    canvas.restore()\n    canvas.rotate(-45F)\n    canvas.save()\n\n    val bottomBaseR = baseR / 0.9F / 2\n    val path = Path()\n    path.moveTo(-bottomBaseR , 0F)\n    path.cubicTo(-bottomBaseR , bottomBaseR * 2, bottomBaseR  , bottomBaseR * 2, bottomBaseR , 0F)\n\n    path.cubicTo(\n            bottomBaseR * C,bottomBaseR ,\n            -bottomBaseR * C,bottomBaseR ,\n            -bottomBaseR , 0F\n    )\n\n    //绘制星球背景的阴影效果\n    paint.color = 0xffAAEEF2.toInt()\n    paint.style = Paint.Style.FILL\n    canvas.drawPath(path , paint)\n\n    //绘制星球的地貌\n    drawPoints(index , canvas)\n\n    canvas.restore()\n\n    paint.strokeWidth = 30F\n    paint.color = 0xff2F3768.toInt()\n    paint.style = Paint.Style.STROKE\n    canvas.drawArc(rectf , 0F , 360F , true , paint)\n\n    return bm\n}\n\nprivate fun drawPoints(index: Float, canvas: Canvas) {\n        val paintB = Paint()\n        val paintS = Paint()\n        paintS.style = Paint.Style.FILL\n        paintS.color = 0xffE7F2FB.toInt()\n\n        paintB.style = Paint.Style.FILL\n        paintB.color = 0xff2F3768.toInt()\n\n        val baseRB = baseR / 2F / 3\n        val baseRS = baseR / 2F / 3 / 3\n\n        val rectfB = RectF(-baseRB, -baseRB, baseRB, baseRB)\n        val rectfS = RectF(-baseRS, -baseRS, baseRS, baseRS)\n\n        val pointPaint = Paint()\n        pointPaint.color = Color.BLACK\n        pointPaint.strokeWidth = 50F\n\n        val coverWidth = baseR\n\n        //通过移动坐标原点模拟星球的自转效果\n        canvas.translate(-coverWidth / 2F , coverWidth * 1.5F)\n\n        val index = index\n        canvas.translate(0F , coverWidth * index )\n\n        //重复绘制三次星球的地貌使得星球的自转无缝连接\n        for (i in 0..2){\n            canvas.save()\n            canvas.translate(coverWidth / 3F / 2  , -coverWidth / 3F * 2)\n            canvas.drawArc(rectfB , 0F , 360F , true , paintB)\n            canvas.drawArc(rectfS , 0F , 360F , true , paintS)\n            canvas.restore()\n\n            canvas.save()\n            canvas.translate(coverWidth / 3F *2 , -coverWidth / 3F)\n            canvas.drawArc(rectfB , 0F , 360F , true , paintB)\n            canvas.drawArc(rectfS , 0F , 360F , true , paintS)\n            canvas.restore()\n\n            canvas.save()\n            canvas.translate(coverWidth / 3F *2 , -coverWidth / 8F * 7 + -coverWidth / 10F )\n            canvas.drawArc(rectfS , 0F , 360F , true , paintB)\n            canvas.restore()\n\n            canvas.save()\n            canvas.translate(coverWidth / 3F *2 , -coverWidth / 8F * 7  - -coverWidth / 10F )\n            canvas.drawArc(rectfS , 0F , 360F , true , paintB)\n            canvas.restore()\n\n            canvas.translate(0F , -coverWidth)\n        }\n    }\n```\n\n相关代码可以访问[我的GitHub](https://github.com/clwater/AndroidAnimation/tree/master/androidanimation03)来获取,欢迎大家start或者提供建议.\n","source":"_posts/android自定义View之星球运动.md","raw":"---\ntitle: Android自定义View之星球运动\ndate: 2018-02-25 19:33:13\ntags: [\"android\" , \"view\" , \"自定义\"]\ncategories : \"Android自定义View\"\n---\n# Android自定义View 星球运动\n\n>在dribbble闲逛的时候发现的一个有意思的星球运动的动画,刚好最近时间尚可,就简单实现了一下中间运动的部分,又是因为时间的原因,开头位移的部分没有完成.\n\n<!-- more -->\n![dribbble中发现的动画](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/19201885.jpg)\n这是在dribbble中发现的动画\n\n![自己实现的动画](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/92078484.jpg)\n这是我自己实现的效果...  总觉得我这个星球有点胖...  因为胖所以转的慢么这是.速度等细节还有优化的余地\n\n## 设计过程\n老办法,先分解动画的构成.整个动画可以看做是一个自旋的星球从右上角由小变大的移动到屏幕的中央的.\n\n星球的位移及缩放不说(其实是最近有需求,暂时没时间完善),主要完善了星球的旋转及尾部的处理.\n\n最底层是背景的星星闪烁,每次在星球一定范围内随机出现,并缩放就好\n\n最开始设计尾部效果的时候,是在没列中设计了两端线.再不断的运行及移动.但是实现起来很乱.最后采用了先绘制所有尾部展示的内容,然后在用和背景一样的颜色部分遮盖并移动此部分形成视觉上的效果的方法.(也可以设置PorterDuff模式来展示).设计过程中的效果如下\n\n![尾部效果1](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/93671679.jpg)\n\n![尾部效果2](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/22878685.jpg)\n\n星球的设计,星球的本身使用简单的遮盖和贝塞尔曲线就能完成一个较为满意的星球背景.\n\n![星球背景](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/67915702.jpg)\n\n重点是星球地表的设计以及星球自转下的地表样式的移动.解决的方法是是先绘制三个重复并连续的地表样式,通过移动整个地表样式模拟星球的转动.最后通过PorterDuff来控制展示的部分和星球的位置重合.\n\n未开启PorterDuff模式时绘制的样式如下:\n\n![地貌的设置](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/86724391.jpg)\n\n开启PorterDuff模式后再指定位置展示指定形状的图形如下:\n\n![开启PorterDuff模式](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/99450653.jpg)\n\n最后再移动设置好的星球地貌就可以模拟出星球转动的效果了\n\n## 代码实现\n### 背景的星星\n```java\nprivate fun drawStarts(canvas: Canvas, perIndexInAll: Float) {\n    //背景的星星在星球附近的一定范围内随机出现\n    val maxRand = 800\n\n    canvas.translate(-maxRand / 2F , -maxRand / 2F)\n    val Random = Random(perIndexInAll.toInt().toLong())\n\n    //绘制背景的星星\n    for (index in 0..4){\n        drawStart(canvas ,  Random.nextFloat() * maxRand , Random.nextFloat() * maxRand , perIndex)\n    }\n\n    canvas.translate(maxRand / 2F , maxRand / 2F)\n}\n\n//绘制背景的星星内容\n//绘制背景的星星内容\nprivate fun drawStart(canvas: Canvas, x: Float, y: Float, per: Float) {\n    var per = per\n    //这个部分是为了让星星实现从小到大后再从大到小的变动\n    if (per >= 1.0F){\n        per -= 1F\n    }\n    if (per <= 0.5F){\n        per *= 2\n    }else{\n        per = (1 - per) * 2\n    }\n\n    canvas.save()\n    canvas.translate(x , y)\n\n    canvas.scale(per , per)\n\n    val paint = Paint()\n    paint.color = 0xff78D8DF.toInt()\n\n    val startLength = 30F\n    val startOffset = startLength / 3F\n\n    //通过路径描绘星星的形状\n    val path = Path()\n    path.moveTo(0F , startLength)\n    path.lineTo(startOffset , startOffset )\n    path.lineTo(startLength , 0F)\n    path.lineTo(startOffset  , -startOffset )\n    path.lineTo(0F , -startLength)\n    path.lineTo(-startOffset  , -startOffset )\n    path.lineTo(-startLength , 0F)\n    path.lineTo(-startOffset  , startOffset )\n    path.lineTo(0F , startLength)\n\n    canvas.drawPath(path , paint)\n\n    paint.color = viewBackgroundColor\n    //通过缩小绘制星星内部形状\n    canvas.scale(0.3F , 0.3F)\n    canvas.drawPath(path , paint)\n\n    canvas.restore()\n}\n```\n\n### 星球外部\n```java\nprivate fun drawGas(canvas: Canvas, index: Float) {\n    canvas.save()\n    canvas.rotate(45F)\n\n    val gasWidth = 18F\n    val baseR = baseR * 0.7F\n    val absBaseR = baseR / 5F\n\n    val paint = Paint()\n    paint.strokeWidth = gasWidth\n    paint.style = Paint.Style.STROKE\n    paint.color = 0xff2F3768.toInt()\n\n    val paintArc = Paint()\n    paintArc.color = 0xff2F3768.toInt()\n\n    val gasLength = baseR * 2F\n    canvas.save()\n\n    val gsaL = gasWidth / 2F * 3\n    var maxGasLength = (gasLength + gsaL ) / 2\n    var index = index\n\n    canvas.scale(1F , -1F)\n\n    //绘制星球后面的气流情况\n    //舍不得那么多定义好的变量\n    //又不想写个参数很多的函数,就这么实现了\n    canvas.save()\n    canvas.translate(baseR , baseR * 1.2F)\n    canvas.translate(0F , absBaseR)\n    //drawLines函数一个绘制两头带半圆的线段\n    drawLines(0F, maxGasLength, canvas, paint)\n    drawWhite( maxGasLength * index, gasWidth , gsaL * 2 , canvas)\n    drawWhite( maxGasLength * (index - 1 ) * 1.1F, gasWidth , gsaL * 2 , canvas)\n    drawWhite( maxGasLength * (index + 1 ) * 1.1F, gasWidth , gsaL * 2 , canvas)\n    canvas.restore()\n\n    index = index + 0.3F\n\n    //.....没有写函数就不上重复的代码了\n\n    val rectf = RectF(-baseR , -baseR , baseR ,baseR)\n    canvas.drawArc(rectf , 0F , 180F , false , paint)\n\n    canvas.drawLine(baseR ,0F ,  baseR ,  -baseR, paint)\n    canvas.drawLine(-baseR ,0F ,  -baseR ,  -baseR, paint)\n\n    canvas.restore()\n}\n\n//绘制尾部空白部分\nprivate fun drawWhite(offset: Float, gasWidth: Float, gsaL : Float , canvas: Canvas) {\n    val r = gasWidth / 2F\n\n    canvas.save()\n    canvas.translate( 0F , offset - 2 * gsaL )\n\n    val pointPaint = Paint()\n    pointPaint.strokeWidth = 20F\n    pointPaint.color = Color.RED\n\n    //通过贝塞尔曲线绘制半圆效果\n    val path = Path()\n    path.moveTo(-r , gsaL)\n    path.cubicTo(\n            - r * C ,  gsaL - r,\n            r * C ,  gsaL - r,\n            r , gsaL\n    )\n\n    path.lineTo(r , - gsaL)\n    path.cubicTo(\n            r * C ,  - gsaL + r,\n            -r * C ,  - gsaL + r,\n            -r , - gsaL\n    )\n\n    path.lineTo(-r , gsaL * 1.5F)\n\n    val paint = Paint()\n    paint.color = viewBackgroundColor\n    canvas.drawPath(path , paint)\n\n    canvas.restore()\n}\n```\n\n### 星球\n\n```java\nprivate fun drawPlanet(canvas: Canvas , index : Float) {\n    //设置原图层\n    val srcB = makeSrc(index)\n    //设置遮罩层\n    //遮罩层只有一和星球大小一样的圆\n    val dstB = makeDst(index)\n\n    val paint = Paint()\n    canvas.saveLayer(-baseR, -baseR, baseR , baseR, null, Canvas.ALL_SAVE_FLAG)\n    //绘制遮罩层\n    canvas.drawBitmap(dstB,  -baseR / 2F, -baseR / 2F , paint)\n    //设置遮罩模式为SRC_IN显示原图层中原图层与遮罩层相交部分\n    paint.xfermode = PorterDuffXfermode(PorterDuff.Mode.SRC_IN)\n    canvas.drawBitmap(srcB, width / -2F, height / -2F , paint)\n    paint.xfermode = null\n}\n\n\n//设置源图层\nfun makeSrc(index :Float): Bitmap {\n    val bm = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bm)\n    canvas.translate(width.toFloat() / 2F , height.toFloat() / 2F)\n\n    val paint = Paint()\n    paint.color = 0xff57BEC6.toInt()\n    paint.style = Paint.Style.FILL\n\n    val rectf = RectF(-baseR / 2F, -baseR / 2F, baseR / 2F, baseR / 2F)\n    canvas.drawArc(rectf , 0F , 360F , true , paint)\n\n    canvas.save()\n\n\n    //绘制星球背景\n    paint.color = 0xff78D7DE.toInt()\n    var baseR = baseR * 0.9.toFloat()\n    val rectf2 = RectF(-baseR / 2F, -baseR / 2F, baseR / 2F, baseR / 2F)\n    canvas.translate(baseR / 6F , baseR / 6F)\n    canvas.drawArc(rectf2 , 0F , 360F , true , paint)\n\n    canvas.restore()\n    canvas.rotate(-45F)\n    canvas.save()\n\n    val bottomBaseR = baseR / 0.9F / 2\n    val path = Path()\n    path.moveTo(-bottomBaseR , 0F)\n    path.cubicTo(-bottomBaseR , bottomBaseR * 2, bottomBaseR  , bottomBaseR * 2, bottomBaseR , 0F)\n\n    path.cubicTo(\n            bottomBaseR * C,bottomBaseR ,\n            -bottomBaseR * C,bottomBaseR ,\n            -bottomBaseR , 0F\n    )\n\n    //绘制星球背景的阴影效果\n    paint.color = 0xffAAEEF2.toInt()\n    paint.style = Paint.Style.FILL\n    canvas.drawPath(path , paint)\n\n    //绘制星球的地貌\n    drawPoints(index , canvas)\n\n    canvas.restore()\n\n    paint.strokeWidth = 30F\n    paint.color = 0xff2F3768.toInt()\n    paint.style = Paint.Style.STROKE\n    canvas.drawArc(rectf , 0F , 360F , true , paint)\n\n    return bm\n}\n\nprivate fun drawPoints(index: Float, canvas: Canvas) {\n        val paintB = Paint()\n        val paintS = Paint()\n        paintS.style = Paint.Style.FILL\n        paintS.color = 0xffE7F2FB.toInt()\n\n        paintB.style = Paint.Style.FILL\n        paintB.color = 0xff2F3768.toInt()\n\n        val baseRB = baseR / 2F / 3\n        val baseRS = baseR / 2F / 3 / 3\n\n        val rectfB = RectF(-baseRB, -baseRB, baseRB, baseRB)\n        val rectfS = RectF(-baseRS, -baseRS, baseRS, baseRS)\n\n        val pointPaint = Paint()\n        pointPaint.color = Color.BLACK\n        pointPaint.strokeWidth = 50F\n\n        val coverWidth = baseR\n\n        //通过移动坐标原点模拟星球的自转效果\n        canvas.translate(-coverWidth / 2F , coverWidth * 1.5F)\n\n        val index = index\n        canvas.translate(0F , coverWidth * index )\n\n        //重复绘制三次星球的地貌使得星球的自转无缝连接\n        for (i in 0..2){\n            canvas.save()\n            canvas.translate(coverWidth / 3F / 2  , -coverWidth / 3F * 2)\n            canvas.drawArc(rectfB , 0F , 360F , true , paintB)\n            canvas.drawArc(rectfS , 0F , 360F , true , paintS)\n            canvas.restore()\n\n            canvas.save()\n            canvas.translate(coverWidth / 3F *2 , -coverWidth / 3F)\n            canvas.drawArc(rectfB , 0F , 360F , true , paintB)\n            canvas.drawArc(rectfS , 0F , 360F , true , paintS)\n            canvas.restore()\n\n            canvas.save()\n            canvas.translate(coverWidth / 3F *2 , -coverWidth / 8F * 7 + -coverWidth / 10F )\n            canvas.drawArc(rectfS , 0F , 360F , true , paintB)\n            canvas.restore()\n\n            canvas.save()\n            canvas.translate(coverWidth / 3F *2 , -coverWidth / 8F * 7  - -coverWidth / 10F )\n            canvas.drawArc(rectfS , 0F , 360F , true , paintB)\n            canvas.restore()\n\n            canvas.translate(0F , -coverWidth)\n        }\n    }\n```\n\n相关代码可以访问[我的GitHub](https://github.com/clwater/AndroidAnimation/tree/master/androidanimation03)来获取,欢迎大家start或者提供建议.\n","slug":"android自定义View之星球运动","published":1,"updated":"2020-03-13T09:33:05.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5e4000wq7dqrxtsqly3","content":"<h1 id=\"Android自定义View-星球运动\"><a href=\"#Android自定义View-星球运动\" class=\"headerlink\" title=\"Android自定义View 星球运动\"></a>Android自定义View 星球运动</h1><blockquote>\n<p>在dribbble闲逛的时候发现的一个有意思的星球运动的动画,刚好最近时间尚可,就简单实现了一下中间运动的部分,又是因为时间的原因,开头位移的部分没有完成.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/19201885.jpg\" alt=\"dribbble中发现的动画\"><br>这是在dribbble中发现的动画</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/92078484.jpg\" alt=\"自己实现的动画\"><br>这是我自己实现的效果…  总觉得我这个星球有点胖…  因为胖所以转的慢么这是.速度等细节还有优化的余地</p>\n<h2 id=\"设计过程\"><a href=\"#设计过程\" class=\"headerlink\" title=\"设计过程\"></a>设计过程</h2><p>老办法,先分解动画的构成.整个动画可以看做是一个自旋的星球从右上角由小变大的移动到屏幕的中央的.</p>\n<p>星球的位移及缩放不说(其实是最近有需求,暂时没时间完善),主要完善了星球的旋转及尾部的处理.</p>\n<p>最底层是背景的星星闪烁,每次在星球一定范围内随机出现,并缩放就好</p>\n<p>最开始设计尾部效果的时候,是在没列中设计了两端线.再不断的运行及移动.但是实现起来很乱.最后采用了先绘制所有尾部展示的内容,然后在用和背景一样的颜色部分遮盖并移动此部分形成视觉上的效果的方法.(也可以设置PorterDuff模式来展示).设计过程中的效果如下</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/93671679.jpg\" alt=\"尾部效果1\"></p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/22878685.jpg\" alt=\"尾部效果2\"></p>\n<p>星球的设计,星球的本身使用简单的遮盖和贝塞尔曲线就能完成一个较为满意的星球背景.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/67915702.jpg\" alt=\"星球背景\"></p>\n<p>重点是星球地表的设计以及星球自转下的地表样式的移动.解决的方法是是先绘制三个重复并连续的地表样式,通过移动整个地表样式模拟星球的转动.最后通过PorterDuff来控制展示的部分和星球的位置重合.</p>\n<p>未开启PorterDuff模式时绘制的样式如下:</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/86724391.jpg\" alt=\"地貌的设置\"></p>\n<p>开启PorterDuff模式后再指定位置展示指定形状的图形如下:</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/99450653.jpg\" alt=\"开启PorterDuff模式\"></p>\n<p>最后再移动设置好的星球地貌就可以模拟出星球转动的效果了</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"背景的星星\"><a href=\"#背景的星星\" class=\"headerlink\" title=\"背景的星星\"></a>背景的星星</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">drawStarts</span><span class=\"params\">(canvas: Canvas, perIndexInAll: Float)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//背景的星星在星球附近的一定范围内随机出现</span></span><br><span class=\"line\">    val maxRand = <span class=\"number\">800</span></span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.translate(-maxRand / <span class=\"number\">2F</span> , -maxRand / <span class=\"number\">2F</span>)</span><br><span class=\"line\">    val Random = Random(perIndexInAll.toInt().toLong())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制背景的星星</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (index in <span class=\"number\">0</span>..<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">        drawStart(canvas ,  Random.nextFloat() * maxRand , Random.nextFloat() * maxRand , perIndex)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.translate(maxRand / <span class=\"number\">2F</span> , maxRand / <span class=\"number\">2F</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绘制背景的星星内容</span></span><br><span class=\"line\"><span class=\"comment\">//绘制背景的星星内容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">drawStart</span><span class=\"params\">(canvas: Canvas, x: Float, y: Float, per: Float)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> per = per</span><br><span class=\"line\">    <span class=\"comment\">//这个部分是为了让星星实现从小到大后再从大到小的变动</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (per &gt;= <span class=\"number\">1.0F</span>)&#123;</span><br><span class=\"line\">        per -= <span class=\"number\">1F</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (per &lt;= <span class=\"number\">0.5F</span>)&#123;</span><br><span class=\"line\">        per *= <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        per = (<span class=\"number\">1</span> - per) * <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.save()</span><br><span class=\"line\">    canvas.translate(x , y)</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.scale(per , per)</span><br><span class=\"line\"></span><br><span class=\"line\">    val paint = Paint()</span><br><span class=\"line\">    paint.color = <span class=\"number\">0xff78D8DF</span>.toInt()</span><br><span class=\"line\"></span><br><span class=\"line\">    val startLength = <span class=\"number\">30F</span></span><br><span class=\"line\">    val startOffset = startLength / <span class=\"number\">3F</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过路径描绘星星的形状</span></span><br><span class=\"line\">    val path = Path()</span><br><span class=\"line\">    path.moveTo(<span class=\"number\">0F</span> , startLength)</span><br><span class=\"line\">    path.lineTo(startOffset , startOffset )</span><br><span class=\"line\">    path.lineTo(startLength , <span class=\"number\">0F</span>)</span><br><span class=\"line\">    path.lineTo(startOffset  , -startOffset )</span><br><span class=\"line\">    path.lineTo(<span class=\"number\">0F</span> , -startLength)</span><br><span class=\"line\">    path.lineTo(-startOffset  , -startOffset )</span><br><span class=\"line\">    path.lineTo(-startLength , <span class=\"number\">0F</span>)</span><br><span class=\"line\">    path.lineTo(-startOffset  , startOffset )</span><br><span class=\"line\">    path.lineTo(<span class=\"number\">0F</span> , startLength)</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.drawPath(path , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    paint.color = viewBackgroundColor</span><br><span class=\"line\">    <span class=\"comment\">//通过缩小绘制星星内部形状</span></span><br><span class=\"line\">    canvas.scale(<span class=\"number\">0.3F</span> , <span class=\"number\">0.3F</span>)</span><br><span class=\"line\">    canvas.drawPath(path , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.restore()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"星球外部\"><a href=\"#星球外部\" class=\"headerlink\" title=\"星球外部\"></a>星球外部</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">drawGas</span><span class=\"params\">(canvas: Canvas, index: Float)</span> </span>&#123;</span><br><span class=\"line\">    canvas.save()</span><br><span class=\"line\">    canvas.rotate(<span class=\"number\">45F</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    val gasWidth = <span class=\"number\">18F</span></span><br><span class=\"line\">    val baseR = baseR * <span class=\"number\">0.7F</span></span><br><span class=\"line\">    val absBaseR = baseR / <span class=\"number\">5F</span></span><br><span class=\"line\"></span><br><span class=\"line\">    val paint = Paint()</span><br><span class=\"line\">    paint.strokeWidth = gasWidth</span><br><span class=\"line\">    paint.style = Paint.Style.STROKE</span><br><span class=\"line\">    paint.color = <span class=\"number\">0xff2F3768</span>.toInt()</span><br><span class=\"line\"></span><br><span class=\"line\">    val paintArc = Paint()</span><br><span class=\"line\">    paintArc.color = <span class=\"number\">0xff2F3768</span>.toInt()</span><br><span class=\"line\"></span><br><span class=\"line\">    val gasLength = baseR * <span class=\"number\">2F</span></span><br><span class=\"line\">    canvas.save()</span><br><span class=\"line\"></span><br><span class=\"line\">    val gsaL = gasWidth / <span class=\"number\">2F</span> * <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxGasLength = (gasLength + gsaL ) / <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = index</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.scale(<span class=\"number\">1F</span> , -<span class=\"number\">1F</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制星球后面的气流情况</span></span><br><span class=\"line\">    <span class=\"comment\">//舍不得那么多定义好的变量</span></span><br><span class=\"line\">    <span class=\"comment\">//又不想写个参数很多的函数,就这么实现了</span></span><br><span class=\"line\">    canvas.save()</span><br><span class=\"line\">    canvas.translate(baseR , baseR * <span class=\"number\">1.2F</span>)</span><br><span class=\"line\">    canvas.translate(<span class=\"number\">0F</span> , absBaseR)</span><br><span class=\"line\">    <span class=\"comment\">//drawLines函数一个绘制两头带半圆的线段</span></span><br><span class=\"line\">    drawLines(<span class=\"number\">0F</span>, maxGasLength, canvas, paint)</span><br><span class=\"line\">    drawWhite( maxGasLength * index, gasWidth , gsaL * <span class=\"number\">2</span> , canvas)</span><br><span class=\"line\">    drawWhite( maxGasLength * (index - <span class=\"number\">1</span> ) * <span class=\"number\">1.1F</span>, gasWidth , gsaL * <span class=\"number\">2</span> , canvas)</span><br><span class=\"line\">    drawWhite( maxGasLength * (index + <span class=\"number\">1</span> ) * <span class=\"number\">1.1F</span>, gasWidth , gsaL * <span class=\"number\">2</span> , canvas)</span><br><span class=\"line\">    canvas.restore()</span><br><span class=\"line\"></span><br><span class=\"line\">    index = index + <span class=\"number\">0.3F</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//.....没有写函数就不上重复的代码了</span></span><br><span class=\"line\"></span><br><span class=\"line\">    val rectf = RectF(-baseR , -baseR , baseR ,baseR)</span><br><span class=\"line\">    canvas.drawArc(rectf , <span class=\"number\">0F</span> , <span class=\"number\">180F</span> , <span class=\"keyword\">false</span> , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.drawLine(baseR ,<span class=\"number\">0F</span> ,  baseR ,  -baseR, paint)</span><br><span class=\"line\">    canvas.drawLine(-baseR ,<span class=\"number\">0F</span> ,  -baseR ,  -baseR, paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.restore()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绘制尾部空白部分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">drawWhite</span><span class=\"params\">(offset: Float, gasWidth: Float, gsaL : Float , canvas: Canvas)</span> </span>&#123;</span><br><span class=\"line\">    val r = gasWidth / <span class=\"number\">2F</span></span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.save()</span><br><span class=\"line\">    canvas.translate( <span class=\"number\">0F</span> , offset - <span class=\"number\">2</span> * gsaL )</span><br><span class=\"line\"></span><br><span class=\"line\">    val pointPaint = Paint()</span><br><span class=\"line\">    pointPaint.strokeWidth = <span class=\"number\">20F</span></span><br><span class=\"line\">    pointPaint.color = Color.RED</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过贝塞尔曲线绘制半圆效果</span></span><br><span class=\"line\">    val path = Path()</span><br><span class=\"line\">    path.moveTo(-r , gsaL)</span><br><span class=\"line\">    path.cubicTo(</span><br><span class=\"line\">            - r * C ,  gsaL - r,</span><br><span class=\"line\">            r * C ,  gsaL - r,</span><br><span class=\"line\">            r , gsaL</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    path.lineTo(r , - gsaL)</span><br><span class=\"line\">    path.cubicTo(</span><br><span class=\"line\">            r * C ,  - gsaL + r,</span><br><span class=\"line\">            -r * C ,  - gsaL + r,</span><br><span class=\"line\">            -r , - gsaL</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    path.lineTo(-r , gsaL * <span class=\"number\">1.5F</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    val paint = Paint()</span><br><span class=\"line\">    paint.color = viewBackgroundColor</span><br><span class=\"line\">    canvas.drawPath(path , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.restore()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"星球\"><a href=\"#星球\" class=\"headerlink\" title=\"星球\"></a>星球</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">drawPlanet</span><span class=\"params\">(canvas: Canvas , index : Float)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置原图层</span></span><br><span class=\"line\">    val srcB = makeSrc(index)</span><br><span class=\"line\">    <span class=\"comment\">//设置遮罩层</span></span><br><span class=\"line\">    <span class=\"comment\">//遮罩层只有一和星球大小一样的圆</span></span><br><span class=\"line\">    val dstB = makeDst(index)</span><br><span class=\"line\"></span><br><span class=\"line\">    val paint = Paint()</span><br><span class=\"line\">    canvas.saveLayer(-baseR, -baseR, baseR , baseR, <span class=\"keyword\">null</span>, Canvas.ALL_SAVE_FLAG)</span><br><span class=\"line\">    <span class=\"comment\">//绘制遮罩层</span></span><br><span class=\"line\">    canvas.drawBitmap(dstB,  -baseR / <span class=\"number\">2F</span>, -baseR / <span class=\"number\">2F</span> , paint)</span><br><span class=\"line\">    <span class=\"comment\">//设置遮罩模式为SRC_IN显示原图层中原图层与遮罩层相交部分</span></span><br><span class=\"line\">    paint.xfermode = PorterDuffXfermode(PorterDuff.Mode.SRC_IN)</span><br><span class=\"line\">    canvas.drawBitmap(srcB, width / -<span class=\"number\">2F</span>, height / -<span class=\"number\">2F</span> , paint)</span><br><span class=\"line\">    paint.xfermode = <span class=\"keyword\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置源图层</span></span><br><span class=\"line\"><span class=\"function\">fun <span class=\"title\">makeSrc</span><span class=\"params\">(index :Float)</span>: Bitmap </span>&#123;</span><br><span class=\"line\">    val bm = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)</span><br><span class=\"line\">    val canvas = Canvas(bm)</span><br><span class=\"line\">    canvas.translate(width.toFloat() / <span class=\"number\">2F</span> , height.toFloat() / <span class=\"number\">2F</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    val paint = Paint()</span><br><span class=\"line\">    paint.color = <span class=\"number\">0xff57BEC6</span>.toInt()</span><br><span class=\"line\">    paint.style = Paint.Style.FILL</span><br><span class=\"line\"></span><br><span class=\"line\">    val rectf = RectF(-baseR / <span class=\"number\">2F</span>, -baseR / <span class=\"number\">2F</span>, baseR / <span class=\"number\">2F</span>, baseR / <span class=\"number\">2F</span>)</span><br><span class=\"line\">    canvas.drawArc(rectf , <span class=\"number\">0F</span> , <span class=\"number\">360F</span> , <span class=\"keyword\">true</span> , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.save()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制星球背景</span></span><br><span class=\"line\">    paint.color = <span class=\"number\">0xff78D7DE</span>.toInt()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> baseR = baseR * <span class=\"number\">0.9</span>.toFloat()</span><br><span class=\"line\">    val rectf2 = RectF(-baseR / <span class=\"number\">2F</span>, -baseR / <span class=\"number\">2F</span>, baseR / <span class=\"number\">2F</span>, baseR / <span class=\"number\">2F</span>)</span><br><span class=\"line\">    canvas.translate(baseR / <span class=\"number\">6F</span> , baseR / <span class=\"number\">6F</span>)</span><br><span class=\"line\">    canvas.drawArc(rectf2 , <span class=\"number\">0F</span> , <span class=\"number\">360F</span> , <span class=\"keyword\">true</span> , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.restore()</span><br><span class=\"line\">    canvas.rotate(-<span class=\"number\">45F</span>)</span><br><span class=\"line\">    canvas.save()</span><br><span class=\"line\"></span><br><span class=\"line\">    val bottomBaseR = baseR / <span class=\"number\">0.9F</span> / <span class=\"number\">2</span></span><br><span class=\"line\">    val path = Path()</span><br><span class=\"line\">    path.moveTo(-bottomBaseR , <span class=\"number\">0F</span>)</span><br><span class=\"line\">    path.cubicTo(-bottomBaseR , bottomBaseR * <span class=\"number\">2</span>, bottomBaseR  , bottomBaseR * <span class=\"number\">2</span>, bottomBaseR , <span class=\"number\">0F</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    path.cubicTo(</span><br><span class=\"line\">            bottomBaseR * C,bottomBaseR ,</span><br><span class=\"line\">            -bottomBaseR * C,bottomBaseR ,</span><br><span class=\"line\">            -bottomBaseR , <span class=\"number\">0F</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制星球背景的阴影效果</span></span><br><span class=\"line\">    paint.color = <span class=\"number\">0xffAAEEF2</span>.toInt()</span><br><span class=\"line\">    paint.style = Paint.Style.FILL</span><br><span class=\"line\">    canvas.drawPath(path , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制星球的地貌</span></span><br><span class=\"line\">    drawPoints(index , canvas)</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.restore()</span><br><span class=\"line\"></span><br><span class=\"line\">    paint.strokeWidth = <span class=\"number\">30F</span></span><br><span class=\"line\">    paint.color = <span class=\"number\">0xff2F3768</span>.toInt()</span><br><span class=\"line\">    paint.style = Paint.Style.STROKE</span><br><span class=\"line\">    canvas.drawArc(rectf , <span class=\"number\">0F</span> , <span class=\"number\">360F</span> , <span class=\"keyword\">true</span> , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bm</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">drawPoints</span><span class=\"params\">(index: Float, canvas: Canvas)</span> </span>&#123;</span><br><span class=\"line\">        val paintB = Paint()</span><br><span class=\"line\">        val paintS = Paint()</span><br><span class=\"line\">        paintS.style = Paint.Style.FILL</span><br><span class=\"line\">        paintS.color = <span class=\"number\">0xffE7F2FB</span>.toInt()</span><br><span class=\"line\"></span><br><span class=\"line\">        paintB.style = Paint.Style.FILL</span><br><span class=\"line\">        paintB.color = <span class=\"number\">0xff2F3768</span>.toInt()</span><br><span class=\"line\"></span><br><span class=\"line\">        val baseRB = baseR / <span class=\"number\">2F</span> / <span class=\"number\">3</span></span><br><span class=\"line\">        val baseRS = baseR / <span class=\"number\">2F</span> / <span class=\"number\">3</span> / <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">        val rectfB = RectF(-baseRB, -baseRB, baseRB, baseRB)</span><br><span class=\"line\">        val rectfS = RectF(-baseRS, -baseRS, baseRS, baseRS)</span><br><span class=\"line\"></span><br><span class=\"line\">        val pointPaint = Paint()</span><br><span class=\"line\">        pointPaint.color = Color.BLACK</span><br><span class=\"line\">        pointPaint.strokeWidth = <span class=\"number\">50F</span></span><br><span class=\"line\"></span><br><span class=\"line\">        val coverWidth = baseR</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过移动坐标原点模拟星球的自转效果</span></span><br><span class=\"line\">        canvas.translate(-coverWidth / <span class=\"number\">2F</span> , coverWidth * <span class=\"number\">1.5F</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        val index = index</span><br><span class=\"line\">        canvas.translate(<span class=\"number\">0F</span> , coverWidth * index )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//重复绘制三次星球的地貌使得星球的自转无缝连接</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i in <span class=\"number\">0</span>..<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            canvas.save()</span><br><span class=\"line\">            canvas.translate(coverWidth / <span class=\"number\">3F</span> / <span class=\"number\">2</span>  , -coverWidth / <span class=\"number\">3F</span> * <span class=\"number\">2</span>)</span><br><span class=\"line\">            canvas.drawArc(rectfB , <span class=\"number\">0F</span> , <span class=\"number\">360F</span> , <span class=\"keyword\">true</span> , paintB)</span><br><span class=\"line\">            canvas.drawArc(rectfS , <span class=\"number\">0F</span> , <span class=\"number\">360F</span> , <span class=\"keyword\">true</span> , paintS)</span><br><span class=\"line\">            canvas.restore()</span><br><span class=\"line\"></span><br><span class=\"line\">            canvas.save()</span><br><span class=\"line\">            canvas.translate(coverWidth / <span class=\"number\">3F</span> *<span class=\"number\">2</span> , -coverWidth / <span class=\"number\">3F</span>)</span><br><span class=\"line\">            canvas.drawArc(rectfB , <span class=\"number\">0F</span> , <span class=\"number\">360F</span> , <span class=\"keyword\">true</span> , paintB)</span><br><span class=\"line\">            canvas.drawArc(rectfS , <span class=\"number\">0F</span> , <span class=\"number\">360F</span> , <span class=\"keyword\">true</span> , paintS)</span><br><span class=\"line\">            canvas.restore()</span><br><span class=\"line\"></span><br><span class=\"line\">            canvas.save()</span><br><span class=\"line\">            canvas.translate(coverWidth / <span class=\"number\">3F</span> *<span class=\"number\">2</span> , -coverWidth / <span class=\"number\">8F</span> * <span class=\"number\">7</span> + -coverWidth / <span class=\"number\">10F</span> )</span><br><span class=\"line\">            canvas.drawArc(rectfS , <span class=\"number\">0F</span> , <span class=\"number\">360F</span> , <span class=\"keyword\">true</span> , paintB)</span><br><span class=\"line\">            canvas.restore()</span><br><span class=\"line\"></span><br><span class=\"line\">            canvas.save()</span><br><span class=\"line\">            canvas.translate(coverWidth / <span class=\"number\">3F</span> *<span class=\"number\">2</span> , -coverWidth / <span class=\"number\">8F</span> * <span class=\"number\">7</span>  - -coverWidth / <span class=\"number\">10F</span> )</span><br><span class=\"line\">            canvas.drawArc(rectfS , <span class=\"number\">0F</span> , <span class=\"number\">360F</span> , <span class=\"keyword\">true</span> , paintB)</span><br><span class=\"line\">            canvas.restore()</span><br><span class=\"line\"></span><br><span class=\"line\">            canvas.translate(<span class=\"number\">0F</span> , -coverWidth)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>相关代码可以访问<a href=\"https://github.com/clwater/AndroidAnimation/tree/master/androidanimation03\" target=\"_blank\" rel=\"noopener\">我的GitHub</a>来获取,欢迎大家start或者提供建议.</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Android自定义View-星球运动\"><a href=\"#Android自定义View-星球运动\" class=\"headerlink\" title=\"Android自定义View 星球运动\"></a>Android自定义View 星球运动</h1><blockquote>\n<p>在dribbble闲逛的时候发现的一个有意思的星球运动的动画,刚好最近时间尚可,就简单实现了一下中间运动的部分,又是因为时间的原因,开头位移的部分没有完成.</p>\n</blockquote>","more":"<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/19201885.jpg\" alt=\"dribbble中发现的动画\"><br>这是在dribbble中发现的动画</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/92078484.jpg\" alt=\"自己实现的动画\"><br>这是我自己实现的效果…  总觉得我这个星球有点胖…  因为胖所以转的慢么这是.速度等细节还有优化的余地</p>\n<h2 id=\"设计过程\"><a href=\"#设计过程\" class=\"headerlink\" title=\"设计过程\"></a>设计过程</h2><p>老办法,先分解动画的构成.整个动画可以看做是一个自旋的星球从右上角由小变大的移动到屏幕的中央的.</p>\n<p>星球的位移及缩放不说(其实是最近有需求,暂时没时间完善),主要完善了星球的旋转及尾部的处理.</p>\n<p>最底层是背景的星星闪烁,每次在星球一定范围内随机出现,并缩放就好</p>\n<p>最开始设计尾部效果的时候,是在没列中设计了两端线.再不断的运行及移动.但是实现起来很乱.最后采用了先绘制所有尾部展示的内容,然后在用和背景一样的颜色部分遮盖并移动此部分形成视觉上的效果的方法.(也可以设置PorterDuff模式来展示).设计过程中的效果如下</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/93671679.jpg\" alt=\"尾部效果1\"></p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/22878685.jpg\" alt=\"尾部效果2\"></p>\n<p>星球的设计,星球的本身使用简单的遮盖和贝塞尔曲线就能完成一个较为满意的星球背景.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/67915702.jpg\" alt=\"星球背景\"></p>\n<p>重点是星球地表的设计以及星球自转下的地表样式的移动.解决的方法是是先绘制三个重复并连续的地表样式,通过移动整个地表样式模拟星球的转动.最后通过PorterDuff来控制展示的部分和星球的位置重合.</p>\n<p>未开启PorterDuff模式时绘制的样式如下:</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/86724391.jpg\" alt=\"地貌的设置\"></p>\n<p>开启PorterDuff模式后再指定位置展示指定形状的图形如下:</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/99450653.jpg\" alt=\"开启PorterDuff模式\"></p>\n<p>最后再移动设置好的星球地貌就可以模拟出星球转动的效果了</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"背景的星星\"><a href=\"#背景的星星\" class=\"headerlink\" title=\"背景的星星\"></a>背景的星星</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">drawStarts</span><span class=\"params\">(canvas: Canvas, perIndexInAll: Float)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//背景的星星在星球附近的一定范围内随机出现</span></span><br><span class=\"line\">    val maxRand = <span class=\"number\">800</span></span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.translate(-maxRand / <span class=\"number\">2F</span> , -maxRand / <span class=\"number\">2F</span>)</span><br><span class=\"line\">    val Random = Random(perIndexInAll.toInt().toLong())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制背景的星星</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (index in <span class=\"number\">0</span>..<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">        drawStart(canvas ,  Random.nextFloat() * maxRand , Random.nextFloat() * maxRand , perIndex)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.translate(maxRand / <span class=\"number\">2F</span> , maxRand / <span class=\"number\">2F</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绘制背景的星星内容</span></span><br><span class=\"line\"><span class=\"comment\">//绘制背景的星星内容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">drawStart</span><span class=\"params\">(canvas: Canvas, x: Float, y: Float, per: Float)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> per = per</span><br><span class=\"line\">    <span class=\"comment\">//这个部分是为了让星星实现从小到大后再从大到小的变动</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (per &gt;= <span class=\"number\">1.0F</span>)&#123;</span><br><span class=\"line\">        per -= <span class=\"number\">1F</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (per &lt;= <span class=\"number\">0.5F</span>)&#123;</span><br><span class=\"line\">        per *= <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        per = (<span class=\"number\">1</span> - per) * <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.save()</span><br><span class=\"line\">    canvas.translate(x , y)</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.scale(per , per)</span><br><span class=\"line\"></span><br><span class=\"line\">    val paint = Paint()</span><br><span class=\"line\">    paint.color = <span class=\"number\">0xff78D8DF</span>.toInt()</span><br><span class=\"line\"></span><br><span class=\"line\">    val startLength = <span class=\"number\">30F</span></span><br><span class=\"line\">    val startOffset = startLength / <span class=\"number\">3F</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过路径描绘星星的形状</span></span><br><span class=\"line\">    val path = Path()</span><br><span class=\"line\">    path.moveTo(<span class=\"number\">0F</span> , startLength)</span><br><span class=\"line\">    path.lineTo(startOffset , startOffset )</span><br><span class=\"line\">    path.lineTo(startLength , <span class=\"number\">0F</span>)</span><br><span class=\"line\">    path.lineTo(startOffset  , -startOffset )</span><br><span class=\"line\">    path.lineTo(<span class=\"number\">0F</span> , -startLength)</span><br><span class=\"line\">    path.lineTo(-startOffset  , -startOffset )</span><br><span class=\"line\">    path.lineTo(-startLength , <span class=\"number\">0F</span>)</span><br><span class=\"line\">    path.lineTo(-startOffset  , startOffset )</span><br><span class=\"line\">    path.lineTo(<span class=\"number\">0F</span> , startLength)</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.drawPath(path , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    paint.color = viewBackgroundColor</span><br><span class=\"line\">    <span class=\"comment\">//通过缩小绘制星星内部形状</span></span><br><span class=\"line\">    canvas.scale(<span class=\"number\">0.3F</span> , <span class=\"number\">0.3F</span>)</span><br><span class=\"line\">    canvas.drawPath(path , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.restore()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"星球外部\"><a href=\"#星球外部\" class=\"headerlink\" title=\"星球外部\"></a>星球外部</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">drawGas</span><span class=\"params\">(canvas: Canvas, index: Float)</span> </span>&#123;</span><br><span class=\"line\">    canvas.save()</span><br><span class=\"line\">    canvas.rotate(<span class=\"number\">45F</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    val gasWidth = <span class=\"number\">18F</span></span><br><span class=\"line\">    val baseR = baseR * <span class=\"number\">0.7F</span></span><br><span class=\"line\">    val absBaseR = baseR / <span class=\"number\">5F</span></span><br><span class=\"line\"></span><br><span class=\"line\">    val paint = Paint()</span><br><span class=\"line\">    paint.strokeWidth = gasWidth</span><br><span class=\"line\">    paint.style = Paint.Style.STROKE</span><br><span class=\"line\">    paint.color = <span class=\"number\">0xff2F3768</span>.toInt()</span><br><span class=\"line\"></span><br><span class=\"line\">    val paintArc = Paint()</span><br><span class=\"line\">    paintArc.color = <span class=\"number\">0xff2F3768</span>.toInt()</span><br><span class=\"line\"></span><br><span class=\"line\">    val gasLength = baseR * <span class=\"number\">2F</span></span><br><span class=\"line\">    canvas.save()</span><br><span class=\"line\"></span><br><span class=\"line\">    val gsaL = gasWidth / <span class=\"number\">2F</span> * <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxGasLength = (gasLength + gsaL ) / <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = index</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.scale(<span class=\"number\">1F</span> , -<span class=\"number\">1F</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制星球后面的气流情况</span></span><br><span class=\"line\">    <span class=\"comment\">//舍不得那么多定义好的变量</span></span><br><span class=\"line\">    <span class=\"comment\">//又不想写个参数很多的函数,就这么实现了</span></span><br><span class=\"line\">    canvas.save()</span><br><span class=\"line\">    canvas.translate(baseR , baseR * <span class=\"number\">1.2F</span>)</span><br><span class=\"line\">    canvas.translate(<span class=\"number\">0F</span> , absBaseR)</span><br><span class=\"line\">    <span class=\"comment\">//drawLines函数一个绘制两头带半圆的线段</span></span><br><span class=\"line\">    drawLines(<span class=\"number\">0F</span>, maxGasLength, canvas, paint)</span><br><span class=\"line\">    drawWhite( maxGasLength * index, gasWidth , gsaL * <span class=\"number\">2</span> , canvas)</span><br><span class=\"line\">    drawWhite( maxGasLength * (index - <span class=\"number\">1</span> ) * <span class=\"number\">1.1F</span>, gasWidth , gsaL * <span class=\"number\">2</span> , canvas)</span><br><span class=\"line\">    drawWhite( maxGasLength * (index + <span class=\"number\">1</span> ) * <span class=\"number\">1.1F</span>, gasWidth , gsaL * <span class=\"number\">2</span> , canvas)</span><br><span class=\"line\">    canvas.restore()</span><br><span class=\"line\"></span><br><span class=\"line\">    index = index + <span class=\"number\">0.3F</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//.....没有写函数就不上重复的代码了</span></span><br><span class=\"line\"></span><br><span class=\"line\">    val rectf = RectF(-baseR , -baseR , baseR ,baseR)</span><br><span class=\"line\">    canvas.drawArc(rectf , <span class=\"number\">0F</span> , <span class=\"number\">180F</span> , <span class=\"keyword\">false</span> , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.drawLine(baseR ,<span class=\"number\">0F</span> ,  baseR ,  -baseR, paint)</span><br><span class=\"line\">    canvas.drawLine(-baseR ,<span class=\"number\">0F</span> ,  -baseR ,  -baseR, paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.restore()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绘制尾部空白部分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">drawWhite</span><span class=\"params\">(offset: Float, gasWidth: Float, gsaL : Float , canvas: Canvas)</span> </span>&#123;</span><br><span class=\"line\">    val r = gasWidth / <span class=\"number\">2F</span></span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.save()</span><br><span class=\"line\">    canvas.translate( <span class=\"number\">0F</span> , offset - <span class=\"number\">2</span> * gsaL )</span><br><span class=\"line\"></span><br><span class=\"line\">    val pointPaint = Paint()</span><br><span class=\"line\">    pointPaint.strokeWidth = <span class=\"number\">20F</span></span><br><span class=\"line\">    pointPaint.color = Color.RED</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过贝塞尔曲线绘制半圆效果</span></span><br><span class=\"line\">    val path = Path()</span><br><span class=\"line\">    path.moveTo(-r , gsaL)</span><br><span class=\"line\">    path.cubicTo(</span><br><span class=\"line\">            - r * C ,  gsaL - r,</span><br><span class=\"line\">            r * C ,  gsaL - r,</span><br><span class=\"line\">            r , gsaL</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    path.lineTo(r , - gsaL)</span><br><span class=\"line\">    path.cubicTo(</span><br><span class=\"line\">            r * C ,  - gsaL + r,</span><br><span class=\"line\">            -r * C ,  - gsaL + r,</span><br><span class=\"line\">            -r , - gsaL</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    path.lineTo(-r , gsaL * <span class=\"number\">1.5F</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    val paint = Paint()</span><br><span class=\"line\">    paint.color = viewBackgroundColor</span><br><span class=\"line\">    canvas.drawPath(path , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.restore()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"星球\"><a href=\"#星球\" class=\"headerlink\" title=\"星球\"></a>星球</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">drawPlanet</span><span class=\"params\">(canvas: Canvas , index : Float)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置原图层</span></span><br><span class=\"line\">    val srcB = makeSrc(index)</span><br><span class=\"line\">    <span class=\"comment\">//设置遮罩层</span></span><br><span class=\"line\">    <span class=\"comment\">//遮罩层只有一和星球大小一样的圆</span></span><br><span class=\"line\">    val dstB = makeDst(index)</span><br><span class=\"line\"></span><br><span class=\"line\">    val paint = Paint()</span><br><span class=\"line\">    canvas.saveLayer(-baseR, -baseR, baseR , baseR, <span class=\"keyword\">null</span>, Canvas.ALL_SAVE_FLAG)</span><br><span class=\"line\">    <span class=\"comment\">//绘制遮罩层</span></span><br><span class=\"line\">    canvas.drawBitmap(dstB,  -baseR / <span class=\"number\">2F</span>, -baseR / <span class=\"number\">2F</span> , paint)</span><br><span class=\"line\">    <span class=\"comment\">//设置遮罩模式为SRC_IN显示原图层中原图层与遮罩层相交部分</span></span><br><span class=\"line\">    paint.xfermode = PorterDuffXfermode(PorterDuff.Mode.SRC_IN)</span><br><span class=\"line\">    canvas.drawBitmap(srcB, width / -<span class=\"number\">2F</span>, height / -<span class=\"number\">2F</span> , paint)</span><br><span class=\"line\">    paint.xfermode = <span class=\"keyword\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置源图层</span></span><br><span class=\"line\"><span class=\"function\">fun <span class=\"title\">makeSrc</span><span class=\"params\">(index :Float)</span>: Bitmap </span>&#123;</span><br><span class=\"line\">    val bm = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)</span><br><span class=\"line\">    val canvas = Canvas(bm)</span><br><span class=\"line\">    canvas.translate(width.toFloat() / <span class=\"number\">2F</span> , height.toFloat() / <span class=\"number\">2F</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    val paint = Paint()</span><br><span class=\"line\">    paint.color = <span class=\"number\">0xff57BEC6</span>.toInt()</span><br><span class=\"line\">    paint.style = Paint.Style.FILL</span><br><span class=\"line\"></span><br><span class=\"line\">    val rectf = RectF(-baseR / <span class=\"number\">2F</span>, -baseR / <span class=\"number\">2F</span>, baseR / <span class=\"number\">2F</span>, baseR / <span class=\"number\">2F</span>)</span><br><span class=\"line\">    canvas.drawArc(rectf , <span class=\"number\">0F</span> , <span class=\"number\">360F</span> , <span class=\"keyword\">true</span> , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.save()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制星球背景</span></span><br><span class=\"line\">    paint.color = <span class=\"number\">0xff78D7DE</span>.toInt()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> baseR = baseR * <span class=\"number\">0.9</span>.toFloat()</span><br><span class=\"line\">    val rectf2 = RectF(-baseR / <span class=\"number\">2F</span>, -baseR / <span class=\"number\">2F</span>, baseR / <span class=\"number\">2F</span>, baseR / <span class=\"number\">2F</span>)</span><br><span class=\"line\">    canvas.translate(baseR / <span class=\"number\">6F</span> , baseR / <span class=\"number\">6F</span>)</span><br><span class=\"line\">    canvas.drawArc(rectf2 , <span class=\"number\">0F</span> , <span class=\"number\">360F</span> , <span class=\"keyword\">true</span> , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.restore()</span><br><span class=\"line\">    canvas.rotate(-<span class=\"number\">45F</span>)</span><br><span class=\"line\">    canvas.save()</span><br><span class=\"line\"></span><br><span class=\"line\">    val bottomBaseR = baseR / <span class=\"number\">0.9F</span> / <span class=\"number\">2</span></span><br><span class=\"line\">    val path = Path()</span><br><span class=\"line\">    path.moveTo(-bottomBaseR , <span class=\"number\">0F</span>)</span><br><span class=\"line\">    path.cubicTo(-bottomBaseR , bottomBaseR * <span class=\"number\">2</span>, bottomBaseR  , bottomBaseR * <span class=\"number\">2</span>, bottomBaseR , <span class=\"number\">0F</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    path.cubicTo(</span><br><span class=\"line\">            bottomBaseR * C,bottomBaseR ,</span><br><span class=\"line\">            -bottomBaseR * C,bottomBaseR ,</span><br><span class=\"line\">            -bottomBaseR , <span class=\"number\">0F</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制星球背景的阴影效果</span></span><br><span class=\"line\">    paint.color = <span class=\"number\">0xffAAEEF2</span>.toInt()</span><br><span class=\"line\">    paint.style = Paint.Style.FILL</span><br><span class=\"line\">    canvas.drawPath(path , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制星球的地貌</span></span><br><span class=\"line\">    drawPoints(index , canvas)</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.restore()</span><br><span class=\"line\"></span><br><span class=\"line\">    paint.strokeWidth = <span class=\"number\">30F</span></span><br><span class=\"line\">    paint.color = <span class=\"number\">0xff2F3768</span>.toInt()</span><br><span class=\"line\">    paint.style = Paint.Style.STROKE</span><br><span class=\"line\">    canvas.drawArc(rectf , <span class=\"number\">0F</span> , <span class=\"number\">360F</span> , <span class=\"keyword\">true</span> , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bm</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">drawPoints</span><span class=\"params\">(index: Float, canvas: Canvas)</span> </span>&#123;</span><br><span class=\"line\">        val paintB = Paint()</span><br><span class=\"line\">        val paintS = Paint()</span><br><span class=\"line\">        paintS.style = Paint.Style.FILL</span><br><span class=\"line\">        paintS.color = <span class=\"number\">0xffE7F2FB</span>.toInt()</span><br><span class=\"line\"></span><br><span class=\"line\">        paintB.style = Paint.Style.FILL</span><br><span class=\"line\">        paintB.color = <span class=\"number\">0xff2F3768</span>.toInt()</span><br><span class=\"line\"></span><br><span class=\"line\">        val baseRB = baseR / <span class=\"number\">2F</span> / <span class=\"number\">3</span></span><br><span class=\"line\">        val baseRS = baseR / <span class=\"number\">2F</span> / <span class=\"number\">3</span> / <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">        val rectfB = RectF(-baseRB, -baseRB, baseRB, baseRB)</span><br><span class=\"line\">        val rectfS = RectF(-baseRS, -baseRS, baseRS, baseRS)</span><br><span class=\"line\"></span><br><span class=\"line\">        val pointPaint = Paint()</span><br><span class=\"line\">        pointPaint.color = Color.BLACK</span><br><span class=\"line\">        pointPaint.strokeWidth = <span class=\"number\">50F</span></span><br><span class=\"line\"></span><br><span class=\"line\">        val coverWidth = baseR</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过移动坐标原点模拟星球的自转效果</span></span><br><span class=\"line\">        canvas.translate(-coverWidth / <span class=\"number\">2F</span> , coverWidth * <span class=\"number\">1.5F</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        val index = index</span><br><span class=\"line\">        canvas.translate(<span class=\"number\">0F</span> , coverWidth * index )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//重复绘制三次星球的地貌使得星球的自转无缝连接</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i in <span class=\"number\">0</span>..<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            canvas.save()</span><br><span class=\"line\">            canvas.translate(coverWidth / <span class=\"number\">3F</span> / <span class=\"number\">2</span>  , -coverWidth / <span class=\"number\">3F</span> * <span class=\"number\">2</span>)</span><br><span class=\"line\">            canvas.drawArc(rectfB , <span class=\"number\">0F</span> , <span class=\"number\">360F</span> , <span class=\"keyword\">true</span> , paintB)</span><br><span class=\"line\">            canvas.drawArc(rectfS , <span class=\"number\">0F</span> , <span class=\"number\">360F</span> , <span class=\"keyword\">true</span> , paintS)</span><br><span class=\"line\">            canvas.restore()</span><br><span class=\"line\"></span><br><span class=\"line\">            canvas.save()</span><br><span class=\"line\">            canvas.translate(coverWidth / <span class=\"number\">3F</span> *<span class=\"number\">2</span> , -coverWidth / <span class=\"number\">3F</span>)</span><br><span class=\"line\">            canvas.drawArc(rectfB , <span class=\"number\">0F</span> , <span class=\"number\">360F</span> , <span class=\"keyword\">true</span> , paintB)</span><br><span class=\"line\">            canvas.drawArc(rectfS , <span class=\"number\">0F</span> , <span class=\"number\">360F</span> , <span class=\"keyword\">true</span> , paintS)</span><br><span class=\"line\">            canvas.restore()</span><br><span class=\"line\"></span><br><span class=\"line\">            canvas.save()</span><br><span class=\"line\">            canvas.translate(coverWidth / <span class=\"number\">3F</span> *<span class=\"number\">2</span> , -coverWidth / <span class=\"number\">8F</span> * <span class=\"number\">7</span> + -coverWidth / <span class=\"number\">10F</span> )</span><br><span class=\"line\">            canvas.drawArc(rectfS , <span class=\"number\">0F</span> , <span class=\"number\">360F</span> , <span class=\"keyword\">true</span> , paintB)</span><br><span class=\"line\">            canvas.restore()</span><br><span class=\"line\"></span><br><span class=\"line\">            canvas.save()</span><br><span class=\"line\">            canvas.translate(coverWidth / <span class=\"number\">3F</span> *<span class=\"number\">2</span> , -coverWidth / <span class=\"number\">8F</span> * <span class=\"number\">7</span>  - -coverWidth / <span class=\"number\">10F</span> )</span><br><span class=\"line\">            canvas.drawArc(rectfS , <span class=\"number\">0F</span> , <span class=\"number\">360F</span> , <span class=\"keyword\">true</span> , paintB)</span><br><span class=\"line\">            canvas.restore()</span><br><span class=\"line\"></span><br><span class=\"line\">            canvas.translate(<span class=\"number\">0F</span> , -coverWidth)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>相关代码可以访问<a href=\"https://github.com/clwater/AndroidAnimation/tree/master/androidanimation03\" target=\"_blank\" rel=\"noopener\">我的GitHub</a>来获取,欢迎大家start或者提供建议.</p>"},{"title":"Https从了解到算了","date":"2017-11-04T14:52:03.000Z","_content":"\n# Https从了解到算了\n\n\n## Https的概念\n\n*以下相关名词均摘自wikipedia*\n\n**Https** 超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。这个协议由网景公司（Netscape）在1994年首次提出，随后扩展到互联网上。\n\n  <!-- more -->\n\n**SSL** 安全套接层（Secure Sockets Layer）是netscape设计的主要用于Web的安全传输协议,位于可靠的面向连接的网络层协议和应用层协议之间的一种协议层。\n\n**TLS** 传输层安全协议（英语：Transport Layer Security） 用于两个应用程序之间提供保密性和数据完整性。\n\n**IETF** 互联网工程任务小组（英语：Internet Engineering Task Force，縮寫為IETF）负责互联网标准的开发和推动。\n\n### TLS与SSL关系\n\nTLS的前身是 SSL3.0 协议，最早由netscape公司于 1995 年发布，1999 年经过 IETF 讨论和规范后，改名为 TLS。如果没有特别说明，SSL 和 TLS 说的都是同一个协议。\n\n目前有以下几个版本：SSLv2，SSLv3，TLSv1，TLSv1.1，TLSv1.2，TLSv1.3(草案)当前基本不再使用低于 TLSv1 的版本\n\n### Https与Http\n![Https与Http](http://upload-images.jianshu.io/upload_images/2191286-e6c903c097325fbd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## TLS/SSL协议的基本概念\n\nTLS/SSL的功能实现主要依赖于三类基本算法：散列函数 Hash、对称加密和非对称加密，其利用非对称加密实现身份认证和密钥协商，对称加密算法采用协商的密钥对数据加密，基于散列函数验证信息的完整性\n\n* **散列函数Hash**：常见的有 MD5、SHA1、SHA256，该类函数特点是函数单向不可逆、对输入非常敏感、输出长度固定，针对数据的任何修改都会改变散列函数的结果，用于防止信息篡改并验证数据的完整性；\n\n* **对称加密**：常见的有 AES-CBC、DES、3DES、AES-GCM等，相同的密钥可以用于信息的加密和解密，掌握密钥才能获取信息，能够防止信息窃听，通信方式是1对1；\n\n* **非对称加密**：即常见的 RSA、ECDHE、DH 、DHE等算法，算法特点是，密钥成对出现，一般称为公钥(公开)和私钥(保密)，公钥加密的信息只能私钥解开，私钥加密的信息只能公钥解开。因此掌握公钥的不同客户端之间不能互相解密信息，只能和掌握私钥的服务器进行加密通信，服务器可以实现1对多的通信，客户端也可以用来验证掌握私钥的服务器身份。\n\n![ TLS/SSL协议的基本概念](http://upload-images.jianshu.io/upload_images/2191286-37ce3cd16de5b2fe.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 对称加密的弊端\n\n1. 要求提供一条安全的通道使通信双方在首次通信时协商一个共同的密钥。直接面对面协商可能难于实施，所以双方需要借助于邮件和电话等其他相对不够安全的手段来进行协商。\n\n2. 密钥的数目难于管理。因为对于每一个合作者都需要使用不同的密钥，很难适应开放社 会中大量的信息交流。\n对称加密算法一般不能提供信息完整性的鉴别。它无法验证发送者和接受者的身份。\n\n3. 对称密钥的管理和分发工作是一件具有潜在危险的、繁琐的过程。对称加密是基于共同保守秘密来实现的，采用对称加密技术的贸易双方必须保证采用的是相同的密钥，保证彼此密钥的交换是安全可靠的，同时还要设定防止密匍泄密和更改密钥的程序。\n\n### 非对称加密的弊端\n\n#### 先天不足\n\n在公开密钥密码体制中，常用的一种是RSA加密算法。其数学原理是将一个大数分解成两个质数的乘积，加密和解密用的是两个不同的密钥。即使己知明文、密文和加密密钥(公钥)，想要推导出解密密钥(私钥)，在计算上是不可能的。按现在的计算机技术水平，要破解目前采用的1024位RSA密钥，需要上千年的计算时间。公开密钥技术解决了密钥发布的管理问题，商家可以公开其公开密钥，而保留其私有密钥。在2010年以后，均采用了2048位的签名\n\n身份验证和密钥协商是TLS的基础功能，要求的前提是合法的服务器掌握着对应的私钥。但RSA算法无法确保服务器身份的合法性，因为公钥并不包含服务器的信息\n\n#### 中间人攻击和信息抵赖\n\n![中间人攻击和信息抵赖](http://upload-images.jianshu.io/upload_images/2191286-a020141dd8dbef6f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n1. 客户端C和服务器S进行通信，中间节点M截获了二者的通信；\n2. 节点M自己计算产生一对公钥pub_M和私钥pri_M；\n3. C向S请求公钥时，M把自己的公钥pub_M发给了C；\n4. C使用公钥 pub_M加密的数据能够被M解密，因为M掌握对应的私钥pri_M，而 C无法根据公钥信息判断服务器的身份，从而 C和 M之间建立了\"可信\"加密连接；\n5. 中间节点 M和服务器S之间再建立合法的连接，因此 C和 S之间通信被M完全掌握，M可以进行信息的窃听、篡改等操作。\n\n6. 服务器也可以对自己的发出的信息进行否认，不承认相关信息是自己发出。\n\n## 横空出世的CA验证及证书\n\nCA （Certification Authority）负责审核信息，然后对关键信息利用私钥进行\"签名\"，公开对应的公钥，客户端可以利用公钥验证签名。CA也可以吊销已经签发的证书，具体的流程如下：\n\n![CA验证及证书](http://upload-images.jianshu.io/upload_images/2191286-0bd0b5431c947a71.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 相关\n\n1. 申请证书不需要提供私钥，确保私钥永远只能服务器掌握；\n2. 证书的合法性仍然依赖于非对称加密算法，证书主要是增加了服务器信息以及签名；\n3. 内置 CA 对应的证书称为根证书，颁发者和使用者相同，自己为自己签名，即自签名证书；\n4. 证书=公钥+申请者与颁发者信息+签名；\n5. 公钥放在数字证书中。只要证书是可信的，公钥就是可信的。\n\n\n## 如何验证证书的合法性\n\n客户端针对服务端用私钥对证书信息签名的校验\n\n当客户端对服务端发送client_hello之后 服务端会将公开的密钥证书发送给客户端,证书中包含了**公钥**,**各种信息**,**签名**(ca针对证书的摘要信息进行私钥加密)\n\n当客户端接收到证书后会通过内置ca公钥对签名进行解密已验证证书的合法性.如果已知的ca公钥均无法解密证书签名,则认定当前证书不是被认可的证书(没有颁布本证书或者证书被伪造)\n\n\n## 证书链\n\n**证书链** :服务器证书、中间证书与根证书在一起组合成一条合法的证书链，证书链的验证是自下而上的信任传递的过程。\n\n如 CA根证书和服务器证书中间增加一级证书机构，即中间证书，证书的产生和验证原理不变，只是增加一层验证，只要最后能够被任何信任的CA根证书验证合法即可。\n\n1. 服务器证书 server.pem 的签发者为中间证书机构 inter，inter 根据证书 inter.pem 验证 server.pem 确实为自己签发的有效证书；\n2. 中间证书 inter.pem 的签发 CA 为 root，root 根据证书 root.pem 验证 inter.pem 为自己签发的合法证书；\n3. 客户端内置信任 CA 的 root.pem 证书，因此服务器证书 server.pem 的被信任。\n\n![证书链](http://upload-images.jianshu.io/upload_images/2191286-a2f32046f8d49e23.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n###  证书链的优势与特点\n* 减少根证书结构的管理工作量，可以更高效的进行证书的审核与签发；\n* 根证书一般内置在客户端中，私钥一般离线存储，一旦私钥泄露，则吊销过程非常困难，无法及时补救；\n* 中间证书结构的私钥泄露，则可以快速在线吊销，并重新为用户签发新的证书；\n* 证书链四级以内一般不会对 HTTPS 的性能造成明显影响。\n* 同一本服务器证书可能存在多条合法的证书链。因为证书的生成和验证基础是公钥和私钥对，如果采用相同的公钥和私钥生成不同的中间证书，针对被签发者而言，该签发机构都是合法的 CA，不同的是中间证书的签发机构不同；\n* 不同证书链的层级不一定相同，可能二级、三级或四级证书链。中间证书的签发机构可能是根证书机构也可能是另一个中间证书机构，所以证书链层级不一定相同。\n\n![证书链的优势与特点](http://upload-images.jianshu.io/upload_images/2191286-5b6f0a2d6b27c56e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 证书吊销\n\nCA 机构能够签发证书，同样也存在机制宣布以往签发的证书无效。证书使用者不合法，CA 需要废弃该证书；或者私钥丢失，使用者申请让证书无效。主要存在两类机制：CRL与OCSP。\n\n### CRL\n\nCertificate Revocation List， 证书吊销列表，是一个单独的文件。该文件包含了 CA 已经吊销的证书序列号(唯一)与吊销日期，同时该文件包含生效日期并通知下次更新该文件的时间，当然该文件必然包含 CA 私钥的签名以验证文件的合法性。\n\n在证书中一般会包含一个 URL 地址 CRL Distribution Point，通知使用者去哪里下载对应的 CRL 以校验证书是否吊销。该吊销方式的优点是不需要频繁更新，但是不能及时吊销证书，因为 CRL 更新时间一般是几天，这期间可能已经造成了极大损失。\n\n### OCSP\n\nOnline Certificate Status Protocol， 证书状态在线查询协议，一个实时查询证书是否吊销的方式。请求者发送证书的信息并请求查询，服务器返回正常、吊销或未知中的任何一个状态。\n\n证书中一般也会包含一个 OCSP 的 URL 地址，要求查询服务器具有良好的性能。部分 CA 或大部分的自签 CA (根证书)都是未提供 CRL 或 OCSP 地址的，对于吊销证书会是一件非常麻烦的事情。\n\n\n## TLS/SSL握手过程\n\n### X.509\nX.509 是一个标准，也是一个数字文档，这个文档根据RFC 5280来编码并签发，一份X.509证书是一些标准字段的集合，这些字段包含有关用户或设备及其相应公钥的信息。\n\n### 编码 (也用于扩展名)\n* .DER - 扩展名DER用于二进制DER编码的证书，不可读。这些证书也可以用CER或者CRT作为扩展名。 Java和Windows服务器偏向于使用这种编码格式，比较合适的说法是“我有一个DER编码的证书”，而不是“我有一个DER证书”。\n\n* .PEM - 扩展名PEM用于ASCII(Base64)编码的各种X.509 v3 证书。以“-----BEGIN...”开头， “-----END...”结尾，内容是BASE64编码，Apache和Linux服务器偏向于使用这种编码格式。\n\n### 常用的扩展名\n* .KEY - 通常用来存放一个公钥或者私钥，并非X.509证书，编码可能是PEM，也可能是DER.\n\n* .CSR - 是Certificate Signing Request的缩写，即证书签名请求，这不是证书，是生成证书时要把这个提交给权威的证书颁发机构。其核心内容是一个公钥(当然还附带了一些别的信息)，在生成这个申请的时候，同时也会生成一个私钥，私钥要自己保管好.当权威证书颁发机构颁发的证书过期的时候，你还可以用同样的csr来申请新的证书，key保持不变.\n\n* .CRT - certificate的缩写，其实还是证书的意思，常见于Linux系统，有可能是PEM或者DER编码，大多数应该是PEM编码.\n\n* .CER - certificate的缩写，其实还是证书的意思，常见于Windows系统，有可能是PEM或者DER编码，大多数应该是DER编码.\n\n注意：CRT文件和CER文件只有在使用相同编码的时候才可以安全地相互替代。\n\n* .PFX/PKCS12 - predecessor of PKCS#12，包含了证书和私钥，对Linux服务器来说，一般来说CRT和KEY是分开存放在不同文件中的，但Windows的IIS则将它们存在一个PFX文件中，并通过提取密码来保护。\n\n* .JKS/JCEKS - Java密钥库(KeyStore)的两种比较常见类型，包含了证书和私钥，利用Java的“keytool”的工具，可以将PFX转为JKS，当然了，keytool也能直接生成JKS，JCEKS在安全级别上要比JKS强，使用的Provider是JCEKS(推荐)，使用使用TripleDES 保护KeyStore中的私钥；\n\n* .BKS – Bouncy Castle Provider，包含了证书和私钥， android系统支持的类型，它使用的也是TripleDES来保护密钥库中的私钥，它能够防止证书库被不小心修改（Keystore的keyentry改掉1个bit都会产生错误），BKS能够跟JKS互操作。\n\n注意：通过工具 BKS、JKS、PFX 三种格式的证书均可以相互转换\n\n### OpenSSL\nOpenSSL简单地说，OpenSSL是SSL的一个实现，SSL只是一种规范理论上来说，SSL这种规范是安全的，目前的技术水平很难破解，但SSL的实现就可能有些漏洞，如著名的“心脏出血”。OpenSSL还提供了一大堆强大的工具软件，强大到90%我们都用不到.\n\n### 证书编码的转换\nPEM转为DER openssl x509 -in cert.crt -outform der -out cert.der\nDER转为PEM openssl x509 -in cert.crt -inform der -outform pem -out cert.pem\n(提示:要转换KEY文件也类似，只不过把x509换成rsa，要转CSR的话，把x509换成req...)\n\n### \"心脏出血\"事件\n\n2014年曝光了OpenSSL的源代码中存在一个漏洞，可以让攻击者获得服务器上64K内存中的数据内容\n\nOpenSSL心脏出血漏洞的大概原理是OpenSSL在2012年引入了心跳(heartbeat)机制来维持TLS链接的长期存在，心跳机制是作为TLS的扩展实现，但在代码中包括TLS(TCP)和DTLS(UDP)都没有做边界的检测，所以导致攻击者可以利用这个漏洞来获得TLS链接对端（可以是服务器，也可以是客户端）内存中的一些数据，至少可以获得16KB每次，理论上讲最大可以获取64KB。\n\nAlexa排名前百万的网站中有40.9%的网站收到影响\n\n## Https主要流程\n|client|server|\n|-|-|\n|1 Client Hello||\n||2 Server Hello|\n||3 certificate|\n||4 server_key_exchange(DH加密需要)|\n|| *5 certificate_request(双向验证需要)*|\n||6 server_hello_done|\n|*7 certificate(双向验证需要)*||\n|8 client_key_exchange  ||\n|*9 certifiate_verify(双向验证需要)*||\n|10 change_cypher_spec||\n|11 encrypted handshake message||\n|----finished----| |\n||12 change_cypher_spec|\n||13 encrypted handshake message|\n||----finished----|\n\n![Https主要流程](http://upload-images.jianshu.io/upload_images/2191286-e1df3220da857387.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### Wireshark抓包实例\n\n![Wireshark抓包实例](http://upload-images.jianshu.io/upload_images/2191286-e8e05fc281b9537d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n1. Client Hello (C-S)\n![Client Hello (C-S)](http://ooymoxvz4.bkt.clouddn.com/17-11-3/93935647.jpg)\n\n  1. 提供最高支持的TLS/SSl版本\n  2. 客户端生成随机数random_c\n  3. 客户端支持的加密方式\n\n2. Server Hello(S-C)\n![Server Hello(S-C)](http://upload-images.jianshu.io/upload_images/2191286-7563d4329f2aed04.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  1. 协商后使用的TLS/SSl版本\n  2. 服务端生成随机数random_s\n  3. 协商后使用的加密方式\n\n   (上图中使用的是RSA和DH混合使用的方式,RSA验证服务器身份,DH算法加密密钥)\n\n3. Certificate (S-C)/可选\n![Certificate (S-C)/可选](http://upload-images.jianshu.io/upload_images/2191286-4bf6023a012fb63b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n  提供服务器的身份证书给客户端鉴定，如果不用公钥证书体系验证身份和交换密钥，该步骤可选，比如在用DH方法交换的时候。\n\n4. Server Key Exchange (S-C)/可选\n![Server Key Exchange/Server Hello Done ](http://upload-images.jianshu.io/upload_images/2191286-eb38c906b7320390.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n  密钥交换用到的服务器方的信息，一般是补充上次的 [Certificate]指令的信息，如果才用DH加密算算法需要提供.\n\n5. certificate_request(S-C)/可选\n  服务端要求客户端提供证书,包括客户端可以提供的证书类型及服务器接受的证书distinguished name列表，可以是root CA或者subordinate CA\n\n6. Server Hello Done (S-C)\n![Server Key Exchange/Server Hello Done ](http://upload-images.jianshu.io/upload_images/2191286-f8850135af6799bf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  结束服务器端的握手过程\n\n7. certificate(C-S)/可选\n  如果服务端需要客户端提供证书,则在此提供客户端的证书\n\n8. Client Key Exchange (C-S)\n![Client Key Exchange](http://upload-images.jianshu.io/upload_images/2191286-f70ac54dcd9e6c1e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  客户端会在生成一个随机数pubkey并将它发送到服务端,客户端与服务端均会根据之前生成的random_c,random_s,pubkey三个随机数生成对称加密的session secret\n9. certifiate_verify(C-S)/可选\n  发送使用客户端证书给到这一步为止收到和发送的所有握手消息签名结果\n\n10. Change Cipher Spec (C-S)\n![Change Cipher Spec (C-S)](http://upload-images.jianshu.io/upload_images/2191286-7f3194d187d94ea9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  通知服务端接下来的数据均采用session secret为key对称加密方式\n\n11. Encrypted Handshake Message(C-S)\n![Encrypted Handshake Message(C-S)](http://upload-images.jianshu.io/upload_images/2191286-ba2ea86dc66b772e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n  客户端随后立刻发送了一个经过加密的消息, 服务端应该可以根据生成的session secret来进行解密,这个加密的消息解密以后是有固定格式的，符合这个格式，或则满足一些字符匹配，才是合法的。\n\n12. Change Cipher Spec(S-C)\n![Change Cipher Spec(S-C)](http://upload-images.jianshu.io/upload_images/2191286-8e208fbef4d4f2ce.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  通知客户端接下来的数据均采用被session secret加密的对称加密方式\n\n13. Encrypted Handshake Message(S-C)\n![Change Cipher Spec(S-C)](http://upload-images.jianshu.io/upload_images/2191286-d3bb751cd551332e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  服务端随后也立刻发送了一个经过加密的消息,让给客户端进行验证\n\n14. 正式的数据交互\n  随后两端都会通过已经协商好的session secret作为key的对称加密方式通过http协议进行数据交互\n\n\n## 自签名证书的不安全性\n\n1. 自签证书最容易被假冒和伪造，而被欺诈网站所利用\n* 自签证书最容易受到SSL中间人攻击\n* 以上这两点都是由于自签证书不受浏览器信任，而网站告诉用户要信任而造成\n* 自签证书支持不安全的SSL通信重新协商机制(Dos及中间人攻击)\n* 自签证书支持非常不安全的SSL V2.0协议\n* 自签证书没有可访问的吊销列表\n* 自签证书使用1024位的非对称密钥对\n* 自签证书证书有效期太长，短则5年，长则20年、30年\n\n## HTTPS性能损耗\n\n### 增加延时\n\n分析前面的握手过程，一次完整的握手至少需要两端依次来回两次通信，至少增加延时2*RTT（Round-Trip Time，往返时间），利用会话缓存从而复用连接，延时也至少1* RTT。\n\n### 消耗较多的CPU资源\n\n除数据传输之外，HTTPS通信主要包括对对称加解密、非对称加解密(服务器主要采用私钥解密数据)；压测 TS8 机型的单核 CPU：对称加密算法AES-CBC-256 吞吐量 600Mbps，非对称 RSA 私钥解密200次/s。不考虑其它软件层面的开销，10G 网卡为对称加密需要消耗 CPU 约17核，24核CPU最多接入 HTTPS 连接 4800；\n静态节点当前10G 网卡的 TS8 机型的 HTTP 单机接入能力约为10w/s，如果将所有的HTTP连接变为HTTPS连接，则明显RSA的解密最先成为瓶颈。因此，RSA的解密能力是当前困扰HTTPS接入的主要难题。\n\n## HTTPS接入优化\n\n### CDN接入\nHTTPS 增加的延时主要是传输延时 RTT，RTT 的特点是节点越近延时越小，CDN 天然离用户最近，因此选择使用 CDN 作为 HTTPS 接入的入口，将能够极大减少接入延时。CDN 节点通过和业务服务器维持长连接、会话复用和链路质量优化等可控方法，极大减少 HTTPS 带来的延时。\n### 会话缓存\n虽然前文提到 HTTPS 即使采用会话缓存也要至少1*RTT的延时，但是至少延时已经减少为原来的一半，明显的延时优化；同时，基于会话缓存建立的 HTTPS 连接不需要服务器使用RSA私钥解密获取 Pre-master 信息，可以省去CPU 的消耗。如果业务访问连接集中，缓存命中率高，则HTTPS的接入能力讲明显提升。当前TRP平台的缓存命中率高峰时期大于30%，10k/s的接入资源实际可以承载13k/的接入，收效非常可观。\n### 硬件加速\n为接入服务器安装专用的SSL硬件加速卡，作用类似 GPU，释放 CPU，能够具有更高的 HTTPS 接入能力且不影响业务程序的。测试某硬件加速卡单卡可以提供35k的解密能力，相当于175核 CPU，至少相当于7台24核的服务器，考虑到接入服务器其它程序的开销，一张硬件卡可以实现接近10台服务器的接入能力。\n### 远程解密\n本地接入消耗过多的 CPU 资源，浪费了网卡和硬盘等资源，考虑将最消耗 CPU 资源的RSA解密计算任务转移到其它服务器，如此则可以充分发挥服务器的接入能力，充分利用带宽与网卡资源。远程解密服务器可以选择 CPU 负载较低的机器充当，实现机器资源复用，也可以是专门优化的高计算性能的服务器。当前也是 CDN 用于大规模HTTPS接入的解决方案之一。\n### SPDY/HTTP2\n前面的方法分别从减少传输延时和单机负载的方法提高 HTTPS 接入性能，但是方法都基于不改变 HTTP 协议的基础上提出的优化方法，SPDY/HTTP2 利用 TLS/SSL 带来的优势，通过修改协议的方法来提升 HTTPS 的性能，提高下载速度等。\n\n\n## 参考文章\n[图解SSL/TLS协议](http://blog.csdn.net/fw0124/article/details/40875629)\n\n[SSL/TLS 握手优化详解\n](http://blog.jobbole.com/94332/)\n\n[大型网站的 HTTPS 实践（1）：HTTPS 协议和原理](http://blog.jobbole.com/86660/)\n\n\n[沃通（Wosign）关于数字证书的技术文档](http://www.wosign.com/faq/index_1.htm)\n\n[HTTPS通信建立过程](http://blog.csdn.net/hacode/article/details/18982917)\n","source":"_posts/https.md","raw":"---\ntitle: Https从了解到算了\ndate: 2017-11-04 22:52:03\ntags: [\"https\" ]\ncategories: \"https\"\n---\n\n# Https从了解到算了\n\n\n## Https的概念\n\n*以下相关名词均摘自wikipedia*\n\n**Https** 超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。这个协议由网景公司（Netscape）在1994年首次提出，随后扩展到互联网上。\n\n  <!-- more -->\n\n**SSL** 安全套接层（Secure Sockets Layer）是netscape设计的主要用于Web的安全传输协议,位于可靠的面向连接的网络层协议和应用层协议之间的一种协议层。\n\n**TLS** 传输层安全协议（英语：Transport Layer Security） 用于两个应用程序之间提供保密性和数据完整性。\n\n**IETF** 互联网工程任务小组（英语：Internet Engineering Task Force，縮寫為IETF）负责互联网标准的开发和推动。\n\n### TLS与SSL关系\n\nTLS的前身是 SSL3.0 协议，最早由netscape公司于 1995 年发布，1999 年经过 IETF 讨论和规范后，改名为 TLS。如果没有特别说明，SSL 和 TLS 说的都是同一个协议。\n\n目前有以下几个版本：SSLv2，SSLv3，TLSv1，TLSv1.1，TLSv1.2，TLSv1.3(草案)当前基本不再使用低于 TLSv1 的版本\n\n### Https与Http\n![Https与Http](http://upload-images.jianshu.io/upload_images/2191286-e6c903c097325fbd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## TLS/SSL协议的基本概念\n\nTLS/SSL的功能实现主要依赖于三类基本算法：散列函数 Hash、对称加密和非对称加密，其利用非对称加密实现身份认证和密钥协商，对称加密算法采用协商的密钥对数据加密，基于散列函数验证信息的完整性\n\n* **散列函数Hash**：常见的有 MD5、SHA1、SHA256，该类函数特点是函数单向不可逆、对输入非常敏感、输出长度固定，针对数据的任何修改都会改变散列函数的结果，用于防止信息篡改并验证数据的完整性；\n\n* **对称加密**：常见的有 AES-CBC、DES、3DES、AES-GCM等，相同的密钥可以用于信息的加密和解密，掌握密钥才能获取信息，能够防止信息窃听，通信方式是1对1；\n\n* **非对称加密**：即常见的 RSA、ECDHE、DH 、DHE等算法，算法特点是，密钥成对出现，一般称为公钥(公开)和私钥(保密)，公钥加密的信息只能私钥解开，私钥加密的信息只能公钥解开。因此掌握公钥的不同客户端之间不能互相解密信息，只能和掌握私钥的服务器进行加密通信，服务器可以实现1对多的通信，客户端也可以用来验证掌握私钥的服务器身份。\n\n![ TLS/SSL协议的基本概念](http://upload-images.jianshu.io/upload_images/2191286-37ce3cd16de5b2fe.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 对称加密的弊端\n\n1. 要求提供一条安全的通道使通信双方在首次通信时协商一个共同的密钥。直接面对面协商可能难于实施，所以双方需要借助于邮件和电话等其他相对不够安全的手段来进行协商。\n\n2. 密钥的数目难于管理。因为对于每一个合作者都需要使用不同的密钥，很难适应开放社 会中大量的信息交流。\n对称加密算法一般不能提供信息完整性的鉴别。它无法验证发送者和接受者的身份。\n\n3. 对称密钥的管理和分发工作是一件具有潜在危险的、繁琐的过程。对称加密是基于共同保守秘密来实现的，采用对称加密技术的贸易双方必须保证采用的是相同的密钥，保证彼此密钥的交换是安全可靠的，同时还要设定防止密匍泄密和更改密钥的程序。\n\n### 非对称加密的弊端\n\n#### 先天不足\n\n在公开密钥密码体制中，常用的一种是RSA加密算法。其数学原理是将一个大数分解成两个质数的乘积，加密和解密用的是两个不同的密钥。即使己知明文、密文和加密密钥(公钥)，想要推导出解密密钥(私钥)，在计算上是不可能的。按现在的计算机技术水平，要破解目前采用的1024位RSA密钥，需要上千年的计算时间。公开密钥技术解决了密钥发布的管理问题，商家可以公开其公开密钥，而保留其私有密钥。在2010年以后，均采用了2048位的签名\n\n身份验证和密钥协商是TLS的基础功能，要求的前提是合法的服务器掌握着对应的私钥。但RSA算法无法确保服务器身份的合法性，因为公钥并不包含服务器的信息\n\n#### 中间人攻击和信息抵赖\n\n![中间人攻击和信息抵赖](http://upload-images.jianshu.io/upload_images/2191286-a020141dd8dbef6f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n1. 客户端C和服务器S进行通信，中间节点M截获了二者的通信；\n2. 节点M自己计算产生一对公钥pub_M和私钥pri_M；\n3. C向S请求公钥时，M把自己的公钥pub_M发给了C；\n4. C使用公钥 pub_M加密的数据能够被M解密，因为M掌握对应的私钥pri_M，而 C无法根据公钥信息判断服务器的身份，从而 C和 M之间建立了\"可信\"加密连接；\n5. 中间节点 M和服务器S之间再建立合法的连接，因此 C和 S之间通信被M完全掌握，M可以进行信息的窃听、篡改等操作。\n\n6. 服务器也可以对自己的发出的信息进行否认，不承认相关信息是自己发出。\n\n## 横空出世的CA验证及证书\n\nCA （Certification Authority）负责审核信息，然后对关键信息利用私钥进行\"签名\"，公开对应的公钥，客户端可以利用公钥验证签名。CA也可以吊销已经签发的证书，具体的流程如下：\n\n![CA验证及证书](http://upload-images.jianshu.io/upload_images/2191286-0bd0b5431c947a71.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 相关\n\n1. 申请证书不需要提供私钥，确保私钥永远只能服务器掌握；\n2. 证书的合法性仍然依赖于非对称加密算法，证书主要是增加了服务器信息以及签名；\n3. 内置 CA 对应的证书称为根证书，颁发者和使用者相同，自己为自己签名，即自签名证书；\n4. 证书=公钥+申请者与颁发者信息+签名；\n5. 公钥放在数字证书中。只要证书是可信的，公钥就是可信的。\n\n\n## 如何验证证书的合法性\n\n客户端针对服务端用私钥对证书信息签名的校验\n\n当客户端对服务端发送client_hello之后 服务端会将公开的密钥证书发送给客户端,证书中包含了**公钥**,**各种信息**,**签名**(ca针对证书的摘要信息进行私钥加密)\n\n当客户端接收到证书后会通过内置ca公钥对签名进行解密已验证证书的合法性.如果已知的ca公钥均无法解密证书签名,则认定当前证书不是被认可的证书(没有颁布本证书或者证书被伪造)\n\n\n## 证书链\n\n**证书链** :服务器证书、中间证书与根证书在一起组合成一条合法的证书链，证书链的验证是自下而上的信任传递的过程。\n\n如 CA根证书和服务器证书中间增加一级证书机构，即中间证书，证书的产生和验证原理不变，只是增加一层验证，只要最后能够被任何信任的CA根证书验证合法即可。\n\n1. 服务器证书 server.pem 的签发者为中间证书机构 inter，inter 根据证书 inter.pem 验证 server.pem 确实为自己签发的有效证书；\n2. 中间证书 inter.pem 的签发 CA 为 root，root 根据证书 root.pem 验证 inter.pem 为自己签发的合法证书；\n3. 客户端内置信任 CA 的 root.pem 证书，因此服务器证书 server.pem 的被信任。\n\n![证书链](http://upload-images.jianshu.io/upload_images/2191286-a2f32046f8d49e23.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n###  证书链的优势与特点\n* 减少根证书结构的管理工作量，可以更高效的进行证书的审核与签发；\n* 根证书一般内置在客户端中，私钥一般离线存储，一旦私钥泄露，则吊销过程非常困难，无法及时补救；\n* 中间证书结构的私钥泄露，则可以快速在线吊销，并重新为用户签发新的证书；\n* 证书链四级以内一般不会对 HTTPS 的性能造成明显影响。\n* 同一本服务器证书可能存在多条合法的证书链。因为证书的生成和验证基础是公钥和私钥对，如果采用相同的公钥和私钥生成不同的中间证书，针对被签发者而言，该签发机构都是合法的 CA，不同的是中间证书的签发机构不同；\n* 不同证书链的层级不一定相同，可能二级、三级或四级证书链。中间证书的签发机构可能是根证书机构也可能是另一个中间证书机构，所以证书链层级不一定相同。\n\n![证书链的优势与特点](http://upload-images.jianshu.io/upload_images/2191286-5b6f0a2d6b27c56e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 证书吊销\n\nCA 机构能够签发证书，同样也存在机制宣布以往签发的证书无效。证书使用者不合法，CA 需要废弃该证书；或者私钥丢失，使用者申请让证书无效。主要存在两类机制：CRL与OCSP。\n\n### CRL\n\nCertificate Revocation List， 证书吊销列表，是一个单独的文件。该文件包含了 CA 已经吊销的证书序列号(唯一)与吊销日期，同时该文件包含生效日期并通知下次更新该文件的时间，当然该文件必然包含 CA 私钥的签名以验证文件的合法性。\n\n在证书中一般会包含一个 URL 地址 CRL Distribution Point，通知使用者去哪里下载对应的 CRL 以校验证书是否吊销。该吊销方式的优点是不需要频繁更新，但是不能及时吊销证书，因为 CRL 更新时间一般是几天，这期间可能已经造成了极大损失。\n\n### OCSP\n\nOnline Certificate Status Protocol， 证书状态在线查询协议，一个实时查询证书是否吊销的方式。请求者发送证书的信息并请求查询，服务器返回正常、吊销或未知中的任何一个状态。\n\n证书中一般也会包含一个 OCSP 的 URL 地址，要求查询服务器具有良好的性能。部分 CA 或大部分的自签 CA (根证书)都是未提供 CRL 或 OCSP 地址的，对于吊销证书会是一件非常麻烦的事情。\n\n\n## TLS/SSL握手过程\n\n### X.509\nX.509 是一个标准，也是一个数字文档，这个文档根据RFC 5280来编码并签发，一份X.509证书是一些标准字段的集合，这些字段包含有关用户或设备及其相应公钥的信息。\n\n### 编码 (也用于扩展名)\n* .DER - 扩展名DER用于二进制DER编码的证书，不可读。这些证书也可以用CER或者CRT作为扩展名。 Java和Windows服务器偏向于使用这种编码格式，比较合适的说法是“我有一个DER编码的证书”，而不是“我有一个DER证书”。\n\n* .PEM - 扩展名PEM用于ASCII(Base64)编码的各种X.509 v3 证书。以“-----BEGIN...”开头， “-----END...”结尾，内容是BASE64编码，Apache和Linux服务器偏向于使用这种编码格式。\n\n### 常用的扩展名\n* .KEY - 通常用来存放一个公钥或者私钥，并非X.509证书，编码可能是PEM，也可能是DER.\n\n* .CSR - 是Certificate Signing Request的缩写，即证书签名请求，这不是证书，是生成证书时要把这个提交给权威的证书颁发机构。其核心内容是一个公钥(当然还附带了一些别的信息)，在生成这个申请的时候，同时也会生成一个私钥，私钥要自己保管好.当权威证书颁发机构颁发的证书过期的时候，你还可以用同样的csr来申请新的证书，key保持不变.\n\n* .CRT - certificate的缩写，其实还是证书的意思，常见于Linux系统，有可能是PEM或者DER编码，大多数应该是PEM编码.\n\n* .CER - certificate的缩写，其实还是证书的意思，常见于Windows系统，有可能是PEM或者DER编码，大多数应该是DER编码.\n\n注意：CRT文件和CER文件只有在使用相同编码的时候才可以安全地相互替代。\n\n* .PFX/PKCS12 - predecessor of PKCS#12，包含了证书和私钥，对Linux服务器来说，一般来说CRT和KEY是分开存放在不同文件中的，但Windows的IIS则将它们存在一个PFX文件中，并通过提取密码来保护。\n\n* .JKS/JCEKS - Java密钥库(KeyStore)的两种比较常见类型，包含了证书和私钥，利用Java的“keytool”的工具，可以将PFX转为JKS，当然了，keytool也能直接生成JKS，JCEKS在安全级别上要比JKS强，使用的Provider是JCEKS(推荐)，使用使用TripleDES 保护KeyStore中的私钥；\n\n* .BKS – Bouncy Castle Provider，包含了证书和私钥， android系统支持的类型，它使用的也是TripleDES来保护密钥库中的私钥，它能够防止证书库被不小心修改（Keystore的keyentry改掉1个bit都会产生错误），BKS能够跟JKS互操作。\n\n注意：通过工具 BKS、JKS、PFX 三种格式的证书均可以相互转换\n\n### OpenSSL\nOpenSSL简单地说，OpenSSL是SSL的一个实现，SSL只是一种规范理论上来说，SSL这种规范是安全的，目前的技术水平很难破解，但SSL的实现就可能有些漏洞，如著名的“心脏出血”。OpenSSL还提供了一大堆强大的工具软件，强大到90%我们都用不到.\n\n### 证书编码的转换\nPEM转为DER openssl x509 -in cert.crt -outform der -out cert.der\nDER转为PEM openssl x509 -in cert.crt -inform der -outform pem -out cert.pem\n(提示:要转换KEY文件也类似，只不过把x509换成rsa，要转CSR的话，把x509换成req...)\n\n### \"心脏出血\"事件\n\n2014年曝光了OpenSSL的源代码中存在一个漏洞，可以让攻击者获得服务器上64K内存中的数据内容\n\nOpenSSL心脏出血漏洞的大概原理是OpenSSL在2012年引入了心跳(heartbeat)机制来维持TLS链接的长期存在，心跳机制是作为TLS的扩展实现，但在代码中包括TLS(TCP)和DTLS(UDP)都没有做边界的检测，所以导致攻击者可以利用这个漏洞来获得TLS链接对端（可以是服务器，也可以是客户端）内存中的一些数据，至少可以获得16KB每次，理论上讲最大可以获取64KB。\n\nAlexa排名前百万的网站中有40.9%的网站收到影响\n\n## Https主要流程\n|client|server|\n|-|-|\n|1 Client Hello||\n||2 Server Hello|\n||3 certificate|\n||4 server_key_exchange(DH加密需要)|\n|| *5 certificate_request(双向验证需要)*|\n||6 server_hello_done|\n|*7 certificate(双向验证需要)*||\n|8 client_key_exchange  ||\n|*9 certifiate_verify(双向验证需要)*||\n|10 change_cypher_spec||\n|11 encrypted handshake message||\n|----finished----| |\n||12 change_cypher_spec|\n||13 encrypted handshake message|\n||----finished----|\n\n![Https主要流程](http://upload-images.jianshu.io/upload_images/2191286-e1df3220da857387.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### Wireshark抓包实例\n\n![Wireshark抓包实例](http://upload-images.jianshu.io/upload_images/2191286-e8e05fc281b9537d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n1. Client Hello (C-S)\n![Client Hello (C-S)](http://ooymoxvz4.bkt.clouddn.com/17-11-3/93935647.jpg)\n\n  1. 提供最高支持的TLS/SSl版本\n  2. 客户端生成随机数random_c\n  3. 客户端支持的加密方式\n\n2. Server Hello(S-C)\n![Server Hello(S-C)](http://upload-images.jianshu.io/upload_images/2191286-7563d4329f2aed04.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  1. 协商后使用的TLS/SSl版本\n  2. 服务端生成随机数random_s\n  3. 协商后使用的加密方式\n\n   (上图中使用的是RSA和DH混合使用的方式,RSA验证服务器身份,DH算法加密密钥)\n\n3. Certificate (S-C)/可选\n![Certificate (S-C)/可选](http://upload-images.jianshu.io/upload_images/2191286-4bf6023a012fb63b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n  提供服务器的身份证书给客户端鉴定，如果不用公钥证书体系验证身份和交换密钥，该步骤可选，比如在用DH方法交换的时候。\n\n4. Server Key Exchange (S-C)/可选\n![Server Key Exchange/Server Hello Done ](http://upload-images.jianshu.io/upload_images/2191286-eb38c906b7320390.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n  密钥交换用到的服务器方的信息，一般是补充上次的 [Certificate]指令的信息，如果才用DH加密算算法需要提供.\n\n5. certificate_request(S-C)/可选\n  服务端要求客户端提供证书,包括客户端可以提供的证书类型及服务器接受的证书distinguished name列表，可以是root CA或者subordinate CA\n\n6. Server Hello Done (S-C)\n![Server Key Exchange/Server Hello Done ](http://upload-images.jianshu.io/upload_images/2191286-f8850135af6799bf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  结束服务器端的握手过程\n\n7. certificate(C-S)/可选\n  如果服务端需要客户端提供证书,则在此提供客户端的证书\n\n8. Client Key Exchange (C-S)\n![Client Key Exchange](http://upload-images.jianshu.io/upload_images/2191286-f70ac54dcd9e6c1e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  客户端会在生成一个随机数pubkey并将它发送到服务端,客户端与服务端均会根据之前生成的random_c,random_s,pubkey三个随机数生成对称加密的session secret\n9. certifiate_verify(C-S)/可选\n  发送使用客户端证书给到这一步为止收到和发送的所有握手消息签名结果\n\n10. Change Cipher Spec (C-S)\n![Change Cipher Spec (C-S)](http://upload-images.jianshu.io/upload_images/2191286-7f3194d187d94ea9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  通知服务端接下来的数据均采用session secret为key对称加密方式\n\n11. Encrypted Handshake Message(C-S)\n![Encrypted Handshake Message(C-S)](http://upload-images.jianshu.io/upload_images/2191286-ba2ea86dc66b772e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n  客户端随后立刻发送了一个经过加密的消息, 服务端应该可以根据生成的session secret来进行解密,这个加密的消息解密以后是有固定格式的，符合这个格式，或则满足一些字符匹配，才是合法的。\n\n12. Change Cipher Spec(S-C)\n![Change Cipher Spec(S-C)](http://upload-images.jianshu.io/upload_images/2191286-8e208fbef4d4f2ce.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  通知客户端接下来的数据均采用被session secret加密的对称加密方式\n\n13. Encrypted Handshake Message(S-C)\n![Change Cipher Spec(S-C)](http://upload-images.jianshu.io/upload_images/2191286-d3bb751cd551332e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  服务端随后也立刻发送了一个经过加密的消息,让给客户端进行验证\n\n14. 正式的数据交互\n  随后两端都会通过已经协商好的session secret作为key的对称加密方式通过http协议进行数据交互\n\n\n## 自签名证书的不安全性\n\n1. 自签证书最容易被假冒和伪造，而被欺诈网站所利用\n* 自签证书最容易受到SSL中间人攻击\n* 以上这两点都是由于自签证书不受浏览器信任，而网站告诉用户要信任而造成\n* 自签证书支持不安全的SSL通信重新协商机制(Dos及中间人攻击)\n* 自签证书支持非常不安全的SSL V2.0协议\n* 自签证书没有可访问的吊销列表\n* 自签证书使用1024位的非对称密钥对\n* 自签证书证书有效期太长，短则5年，长则20年、30年\n\n## HTTPS性能损耗\n\n### 增加延时\n\n分析前面的握手过程，一次完整的握手至少需要两端依次来回两次通信，至少增加延时2*RTT（Round-Trip Time，往返时间），利用会话缓存从而复用连接，延时也至少1* RTT。\n\n### 消耗较多的CPU资源\n\n除数据传输之外，HTTPS通信主要包括对对称加解密、非对称加解密(服务器主要采用私钥解密数据)；压测 TS8 机型的单核 CPU：对称加密算法AES-CBC-256 吞吐量 600Mbps，非对称 RSA 私钥解密200次/s。不考虑其它软件层面的开销，10G 网卡为对称加密需要消耗 CPU 约17核，24核CPU最多接入 HTTPS 连接 4800；\n静态节点当前10G 网卡的 TS8 机型的 HTTP 单机接入能力约为10w/s，如果将所有的HTTP连接变为HTTPS连接，则明显RSA的解密最先成为瓶颈。因此，RSA的解密能力是当前困扰HTTPS接入的主要难题。\n\n## HTTPS接入优化\n\n### CDN接入\nHTTPS 增加的延时主要是传输延时 RTT，RTT 的特点是节点越近延时越小，CDN 天然离用户最近，因此选择使用 CDN 作为 HTTPS 接入的入口，将能够极大减少接入延时。CDN 节点通过和业务服务器维持长连接、会话复用和链路质量优化等可控方法，极大减少 HTTPS 带来的延时。\n### 会话缓存\n虽然前文提到 HTTPS 即使采用会话缓存也要至少1*RTT的延时，但是至少延时已经减少为原来的一半，明显的延时优化；同时，基于会话缓存建立的 HTTPS 连接不需要服务器使用RSA私钥解密获取 Pre-master 信息，可以省去CPU 的消耗。如果业务访问连接集中，缓存命中率高，则HTTPS的接入能力讲明显提升。当前TRP平台的缓存命中率高峰时期大于30%，10k/s的接入资源实际可以承载13k/的接入，收效非常可观。\n### 硬件加速\n为接入服务器安装专用的SSL硬件加速卡，作用类似 GPU，释放 CPU，能够具有更高的 HTTPS 接入能力且不影响业务程序的。测试某硬件加速卡单卡可以提供35k的解密能力，相当于175核 CPU，至少相当于7台24核的服务器，考虑到接入服务器其它程序的开销，一张硬件卡可以实现接近10台服务器的接入能力。\n### 远程解密\n本地接入消耗过多的 CPU 资源，浪费了网卡和硬盘等资源，考虑将最消耗 CPU 资源的RSA解密计算任务转移到其它服务器，如此则可以充分发挥服务器的接入能力，充分利用带宽与网卡资源。远程解密服务器可以选择 CPU 负载较低的机器充当，实现机器资源复用，也可以是专门优化的高计算性能的服务器。当前也是 CDN 用于大规模HTTPS接入的解决方案之一。\n### SPDY/HTTP2\n前面的方法分别从减少传输延时和单机负载的方法提高 HTTPS 接入性能，但是方法都基于不改变 HTTP 协议的基础上提出的优化方法，SPDY/HTTP2 利用 TLS/SSL 带来的优势，通过修改协议的方法来提升 HTTPS 的性能，提高下载速度等。\n\n\n## 参考文章\n[图解SSL/TLS协议](http://blog.csdn.net/fw0124/article/details/40875629)\n\n[SSL/TLS 握手优化详解\n](http://blog.jobbole.com/94332/)\n\n[大型网站的 HTTPS 实践（1）：HTTPS 协议和原理](http://blog.jobbole.com/86660/)\n\n\n[沃通（Wosign）关于数字证书的技术文档](http://www.wosign.com/faq/index_1.htm)\n\n[HTTPS通信建立过程](http://blog.csdn.net/hacode/article/details/18982917)\n","slug":"https","published":1,"updated":"2020-03-13T09:33:05.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5e4000xq7dqiqpqd1hh","content":"<h1 id=\"Https从了解到算了\"><a href=\"#Https从了解到算了\" class=\"headerlink\" title=\"Https从了解到算了\"></a>Https从了解到算了</h1><h2 id=\"Https的概念\"><a href=\"#Https的概念\" class=\"headerlink\" title=\"Https的概念\"></a>Https的概念</h2><p><em>以下相关名词均摘自wikipedia</em></p>\n<p><strong>Https</strong> 超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。这个协议由网景公司（Netscape）在1994年首次提出，随后扩展到互联网上。</p>\n  <a id=\"more\"></a>\n<p><strong>SSL</strong> 安全套接层（Secure Sockets Layer）是netscape设计的主要用于Web的安全传输协议,位于可靠的面向连接的网络层协议和应用层协议之间的一种协议层。</p>\n<p><strong>TLS</strong> 传输层安全协议（英语：Transport Layer Security） 用于两个应用程序之间提供保密性和数据完整性。</p>\n<p><strong>IETF</strong> 互联网工程任务小组（英语：Internet Engineering Task Force，縮寫為IETF）负责互联网标准的开发和推动。</p>\n<h3 id=\"TLS与SSL关系\"><a href=\"#TLS与SSL关系\" class=\"headerlink\" title=\"TLS与SSL关系\"></a>TLS与SSL关系</h3><p>TLS的前身是 SSL3.0 协议，最早由netscape公司于 1995 年发布，1999 年经过 IETF 讨论和规范后，改名为 TLS。如果没有特别说明，SSL 和 TLS 说的都是同一个协议。</p>\n<p>目前有以下几个版本：SSLv2，SSLv3，TLSv1，TLSv1.1，TLSv1.2，TLSv1.3(草案)当前基本不再使用低于 TLSv1 的版本</p>\n<h3 id=\"Https与Http\"><a href=\"#Https与Http\" class=\"headerlink\" title=\"Https与Http\"></a>Https与Http</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-e6c903c097325fbd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Https与Http\"></p>\n<h2 id=\"TLS-SSL协议的基本概念\"><a href=\"#TLS-SSL协议的基本概念\" class=\"headerlink\" title=\"TLS/SSL协议的基本概念\"></a>TLS/SSL协议的基本概念</h2><p>TLS/SSL的功能实现主要依赖于三类基本算法：散列函数 Hash、对称加密和非对称加密，其利用非对称加密实现身份认证和密钥协商，对称加密算法采用协商的密钥对数据加密，基于散列函数验证信息的完整性</p>\n<ul>\n<li><p><strong>散列函数Hash</strong>：常见的有 MD5、SHA1、SHA256，该类函数特点是函数单向不可逆、对输入非常敏感、输出长度固定，针对数据的任何修改都会改变散列函数的结果，用于防止信息篡改并验证数据的完整性；</p>\n</li>\n<li><p><strong>对称加密</strong>：常见的有 AES-CBC、DES、3DES、AES-GCM等，相同的密钥可以用于信息的加密和解密，掌握密钥才能获取信息，能够防止信息窃听，通信方式是1对1；</p>\n</li>\n<li><p><strong>非对称加密</strong>：即常见的 RSA、ECDHE、DH 、DHE等算法，算法特点是，密钥成对出现，一般称为公钥(公开)和私钥(保密)，公钥加密的信息只能私钥解开，私钥加密的信息只能公钥解开。因此掌握公钥的不同客户端之间不能互相解密信息，只能和掌握私钥的服务器进行加密通信，服务器可以实现1对多的通信，客户端也可以用来验证掌握私钥的服务器身份。</p>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-37ce3cd16de5b2fe.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\" TLS/SSL协议的基本概念\"></p>\n<h3 id=\"对称加密的弊端\"><a href=\"#对称加密的弊端\" class=\"headerlink\" title=\"对称加密的弊端\"></a>对称加密的弊端</h3><ol>\n<li><p>要求提供一条安全的通道使通信双方在首次通信时协商一个共同的密钥。直接面对面协商可能难于实施，所以双方需要借助于邮件和电话等其他相对不够安全的手段来进行协商。</p>\n</li>\n<li><p>密钥的数目难于管理。因为对于每一个合作者都需要使用不同的密钥，很难适应开放社 会中大量的信息交流。<br>对称加密算法一般不能提供信息完整性的鉴别。它无法验证发送者和接受者的身份。</p>\n</li>\n<li><p>对称密钥的管理和分发工作是一件具有潜在危险的、繁琐的过程。对称加密是基于共同保守秘密来实现的，采用对称加密技术的贸易双方必须保证采用的是相同的密钥，保证彼此密钥的交换是安全可靠的，同时还要设定防止密匍泄密和更改密钥的程序。</p>\n</li>\n</ol>\n<h3 id=\"非对称加密的弊端\"><a href=\"#非对称加密的弊端\" class=\"headerlink\" title=\"非对称加密的弊端\"></a>非对称加密的弊端</h3><h4 id=\"先天不足\"><a href=\"#先天不足\" class=\"headerlink\" title=\"先天不足\"></a>先天不足</h4><p>在公开密钥密码体制中，常用的一种是RSA加密算法。其数学原理是将一个大数分解成两个质数的乘积，加密和解密用的是两个不同的密钥。即使己知明文、密文和加密密钥(公钥)，想要推导出解密密钥(私钥)，在计算上是不可能的。按现在的计算机技术水平，要破解目前采用的1024位RSA密钥，需要上千年的计算时间。公开密钥技术解决了密钥发布的管理问题，商家可以公开其公开密钥，而保留其私有密钥。在2010年以后，均采用了2048位的签名</p>\n<p>身份验证和密钥协商是TLS的基础功能，要求的前提是合法的服务器掌握着对应的私钥。但RSA算法无法确保服务器身份的合法性，因为公钥并不包含服务器的信息</p>\n<h4 id=\"中间人攻击和信息抵赖\"><a href=\"#中间人攻击和信息抵赖\" class=\"headerlink\" title=\"中间人攻击和信息抵赖\"></a>中间人攻击和信息抵赖</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-a020141dd8dbef6f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"中间人攻击和信息抵赖\"></p>\n<ol>\n<li>客户端C和服务器S进行通信，中间节点M截获了二者的通信；</li>\n<li>节点M自己计算产生一对公钥pub_M和私钥pri_M；</li>\n<li>C向S请求公钥时，M把自己的公钥pub_M发给了C；</li>\n<li>C使用公钥 pub_M加密的数据能够被M解密，因为M掌握对应的私钥pri_M，而 C无法根据公钥信息判断服务器的身份，从而 C和 M之间建立了”可信”加密连接；</li>\n<li><p>中间节点 M和服务器S之间再建立合法的连接，因此 C和 S之间通信被M完全掌握，M可以进行信息的窃听、篡改等操作。</p>\n</li>\n<li><p>服务器也可以对自己的发出的信息进行否认，不承认相关信息是自己发出。</p>\n</li>\n</ol>\n<h2 id=\"横空出世的CA验证及证书\"><a href=\"#横空出世的CA验证及证书\" class=\"headerlink\" title=\"横空出世的CA验证及证书\"></a>横空出世的CA验证及证书</h2><p>CA （Certification Authority）负责审核信息，然后对关键信息利用私钥进行”签名”，公开对应的公钥，客户端可以利用公钥验证签名。CA也可以吊销已经签发的证书，具体的流程如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-0bd0b5431c947a71.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"CA验证及证书\"></p>\n<h3 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h3><ol>\n<li>申请证书不需要提供私钥，确保私钥永远只能服务器掌握；</li>\n<li>证书的合法性仍然依赖于非对称加密算法，证书主要是增加了服务器信息以及签名；</li>\n<li>内置 CA 对应的证书称为根证书，颁发者和使用者相同，自己为自己签名，即自签名证书；</li>\n<li>证书=公钥+申请者与颁发者信息+签名；</li>\n<li>公钥放在数字证书中。只要证书是可信的，公钥就是可信的。</li>\n</ol>\n<h2 id=\"如何验证证书的合法性\"><a href=\"#如何验证证书的合法性\" class=\"headerlink\" title=\"如何验证证书的合法性\"></a>如何验证证书的合法性</h2><p>客户端针对服务端用私钥对证书信息签名的校验</p>\n<p>当客户端对服务端发送client_hello之后 服务端会将公开的密钥证书发送给客户端,证书中包含了<strong>公钥</strong>,<strong>各种信息</strong>,<strong>签名</strong>(ca针对证书的摘要信息进行私钥加密)</p>\n<p>当客户端接收到证书后会通过内置ca公钥对签名进行解密已验证证书的合法性.如果已知的ca公钥均无法解密证书签名,则认定当前证书不是被认可的证书(没有颁布本证书或者证书被伪造)</p>\n<h2 id=\"证书链\"><a href=\"#证书链\" class=\"headerlink\" title=\"证书链\"></a>证书链</h2><p><strong>证书链</strong> :服务器证书、中间证书与根证书在一起组合成一条合法的证书链，证书链的验证是自下而上的信任传递的过程。</p>\n<p>如 CA根证书和服务器证书中间增加一级证书机构，即中间证书，证书的产生和验证原理不变，只是增加一层验证，只要最后能够被任何信任的CA根证书验证合法即可。</p>\n<ol>\n<li>服务器证书 server.pem 的签发者为中间证书机构 inter，inter 根据证书 inter.pem 验证 server.pem 确实为自己签发的有效证书；</li>\n<li>中间证书 inter.pem 的签发 CA 为 root，root 根据证书 root.pem 验证 inter.pem 为自己签发的合法证书；</li>\n<li>客户端内置信任 CA 的 root.pem 证书，因此服务器证书 server.pem 的被信任。</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-a2f32046f8d49e23.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"证书链\"></p>\n<h3 id=\"证书链的优势与特点\"><a href=\"#证书链的优势与特点\" class=\"headerlink\" title=\"证书链的优势与特点\"></a>证书链的优势与特点</h3><ul>\n<li>减少根证书结构的管理工作量，可以更高效的进行证书的审核与签发；</li>\n<li>根证书一般内置在客户端中，私钥一般离线存储，一旦私钥泄露，则吊销过程非常困难，无法及时补救；</li>\n<li>中间证书结构的私钥泄露，则可以快速在线吊销，并重新为用户签发新的证书；</li>\n<li>证书链四级以内一般不会对 HTTPS 的性能造成明显影响。</li>\n<li>同一本服务器证书可能存在多条合法的证书链。因为证书的生成和验证基础是公钥和私钥对，如果采用相同的公钥和私钥生成不同的中间证书，针对被签发者而言，该签发机构都是合法的 CA，不同的是中间证书的签发机构不同；</li>\n<li>不同证书链的层级不一定相同，可能二级、三级或四级证书链。中间证书的签发机构可能是根证书机构也可能是另一个中间证书机构，所以证书链层级不一定相同。</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-5b6f0a2d6b27c56e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"证书链的优势与特点\"></p>\n<h2 id=\"证书吊销\"><a href=\"#证书吊销\" class=\"headerlink\" title=\"证书吊销\"></a>证书吊销</h2><p>CA 机构能够签发证书，同样也存在机制宣布以往签发的证书无效。证书使用者不合法，CA 需要废弃该证书；或者私钥丢失，使用者申请让证书无效。主要存在两类机制：CRL与OCSP。</p>\n<h3 id=\"CRL\"><a href=\"#CRL\" class=\"headerlink\" title=\"CRL\"></a>CRL</h3><p>Certificate Revocation List， 证书吊销列表，是一个单独的文件。该文件包含了 CA 已经吊销的证书序列号(唯一)与吊销日期，同时该文件包含生效日期并通知下次更新该文件的时间，当然该文件必然包含 CA 私钥的签名以验证文件的合法性。</p>\n<p>在证书中一般会包含一个 URL 地址 CRL Distribution Point，通知使用者去哪里下载对应的 CRL 以校验证书是否吊销。该吊销方式的优点是不需要频繁更新，但是不能及时吊销证书，因为 CRL 更新时间一般是几天，这期间可能已经造成了极大损失。</p>\n<h3 id=\"OCSP\"><a href=\"#OCSP\" class=\"headerlink\" title=\"OCSP\"></a>OCSP</h3><p>Online Certificate Status Protocol， 证书状态在线查询协议，一个实时查询证书是否吊销的方式。请求者发送证书的信息并请求查询，服务器返回正常、吊销或未知中的任何一个状态。</p>\n<p>证书中一般也会包含一个 OCSP 的 URL 地址，要求查询服务器具有良好的性能。部分 CA 或大部分的自签 CA (根证书)都是未提供 CRL 或 OCSP 地址的，对于吊销证书会是一件非常麻烦的事情。</p>\n<h2 id=\"TLS-SSL握手过程\"><a href=\"#TLS-SSL握手过程\" class=\"headerlink\" title=\"TLS/SSL握手过程\"></a>TLS/SSL握手过程</h2><h3 id=\"X-509\"><a href=\"#X-509\" class=\"headerlink\" title=\"X.509\"></a>X.509</h3><p>X.509 是一个标准，也是一个数字文档，这个文档根据RFC 5280来编码并签发，一份X.509证书是一些标准字段的集合，这些字段包含有关用户或设备及其相应公钥的信息。</p>\n<h3 id=\"编码-也用于扩展名\"><a href=\"#编码-也用于扩展名\" class=\"headerlink\" title=\"编码 (也用于扩展名)\"></a>编码 (也用于扩展名)</h3><ul>\n<li><p>.DER - 扩展名DER用于二进制DER编码的证书，不可读。这些证书也可以用CER或者CRT作为扩展名。 Java和Windows服务器偏向于使用这种编码格式，比较合适的说法是“我有一个DER编码的证书”，而不是“我有一个DER证书”。</p>\n</li>\n<li><p>.PEM - 扩展名PEM用于ASCII(Base64)编码的各种X.509 v3 证书。以“—–BEGIN…”开头， “—–END…”结尾，内容是BASE64编码，Apache和Linux服务器偏向于使用这种编码格式。</p>\n</li>\n</ul>\n<h3 id=\"常用的扩展名\"><a href=\"#常用的扩展名\" class=\"headerlink\" title=\"常用的扩展名\"></a>常用的扩展名</h3><ul>\n<li><p>.KEY - 通常用来存放一个公钥或者私钥，并非X.509证书，编码可能是PEM，也可能是DER.</p>\n</li>\n<li><p>.CSR - 是Certificate Signing Request的缩写，即证书签名请求，这不是证书，是生成证书时要把这个提交给权威的证书颁发机构。其核心内容是一个公钥(当然还附带了一些别的信息)，在生成这个申请的时候，同时也会生成一个私钥，私钥要自己保管好.当权威证书颁发机构颁发的证书过期的时候，你还可以用同样的csr来申请新的证书，key保持不变.</p>\n</li>\n<li><p>.CRT - certificate的缩写，其实还是证书的意思，常见于Linux系统，有可能是PEM或者DER编码，大多数应该是PEM编码.</p>\n</li>\n<li><p>.CER - certificate的缩写，其实还是证书的意思，常见于Windows系统，有可能是PEM或者DER编码，大多数应该是DER编码.</p>\n</li>\n</ul>\n<p>注意：CRT文件和CER文件只有在使用相同编码的时候才可以安全地相互替代。</p>\n<ul>\n<li><p>.PFX/PKCS12 - predecessor of PKCS#12，包含了证书和私钥，对Linux服务器来说，一般来说CRT和KEY是分开存放在不同文件中的，但Windows的IIS则将它们存在一个PFX文件中，并通过提取密码来保护。</p>\n</li>\n<li><p>.JKS/JCEKS - Java密钥库(KeyStore)的两种比较常见类型，包含了证书和私钥，利用Java的“keytool”的工具，可以将PFX转为JKS，当然了，keytool也能直接生成JKS，JCEKS在安全级别上要比JKS强，使用的Provider是JCEKS(推荐)，使用使用TripleDES 保护KeyStore中的私钥；</p>\n</li>\n<li><p>.BKS – Bouncy Castle Provider，包含了证书和私钥， android系统支持的类型，它使用的也是TripleDES来保护密钥库中的私钥，它能够防止证书库被不小心修改（Keystore的keyentry改掉1个bit都会产生错误），BKS能够跟JKS互操作。</p>\n</li>\n</ul>\n<p>注意：通过工具 BKS、JKS、PFX 三种格式的证书均可以相互转换</p>\n<h3 id=\"OpenSSL\"><a href=\"#OpenSSL\" class=\"headerlink\" title=\"OpenSSL\"></a>OpenSSL</h3><p>OpenSSL简单地说，OpenSSL是SSL的一个实现，SSL只是一种规范理论上来说，SSL这种规范是安全的，目前的技术水平很难破解，但SSL的实现就可能有些漏洞，如著名的“心脏出血”。OpenSSL还提供了一大堆强大的工具软件，强大到90%我们都用不到.</p>\n<h3 id=\"证书编码的转换\"><a href=\"#证书编码的转换\" class=\"headerlink\" title=\"证书编码的转换\"></a>证书编码的转换</h3><p>PEM转为DER openssl x509 -in cert.crt -outform der -out cert.der<br>DER转为PEM openssl x509 -in cert.crt -inform der -outform pem -out cert.pem<br>(提示:要转换KEY文件也类似，只不过把x509换成rsa，要转CSR的话，把x509换成req…)</p>\n<h3 id=\"“心脏出血”事件\"><a href=\"#“心脏出血”事件\" class=\"headerlink\" title=\"“心脏出血”事件\"></a>“心脏出血”事件</h3><p>2014年曝光了OpenSSL的源代码中存在一个漏洞，可以让攻击者获得服务器上64K内存中的数据内容</p>\n<p>OpenSSL心脏出血漏洞的大概原理是OpenSSL在2012年引入了心跳(heartbeat)机制来维持TLS链接的长期存在，心跳机制是作为TLS的扩展实现，但在代码中包括TLS(TCP)和DTLS(UDP)都没有做边界的检测，所以导致攻击者可以利用这个漏洞来获得TLS链接对端（可以是服务器，也可以是客户端）内存中的一些数据，至少可以获得16KB每次，理论上讲最大可以获取64KB。</p>\n<p>Alexa排名前百万的网站中有40.9%的网站收到影响</p>\n<h2 id=\"Https主要流程\"><a href=\"#Https主要流程\" class=\"headerlink\" title=\"Https主要流程\"></a>Https主要流程</h2><table>\n<thead>\n<tr>\n<th>client</th>\n<th>server</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1 Client Hello</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>2 Server Hello</td>\n</tr>\n<tr>\n<td></td>\n<td>3 certificate</td>\n</tr>\n<tr>\n<td></td>\n<td>4 server_key_exchange(DH加密需要)</td>\n</tr>\n<tr>\n<td></td>\n<td><em>5 certificate_request(双向验证需要)</em></td>\n</tr>\n<tr>\n<td></td>\n<td>6 server_hello_done</td>\n</tr>\n<tr>\n<td><em>7 certificate(双向验证需要)</em></td>\n<td></td>\n</tr>\n<tr>\n<td>8 client_key_exchange</td>\n<td></td>\n</tr>\n<tr>\n<td><em>9 certifiate_verify(双向验证需要)</em></td>\n<td></td>\n</tr>\n<tr>\n<td>10 change_cypher_spec</td>\n<td></td>\n</tr>\n<tr>\n<td>11 encrypted handshake message</td>\n<td></td>\n</tr>\n<tr>\n<td>—-finished—-</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>12 change_cypher_spec</td>\n</tr>\n<tr>\n<td></td>\n<td>13 encrypted handshake message</td>\n</tr>\n<tr>\n<td></td>\n<td>—-finished—-</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-e1df3220da857387.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Https主要流程\"></p>\n<h3 id=\"Wireshark抓包实例\"><a href=\"#Wireshark抓包实例\" class=\"headerlink\" title=\"Wireshark抓包实例\"></a>Wireshark抓包实例</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-e8e05fc281b9537d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Wireshark抓包实例\"></p>\n<ol>\n<li><p>Client Hello (C-S)<br><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-11-3/93935647.jpg\" alt=\"Client Hello (C-S)\"></p>\n<ol>\n<li>提供最高支持的TLS/SSl版本</li>\n<li>客户端生成随机数random_c</li>\n<li>客户端支持的加密方式</li>\n</ol>\n</li>\n<li><p>Server Hello(S-C)<br><img src=\"http://upload-images.jianshu.io/upload_images/2191286-7563d4329f2aed04.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Server Hello(S-C)\"></p>\n<ol>\n<li>协商后使用的TLS/SSl版本</li>\n<li>服务端生成随机数random_s</li>\n<li>协商后使用的加密方式</li>\n</ol>\n<p>(上图中使用的是RSA和DH混合使用的方式,RSA验证服务器身份,DH算法加密密钥)</p>\n</li>\n<li><p>Certificate (S-C)/可选<br><img src=\"http://upload-images.jianshu.io/upload_images/2191286-4bf6023a012fb63b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Certificate (S-C)/可选\"></p>\n<p>提供服务器的身份证书给客户端鉴定，如果不用公钥证书体系验证身份和交换密钥，该步骤可选，比如在用DH方法交换的时候。</p>\n</li>\n<li><p>Server Key Exchange (S-C)/可选<br><img src=\"http://upload-images.jianshu.io/upload_images/2191286-eb38c906b7320390.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Server Key Exchange/Server Hello Done \"></p>\n<p>密钥交换用到的服务器方的信息，一般是补充上次的 [Certificate]指令的信息，如果才用DH加密算算法需要提供.</p>\n</li>\n<li><p>certificate_request(S-C)/可选<br>服务端要求客户端提供证书,包括客户端可以提供的证书类型及服务器接受的证书distinguished name列表，可以是root CA或者subordinate CA</p>\n</li>\n<li><p>Server Hello Done (S-C)<br><img src=\"http://upload-images.jianshu.io/upload_images/2191286-f8850135af6799bf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Server Key Exchange/Server Hello Done \"><br>结束服务器端的握手过程</p>\n</li>\n<li><p>certificate(C-S)/可选<br>如果服务端需要客户端提供证书,则在此提供客户端的证书</p>\n</li>\n<li><p>Client Key Exchange (C-S)<br><img src=\"http://upload-images.jianshu.io/upload_images/2191286-f70ac54dcd9e6c1e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Client Key Exchange\"><br>客户端会在生成一个随机数pubkey并将它发送到服务端,客户端与服务端均会根据之前生成的random_c,random_s,pubkey三个随机数生成对称加密的session secret</p>\n</li>\n<li><p>certifiate_verify(C-S)/可选<br>发送使用客户端证书给到这一步为止收到和发送的所有握手消息签名结果</p>\n</li>\n<li><p>Change Cipher Spec (C-S)<br><img src=\"http://upload-images.jianshu.io/upload_images/2191286-7f3194d187d94ea9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Change Cipher Spec (C-S)\"><br>通知服务端接下来的数据均采用session secret为key对称加密方式</p>\n</li>\n<li><p>Encrypted Handshake Message(C-S)<br><img src=\"http://upload-images.jianshu.io/upload_images/2191286-ba2ea86dc66b772e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Encrypted Handshake Message(C-S)\"></p>\n<p>客户端随后立刻发送了一个经过加密的消息, 服务端应该可以根据生成的session secret来进行解密,这个加密的消息解密以后是有固定格式的，符合这个格式，或则满足一些字符匹配，才是合法的。</p>\n</li>\n<li><p>Change Cipher Spec(S-C)<br><img src=\"http://upload-images.jianshu.io/upload_images/2191286-8e208fbef4d4f2ce.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Change Cipher Spec(S-C)\"><br>通知客户端接下来的数据均采用被session secret加密的对称加密方式</p>\n</li>\n<li><p>Encrypted Handshake Message(S-C)<br><img src=\"http://upload-images.jianshu.io/upload_images/2191286-d3bb751cd551332e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Change Cipher Spec(S-C)\"><br>服务端随后也立刻发送了一个经过加密的消息,让给客户端进行验证</p>\n</li>\n<li><p>正式的数据交互<br>随后两端都会通过已经协商好的session secret作为key的对称加密方式通过http协议进行数据交互</p>\n</li>\n</ol>\n<h2 id=\"自签名证书的不安全性\"><a href=\"#自签名证书的不安全性\" class=\"headerlink\" title=\"自签名证书的不安全性\"></a>自签名证书的不安全性</h2><ol>\n<li>自签证书最容易被假冒和伪造，而被欺诈网站所利用</li>\n</ol>\n<ul>\n<li>自签证书最容易受到SSL中间人攻击</li>\n<li>以上这两点都是由于自签证书不受浏览器信任，而网站告诉用户要信任而造成</li>\n<li>自签证书支持不安全的SSL通信重新协商机制(Dos及中间人攻击)</li>\n<li>自签证书支持非常不安全的SSL V2.0协议</li>\n<li>自签证书没有可访问的吊销列表</li>\n<li>自签证书使用1024位的非对称密钥对</li>\n<li>自签证书证书有效期太长，短则5年，长则20年、30年</li>\n</ul>\n<h2 id=\"HTTPS性能损耗\"><a href=\"#HTTPS性能损耗\" class=\"headerlink\" title=\"HTTPS性能损耗\"></a>HTTPS性能损耗</h2><h3 id=\"增加延时\"><a href=\"#增加延时\" class=\"headerlink\" title=\"增加延时\"></a>增加延时</h3><p>分析前面的握手过程，一次完整的握手至少需要两端依次来回两次通信，至少增加延时2<em>RTT（Round-Trip Time，往返时间），利用会话缓存从而复用连接，延时也至少1</em> RTT。</p>\n<h3 id=\"消耗较多的CPU资源\"><a href=\"#消耗较多的CPU资源\" class=\"headerlink\" title=\"消耗较多的CPU资源\"></a>消耗较多的CPU资源</h3><p>除数据传输之外，HTTPS通信主要包括对对称加解密、非对称加解密(服务器主要采用私钥解密数据)；压测 TS8 机型的单核 CPU：对称加密算法AES-CBC-256 吞吐量 600Mbps，非对称 RSA 私钥解密200次/s。不考虑其它软件层面的开销，10G 网卡为对称加密需要消耗 CPU 约17核，24核CPU最多接入 HTTPS 连接 4800；<br>静态节点当前10G 网卡的 TS8 机型的 HTTP 单机接入能力约为10w/s，如果将所有的HTTP连接变为HTTPS连接，则明显RSA的解密最先成为瓶颈。因此，RSA的解密能力是当前困扰HTTPS接入的主要难题。</p>\n<h2 id=\"HTTPS接入优化\"><a href=\"#HTTPS接入优化\" class=\"headerlink\" title=\"HTTPS接入优化\"></a>HTTPS接入优化</h2><h3 id=\"CDN接入\"><a href=\"#CDN接入\" class=\"headerlink\" title=\"CDN接入\"></a>CDN接入</h3><p>HTTPS 增加的延时主要是传输延时 RTT，RTT 的特点是节点越近延时越小，CDN 天然离用户最近，因此选择使用 CDN 作为 HTTPS 接入的入口，将能够极大减少接入延时。CDN 节点通过和业务服务器维持长连接、会话复用和链路质量优化等可控方法，极大减少 HTTPS 带来的延时。</p>\n<h3 id=\"会话缓存\"><a href=\"#会话缓存\" class=\"headerlink\" title=\"会话缓存\"></a>会话缓存</h3><p>虽然前文提到 HTTPS 即使采用会话缓存也要至少1*RTT的延时，但是至少延时已经减少为原来的一半，明显的延时优化；同时，基于会话缓存建立的 HTTPS 连接不需要服务器使用RSA私钥解密获取 Pre-master 信息，可以省去CPU 的消耗。如果业务访问连接集中，缓存命中率高，则HTTPS的接入能力讲明显提升。当前TRP平台的缓存命中率高峰时期大于30%，10k/s的接入资源实际可以承载13k/的接入，收效非常可观。</p>\n<h3 id=\"硬件加速\"><a href=\"#硬件加速\" class=\"headerlink\" title=\"硬件加速\"></a>硬件加速</h3><p>为接入服务器安装专用的SSL硬件加速卡，作用类似 GPU，释放 CPU，能够具有更高的 HTTPS 接入能力且不影响业务程序的。测试某硬件加速卡单卡可以提供35k的解密能力，相当于175核 CPU，至少相当于7台24核的服务器，考虑到接入服务器其它程序的开销，一张硬件卡可以实现接近10台服务器的接入能力。</p>\n<h3 id=\"远程解密\"><a href=\"#远程解密\" class=\"headerlink\" title=\"远程解密\"></a>远程解密</h3><p>本地接入消耗过多的 CPU 资源，浪费了网卡和硬盘等资源，考虑将最消耗 CPU 资源的RSA解密计算任务转移到其它服务器，如此则可以充分发挥服务器的接入能力，充分利用带宽与网卡资源。远程解密服务器可以选择 CPU 负载较低的机器充当，实现机器资源复用，也可以是专门优化的高计算性能的服务器。当前也是 CDN 用于大规模HTTPS接入的解决方案之一。</p>\n<h3 id=\"SPDY-HTTP2\"><a href=\"#SPDY-HTTP2\" class=\"headerlink\" title=\"SPDY/HTTP2\"></a>SPDY/HTTP2</h3><p>前面的方法分别从减少传输延时和单机负载的方法提高 HTTPS 接入性能，但是方法都基于不改变 HTTP 协议的基础上提出的优化方法，SPDY/HTTP2 利用 TLS/SSL 带来的优势，通过修改协议的方法来提升 HTTPS 的性能，提高下载速度等。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"http://blog.csdn.net/fw0124/article/details/40875629\" target=\"_blank\" rel=\"noopener\">图解SSL/TLS协议</a></p>\n<p><a href=\"http://blog.jobbole.com/94332/\" target=\"_blank\" rel=\"noopener\">SSL/TLS 握手优化详解\n</a></p>\n<p><a href=\"http://blog.jobbole.com/86660/\" target=\"_blank\" rel=\"noopener\">大型网站的 HTTPS 实践（1）：HTTPS 协议和原理</a></p>\n<p><a href=\"http://www.wosign.com/faq/index_1.htm\" target=\"_blank\" rel=\"noopener\">沃通（Wosign）关于数字证书的技术文档</a></p>\n<p><a href=\"http://blog.csdn.net/hacode/article/details/18982917\" target=\"_blank\" rel=\"noopener\">HTTPS通信建立过程</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Https从了解到算了\"><a href=\"#Https从了解到算了\" class=\"headerlink\" title=\"Https从了解到算了\"></a>Https从了解到算了</h1><h2 id=\"Https的概念\"><a href=\"#Https的概念\" class=\"headerlink\" title=\"Https的概念\"></a>Https的概念</h2><p><em>以下相关名词均摘自wikipedia</em></p>\n<p><strong>Https</strong> 超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。这个协议由网景公司（Netscape）在1994年首次提出，随后扩展到互联网上。</p>","more":"<p><strong>SSL</strong> 安全套接层（Secure Sockets Layer）是netscape设计的主要用于Web的安全传输协议,位于可靠的面向连接的网络层协议和应用层协议之间的一种协议层。</p>\n<p><strong>TLS</strong> 传输层安全协议（英语：Transport Layer Security） 用于两个应用程序之间提供保密性和数据完整性。</p>\n<p><strong>IETF</strong> 互联网工程任务小组（英语：Internet Engineering Task Force，縮寫為IETF）负责互联网标准的开发和推动。</p>\n<h3 id=\"TLS与SSL关系\"><a href=\"#TLS与SSL关系\" class=\"headerlink\" title=\"TLS与SSL关系\"></a>TLS与SSL关系</h3><p>TLS的前身是 SSL3.0 协议，最早由netscape公司于 1995 年发布，1999 年经过 IETF 讨论和规范后，改名为 TLS。如果没有特别说明，SSL 和 TLS 说的都是同一个协议。</p>\n<p>目前有以下几个版本：SSLv2，SSLv3，TLSv1，TLSv1.1，TLSv1.2，TLSv1.3(草案)当前基本不再使用低于 TLSv1 的版本</p>\n<h3 id=\"Https与Http\"><a href=\"#Https与Http\" class=\"headerlink\" title=\"Https与Http\"></a>Https与Http</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-e6c903c097325fbd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Https与Http\"></p>\n<h2 id=\"TLS-SSL协议的基本概念\"><a href=\"#TLS-SSL协议的基本概念\" class=\"headerlink\" title=\"TLS/SSL协议的基本概念\"></a>TLS/SSL协议的基本概念</h2><p>TLS/SSL的功能实现主要依赖于三类基本算法：散列函数 Hash、对称加密和非对称加密，其利用非对称加密实现身份认证和密钥协商，对称加密算法采用协商的密钥对数据加密，基于散列函数验证信息的完整性</p>\n<ul>\n<li><p><strong>散列函数Hash</strong>：常见的有 MD5、SHA1、SHA256，该类函数特点是函数单向不可逆、对输入非常敏感、输出长度固定，针对数据的任何修改都会改变散列函数的结果，用于防止信息篡改并验证数据的完整性；</p>\n</li>\n<li><p><strong>对称加密</strong>：常见的有 AES-CBC、DES、3DES、AES-GCM等，相同的密钥可以用于信息的加密和解密，掌握密钥才能获取信息，能够防止信息窃听，通信方式是1对1；</p>\n</li>\n<li><p><strong>非对称加密</strong>：即常见的 RSA、ECDHE、DH 、DHE等算法，算法特点是，密钥成对出现，一般称为公钥(公开)和私钥(保密)，公钥加密的信息只能私钥解开，私钥加密的信息只能公钥解开。因此掌握公钥的不同客户端之间不能互相解密信息，只能和掌握私钥的服务器进行加密通信，服务器可以实现1对多的通信，客户端也可以用来验证掌握私钥的服务器身份。</p>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-37ce3cd16de5b2fe.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\" TLS/SSL协议的基本概念\"></p>\n<h3 id=\"对称加密的弊端\"><a href=\"#对称加密的弊端\" class=\"headerlink\" title=\"对称加密的弊端\"></a>对称加密的弊端</h3><ol>\n<li><p>要求提供一条安全的通道使通信双方在首次通信时协商一个共同的密钥。直接面对面协商可能难于实施，所以双方需要借助于邮件和电话等其他相对不够安全的手段来进行协商。</p>\n</li>\n<li><p>密钥的数目难于管理。因为对于每一个合作者都需要使用不同的密钥，很难适应开放社 会中大量的信息交流。<br>对称加密算法一般不能提供信息完整性的鉴别。它无法验证发送者和接受者的身份。</p>\n</li>\n<li><p>对称密钥的管理和分发工作是一件具有潜在危险的、繁琐的过程。对称加密是基于共同保守秘密来实现的，采用对称加密技术的贸易双方必须保证采用的是相同的密钥，保证彼此密钥的交换是安全可靠的，同时还要设定防止密匍泄密和更改密钥的程序。</p>\n</li>\n</ol>\n<h3 id=\"非对称加密的弊端\"><a href=\"#非对称加密的弊端\" class=\"headerlink\" title=\"非对称加密的弊端\"></a>非对称加密的弊端</h3><h4 id=\"先天不足\"><a href=\"#先天不足\" class=\"headerlink\" title=\"先天不足\"></a>先天不足</h4><p>在公开密钥密码体制中，常用的一种是RSA加密算法。其数学原理是将一个大数分解成两个质数的乘积，加密和解密用的是两个不同的密钥。即使己知明文、密文和加密密钥(公钥)，想要推导出解密密钥(私钥)，在计算上是不可能的。按现在的计算机技术水平，要破解目前采用的1024位RSA密钥，需要上千年的计算时间。公开密钥技术解决了密钥发布的管理问题，商家可以公开其公开密钥，而保留其私有密钥。在2010年以后，均采用了2048位的签名</p>\n<p>身份验证和密钥协商是TLS的基础功能，要求的前提是合法的服务器掌握着对应的私钥。但RSA算法无法确保服务器身份的合法性，因为公钥并不包含服务器的信息</p>\n<h4 id=\"中间人攻击和信息抵赖\"><a href=\"#中间人攻击和信息抵赖\" class=\"headerlink\" title=\"中间人攻击和信息抵赖\"></a>中间人攻击和信息抵赖</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-a020141dd8dbef6f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"中间人攻击和信息抵赖\"></p>\n<ol>\n<li>客户端C和服务器S进行通信，中间节点M截获了二者的通信；</li>\n<li>节点M自己计算产生一对公钥pub_M和私钥pri_M；</li>\n<li>C向S请求公钥时，M把自己的公钥pub_M发给了C；</li>\n<li>C使用公钥 pub_M加密的数据能够被M解密，因为M掌握对应的私钥pri_M，而 C无法根据公钥信息判断服务器的身份，从而 C和 M之间建立了”可信”加密连接；</li>\n<li><p>中间节点 M和服务器S之间再建立合法的连接，因此 C和 S之间通信被M完全掌握，M可以进行信息的窃听、篡改等操作。</p>\n</li>\n<li><p>服务器也可以对自己的发出的信息进行否认，不承认相关信息是自己发出。</p>\n</li>\n</ol>\n<h2 id=\"横空出世的CA验证及证书\"><a href=\"#横空出世的CA验证及证书\" class=\"headerlink\" title=\"横空出世的CA验证及证书\"></a>横空出世的CA验证及证书</h2><p>CA （Certification Authority）负责审核信息，然后对关键信息利用私钥进行”签名”，公开对应的公钥，客户端可以利用公钥验证签名。CA也可以吊销已经签发的证书，具体的流程如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-0bd0b5431c947a71.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"CA验证及证书\"></p>\n<h3 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h3><ol>\n<li>申请证书不需要提供私钥，确保私钥永远只能服务器掌握；</li>\n<li>证书的合法性仍然依赖于非对称加密算法，证书主要是增加了服务器信息以及签名；</li>\n<li>内置 CA 对应的证书称为根证书，颁发者和使用者相同，自己为自己签名，即自签名证书；</li>\n<li>证书=公钥+申请者与颁发者信息+签名；</li>\n<li>公钥放在数字证书中。只要证书是可信的，公钥就是可信的。</li>\n</ol>\n<h2 id=\"如何验证证书的合法性\"><a href=\"#如何验证证书的合法性\" class=\"headerlink\" title=\"如何验证证书的合法性\"></a>如何验证证书的合法性</h2><p>客户端针对服务端用私钥对证书信息签名的校验</p>\n<p>当客户端对服务端发送client_hello之后 服务端会将公开的密钥证书发送给客户端,证书中包含了<strong>公钥</strong>,<strong>各种信息</strong>,<strong>签名</strong>(ca针对证书的摘要信息进行私钥加密)</p>\n<p>当客户端接收到证书后会通过内置ca公钥对签名进行解密已验证证书的合法性.如果已知的ca公钥均无法解密证书签名,则认定当前证书不是被认可的证书(没有颁布本证书或者证书被伪造)</p>\n<h2 id=\"证书链\"><a href=\"#证书链\" class=\"headerlink\" title=\"证书链\"></a>证书链</h2><p><strong>证书链</strong> :服务器证书、中间证书与根证书在一起组合成一条合法的证书链，证书链的验证是自下而上的信任传递的过程。</p>\n<p>如 CA根证书和服务器证书中间增加一级证书机构，即中间证书，证书的产生和验证原理不变，只是增加一层验证，只要最后能够被任何信任的CA根证书验证合法即可。</p>\n<ol>\n<li>服务器证书 server.pem 的签发者为中间证书机构 inter，inter 根据证书 inter.pem 验证 server.pem 确实为自己签发的有效证书；</li>\n<li>中间证书 inter.pem 的签发 CA 为 root，root 根据证书 root.pem 验证 inter.pem 为自己签发的合法证书；</li>\n<li>客户端内置信任 CA 的 root.pem 证书，因此服务器证书 server.pem 的被信任。</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-a2f32046f8d49e23.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"证书链\"></p>\n<h3 id=\"证书链的优势与特点\"><a href=\"#证书链的优势与特点\" class=\"headerlink\" title=\"证书链的优势与特点\"></a>证书链的优势与特点</h3><ul>\n<li>减少根证书结构的管理工作量，可以更高效的进行证书的审核与签发；</li>\n<li>根证书一般内置在客户端中，私钥一般离线存储，一旦私钥泄露，则吊销过程非常困难，无法及时补救；</li>\n<li>中间证书结构的私钥泄露，则可以快速在线吊销，并重新为用户签发新的证书；</li>\n<li>证书链四级以内一般不会对 HTTPS 的性能造成明显影响。</li>\n<li>同一本服务器证书可能存在多条合法的证书链。因为证书的生成和验证基础是公钥和私钥对，如果采用相同的公钥和私钥生成不同的中间证书，针对被签发者而言，该签发机构都是合法的 CA，不同的是中间证书的签发机构不同；</li>\n<li>不同证书链的层级不一定相同，可能二级、三级或四级证书链。中间证书的签发机构可能是根证书机构也可能是另一个中间证书机构，所以证书链层级不一定相同。</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-5b6f0a2d6b27c56e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"证书链的优势与特点\"></p>\n<h2 id=\"证书吊销\"><a href=\"#证书吊销\" class=\"headerlink\" title=\"证书吊销\"></a>证书吊销</h2><p>CA 机构能够签发证书，同样也存在机制宣布以往签发的证书无效。证书使用者不合法，CA 需要废弃该证书；或者私钥丢失，使用者申请让证书无效。主要存在两类机制：CRL与OCSP。</p>\n<h3 id=\"CRL\"><a href=\"#CRL\" class=\"headerlink\" title=\"CRL\"></a>CRL</h3><p>Certificate Revocation List， 证书吊销列表，是一个单独的文件。该文件包含了 CA 已经吊销的证书序列号(唯一)与吊销日期，同时该文件包含生效日期并通知下次更新该文件的时间，当然该文件必然包含 CA 私钥的签名以验证文件的合法性。</p>\n<p>在证书中一般会包含一个 URL 地址 CRL Distribution Point，通知使用者去哪里下载对应的 CRL 以校验证书是否吊销。该吊销方式的优点是不需要频繁更新，但是不能及时吊销证书，因为 CRL 更新时间一般是几天，这期间可能已经造成了极大损失。</p>\n<h3 id=\"OCSP\"><a href=\"#OCSP\" class=\"headerlink\" title=\"OCSP\"></a>OCSP</h3><p>Online Certificate Status Protocol， 证书状态在线查询协议，一个实时查询证书是否吊销的方式。请求者发送证书的信息并请求查询，服务器返回正常、吊销或未知中的任何一个状态。</p>\n<p>证书中一般也会包含一个 OCSP 的 URL 地址，要求查询服务器具有良好的性能。部分 CA 或大部分的自签 CA (根证书)都是未提供 CRL 或 OCSP 地址的，对于吊销证书会是一件非常麻烦的事情。</p>\n<h2 id=\"TLS-SSL握手过程\"><a href=\"#TLS-SSL握手过程\" class=\"headerlink\" title=\"TLS/SSL握手过程\"></a>TLS/SSL握手过程</h2><h3 id=\"X-509\"><a href=\"#X-509\" class=\"headerlink\" title=\"X.509\"></a>X.509</h3><p>X.509 是一个标准，也是一个数字文档，这个文档根据RFC 5280来编码并签发，一份X.509证书是一些标准字段的集合，这些字段包含有关用户或设备及其相应公钥的信息。</p>\n<h3 id=\"编码-也用于扩展名\"><a href=\"#编码-也用于扩展名\" class=\"headerlink\" title=\"编码 (也用于扩展名)\"></a>编码 (也用于扩展名)</h3><ul>\n<li><p>.DER - 扩展名DER用于二进制DER编码的证书，不可读。这些证书也可以用CER或者CRT作为扩展名。 Java和Windows服务器偏向于使用这种编码格式，比较合适的说法是“我有一个DER编码的证书”，而不是“我有一个DER证书”。</p>\n</li>\n<li><p>.PEM - 扩展名PEM用于ASCII(Base64)编码的各种X.509 v3 证书。以“—–BEGIN…”开头， “—–END…”结尾，内容是BASE64编码，Apache和Linux服务器偏向于使用这种编码格式。</p>\n</li>\n</ul>\n<h3 id=\"常用的扩展名\"><a href=\"#常用的扩展名\" class=\"headerlink\" title=\"常用的扩展名\"></a>常用的扩展名</h3><ul>\n<li><p>.KEY - 通常用来存放一个公钥或者私钥，并非X.509证书，编码可能是PEM，也可能是DER.</p>\n</li>\n<li><p>.CSR - 是Certificate Signing Request的缩写，即证书签名请求，这不是证书，是生成证书时要把这个提交给权威的证书颁发机构。其核心内容是一个公钥(当然还附带了一些别的信息)，在生成这个申请的时候，同时也会生成一个私钥，私钥要自己保管好.当权威证书颁发机构颁发的证书过期的时候，你还可以用同样的csr来申请新的证书，key保持不变.</p>\n</li>\n<li><p>.CRT - certificate的缩写，其实还是证书的意思，常见于Linux系统，有可能是PEM或者DER编码，大多数应该是PEM编码.</p>\n</li>\n<li><p>.CER - certificate的缩写，其实还是证书的意思，常见于Windows系统，有可能是PEM或者DER编码，大多数应该是DER编码.</p>\n</li>\n</ul>\n<p>注意：CRT文件和CER文件只有在使用相同编码的时候才可以安全地相互替代。</p>\n<ul>\n<li><p>.PFX/PKCS12 - predecessor of PKCS#12，包含了证书和私钥，对Linux服务器来说，一般来说CRT和KEY是分开存放在不同文件中的，但Windows的IIS则将它们存在一个PFX文件中，并通过提取密码来保护。</p>\n</li>\n<li><p>.JKS/JCEKS - Java密钥库(KeyStore)的两种比较常见类型，包含了证书和私钥，利用Java的“keytool”的工具，可以将PFX转为JKS，当然了，keytool也能直接生成JKS，JCEKS在安全级别上要比JKS强，使用的Provider是JCEKS(推荐)，使用使用TripleDES 保护KeyStore中的私钥；</p>\n</li>\n<li><p>.BKS – Bouncy Castle Provider，包含了证书和私钥， android系统支持的类型，它使用的也是TripleDES来保护密钥库中的私钥，它能够防止证书库被不小心修改（Keystore的keyentry改掉1个bit都会产生错误），BKS能够跟JKS互操作。</p>\n</li>\n</ul>\n<p>注意：通过工具 BKS、JKS、PFX 三种格式的证书均可以相互转换</p>\n<h3 id=\"OpenSSL\"><a href=\"#OpenSSL\" class=\"headerlink\" title=\"OpenSSL\"></a>OpenSSL</h3><p>OpenSSL简单地说，OpenSSL是SSL的一个实现，SSL只是一种规范理论上来说，SSL这种规范是安全的，目前的技术水平很难破解，但SSL的实现就可能有些漏洞，如著名的“心脏出血”。OpenSSL还提供了一大堆强大的工具软件，强大到90%我们都用不到.</p>\n<h3 id=\"证书编码的转换\"><a href=\"#证书编码的转换\" class=\"headerlink\" title=\"证书编码的转换\"></a>证书编码的转换</h3><p>PEM转为DER openssl x509 -in cert.crt -outform der -out cert.der<br>DER转为PEM openssl x509 -in cert.crt -inform der -outform pem -out cert.pem<br>(提示:要转换KEY文件也类似，只不过把x509换成rsa，要转CSR的话，把x509换成req…)</p>\n<h3 id=\"“心脏出血”事件\"><a href=\"#“心脏出血”事件\" class=\"headerlink\" title=\"“心脏出血”事件\"></a>“心脏出血”事件</h3><p>2014年曝光了OpenSSL的源代码中存在一个漏洞，可以让攻击者获得服务器上64K内存中的数据内容</p>\n<p>OpenSSL心脏出血漏洞的大概原理是OpenSSL在2012年引入了心跳(heartbeat)机制来维持TLS链接的长期存在，心跳机制是作为TLS的扩展实现，但在代码中包括TLS(TCP)和DTLS(UDP)都没有做边界的检测，所以导致攻击者可以利用这个漏洞来获得TLS链接对端（可以是服务器，也可以是客户端）内存中的一些数据，至少可以获得16KB每次，理论上讲最大可以获取64KB。</p>\n<p>Alexa排名前百万的网站中有40.9%的网站收到影响</p>\n<h2 id=\"Https主要流程\"><a href=\"#Https主要流程\" class=\"headerlink\" title=\"Https主要流程\"></a>Https主要流程</h2><table>\n<thead>\n<tr>\n<th>client</th>\n<th>server</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1 Client Hello</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>2 Server Hello</td>\n</tr>\n<tr>\n<td></td>\n<td>3 certificate</td>\n</tr>\n<tr>\n<td></td>\n<td>4 server_key_exchange(DH加密需要)</td>\n</tr>\n<tr>\n<td></td>\n<td><em>5 certificate_request(双向验证需要)</em></td>\n</tr>\n<tr>\n<td></td>\n<td>6 server_hello_done</td>\n</tr>\n<tr>\n<td><em>7 certificate(双向验证需要)</em></td>\n<td></td>\n</tr>\n<tr>\n<td>8 client_key_exchange</td>\n<td></td>\n</tr>\n<tr>\n<td><em>9 certifiate_verify(双向验证需要)</em></td>\n<td></td>\n</tr>\n<tr>\n<td>10 change_cypher_spec</td>\n<td></td>\n</tr>\n<tr>\n<td>11 encrypted handshake message</td>\n<td></td>\n</tr>\n<tr>\n<td>—-finished—-</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>12 change_cypher_spec</td>\n</tr>\n<tr>\n<td></td>\n<td>13 encrypted handshake message</td>\n</tr>\n<tr>\n<td></td>\n<td>—-finished—-</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-e1df3220da857387.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Https主要流程\"></p>\n<h3 id=\"Wireshark抓包实例\"><a href=\"#Wireshark抓包实例\" class=\"headerlink\" title=\"Wireshark抓包实例\"></a>Wireshark抓包实例</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-e8e05fc281b9537d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Wireshark抓包实例\"></p>\n<ol>\n<li><p>Client Hello (C-S)<br><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-11-3/93935647.jpg\" alt=\"Client Hello (C-S)\"></p>\n<ol>\n<li>提供最高支持的TLS/SSl版本</li>\n<li>客户端生成随机数random_c</li>\n<li>客户端支持的加密方式</li>\n</ol>\n</li>\n<li><p>Server Hello(S-C)<br><img src=\"http://upload-images.jianshu.io/upload_images/2191286-7563d4329f2aed04.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Server Hello(S-C)\"></p>\n<ol>\n<li>协商后使用的TLS/SSl版本</li>\n<li>服务端生成随机数random_s</li>\n<li>协商后使用的加密方式</li>\n</ol>\n<p>(上图中使用的是RSA和DH混合使用的方式,RSA验证服务器身份,DH算法加密密钥)</p>\n</li>\n<li><p>Certificate (S-C)/可选<br><img src=\"http://upload-images.jianshu.io/upload_images/2191286-4bf6023a012fb63b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Certificate (S-C)/可选\"></p>\n<p>提供服务器的身份证书给客户端鉴定，如果不用公钥证书体系验证身份和交换密钥，该步骤可选，比如在用DH方法交换的时候。</p>\n</li>\n<li><p>Server Key Exchange (S-C)/可选<br><img src=\"http://upload-images.jianshu.io/upload_images/2191286-eb38c906b7320390.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Server Key Exchange/Server Hello Done \"></p>\n<p>密钥交换用到的服务器方的信息，一般是补充上次的 [Certificate]指令的信息，如果才用DH加密算算法需要提供.</p>\n</li>\n<li><p>certificate_request(S-C)/可选<br>服务端要求客户端提供证书,包括客户端可以提供的证书类型及服务器接受的证书distinguished name列表，可以是root CA或者subordinate CA</p>\n</li>\n<li><p>Server Hello Done (S-C)<br><img src=\"http://upload-images.jianshu.io/upload_images/2191286-f8850135af6799bf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Server Key Exchange/Server Hello Done \"><br>结束服务器端的握手过程</p>\n</li>\n<li><p>certificate(C-S)/可选<br>如果服务端需要客户端提供证书,则在此提供客户端的证书</p>\n</li>\n<li><p>Client Key Exchange (C-S)<br><img src=\"http://upload-images.jianshu.io/upload_images/2191286-f70ac54dcd9e6c1e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Client Key Exchange\"><br>客户端会在生成一个随机数pubkey并将它发送到服务端,客户端与服务端均会根据之前生成的random_c,random_s,pubkey三个随机数生成对称加密的session secret</p>\n</li>\n<li><p>certifiate_verify(C-S)/可选<br>发送使用客户端证书给到这一步为止收到和发送的所有握手消息签名结果</p>\n</li>\n<li><p>Change Cipher Spec (C-S)<br><img src=\"http://upload-images.jianshu.io/upload_images/2191286-7f3194d187d94ea9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Change Cipher Spec (C-S)\"><br>通知服务端接下来的数据均采用session secret为key对称加密方式</p>\n</li>\n<li><p>Encrypted Handshake Message(C-S)<br><img src=\"http://upload-images.jianshu.io/upload_images/2191286-ba2ea86dc66b772e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Encrypted Handshake Message(C-S)\"></p>\n<p>客户端随后立刻发送了一个经过加密的消息, 服务端应该可以根据生成的session secret来进行解密,这个加密的消息解密以后是有固定格式的，符合这个格式，或则满足一些字符匹配，才是合法的。</p>\n</li>\n<li><p>Change Cipher Spec(S-C)<br><img src=\"http://upload-images.jianshu.io/upload_images/2191286-8e208fbef4d4f2ce.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Change Cipher Spec(S-C)\"><br>通知客户端接下来的数据均采用被session secret加密的对称加密方式</p>\n</li>\n<li><p>Encrypted Handshake Message(S-C)<br><img src=\"http://upload-images.jianshu.io/upload_images/2191286-d3bb751cd551332e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Change Cipher Spec(S-C)\"><br>服务端随后也立刻发送了一个经过加密的消息,让给客户端进行验证</p>\n</li>\n<li><p>正式的数据交互<br>随后两端都会通过已经协商好的session secret作为key的对称加密方式通过http协议进行数据交互</p>\n</li>\n</ol>\n<h2 id=\"自签名证书的不安全性\"><a href=\"#自签名证书的不安全性\" class=\"headerlink\" title=\"自签名证书的不安全性\"></a>自签名证书的不安全性</h2><ol>\n<li>自签证书最容易被假冒和伪造，而被欺诈网站所利用</li>\n</ol>\n<ul>\n<li>自签证书最容易受到SSL中间人攻击</li>\n<li>以上这两点都是由于自签证书不受浏览器信任，而网站告诉用户要信任而造成</li>\n<li>自签证书支持不安全的SSL通信重新协商机制(Dos及中间人攻击)</li>\n<li>自签证书支持非常不安全的SSL V2.0协议</li>\n<li>自签证书没有可访问的吊销列表</li>\n<li>自签证书使用1024位的非对称密钥对</li>\n<li>自签证书证书有效期太长，短则5年，长则20年、30年</li>\n</ul>\n<h2 id=\"HTTPS性能损耗\"><a href=\"#HTTPS性能损耗\" class=\"headerlink\" title=\"HTTPS性能损耗\"></a>HTTPS性能损耗</h2><h3 id=\"增加延时\"><a href=\"#增加延时\" class=\"headerlink\" title=\"增加延时\"></a>增加延时</h3><p>分析前面的握手过程，一次完整的握手至少需要两端依次来回两次通信，至少增加延时2<em>RTT（Round-Trip Time，往返时间），利用会话缓存从而复用连接，延时也至少1</em> RTT。</p>\n<h3 id=\"消耗较多的CPU资源\"><a href=\"#消耗较多的CPU资源\" class=\"headerlink\" title=\"消耗较多的CPU资源\"></a>消耗较多的CPU资源</h3><p>除数据传输之外，HTTPS通信主要包括对对称加解密、非对称加解密(服务器主要采用私钥解密数据)；压测 TS8 机型的单核 CPU：对称加密算法AES-CBC-256 吞吐量 600Mbps，非对称 RSA 私钥解密200次/s。不考虑其它软件层面的开销，10G 网卡为对称加密需要消耗 CPU 约17核，24核CPU最多接入 HTTPS 连接 4800；<br>静态节点当前10G 网卡的 TS8 机型的 HTTP 单机接入能力约为10w/s，如果将所有的HTTP连接变为HTTPS连接，则明显RSA的解密最先成为瓶颈。因此，RSA的解密能力是当前困扰HTTPS接入的主要难题。</p>\n<h2 id=\"HTTPS接入优化\"><a href=\"#HTTPS接入优化\" class=\"headerlink\" title=\"HTTPS接入优化\"></a>HTTPS接入优化</h2><h3 id=\"CDN接入\"><a href=\"#CDN接入\" class=\"headerlink\" title=\"CDN接入\"></a>CDN接入</h3><p>HTTPS 增加的延时主要是传输延时 RTT，RTT 的特点是节点越近延时越小，CDN 天然离用户最近，因此选择使用 CDN 作为 HTTPS 接入的入口，将能够极大减少接入延时。CDN 节点通过和业务服务器维持长连接、会话复用和链路质量优化等可控方法，极大减少 HTTPS 带来的延时。</p>\n<h3 id=\"会话缓存\"><a href=\"#会话缓存\" class=\"headerlink\" title=\"会话缓存\"></a>会话缓存</h3><p>虽然前文提到 HTTPS 即使采用会话缓存也要至少1*RTT的延时，但是至少延时已经减少为原来的一半，明显的延时优化；同时，基于会话缓存建立的 HTTPS 连接不需要服务器使用RSA私钥解密获取 Pre-master 信息，可以省去CPU 的消耗。如果业务访问连接集中，缓存命中率高，则HTTPS的接入能力讲明显提升。当前TRP平台的缓存命中率高峰时期大于30%，10k/s的接入资源实际可以承载13k/的接入，收效非常可观。</p>\n<h3 id=\"硬件加速\"><a href=\"#硬件加速\" class=\"headerlink\" title=\"硬件加速\"></a>硬件加速</h3><p>为接入服务器安装专用的SSL硬件加速卡，作用类似 GPU，释放 CPU，能够具有更高的 HTTPS 接入能力且不影响业务程序的。测试某硬件加速卡单卡可以提供35k的解密能力，相当于175核 CPU，至少相当于7台24核的服务器，考虑到接入服务器其它程序的开销，一张硬件卡可以实现接近10台服务器的接入能力。</p>\n<h3 id=\"远程解密\"><a href=\"#远程解密\" class=\"headerlink\" title=\"远程解密\"></a>远程解密</h3><p>本地接入消耗过多的 CPU 资源，浪费了网卡和硬盘等资源，考虑将最消耗 CPU 资源的RSA解密计算任务转移到其它服务器，如此则可以充分发挥服务器的接入能力，充分利用带宽与网卡资源。远程解密服务器可以选择 CPU 负载较低的机器充当，实现机器资源复用，也可以是专门优化的高计算性能的服务器。当前也是 CDN 用于大规模HTTPS接入的解决方案之一。</p>\n<h3 id=\"SPDY-HTTP2\"><a href=\"#SPDY-HTTP2\" class=\"headerlink\" title=\"SPDY/HTTP2\"></a>SPDY/HTTP2</h3><p>前面的方法分别从减少传输延时和单机负载的方法提高 HTTPS 接入性能，但是方法都基于不改变 HTTP 协议的基础上提出的优化方法，SPDY/HTTP2 利用 TLS/SSL 带来的优势，通过修改协议的方法来提升 HTTPS 的性能，提高下载速度等。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"http://blog.csdn.net/fw0124/article/details/40875629\" target=\"_blank\" rel=\"noopener\">图解SSL/TLS协议</a></p>\n<p><a href=\"http://blog.jobbole.com/94332/\" target=\"_blank\" rel=\"noopener\">SSL/TLS 握手优化详解\n</a></p>\n<p><a href=\"http://blog.jobbole.com/86660/\" target=\"_blank\" rel=\"noopener\">大型网站的 HTTPS 实践（1）：HTTPS 协议和原理</a></p>\n<p><a href=\"http://www.wosign.com/faq/index_1.htm\" target=\"_blank\" rel=\"noopener\">沃通（Wosign）关于数字证书的技术文档</a></p>\n<p><a href=\"http://blog.csdn.net/hacode/article/details/18982917\" target=\"_blank\" rel=\"noopener\">HTTPS通信建立过程</a></p>"},{"title":"七牛图床图片转移","date":"2018-11-19T13:39:03.000Z","_content":"\n# 七牛图床图片转移\n\n>离职加四处浪的的我终于又开始工作了,还是浪的开心啊\n\n>前两天整理博客的时候发现,存在七牛图床的图片...基本都挂了,想到了前段时间一直接受的七牛提示测试域名到期的事情...当我开始上班整理的时候发现,都挂了...辗转几天,把图片都转移到阿里OSS中.(关于七牛封测试域名的事情,一言难尽,用别人提供的方便,也别给别人带来麻烦不是.)\n\n## 如何转移\n转移的主要问题是当测试域名过期后,当前空间下的图片无法访问也无法预览.如果又一个备案过的域名倒是很容易解决,不过一般谁闲着没事去做公安的域名备案不是.只能通过七牛提供的qshell进行备份和转移.\n\n<!-- more -->\n\n## 转移步骤\n1. 新建储存空间\n\n  在七牛下创建一个新的储存空间,命名为**backup**(当然什么名字都好)\n2. 操作qshell\n\n  下载[qshell](https://developer.qiniu.com/kodo/tools/1302/qshell)(这个是七牛提供的shell工具)\n\n  ```\n  # AccessKey/SecretKey 需要在个人中心->密钥管理中查看,Name为当前需要备份的空间(我也不知道提供这个是个什么逻辑)\n  ./qshell account [<AccessKey> <SecretKey> <Name>]\n  # oldName为需要备份的空间名\n  ./qshell_darwin_x64 listbucket <oldName> -o list.txt\n  #获取所以文件名\n  cat list.txt | awk -F '\\t' '{print $1}' > list_final.txt\n  # 将oldName空间中的文件转移到newName(backup)空间中\n  ./qshell batchcopy <oldName> <newName> -i list_final.txt\n  ```\n\n3. 下载图片\n\n  可以通过qshell中的qdownload方法来下载,不过并不在免费流量下载中,当然如果图片量比较小的话可以直接下载.\n\n  如果图片量过大的话,可以查看[官方免流量配置文档](https://github.com/qiniu/qshell/blob/master/docs/qdownload.md).\n\n## 重新上传\n  因为平时使用的是极简图床,所以最后我使用的是阿里OSS.上传的方法也可以通过终端,或者直接网页中批量上传也可.\n\n## 写在最后\n  虽然平时的东西都比较水,最后还是希望找到点状态,多给自己留点东西.\n","source":"_posts/qiniuImage.md","raw":"---\ntitle: 七牛图床图片转移\ndate: 2018-11-19 21:39:03\ntags: [\"七牛\" , \"image\" , \"图床\", \"阿里OSS\"]\ncategories: \"想啥是啥\"\n---\n\n# 七牛图床图片转移\n\n>离职加四处浪的的我终于又开始工作了,还是浪的开心啊\n\n>前两天整理博客的时候发现,存在七牛图床的图片...基本都挂了,想到了前段时间一直接受的七牛提示测试域名到期的事情...当我开始上班整理的时候发现,都挂了...辗转几天,把图片都转移到阿里OSS中.(关于七牛封测试域名的事情,一言难尽,用别人提供的方便,也别给别人带来麻烦不是.)\n\n## 如何转移\n转移的主要问题是当测试域名过期后,当前空间下的图片无法访问也无法预览.如果又一个备案过的域名倒是很容易解决,不过一般谁闲着没事去做公安的域名备案不是.只能通过七牛提供的qshell进行备份和转移.\n\n<!-- more -->\n\n## 转移步骤\n1. 新建储存空间\n\n  在七牛下创建一个新的储存空间,命名为**backup**(当然什么名字都好)\n2. 操作qshell\n\n  下载[qshell](https://developer.qiniu.com/kodo/tools/1302/qshell)(这个是七牛提供的shell工具)\n\n  ```\n  # AccessKey/SecretKey 需要在个人中心->密钥管理中查看,Name为当前需要备份的空间(我也不知道提供这个是个什么逻辑)\n  ./qshell account [<AccessKey> <SecretKey> <Name>]\n  # oldName为需要备份的空间名\n  ./qshell_darwin_x64 listbucket <oldName> -o list.txt\n  #获取所以文件名\n  cat list.txt | awk -F '\\t' '{print $1}' > list_final.txt\n  # 将oldName空间中的文件转移到newName(backup)空间中\n  ./qshell batchcopy <oldName> <newName> -i list_final.txt\n  ```\n\n3. 下载图片\n\n  可以通过qshell中的qdownload方法来下载,不过并不在免费流量下载中,当然如果图片量比较小的话可以直接下载.\n\n  如果图片量过大的话,可以查看[官方免流量配置文档](https://github.com/qiniu/qshell/blob/master/docs/qdownload.md).\n\n## 重新上传\n  因为平时使用的是极简图床,所以最后我使用的是阿里OSS.上传的方法也可以通过终端,或者直接网页中批量上传也可.\n\n## 写在最后\n  虽然平时的东西都比较水,最后还是希望找到点状态,多给自己留点东西.\n","slug":"qiniuImage","published":1,"updated":"2020-03-13T09:33:05.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5e5000yq7dqy1y94h99","content":"<h1 id=\"七牛图床图片转移\"><a href=\"#七牛图床图片转移\" class=\"headerlink\" title=\"七牛图床图片转移\"></a>七牛图床图片转移</h1><blockquote>\n<p>离职加四处浪的的我终于又开始工作了,还是浪的开心啊</p>\n</blockquote>\n<blockquote>\n<p>前两天整理博客的时候发现,存在七牛图床的图片…基本都挂了,想到了前段时间一直接受的七牛提示测试域名到期的事情…当我开始上班整理的时候发现,都挂了…辗转几天,把图片都转移到阿里OSS中.(关于七牛封测试域名的事情,一言难尽,用别人提供的方便,也别给别人带来麻烦不是.)</p>\n</blockquote>\n<h2 id=\"如何转移\"><a href=\"#如何转移\" class=\"headerlink\" title=\"如何转移\"></a>如何转移</h2><p>转移的主要问题是当测试域名过期后,当前空间下的图片无法访问也无法预览.如果又一个备案过的域名倒是很容易解决,不过一般谁闲着没事去做公安的域名备案不是.只能通过七牛提供的qshell进行备份和转移.</p>\n<a id=\"more\"></a>\n<h2 id=\"转移步骤\"><a href=\"#转移步骤\" class=\"headerlink\" title=\"转移步骤\"></a>转移步骤</h2><ol>\n<li><p>新建储存空间</p>\n<p>在七牛下创建一个新的储存空间,命名为<strong>backup</strong>(当然什么名字都好)</p>\n</li>\n<li><p>操作qshell</p>\n<p>下载<a href=\"https://developer.qiniu.com/kodo/tools/1302/qshell\" target=\"_blank\" rel=\"noopener\">qshell</a>(这个是七牛提供的shell工具)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># AccessKey/SecretKey 需要在个人中心-&gt;密钥管理中查看,Name为当前需要备份的空间(我也不知道提供这个是个什么逻辑)</span><br><span class=\"line\">./qshell account [&lt;AccessKey&gt; &lt;SecretKey&gt; &lt;Name&gt;]</span><br><span class=\"line\"># oldName为需要备份的空间名</span><br><span class=\"line\">./qshell_darwin_x64 listbucket &lt;oldName&gt; -o list.txt</span><br><span class=\"line\">#获取所以文件名</span><br><span class=\"line\">cat list.txt | awk -F &apos;\\t&apos; &apos;&#123;print $1&#125;&apos; &gt; list_final.txt</span><br><span class=\"line\"># 将oldName空间中的文件转移到newName(backup)空间中</span><br><span class=\"line\">./qshell batchcopy &lt;oldName&gt; &lt;newName&gt; -i list_final.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载图片</p>\n<p>可以通过qshell中的qdownload方法来下载,不过并不在免费流量下载中,当然如果图片量比较小的话可以直接下载.</p>\n<p>如果图片量过大的话,可以查看<a href=\"https://github.com/qiniu/qshell/blob/master/docs/qdownload.md\" target=\"_blank\" rel=\"noopener\">官方免流量配置文档</a>.</p>\n</li>\n</ol>\n<h2 id=\"重新上传\"><a href=\"#重新上传\" class=\"headerlink\" title=\"重新上传\"></a>重新上传</h2><p>  因为平时使用的是极简图床,所以最后我使用的是阿里OSS.上传的方法也可以通过终端,或者直接网页中批量上传也可.</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>  虽然平时的东西都比较水,最后还是希望找到点状态,多给自己留点东西.</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"七牛图床图片转移\"><a href=\"#七牛图床图片转移\" class=\"headerlink\" title=\"七牛图床图片转移\"></a>七牛图床图片转移</h1><blockquote>\n<p>离职加四处浪的的我终于又开始工作了,还是浪的开心啊</p>\n</blockquote>\n<blockquote>\n<p>前两天整理博客的时候发现,存在七牛图床的图片…基本都挂了,想到了前段时间一直接受的七牛提示测试域名到期的事情…当我开始上班整理的时候发现,都挂了…辗转几天,把图片都转移到阿里OSS中.(关于七牛封测试域名的事情,一言难尽,用别人提供的方便,也别给别人带来麻烦不是.)</p>\n</blockquote>\n<h2 id=\"如何转移\"><a href=\"#如何转移\" class=\"headerlink\" title=\"如何转移\"></a>如何转移</h2><p>转移的主要问题是当测试域名过期后,当前空间下的图片无法访问也无法预览.如果又一个备案过的域名倒是很容易解决,不过一般谁闲着没事去做公安的域名备案不是.只能通过七牛提供的qshell进行备份和转移.</p>","more":"<h2 id=\"转移步骤\"><a href=\"#转移步骤\" class=\"headerlink\" title=\"转移步骤\"></a>转移步骤</h2><ol>\n<li><p>新建储存空间</p>\n<p>在七牛下创建一个新的储存空间,命名为<strong>backup</strong>(当然什么名字都好)</p>\n</li>\n<li><p>操作qshell</p>\n<p>下载<a href=\"https://developer.qiniu.com/kodo/tools/1302/qshell\" target=\"_blank\" rel=\"noopener\">qshell</a>(这个是七牛提供的shell工具)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># AccessKey/SecretKey 需要在个人中心-&gt;密钥管理中查看,Name为当前需要备份的空间(我也不知道提供这个是个什么逻辑)</span><br><span class=\"line\">./qshell account [&lt;AccessKey&gt; &lt;SecretKey&gt; &lt;Name&gt;]</span><br><span class=\"line\"># oldName为需要备份的空间名</span><br><span class=\"line\">./qshell_darwin_x64 listbucket &lt;oldName&gt; -o list.txt</span><br><span class=\"line\">#获取所以文件名</span><br><span class=\"line\">cat list.txt | awk -F &apos;\\t&apos; &apos;&#123;print $1&#125;&apos; &gt; list_final.txt</span><br><span class=\"line\"># 将oldName空间中的文件转移到newName(backup)空间中</span><br><span class=\"line\">./qshell batchcopy &lt;oldName&gt; &lt;newName&gt; -i list_final.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载图片</p>\n<p>可以通过qshell中的qdownload方法来下载,不过并不在免费流量下载中,当然如果图片量比较小的话可以直接下载.</p>\n<p>如果图片量过大的话,可以查看<a href=\"https://github.com/qiniu/qshell/blob/master/docs/qdownload.md\" target=\"_blank\" rel=\"noopener\">官方免流量配置文档</a>.</p>\n</li>\n</ol>\n<h2 id=\"重新上传\"><a href=\"#重新上传\" class=\"headerlink\" title=\"重新上传\"></a>重新上传</h2><p>  因为平时使用的是极简图床,所以最后我使用的是阿里OSS.上传的方法也可以通过终端,或者直接网页中批量上传也可.</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>  虽然平时的东西都比较水,最后还是希望找到点状态,多给自己留点东西.</p>"},{"title":"shel(一)--基础","date":"2020-03-19T08:51:32.000Z","_content":"\n# shell(一) -- 基础\n\n## 什么是shell\n先看下官方的定义\n\n> Unix shell：一种壳层与命令行界面，是Unix操作系统下传统的用户和计算机的交互界面。普通意义上的shell就是可以接受用户输入命令的程序。它之所以被称作shell是因为它隐藏了操作系统低层的细节。Unix操作系统下的shell既是用户交互的界面，也是控制系统的脚本语言。\n\n翻译过来就是说,Shell 是一个应用程序,它连接了用户和 Linux 内核，让用户能够更加高效、安全、低成本地使用 Linux 内核.\n\nshell可以理解为一个特殊的应用程序\n\nshell本身是由c语言编写而成的,shell实际上是一直解释性语言\n\n  <!-- more -->\n\n## shell和bash的区别\n这两个是包含的关系,bash是shell的一种,其中linux默认的shell就是bash.\n\nbash可以说是shell的脚本解释器\n\n\n## 第一个shell脚本\n\n``` shell\n#!/usr/bin/env bash\n\n#像前面所说的,bash是shell的脚本解释器. \n#这种写法可以最大程度的避免夸平台下脚本无法运行的问题\n#后面相关文件均使用此默认配置\n\necho \"Hello World\"\n\n# echo是shell中的输出方法\n```\n\n至此 一个最简单的shell脚本就完成了,我么可以在终端中运行查看效果\n\n![1](https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f393d980?w=726&h=115&f=png&s=88801)\n(在初次运行中可能出现permission denied的情况, 对应的增加权限即可)\n\n## 变量\n```shell\nname='clwater'\n\necho $name\necho \"$name\"\necho \"${name}!\"\n\necho '$name'\n```\n\n需要注意的的是在对变量赋值的时候,'='前后都不可以有空格,不然是无效的\n\n下面展示了三种常见的变量使用的情况, 变量在使用的时候都需要在前面加入'$'符号来调用变量.\n\n* echo $name\n最基础的变量使用\n* \"\\$name\" 和 \"\\${name}!\"\n针对在使用时需要拼接的情况,可以通过'{}'符号来定位变量名的范围\n* \"\\$name\" 和 '\\$name'\n在\"\"内的\\$变量的格式是可以正常使用的,不过在''中的内容会保持其原有的内容输出\n\n![2](https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f46b96f3?w=665&h=81&f=png&s=38701)\n\n## 函数简介\n```shell\nget_name() {\n  echo \"clwater\"\n}\n\nget_name\n\necho \"You are $(get_name)\"\necho \"You are `get_name`\"\n\nresult=$(get_name)\necho \"result: $result\"\n```\n\n输出结果:\n\n![3](https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f4b05a84?w=118&h=65&f=png&s=14640)\n\n我们可以通过\n```shell\nfunctionName() {\n    ...\n}\n```\n这样的形式来定义一个函数(如何穿参参考后面函数部分),调用的时候也是否的简洁,直接调用相关的函数名即可,除此之外可以通过以下方法获取此函数的返回值\n\n```shell\n$(functionName)\n`functionName`\n```\n\n故此我们可以把返回值存起来以便后面的使用\n\nshell的函数只能返回一个string类型的字符串,shell中没有我们平常使用的return关键字,使用的是echo输出的内容作为其函数的返回值,具体相关的在后面的函数中详细的介绍\n\n## 状态码\n在shell中,我们常常需要知道上一次的命令执行是否成功来决定下一步怎样执行\n\n```shell\nresult=$(cd ~/ 2>&1)\necho \"cd ~/ status $?\"  --> 0\nresult=$(cd ~/errorPath 2>&1)\necho \"cd ~/errorPath status $?\" --> 1\n```\n\n2>&1的作用是一直重定向的功能,可以把错误输出定向为标准输出(这里的作用是 把cd操作错误的情况定位为返回值的输出)\n\n$?的作用是获取上一个命令的状态码,当状态码为0的时候,说明上次的指令是成功执行的,非0的情况说明上次的指令没有成功执行\n\n\n## 条件执行 &&和||\n```shell\ncd ~ && pwd\ncd ~/errorPath || echo \"cd error\"\n```\n![4](https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f5578595?w=519&h=57&f=png&s=31121)\n\n&&是在前一个命令执行成功(状态码为0)的情况下执行后面的命令\n\n||是在前一个命令执行失败的(状态码非0)的情况下执行后面的命令\n\n(这里没有使用2>&1之类的重定向,所以报错信息会被输出到控制台)\n\n## 条件控制\n\n```shell\nname=\"clwater\"\nif [[ name == \"clwater\" ]]; then\n  echo \"Hi, $clwater\"\nelse\n  echo \"Hi, new friends\"\nfi\n```\n\n可以通过\n```shell\nif [[ 判断条件 ]]; then\n    ...\nfi\n```\n的形式来实现一个if判断(详情可以参考下后面的条件控制相关内容)\n\n## 花括号展开\n```shell\necho {1..5}\necho {A,B}\necho {1,3}{A..C}\necho {{1..3},{A,C}}\n\nname='clwater'\necho {a,b}$name\n```\n\n![5](https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f5359496?w=152&h=89&f=png&s=19320)\n\n\n在{}中设置其展开的内容,其中','为选择,'..'为范围,花括号展开在整个shell中具有最高的优先级\n\n\n## 严格模式\n\n``` shell\nset -euo pipefail\nIFS=$'\\n\\t'\n\nerror1\nerror2\nerror3\n```\n![6](https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f564fbc3?w=315&h=86&f=png&s=35598)\n\n我们可以看到,在使用严格模式的情况下,如果命令出现任意错误,都会报错并停止执行,而不使用严格模式的情况下,即使命令出现错误了  也继续执行下去\n\n## 相关代码\n相关代码可以访问[这里](https://github.com/clwater/awe-shell/blob/master/code/1.sh)","source":"_posts/shell(一)基础.md","raw":"---\ntitle: shel(一)--基础\ndate: 2020-03-19 16:51:32\ntags:\n---\n\n# shell(一) -- 基础\n\n## 什么是shell\n先看下官方的定义\n\n> Unix shell：一种壳层与命令行界面，是Unix操作系统下传统的用户和计算机的交互界面。普通意义上的shell就是可以接受用户输入命令的程序。它之所以被称作shell是因为它隐藏了操作系统低层的细节。Unix操作系统下的shell既是用户交互的界面，也是控制系统的脚本语言。\n\n翻译过来就是说,Shell 是一个应用程序,它连接了用户和 Linux 内核，让用户能够更加高效、安全、低成本地使用 Linux 内核.\n\nshell可以理解为一个特殊的应用程序\n\nshell本身是由c语言编写而成的,shell实际上是一直解释性语言\n\n  <!-- more -->\n\n## shell和bash的区别\n这两个是包含的关系,bash是shell的一种,其中linux默认的shell就是bash.\n\nbash可以说是shell的脚本解释器\n\n\n## 第一个shell脚本\n\n``` shell\n#!/usr/bin/env bash\n\n#像前面所说的,bash是shell的脚本解释器. \n#这种写法可以最大程度的避免夸平台下脚本无法运行的问题\n#后面相关文件均使用此默认配置\n\necho \"Hello World\"\n\n# echo是shell中的输出方法\n```\n\n至此 一个最简单的shell脚本就完成了,我么可以在终端中运行查看效果\n\n![1](https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f393d980?w=726&h=115&f=png&s=88801)\n(在初次运行中可能出现permission denied的情况, 对应的增加权限即可)\n\n## 变量\n```shell\nname='clwater'\n\necho $name\necho \"$name\"\necho \"${name}!\"\n\necho '$name'\n```\n\n需要注意的的是在对变量赋值的时候,'='前后都不可以有空格,不然是无效的\n\n下面展示了三种常见的变量使用的情况, 变量在使用的时候都需要在前面加入'$'符号来调用变量.\n\n* echo $name\n最基础的变量使用\n* \"\\$name\" 和 \"\\${name}!\"\n针对在使用时需要拼接的情况,可以通过'{}'符号来定位变量名的范围\n* \"\\$name\" 和 '\\$name'\n在\"\"内的\\$变量的格式是可以正常使用的,不过在''中的内容会保持其原有的内容输出\n\n![2](https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f46b96f3?w=665&h=81&f=png&s=38701)\n\n## 函数简介\n```shell\nget_name() {\n  echo \"clwater\"\n}\n\nget_name\n\necho \"You are $(get_name)\"\necho \"You are `get_name`\"\n\nresult=$(get_name)\necho \"result: $result\"\n```\n\n输出结果:\n\n![3](https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f4b05a84?w=118&h=65&f=png&s=14640)\n\n我们可以通过\n```shell\nfunctionName() {\n    ...\n}\n```\n这样的形式来定义一个函数(如何穿参参考后面函数部分),调用的时候也是否的简洁,直接调用相关的函数名即可,除此之外可以通过以下方法获取此函数的返回值\n\n```shell\n$(functionName)\n`functionName`\n```\n\n故此我们可以把返回值存起来以便后面的使用\n\nshell的函数只能返回一个string类型的字符串,shell中没有我们平常使用的return关键字,使用的是echo输出的内容作为其函数的返回值,具体相关的在后面的函数中详细的介绍\n\n## 状态码\n在shell中,我们常常需要知道上一次的命令执行是否成功来决定下一步怎样执行\n\n```shell\nresult=$(cd ~/ 2>&1)\necho \"cd ~/ status $?\"  --> 0\nresult=$(cd ~/errorPath 2>&1)\necho \"cd ~/errorPath status $?\" --> 1\n```\n\n2>&1的作用是一直重定向的功能,可以把错误输出定向为标准输出(这里的作用是 把cd操作错误的情况定位为返回值的输出)\n\n$?的作用是获取上一个命令的状态码,当状态码为0的时候,说明上次的指令是成功执行的,非0的情况说明上次的指令没有成功执行\n\n\n## 条件执行 &&和||\n```shell\ncd ~ && pwd\ncd ~/errorPath || echo \"cd error\"\n```\n![4](https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f5578595?w=519&h=57&f=png&s=31121)\n\n&&是在前一个命令执行成功(状态码为0)的情况下执行后面的命令\n\n||是在前一个命令执行失败的(状态码非0)的情况下执行后面的命令\n\n(这里没有使用2>&1之类的重定向,所以报错信息会被输出到控制台)\n\n## 条件控制\n\n```shell\nname=\"clwater\"\nif [[ name == \"clwater\" ]]; then\n  echo \"Hi, $clwater\"\nelse\n  echo \"Hi, new friends\"\nfi\n```\n\n可以通过\n```shell\nif [[ 判断条件 ]]; then\n    ...\nfi\n```\n的形式来实现一个if判断(详情可以参考下后面的条件控制相关内容)\n\n## 花括号展开\n```shell\necho {1..5}\necho {A,B}\necho {1,3}{A..C}\necho {{1..3},{A,C}}\n\nname='clwater'\necho {a,b}$name\n```\n\n![5](https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f5359496?w=152&h=89&f=png&s=19320)\n\n\n在{}中设置其展开的内容,其中','为选择,'..'为范围,花括号展开在整个shell中具有最高的优先级\n\n\n## 严格模式\n\n``` shell\nset -euo pipefail\nIFS=$'\\n\\t'\n\nerror1\nerror2\nerror3\n```\n![6](https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f564fbc3?w=315&h=86&f=png&s=35598)\n\n我们可以看到,在使用严格模式的情况下,如果命令出现任意错误,都会报错并停止执行,而不使用严格模式的情况下,即使命令出现错误了  也继续执行下去\n\n## 相关代码\n相关代码可以访问[这里](https://github.com/clwater/awe-shell/blob/master/code/1.sh)","slug":"shell(一)基础","published":1,"updated":"2020-03-19T08:55:26.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5e5000zq7dq3q7sy3c3","content":"<h1 id=\"shell-一-–-基础\"><a href=\"#shell-一-–-基础\" class=\"headerlink\" title=\"shell(一) – 基础\"></a>shell(一) – 基础</h1><h2 id=\"什么是shell\"><a href=\"#什么是shell\" class=\"headerlink\" title=\"什么是shell\"></a>什么是shell</h2><p>先看下官方的定义</p>\n<blockquote>\n<p>Unix shell：一种壳层与命令行界面，是Unix操作系统下传统的用户和计算机的交互界面。普通意义上的shell就是可以接受用户输入命令的程序。它之所以被称作shell是因为它隐藏了操作系统低层的细节。Unix操作系统下的shell既是用户交互的界面，也是控制系统的脚本语言。</p>\n</blockquote>\n<p>翻译过来就是说,Shell 是一个应用程序,它连接了用户和 Linux 内核，让用户能够更加高效、安全、低成本地使用 Linux 内核.</p>\n<p>shell可以理解为一个特殊的应用程序</p>\n<p>shell本身是由c语言编写而成的,shell实际上是一直解释性语言</p>\n  <a id=\"more\"></a>\n<h2 id=\"shell和bash的区别\"><a href=\"#shell和bash的区别\" class=\"headerlink\" title=\"shell和bash的区别\"></a>shell和bash的区别</h2><p>这两个是包含的关系,bash是shell的一种,其中linux默认的shell就是bash.</p>\n<p>bash可以说是shell的脚本解释器</p>\n<h2 id=\"第一个shell脚本\"><a href=\"#第一个shell脚本\" class=\"headerlink\" title=\"第一个shell脚本\"></a>第一个shell脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/usr/bin/env bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>像前面所说的,bash是shell的脚本解释器. </span><br><span class=\"line\"><span class=\"meta\">#</span>这种写法可以最大程度的避免夸平台下脚本无法运行的问题</span><br><span class=\"line\"><span class=\"meta\">#</span>后面相关文件均使用此默认配置</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"Hello World\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> echo是shell中的输出方法</span><br></pre></td></tr></table></figure>\n<p>至此 一个最简单的shell脚本就完成了,我么可以在终端中运行查看效果</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f393d980?w=726&amp;h=115&amp;f=png&amp;s=88801\" alt=\"1\"><br>(在初次运行中可能出现permission denied的情况, 对应的增加权限即可)</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name='clwater'</span><br><span class=\"line\"></span><br><span class=\"line\">echo $name</span><br><span class=\"line\">echo \"$name\"</span><br><span class=\"line\">echo \"$&#123;name&#125;!\"</span><br><span class=\"line\"></span><br><span class=\"line\">echo '$name'</span><br></pre></td></tr></table></figure>\n<p>需要注意的的是在对变量赋值的时候,’=’前后都不可以有空格,不然是无效的</p>\n<p>下面展示了三种常见的变量使用的情况, 变量在使用的时候都需要在前面加入’$’符号来调用变量.</p>\n<ul>\n<li>echo $name<br>最基础的变量使用</li>\n<li>“\\$name” 和 “\\${name}!”<br>针对在使用时需要拼接的情况,可以通过’{}’符号来定位变量名的范围</li>\n<li>“\\$name” 和 ‘\\$name’<br>在””内的\\$变量的格式是可以正常使用的,不过在’’中的内容会保持其原有的内容输出</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f46b96f3?w=665&amp;h=81&amp;f=png&amp;s=38701\" alt=\"2\"></p>\n<h2 id=\"函数简介\"><a href=\"#函数简介\" class=\"headerlink\" title=\"函数简介\"></a>函数简介</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get_name() &#123;</span><br><span class=\"line\">  echo \"clwater\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">get_name</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"You are $(get_name)\"</span><br><span class=\"line\">echo \"You are `get_name`\"</span><br><span class=\"line\"></span><br><span class=\"line\">result=$(get_name)</span><br><span class=\"line\">echo \"result: $result\"</span><br></pre></td></tr></table></figure>\n<p>输出结果:</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f4b05a84?w=118&amp;h=65&amp;f=png&amp;s=14640\" alt=\"3\"></p>\n<p>我们可以通过<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">functionName() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样的形式来定义一个函数(如何穿参参考后面函数部分),调用的时候也是否的简洁,直接调用相关的函数名即可,除此之外可以通过以下方法获取此函数的返回值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span>(functionName)</span><br><span class=\"line\">`functionName`</span><br></pre></td></tr></table></figure>\n<p>故此我们可以把返回值存起来以便后面的使用</p>\n<p>shell的函数只能返回一个string类型的字符串,shell中没有我们平常使用的return关键字,使用的是echo输出的内容作为其函数的返回值,具体相关的在后面的函数中详细的介绍</p>\n<h2 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h2><p>在shell中,我们常常需要知道上一次的命令执行是否成功来决定下一步怎样执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result=$(cd ~/ 2&gt;&amp;1)</span><br><span class=\"line\">echo \"cd ~/ status $?\"  --&gt; 0</span><br><span class=\"line\">result=$(cd ~/errorPath 2&gt;&amp;1)</span><br><span class=\"line\">echo \"cd ~/errorPath status $?\" --&gt; 1</span><br></pre></td></tr></table></figure>\n<p>2&gt;&amp;1的作用是一直重定向的功能,可以把错误输出定向为标准输出(这里的作用是 把cd操作错误的情况定位为返回值的输出)</p>\n<p>$?的作用是获取上一个命令的状态码,当状态码为0的时候,说明上次的指令是成功执行的,非0的情况说明上次的指令没有成功执行</p>\n<h2 id=\"条件执行-amp-amp-和\"><a href=\"#条件执行-amp-amp-和\" class=\"headerlink\" title=\"条件执行 &amp;&amp;和||\"></a>条件执行 &amp;&amp;和||</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~ &amp;&amp; pwd</span><br><span class=\"line\">cd ~/errorPath || echo \"cd error\"</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f5578595?w=519&amp;h=57&amp;f=png&amp;s=31121\" alt=\"4\"></p>\n<p>&amp;&amp;是在前一个命令执行成功(状态码为0)的情况下执行后面的命令</p>\n<p>||是在前一个命令执行失败的(状态码非0)的情况下执行后面的命令</p>\n<p>(这里没有使用2&gt;&amp;1之类的重定向,所以报错信息会被输出到控制台)</p>\n<h2 id=\"条件控制\"><a href=\"#条件控制\" class=\"headerlink\" title=\"条件控制\"></a>条件控制</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=\"clwater\"</span><br><span class=\"line\">if [[ name == \"clwater\" ]]; then</span><br><span class=\"line\">  echo \"Hi, $clwater\"</span><br><span class=\"line\">else</span><br><span class=\"line\">  echo \"Hi, new friends\"</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>可以通过<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [[ 判断条件 ]]; then</span><br><span class=\"line\">    ...</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure></p>\n<p>的形式来实现一个if判断(详情可以参考下后面的条件控制相关内容)</p>\n<h2 id=\"花括号展开\"><a href=\"#花括号展开\" class=\"headerlink\" title=\"花括号展开\"></a>花括号展开</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#123;1..5&#125;</span><br><span class=\"line\">echo &#123;A,B&#125;</span><br><span class=\"line\">echo &#123;1,3&#125;&#123;A..C&#125;</span><br><span class=\"line\">echo &#123;&#123;1..3&#125;,&#123;A,C&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">name='clwater'</span><br><span class=\"line\">echo &#123;a,b&#125;$name</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f5359496?w=152&amp;h=89&amp;f=png&amp;s=19320\" alt=\"5\"></p>\n<p>在{}中设置其展开的内容,其中’,’为选择,’..’为范围,花括号展开在整个shell中具有最高的优先级</p>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set -euo pipefail</span><br><span class=\"line\">IFS=$'\\n\\t'</span><br><span class=\"line\"></span><br><span class=\"line\">error1</span><br><span class=\"line\">error2</span><br><span class=\"line\">error3</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f564fbc3?w=315&amp;h=86&amp;f=png&amp;s=35598\" alt=\"6\"></p>\n<p>我们可以看到,在使用严格模式的情况下,如果命令出现任意错误,都会报错并停止执行,而不使用严格模式的情况下,即使命令出现错误了  也继续执行下去</p>\n<h2 id=\"相关代码\"><a href=\"#相关代码\" class=\"headerlink\" title=\"相关代码\"></a>相关代码</h2><p>相关代码可以访问<a href=\"https://github.com/clwater/awe-shell/blob/master/code/1.sh\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"shell-一-–-基础\"><a href=\"#shell-一-–-基础\" class=\"headerlink\" title=\"shell(一) – 基础\"></a>shell(一) – 基础</h1><h2 id=\"什么是shell\"><a href=\"#什么是shell\" class=\"headerlink\" title=\"什么是shell\"></a>什么是shell</h2><p>先看下官方的定义</p>\n<blockquote>\n<p>Unix shell：一种壳层与命令行界面，是Unix操作系统下传统的用户和计算机的交互界面。普通意义上的shell就是可以接受用户输入命令的程序。它之所以被称作shell是因为它隐藏了操作系统低层的细节。Unix操作系统下的shell既是用户交互的界面，也是控制系统的脚本语言。</p>\n</blockquote>\n<p>翻译过来就是说,Shell 是一个应用程序,它连接了用户和 Linux 内核，让用户能够更加高效、安全、低成本地使用 Linux 内核.</p>\n<p>shell可以理解为一个特殊的应用程序</p>\n<p>shell本身是由c语言编写而成的,shell实际上是一直解释性语言</p>","more":"<h2 id=\"shell和bash的区别\"><a href=\"#shell和bash的区别\" class=\"headerlink\" title=\"shell和bash的区别\"></a>shell和bash的区别</h2><p>这两个是包含的关系,bash是shell的一种,其中linux默认的shell就是bash.</p>\n<p>bash可以说是shell的脚本解释器</p>\n<h2 id=\"第一个shell脚本\"><a href=\"#第一个shell脚本\" class=\"headerlink\" title=\"第一个shell脚本\"></a>第一个shell脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/usr/bin/env bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>像前面所说的,bash是shell的脚本解释器. </span><br><span class=\"line\"><span class=\"meta\">#</span>这种写法可以最大程度的避免夸平台下脚本无法运行的问题</span><br><span class=\"line\"><span class=\"meta\">#</span>后面相关文件均使用此默认配置</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"Hello World\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> echo是shell中的输出方法</span><br></pre></td></tr></table></figure>\n<p>至此 一个最简单的shell脚本就完成了,我么可以在终端中运行查看效果</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f393d980?w=726&amp;h=115&amp;f=png&amp;s=88801\" alt=\"1\"><br>(在初次运行中可能出现permission denied的情况, 对应的增加权限即可)</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name='clwater'</span><br><span class=\"line\"></span><br><span class=\"line\">echo $name</span><br><span class=\"line\">echo \"$name\"</span><br><span class=\"line\">echo \"$&#123;name&#125;!\"</span><br><span class=\"line\"></span><br><span class=\"line\">echo '$name'</span><br></pre></td></tr></table></figure>\n<p>需要注意的的是在对变量赋值的时候,’=’前后都不可以有空格,不然是无效的</p>\n<p>下面展示了三种常见的变量使用的情况, 变量在使用的时候都需要在前面加入’$’符号来调用变量.</p>\n<ul>\n<li>echo $name<br>最基础的变量使用</li>\n<li>“\\$name” 和 “\\${name}!”<br>针对在使用时需要拼接的情况,可以通过’{}’符号来定位变量名的范围</li>\n<li>“\\$name” 和 ‘\\$name’<br>在””内的\\$变量的格式是可以正常使用的,不过在’’中的内容会保持其原有的内容输出</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f46b96f3?w=665&amp;h=81&amp;f=png&amp;s=38701\" alt=\"2\"></p>\n<h2 id=\"函数简介\"><a href=\"#函数简介\" class=\"headerlink\" title=\"函数简介\"></a>函数简介</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get_name() &#123;</span><br><span class=\"line\">  echo \"clwater\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">get_name</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"You are $(get_name)\"</span><br><span class=\"line\">echo \"You are `get_name`\"</span><br><span class=\"line\"></span><br><span class=\"line\">result=$(get_name)</span><br><span class=\"line\">echo \"result: $result\"</span><br></pre></td></tr></table></figure>\n<p>输出结果:</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f4b05a84?w=118&amp;h=65&amp;f=png&amp;s=14640\" alt=\"3\"></p>\n<p>我们可以通过<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">functionName() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样的形式来定义一个函数(如何穿参参考后面函数部分),调用的时候也是否的简洁,直接调用相关的函数名即可,除此之外可以通过以下方法获取此函数的返回值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span>(functionName)</span><br><span class=\"line\">`functionName`</span><br></pre></td></tr></table></figure>\n<p>故此我们可以把返回值存起来以便后面的使用</p>\n<p>shell的函数只能返回一个string类型的字符串,shell中没有我们平常使用的return关键字,使用的是echo输出的内容作为其函数的返回值,具体相关的在后面的函数中详细的介绍</p>\n<h2 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h2><p>在shell中,我们常常需要知道上一次的命令执行是否成功来决定下一步怎样执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result=$(cd ~/ 2&gt;&amp;1)</span><br><span class=\"line\">echo \"cd ~/ status $?\"  --&gt; 0</span><br><span class=\"line\">result=$(cd ~/errorPath 2&gt;&amp;1)</span><br><span class=\"line\">echo \"cd ~/errorPath status $?\" --&gt; 1</span><br></pre></td></tr></table></figure>\n<p>2&gt;&amp;1的作用是一直重定向的功能,可以把错误输出定向为标准输出(这里的作用是 把cd操作错误的情况定位为返回值的输出)</p>\n<p>$?的作用是获取上一个命令的状态码,当状态码为0的时候,说明上次的指令是成功执行的,非0的情况说明上次的指令没有成功执行</p>\n<h2 id=\"条件执行-amp-amp-和\"><a href=\"#条件执行-amp-amp-和\" class=\"headerlink\" title=\"条件执行 &amp;&amp;和||\"></a>条件执行 &amp;&amp;和||</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~ &amp;&amp; pwd</span><br><span class=\"line\">cd ~/errorPath || echo \"cd error\"</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f5578595?w=519&amp;h=57&amp;f=png&amp;s=31121\" alt=\"4\"></p>\n<p>&amp;&amp;是在前一个命令执行成功(状态码为0)的情况下执行后面的命令</p>\n<p>||是在前一个命令执行失败的(状态码非0)的情况下执行后面的命令</p>\n<p>(这里没有使用2&gt;&amp;1之类的重定向,所以报错信息会被输出到控制台)</p>\n<h2 id=\"条件控制\"><a href=\"#条件控制\" class=\"headerlink\" title=\"条件控制\"></a>条件控制</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=\"clwater\"</span><br><span class=\"line\">if [[ name == \"clwater\" ]]; then</span><br><span class=\"line\">  echo \"Hi, $clwater\"</span><br><span class=\"line\">else</span><br><span class=\"line\">  echo \"Hi, new friends\"</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>可以通过<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [[ 判断条件 ]]; then</span><br><span class=\"line\">    ...</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure></p>\n<p>的形式来实现一个if判断(详情可以参考下后面的条件控制相关内容)</p>\n<h2 id=\"花括号展开\"><a href=\"#花括号展开\" class=\"headerlink\" title=\"花括号展开\"></a>花括号展开</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#123;1..5&#125;</span><br><span class=\"line\">echo &#123;A,B&#125;</span><br><span class=\"line\">echo &#123;1,3&#125;&#123;A..C&#125;</span><br><span class=\"line\">echo &#123;&#123;1..3&#125;,&#123;A,C&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">name='clwater'</span><br><span class=\"line\">echo &#123;a,b&#125;$name</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f5359496?w=152&amp;h=89&amp;f=png&amp;s=19320\" alt=\"5\"></p>\n<p>在{}中设置其展开的内容,其中’,’为选择,’..’为范围,花括号展开在整个shell中具有最高的优先级</p>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set -euo pipefail</span><br><span class=\"line\">IFS=$'\\n\\t'</span><br><span class=\"line\"></span><br><span class=\"line\">error1</span><br><span class=\"line\">error2</span><br><span class=\"line\">error3</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/8/13/16c8b797f564fbc3?w=315&amp;h=86&amp;f=png&amp;s=35598\" alt=\"6\"></p>\n<p>我们可以看到,在使用严格模式的情况下,如果命令出现任意错误,都会报错并停止执行,而不使用严格模式的情况下,即使命令出现错误了  也继续执行下去</p>\n<h2 id=\"相关代码\"><a href=\"#相关代码\" class=\"headerlink\" title=\"相关代码\"></a>相关代码</h2><p>相关代码可以访问<a href=\"https://github.com/clwater/awe-shell/blob/master/code/1.sh\" target=\"_blank\" rel=\"noopener\">这里</a></p>"},{"title":"Android自定义View之元素按钮","date":"2018-01-16T09:11:20.000Z","_content":"\n#Android自定义View之元素按钮\n\n\n>之前在dribbble看到的三个元素的按钮,参考了设计的创意,添加了自己定义的动画效果来实现.先看效果\n\n![效果图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/91123430.jpg)\n\n<!-- more -->\n\n\n分别是水火电三个元素的按钮实现.其中电的实现最简单,水的次之,火的实际还并不满意,没有火焰扰动的感觉,尝试过几次但是效果都不理想,最后只保留了自下向上的扇形遮罩.如果有好的效果再优化实现.\n\n## 闪电篇\n### 设计过程\n\n通过闪电的位置将整体划分成七个部分(七个部分的主要原因是最初设计了一个中部放大的透镜效果,但是没能实现),从右上角进入,在中心点附近运动,直到停在中心点.闪电本身可以看做一个中心对称的图形,整理就简化成了现将canvas旋转一定角度,然后绘制中心对称的闪电形状,最后在x轴上运动就可以了.\n\n![黄线是旋转后的坐标](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/47003102.jpg)\n\n黄线是旋转后的坐标,可以看出简化后实现起来很简单.\n\n### 代码实现\n* 背景部分\n```java\n//绘制闪电背景\nprivate fun  drawBaseButton(canvas: Canvas , index: Float) {\n    //设置画笔\n    val paint = Paint()\n\n    //添加闪电移动到指定位置时的背景颜色设置\n    if ((index <= 0.45F && index >= 0.35F) || (index >= 0.65F && index <= 0.75F)) {\n        paint.color = Color.parseColor(\"#ACADAC\")\n    }else{\n        paint.color = Color.parseColor(\"#595A59\")\n    }\n\n    paint.style = Paint.Style.FILL\n\n    //绘制闪电背景\n    canvas.drawArc(RectF(-baseR, -baseR, baseR, baseR), 0F , 360F,true , paint)\n\n}\n```\n\n* 闪电部分\n```java\nprivate fun  drawLighting(canvas: Canvas , index: Float) {\n    val baseR = baseR * coefficient\n    var index = index\n    var changeR = 0F\n\n    //将整个闪电的运动拆成七个部分\n    if (index <= 0.25){\n        changeR  = this.baseR + baseR\n        changeR = (changeR * (1 - index / 0.25)).toFloat()\n    }else if (index <= 0.4){\n        index = index - 0.25F\n        changeR  = this.baseR\n        changeR = -(changeR * (index / (0.4F - 0.25F)))\n    }else if (index <= 0.6F){\n        index = index - 0.4F\n        changeR = this.baseR\n        changeR = -changeR *  (1 - index / 0.2F)\n    }else if (index <= 0.7F){\n        index = index - 0.6F\n        changeR = baseR\n        changeR = changeR * index / 0.1F\n    }else if (index <= 0.8F){\n        index = index - 0.7F\n        changeR = baseR\n        changeR = baseR - changeR * index / 0.1F\n    }else if (index <= 0.9F){\n        index = index - 0.8F\n        changeR = baseR\n        changeR = -changeR * index / 0.1F\n    }else if (index <= 1F){\n        index = index - 0.9F\n        changeR = baseR\n        changeR = -changeR + changeR * (index / 0.1F)\n    }\n\n\n    //设置画笔\n    val path = Path()\n    val paint = Paint()\n    paint.strokeWidth = 5F\n    paint.style = Paint.Style.FILL\n    paint.color = viewBackgroundColor\n\n    val points :MutableList<Point> = ArrayList()\n    //设置绘制闪电的路径点\n    points.add(pointFactory(60 , baseR))\n    points.add(pointFactory(-45 , baseR / 2F))\n    points.add(pointFactory(-45 - 90 , baseR / 5F))\n    points.add(pointFactory(-30 - 90 , baseR))\n    points.add(pointFactory(45 + 90 , baseR / 2F))\n    points.add(pointFactory(45 , baseR / 5F))\n    points.add(pointFactory(60 , baseR))\n\n\n    //设置闪电的偏移量(模拟运动情况)\n    //原本还想实现一个中心放大的透镜效果,但是效果很僵硬,只能移除了\n    for (i in 0..points.size - 1){\n        points.set(i , Point(points[i].x + changeR , points[i].y))\n    }\n\n\n    path.moveTo(points[0].x , points[0].y)\n\n    for (index in 1..points.size - 1){\n        path.lineTo(points[index].x , points[index].y)\n    }\n\n    canvas.drawPath(path , paint)\n\n    //闪电绘制辅助坐标系\n//        val paint2 = Paint()\n//        paint2.strokeWidth = 5F\n//        paint2.color = Color.YELLOW\n//        canvas.drawLine(1000F , 0F ,-1000F , 0F , paint2)\n//        canvas.drawLine( 0F ,-1000F , 0F , 1000F , paint2)\n}\n```\n\n闪电的实现还是很简单的,因为不涉及到图形的变化,只有一个简单的位移效果\n\n## 霜(水)之哀伤篇\n### 设计思路\n水滴的实现相对对于闪电来说麻烦一些,一是水滴本身不是很好绘制,又因为水滴在下落的过程中存在变化,最后选择通过贝塞尔曲线实现.二是水滴和背景之间的交互,在水滴未完全下落到背景中的时候,水滴背景的上部有个向下凹陷的过程,这个不是闪电背景的简单变化可能做到的.最后也是使用贝塞尔曲线绘制的一个圆弧的区域遮盖来实现.\n\n整理需要变化的元素是水滴及顶部的遮盖.都是使用贝塞尔曲线实现的.顶部的凹陷随着水滴的下落不断凹陷,直至水滴脱离顶部后再渐渐回落.主要是找到水滴完全脱离的时间当做顶部凹陷的关键点就好.水滴下落的过程中是需要变化,最开始可能稍微瘦长一些,然后相对变扁.\n\n### 代码实现\n* 水滴背景的实现\n```java\n//绘制水滴背景\n    private fun  drawBaseButton(canvas: Canvas , index: Float) {\n        //计算水滴半进入区间(确定水滴背景上部变化范围)\n        val waterRand = (baseR * 1.25 * coefficient) / ((baseR * 1.25 * coefficient) + baseR)\n\n        //设置画笔\n        val paint = Paint()\n        paint.color = Color.parseColor(\"#45AAE1\")\n        paint.style = Paint.Style.FILL\n\n        //绘制水滴背景下半部分的(此部分不需要变换)\n        canvas.drawArc(RectF(-baseR, -baseR, baseR, baseR), 180F , 180F,true , paint)\n\n        //设置点list 顺序存储相关路径及关键点\n        val points : MutableList<Point> = ArrayList()\n        points.add(Point(-baseR , 0F))\n        points.add(Point(-baseR , baseR * C))\n        points.add(Point(-baseR * C , baseR ))\n\n        var baseButtonTop : Float\n        //根据index判断上部的形态\n        if (index <= waterRand){\n            baseButtonTop = baseR - (baseR * coefficient * index) * 2\n        }else{\n            baseButtonTop = baseR - (baseR * coefficient) * 2 + (baseR * coefficient * index) * 2\n            if (baseButtonTop > baseR){\n                baseButtonTop = baseR\n            }\n        }\n\n        points.add(Point(0F, baseButtonTop))\n\n        points.add(Point(baseR * C , baseR))\n        points.add(Point(baseR , baseR * C ))\n        points.add(Point(baseR , 0F))\n\n        val path = Path()\n        //画笔移动到指定位置(不移动的话通过贝塞尔绘制的图形会有误差)\n        path.moveTo(points[0].x , points[0].y)\n        //设置贝塞尔曲线\n        path.cubicTo(\n                points[1].x , points[1].y ,\n                points[2].x , points[2].y ,\n                points[3].x , points[3].y)\n\n        path.cubicTo(\n                points[4].x , points[4].y ,\n                points[5].x , points[5].y ,\n                points[6].x , points[6].y)\n        //绘制\n        canvas.drawPath(path, paint)\n    }\n```\n\n* 水滴的实现\n```java\nprivate fun  drawDrops(canvas: Canvas , index: Float) {\n        //设置水滴半径\n        val baseR = baseR * coefficient\n        val index = 1 - index\n\n        //根据index将画布中心移动到对应位置\n        canvas.translate( 0F , (this.baseR * 1.125F + baseR)* index - this.baseR / 8)\n\n        //设置画笔\n        val paint = Paint()\n        paint.style = Paint.Style.FILL\n        paint.color = viewBackgroundColor\n        //存储关键点坐标\n        val points : MutableList<Point> = ArrayList()\n        points.add(Point(-baseR , 0F))\n\n        //水滴顶部变换系数\n        val topCoefficient = 1.5F\n\n        points.add(Point(-baseR , baseR * C))\n        points.add(Point(-baseR * C , baseR ))\n        points.add(Point(0F, (1.5 * baseR + baseR * topCoefficient * index).toFloat()))\n\n        points.add(Point(baseR * C , baseR))\n        points.add(Point(baseR , baseR * C ))\n        points.add(Point(baseR , 0F))\n        //水滴底部变换系数\n        //这两个变换系数使得水滴在下落的过程中渐渐变扁\n        val bottomCoefficient = 0.3F\n        val tempBaseR = (baseR - baseR * bottomCoefficient * index)\n        points.add(Point(baseR , -tempBaseR * C))\n        points.add(Point(baseR * C , -tempBaseR ))\n        points.add(Point(0F, -tempBaseR))\n\n        points.add(Point(-baseR * C , -tempBaseR))\n        points.add(Point(-baseR , -tempBaseR * C ))\n        points.add(Point(-baseR , 0F))\n\n\n\n        //设置四个部分(90°一个部分)的贝塞尔曲线\n        //关于贝塞尔曲线的事情...  感觉可以再做点记录\n        val path = Path()\n        path.moveTo(points[0].x , points[0].y)\n        path.cubicTo(\n                points[1].x , points[1].y ,\n                points[2].x , points[2].y ,\n                points[3].x , points[3].y)\n\n        path.cubicTo(\n                points[4].x , points[4].y ,\n                points[5].x , points[5].y ,\n                points[6].x , points[6].y)\n\n        path.cubicTo(\n                points[7].x , points[7].y ,\n                points[8].x , points[8].y ,\n                points[9].x , points[9].y)\n\n        path.cubicTo(\n                points[10].x , points[10].y ,\n                points[11].x , points[11].y ,\n                points[12].x , points[12].y)\n\n        //绘制图形\n        canvas.drawPath(path, paint)\n    }\n```\n\n偷懒的原因所以直接使用背景色做的一个简单的遮盖,没有使用遮罩(其实闪电的部分也是).\n\n相对来说水滴的实现最为满意,主要的预期效果都成功的实现出来了,整体看来效果还是可以的\n\n## 火之高兴篇\n### 设计思路\n虽然整体看来,应该是一个难度中等的动画,但是在设计的过程中经历了空手用贝塞尔画火焰(最开始的想法本是火焰本身也是会动的),火焰扰动效果的实现(这个最为艰难,主要是不知道怎么控制火焰扰动的效果,其次是遮罩层的使用,具体的坑会另开文字来讲解),最后只能简单做了个底部向上的遮罩层来当做火焰的扰动情况\n\n所以其实就是绘制一个火焰的形状,然后再用个遮罩层来遮盖实现火焰的扰动\n\n### 代码实现\n因为背景没有什么特效,就不贴背景的代码了\n\n\n\n* 整体火焰效果控制\n\n因为火焰需要展示绘制完成的火焰和遮罩层中相交的部分,要使用PorterDuffXfermode相关的方法,所以在绘制中将原图层和遮罩层分开设计\n\n```java\nprivate fun  drawFires(canvas: Canvas , index: Float) {\n    //设置火焰半径\n\n    //设置原图层(火焰绘制)\n    val srcB = makeSrc(2 * baseR.toInt(), 2 * baseR.toInt(), index)\n    //设置遮罩层\n    val dstB = makeDst(2 * baseR.toInt(), 2 * baseR.toInt(), index)\n\n\n    val paint = Paint()\n    canvas.saveLayer(-baseR, -baseR, baseR , baseR, null, Canvas.ALL_SAVE_FLAG)\n\n    //绘制遮罩层\n    canvas.drawBitmap(dstB,  -baseR/2,  -baseR/2, paint)\n    //设置遮罩模式为SRC_IN显示原图层中原图层与遮罩层相交部分\n    paint.xfermode = PorterDuffXfermode(PorterDuff.Mode.SRC_IN)\n    canvas.drawBitmap(srcB, -baseR/2, -baseR/2, paint)\n    paint.xfermode = null\n\n}\n```\n\n* 绘制原图层(火焰本身的绘制)\n```java\nfun makeSrc(w: Int, h: Int , index :Float): Bitmap {\n       val bm = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888)\n       val canvas = Canvas(bm)\n\n       canvas.translate(baseR / 2F, baseR / 2F)   // 将坐标系移动到画布中央\n\n       val index = index * 0.5F + 0.5F\n       val baseR = baseR * coefficient * index\n\n       //设置画笔\n       val paint = Paint()\n       paint.style = Paint.Style.FILL\n       paint.color = viewBackgroundColor\n       paint.strokeWidth = 10F\n       //存储关键点坐标\n       val points : MutableList<Point> = ArrayList()\n\n       //整体火焰是由六个贝塞尔曲线绘制成的\n       points.add(pointFactory( 190F , baseR))\n       points.add(pointFactory( 280F , baseR / 3F * 4))\n       points.add(pointFactory( 320F ,  baseR / 6F))\n       points.add(pointFactory( 350F , baseR))\n\n       points.add(pointFactory( 10F , baseR))\n       points.add(pointFactory( 30F , baseR / 3F* 2))\n       points.add(pointFactory( 50F , baseR / 3F ))\n\n       points.add(pointFactory( 60F , baseR / 6F * 3))\n       points.add(pointFactory( 60F , baseR / 6F * 4))\n       points.add(pointFactory( 50F , baseR / 6F * 5))\n\n\n       points.add(pointFactory( 85F , baseR / 6F * 5))\n       points.add(pointFactory( 120F , baseR / 6F * 5))\n       points.add(pointFactory( 150F , baseR ))\n\n       points.add(pointFactory( 160F , baseR / 9F * 7))\n       points.add(pointFactory( 170F , baseR / 9F * 5))\n       points.add(pointFactory( 180F , baseR / 9F * 3))\n\n       points.add(pointFactory( 200F , baseR / 3F))\n       points.add(pointFactory( 195F , baseR / 3F * 2))\n       points.add(pointFactory( 190F , baseR ))\n\n\n       val path = Path()\n       path.moveTo(points[0].x , points[0].y)\n\n       for (index in 0..((points.size - 1) / 3 - 1) ){\n           path.cubicTo(\n                   points[3 * index + 1].x , points[3 * index + 1].y ,\n                   points[3 * index + 2].x , points[3 * index + 2].y ,\n                   points[3 * index + 3].x , points[3 * index + 3].y)\n       }\n\n       //绘制图形\n       canvas.drawPath(path, paint)\n\n       return bm\n   }\n```\n\n* 绘制遮罩层(火焰的扰动效果)\n```java\nfun makeDst(w: Int, h: Int, index :Float): Bitmap {\n    val bm = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bm)\n    canvas.translate(baseR / 2F, 0F)\n\n\n    val paint = Paint()\n    paint.color = Color.YELLOW\n\n    val dstLength = baseR * coefficient * index * 2\n\n    val rectf = RectF(-dstLength, -dstLength, dstLength, dstLength)\n\n    //没找到合适的扰动效果,只能简单实现一个遮罩效果\n    canvas.drawArc(rectf , 0F , 360F , true, paint)\n\n    return bm\n}\n```\n\n火焰来说,虽然需要的效果代码都实现了,但是缺少设计,整体的效果到时不尽如人意.针对效果来说还有很多的优化空间\n","source":"_posts/view03.md","raw":"---\ntitle: Android自定义View之元素按钮\ndate: 2018-01-16 17:11:20\ntags: [\"android\" , \"view\" , \"自定义\"]\ncategories : \"Android自定义View\"\n---\n\n#Android自定义View之元素按钮\n\n\n>之前在dribbble看到的三个元素的按钮,参考了设计的创意,添加了自己定义的动画效果来实现.先看效果\n\n![效果图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/91123430.jpg)\n\n<!-- more -->\n\n\n分别是水火电三个元素的按钮实现.其中电的实现最简单,水的次之,火的实际还并不满意,没有火焰扰动的感觉,尝试过几次但是效果都不理想,最后只保留了自下向上的扇形遮罩.如果有好的效果再优化实现.\n\n## 闪电篇\n### 设计过程\n\n通过闪电的位置将整体划分成七个部分(七个部分的主要原因是最初设计了一个中部放大的透镜效果,但是没能实现),从右上角进入,在中心点附近运动,直到停在中心点.闪电本身可以看做一个中心对称的图形,整理就简化成了现将canvas旋转一定角度,然后绘制中心对称的闪电形状,最后在x轴上运动就可以了.\n\n![黄线是旋转后的坐标](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/47003102.jpg)\n\n黄线是旋转后的坐标,可以看出简化后实现起来很简单.\n\n### 代码实现\n* 背景部分\n```java\n//绘制闪电背景\nprivate fun  drawBaseButton(canvas: Canvas , index: Float) {\n    //设置画笔\n    val paint = Paint()\n\n    //添加闪电移动到指定位置时的背景颜色设置\n    if ((index <= 0.45F && index >= 0.35F) || (index >= 0.65F && index <= 0.75F)) {\n        paint.color = Color.parseColor(\"#ACADAC\")\n    }else{\n        paint.color = Color.parseColor(\"#595A59\")\n    }\n\n    paint.style = Paint.Style.FILL\n\n    //绘制闪电背景\n    canvas.drawArc(RectF(-baseR, -baseR, baseR, baseR), 0F , 360F,true , paint)\n\n}\n```\n\n* 闪电部分\n```java\nprivate fun  drawLighting(canvas: Canvas , index: Float) {\n    val baseR = baseR * coefficient\n    var index = index\n    var changeR = 0F\n\n    //将整个闪电的运动拆成七个部分\n    if (index <= 0.25){\n        changeR  = this.baseR + baseR\n        changeR = (changeR * (1 - index / 0.25)).toFloat()\n    }else if (index <= 0.4){\n        index = index - 0.25F\n        changeR  = this.baseR\n        changeR = -(changeR * (index / (0.4F - 0.25F)))\n    }else if (index <= 0.6F){\n        index = index - 0.4F\n        changeR = this.baseR\n        changeR = -changeR *  (1 - index / 0.2F)\n    }else if (index <= 0.7F){\n        index = index - 0.6F\n        changeR = baseR\n        changeR = changeR * index / 0.1F\n    }else if (index <= 0.8F){\n        index = index - 0.7F\n        changeR = baseR\n        changeR = baseR - changeR * index / 0.1F\n    }else if (index <= 0.9F){\n        index = index - 0.8F\n        changeR = baseR\n        changeR = -changeR * index / 0.1F\n    }else if (index <= 1F){\n        index = index - 0.9F\n        changeR = baseR\n        changeR = -changeR + changeR * (index / 0.1F)\n    }\n\n\n    //设置画笔\n    val path = Path()\n    val paint = Paint()\n    paint.strokeWidth = 5F\n    paint.style = Paint.Style.FILL\n    paint.color = viewBackgroundColor\n\n    val points :MutableList<Point> = ArrayList()\n    //设置绘制闪电的路径点\n    points.add(pointFactory(60 , baseR))\n    points.add(pointFactory(-45 , baseR / 2F))\n    points.add(pointFactory(-45 - 90 , baseR / 5F))\n    points.add(pointFactory(-30 - 90 , baseR))\n    points.add(pointFactory(45 + 90 , baseR / 2F))\n    points.add(pointFactory(45 , baseR / 5F))\n    points.add(pointFactory(60 , baseR))\n\n\n    //设置闪电的偏移量(模拟运动情况)\n    //原本还想实现一个中心放大的透镜效果,但是效果很僵硬,只能移除了\n    for (i in 0..points.size - 1){\n        points.set(i , Point(points[i].x + changeR , points[i].y))\n    }\n\n\n    path.moveTo(points[0].x , points[0].y)\n\n    for (index in 1..points.size - 1){\n        path.lineTo(points[index].x , points[index].y)\n    }\n\n    canvas.drawPath(path , paint)\n\n    //闪电绘制辅助坐标系\n//        val paint2 = Paint()\n//        paint2.strokeWidth = 5F\n//        paint2.color = Color.YELLOW\n//        canvas.drawLine(1000F , 0F ,-1000F , 0F , paint2)\n//        canvas.drawLine( 0F ,-1000F , 0F , 1000F , paint2)\n}\n```\n\n闪电的实现还是很简单的,因为不涉及到图形的变化,只有一个简单的位移效果\n\n## 霜(水)之哀伤篇\n### 设计思路\n水滴的实现相对对于闪电来说麻烦一些,一是水滴本身不是很好绘制,又因为水滴在下落的过程中存在变化,最后选择通过贝塞尔曲线实现.二是水滴和背景之间的交互,在水滴未完全下落到背景中的时候,水滴背景的上部有个向下凹陷的过程,这个不是闪电背景的简单变化可能做到的.最后也是使用贝塞尔曲线绘制的一个圆弧的区域遮盖来实现.\n\n整理需要变化的元素是水滴及顶部的遮盖.都是使用贝塞尔曲线实现的.顶部的凹陷随着水滴的下落不断凹陷,直至水滴脱离顶部后再渐渐回落.主要是找到水滴完全脱离的时间当做顶部凹陷的关键点就好.水滴下落的过程中是需要变化,最开始可能稍微瘦长一些,然后相对变扁.\n\n### 代码实现\n* 水滴背景的实现\n```java\n//绘制水滴背景\n    private fun  drawBaseButton(canvas: Canvas , index: Float) {\n        //计算水滴半进入区间(确定水滴背景上部变化范围)\n        val waterRand = (baseR * 1.25 * coefficient) / ((baseR * 1.25 * coefficient) + baseR)\n\n        //设置画笔\n        val paint = Paint()\n        paint.color = Color.parseColor(\"#45AAE1\")\n        paint.style = Paint.Style.FILL\n\n        //绘制水滴背景下半部分的(此部分不需要变换)\n        canvas.drawArc(RectF(-baseR, -baseR, baseR, baseR), 180F , 180F,true , paint)\n\n        //设置点list 顺序存储相关路径及关键点\n        val points : MutableList<Point> = ArrayList()\n        points.add(Point(-baseR , 0F))\n        points.add(Point(-baseR , baseR * C))\n        points.add(Point(-baseR * C , baseR ))\n\n        var baseButtonTop : Float\n        //根据index判断上部的形态\n        if (index <= waterRand){\n            baseButtonTop = baseR - (baseR * coefficient * index) * 2\n        }else{\n            baseButtonTop = baseR - (baseR * coefficient) * 2 + (baseR * coefficient * index) * 2\n            if (baseButtonTop > baseR){\n                baseButtonTop = baseR\n            }\n        }\n\n        points.add(Point(0F, baseButtonTop))\n\n        points.add(Point(baseR * C , baseR))\n        points.add(Point(baseR , baseR * C ))\n        points.add(Point(baseR , 0F))\n\n        val path = Path()\n        //画笔移动到指定位置(不移动的话通过贝塞尔绘制的图形会有误差)\n        path.moveTo(points[0].x , points[0].y)\n        //设置贝塞尔曲线\n        path.cubicTo(\n                points[1].x , points[1].y ,\n                points[2].x , points[2].y ,\n                points[3].x , points[3].y)\n\n        path.cubicTo(\n                points[4].x , points[4].y ,\n                points[5].x , points[5].y ,\n                points[6].x , points[6].y)\n        //绘制\n        canvas.drawPath(path, paint)\n    }\n```\n\n* 水滴的实现\n```java\nprivate fun  drawDrops(canvas: Canvas , index: Float) {\n        //设置水滴半径\n        val baseR = baseR * coefficient\n        val index = 1 - index\n\n        //根据index将画布中心移动到对应位置\n        canvas.translate( 0F , (this.baseR * 1.125F + baseR)* index - this.baseR / 8)\n\n        //设置画笔\n        val paint = Paint()\n        paint.style = Paint.Style.FILL\n        paint.color = viewBackgroundColor\n        //存储关键点坐标\n        val points : MutableList<Point> = ArrayList()\n        points.add(Point(-baseR , 0F))\n\n        //水滴顶部变换系数\n        val topCoefficient = 1.5F\n\n        points.add(Point(-baseR , baseR * C))\n        points.add(Point(-baseR * C , baseR ))\n        points.add(Point(0F, (1.5 * baseR + baseR * topCoefficient * index).toFloat()))\n\n        points.add(Point(baseR * C , baseR))\n        points.add(Point(baseR , baseR * C ))\n        points.add(Point(baseR , 0F))\n        //水滴底部变换系数\n        //这两个变换系数使得水滴在下落的过程中渐渐变扁\n        val bottomCoefficient = 0.3F\n        val tempBaseR = (baseR - baseR * bottomCoefficient * index)\n        points.add(Point(baseR , -tempBaseR * C))\n        points.add(Point(baseR * C , -tempBaseR ))\n        points.add(Point(0F, -tempBaseR))\n\n        points.add(Point(-baseR * C , -tempBaseR))\n        points.add(Point(-baseR , -tempBaseR * C ))\n        points.add(Point(-baseR , 0F))\n\n\n\n        //设置四个部分(90°一个部分)的贝塞尔曲线\n        //关于贝塞尔曲线的事情...  感觉可以再做点记录\n        val path = Path()\n        path.moveTo(points[0].x , points[0].y)\n        path.cubicTo(\n                points[1].x , points[1].y ,\n                points[2].x , points[2].y ,\n                points[3].x , points[3].y)\n\n        path.cubicTo(\n                points[4].x , points[4].y ,\n                points[5].x , points[5].y ,\n                points[6].x , points[6].y)\n\n        path.cubicTo(\n                points[7].x , points[7].y ,\n                points[8].x , points[8].y ,\n                points[9].x , points[9].y)\n\n        path.cubicTo(\n                points[10].x , points[10].y ,\n                points[11].x , points[11].y ,\n                points[12].x , points[12].y)\n\n        //绘制图形\n        canvas.drawPath(path, paint)\n    }\n```\n\n偷懒的原因所以直接使用背景色做的一个简单的遮盖,没有使用遮罩(其实闪电的部分也是).\n\n相对来说水滴的实现最为满意,主要的预期效果都成功的实现出来了,整体看来效果还是可以的\n\n## 火之高兴篇\n### 设计思路\n虽然整体看来,应该是一个难度中等的动画,但是在设计的过程中经历了空手用贝塞尔画火焰(最开始的想法本是火焰本身也是会动的),火焰扰动效果的实现(这个最为艰难,主要是不知道怎么控制火焰扰动的效果,其次是遮罩层的使用,具体的坑会另开文字来讲解),最后只能简单做了个底部向上的遮罩层来当做火焰的扰动情况\n\n所以其实就是绘制一个火焰的形状,然后再用个遮罩层来遮盖实现火焰的扰动\n\n### 代码实现\n因为背景没有什么特效,就不贴背景的代码了\n\n\n\n* 整体火焰效果控制\n\n因为火焰需要展示绘制完成的火焰和遮罩层中相交的部分,要使用PorterDuffXfermode相关的方法,所以在绘制中将原图层和遮罩层分开设计\n\n```java\nprivate fun  drawFires(canvas: Canvas , index: Float) {\n    //设置火焰半径\n\n    //设置原图层(火焰绘制)\n    val srcB = makeSrc(2 * baseR.toInt(), 2 * baseR.toInt(), index)\n    //设置遮罩层\n    val dstB = makeDst(2 * baseR.toInt(), 2 * baseR.toInt(), index)\n\n\n    val paint = Paint()\n    canvas.saveLayer(-baseR, -baseR, baseR , baseR, null, Canvas.ALL_SAVE_FLAG)\n\n    //绘制遮罩层\n    canvas.drawBitmap(dstB,  -baseR/2,  -baseR/2, paint)\n    //设置遮罩模式为SRC_IN显示原图层中原图层与遮罩层相交部分\n    paint.xfermode = PorterDuffXfermode(PorterDuff.Mode.SRC_IN)\n    canvas.drawBitmap(srcB, -baseR/2, -baseR/2, paint)\n    paint.xfermode = null\n\n}\n```\n\n* 绘制原图层(火焰本身的绘制)\n```java\nfun makeSrc(w: Int, h: Int , index :Float): Bitmap {\n       val bm = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888)\n       val canvas = Canvas(bm)\n\n       canvas.translate(baseR / 2F, baseR / 2F)   // 将坐标系移动到画布中央\n\n       val index = index * 0.5F + 0.5F\n       val baseR = baseR * coefficient * index\n\n       //设置画笔\n       val paint = Paint()\n       paint.style = Paint.Style.FILL\n       paint.color = viewBackgroundColor\n       paint.strokeWidth = 10F\n       //存储关键点坐标\n       val points : MutableList<Point> = ArrayList()\n\n       //整体火焰是由六个贝塞尔曲线绘制成的\n       points.add(pointFactory( 190F , baseR))\n       points.add(pointFactory( 280F , baseR / 3F * 4))\n       points.add(pointFactory( 320F ,  baseR / 6F))\n       points.add(pointFactory( 350F , baseR))\n\n       points.add(pointFactory( 10F , baseR))\n       points.add(pointFactory( 30F , baseR / 3F* 2))\n       points.add(pointFactory( 50F , baseR / 3F ))\n\n       points.add(pointFactory( 60F , baseR / 6F * 3))\n       points.add(pointFactory( 60F , baseR / 6F * 4))\n       points.add(pointFactory( 50F , baseR / 6F * 5))\n\n\n       points.add(pointFactory( 85F , baseR / 6F * 5))\n       points.add(pointFactory( 120F , baseR / 6F * 5))\n       points.add(pointFactory( 150F , baseR ))\n\n       points.add(pointFactory( 160F , baseR / 9F * 7))\n       points.add(pointFactory( 170F , baseR / 9F * 5))\n       points.add(pointFactory( 180F , baseR / 9F * 3))\n\n       points.add(pointFactory( 200F , baseR / 3F))\n       points.add(pointFactory( 195F , baseR / 3F * 2))\n       points.add(pointFactory( 190F , baseR ))\n\n\n       val path = Path()\n       path.moveTo(points[0].x , points[0].y)\n\n       for (index in 0..((points.size - 1) / 3 - 1) ){\n           path.cubicTo(\n                   points[3 * index + 1].x , points[3 * index + 1].y ,\n                   points[3 * index + 2].x , points[3 * index + 2].y ,\n                   points[3 * index + 3].x , points[3 * index + 3].y)\n       }\n\n       //绘制图形\n       canvas.drawPath(path, paint)\n\n       return bm\n   }\n```\n\n* 绘制遮罩层(火焰的扰动效果)\n```java\nfun makeDst(w: Int, h: Int, index :Float): Bitmap {\n    val bm = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bm)\n    canvas.translate(baseR / 2F, 0F)\n\n\n    val paint = Paint()\n    paint.color = Color.YELLOW\n\n    val dstLength = baseR * coefficient * index * 2\n\n    val rectf = RectF(-dstLength, -dstLength, dstLength, dstLength)\n\n    //没找到合适的扰动效果,只能简单实现一个遮罩效果\n    canvas.drawArc(rectf , 0F , 360F , true, paint)\n\n    return bm\n}\n```\n\n火焰来说,虽然需要的效果代码都实现了,但是缺少设计,整体的效果到时不尽如人意.针对效果来说还有很多的优化空间\n","slug":"view03","published":1,"updated":"2020-03-13T09:33:05.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5e60010q7dqoapkvyvs","content":"<p>#Android自定义View之元素按钮</p>\n<blockquote>\n<p>之前在dribbble看到的三个元素的按钮,参考了设计的创意,添加了自己定义的动画效果来实现.先看效果</p>\n</blockquote>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/91123430.jpg\" alt=\"效果图\"></p>\n<a id=\"more\"></a>\n<p>分别是水火电三个元素的按钮实现.其中电的实现最简单,水的次之,火的实际还并不满意,没有火焰扰动的感觉,尝试过几次但是效果都不理想,最后只保留了自下向上的扇形遮罩.如果有好的效果再优化实现.</p>\n<h2 id=\"闪电篇\"><a href=\"#闪电篇\" class=\"headerlink\" title=\"闪电篇\"></a>闪电篇</h2><h3 id=\"设计过程\"><a href=\"#设计过程\" class=\"headerlink\" title=\"设计过程\"></a>设计过程</h3><p>通过闪电的位置将整体划分成七个部分(七个部分的主要原因是最初设计了一个中部放大的透镜效果,但是没能实现),从右上角进入,在中心点附近运动,直到停在中心点.闪电本身可以看做一个中心对称的图形,整理就简化成了现将canvas旋转一定角度,然后绘制中心对称的闪电形状,最后在x轴上运动就可以了.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/47003102.jpg\" alt=\"黄线是旋转后的坐标\"></p>\n<p>黄线是旋转后的坐标,可以看出简化后实现起来很简单.</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><ul>\n<li><p>背景部分</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//绘制闪电背景</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun  <span class=\"title\">drawBaseButton</span><span class=\"params\">(canvas: Canvas , index: Float)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置画笔</span></span><br><span class=\"line\">    val paint = Paint()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加闪电移动到指定位置时的背景颜色设置</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((index &lt;= <span class=\"number\">0.45F</span> &amp;&amp; index &gt;= <span class=\"number\">0.35F</span>) || (index &gt;= <span class=\"number\">0.65F</span> &amp;&amp; index &lt;= <span class=\"number\">0.75F</span>)) &#123;</span><br><span class=\"line\">        paint.color = Color.parseColor(<span class=\"string\">\"#ACADAC\"</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        paint.color = Color.parseColor(<span class=\"string\">\"#595A59\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    paint.style = Paint.Style.FILL</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制闪电背景</span></span><br><span class=\"line\">    canvas.drawArc(RectF(-baseR, -baseR, baseR, baseR), <span class=\"number\">0F</span> , <span class=\"number\">360F</span>,<span class=\"keyword\">true</span> , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>闪电部分</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun  <span class=\"title\">drawLighting</span><span class=\"params\">(canvas: Canvas , index: Float)</span> </span>&#123;</span><br><span class=\"line\">    val baseR = baseR * coefficient</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = index</span><br><span class=\"line\">    <span class=\"keyword\">var</span> changeR = <span class=\"number\">0F</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将整个闪电的运动拆成七个部分</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt;= <span class=\"number\">0.25</span>)&#123;</span><br><span class=\"line\">        changeR  = <span class=\"keyword\">this</span>.baseR + baseR</span><br><span class=\"line\">        changeR = (changeR * (<span class=\"number\">1</span> - index / <span class=\"number\">0.25</span>)).toFloat()</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index &lt;= <span class=\"number\">0.4</span>)&#123;</span><br><span class=\"line\">        index = index - <span class=\"number\">0.25F</span></span><br><span class=\"line\">        changeR  = <span class=\"keyword\">this</span>.baseR</span><br><span class=\"line\">        changeR = -(changeR * (index / (<span class=\"number\">0.4F</span> - <span class=\"number\">0.25F</span>)))</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index &lt;= <span class=\"number\">0.6F</span>)&#123;</span><br><span class=\"line\">        index = index - <span class=\"number\">0.4F</span></span><br><span class=\"line\">        changeR = <span class=\"keyword\">this</span>.baseR</span><br><span class=\"line\">        changeR = -changeR *  (<span class=\"number\">1</span> - index / <span class=\"number\">0.2F</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index &lt;= <span class=\"number\">0.7F</span>)&#123;</span><br><span class=\"line\">        index = index - <span class=\"number\">0.6F</span></span><br><span class=\"line\">        changeR = baseR</span><br><span class=\"line\">        changeR = changeR * index / <span class=\"number\">0.1F</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index &lt;= <span class=\"number\">0.8F</span>)&#123;</span><br><span class=\"line\">        index = index - <span class=\"number\">0.7F</span></span><br><span class=\"line\">        changeR = baseR</span><br><span class=\"line\">        changeR = baseR - changeR * index / <span class=\"number\">0.1F</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index &lt;= <span class=\"number\">0.9F</span>)&#123;</span><br><span class=\"line\">        index = index - <span class=\"number\">0.8F</span></span><br><span class=\"line\">        changeR = baseR</span><br><span class=\"line\">        changeR = -changeR * index / <span class=\"number\">0.1F</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index &lt;= <span class=\"number\">1F</span>)&#123;</span><br><span class=\"line\">        index = index - <span class=\"number\">0.9F</span></span><br><span class=\"line\">        changeR = baseR</span><br><span class=\"line\">        changeR = -changeR + changeR * (index / <span class=\"number\">0.1F</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置画笔</span></span><br><span class=\"line\">    val path = Path()</span><br><span class=\"line\">    val paint = Paint()</span><br><span class=\"line\">    paint.strokeWidth = <span class=\"number\">5F</span></span><br><span class=\"line\">    paint.style = Paint.Style.FILL</span><br><span class=\"line\">    paint.color = viewBackgroundColor</span><br><span class=\"line\"></span><br><span class=\"line\">    val points :MutableList&lt;Point&gt; = ArrayList()</span><br><span class=\"line\">    <span class=\"comment\">//设置绘制闪电的路径点</span></span><br><span class=\"line\">    points.add(pointFactory(<span class=\"number\">60</span> , baseR))</span><br><span class=\"line\">    points.add(pointFactory(-<span class=\"number\">45</span> , baseR / <span class=\"number\">2F</span>))</span><br><span class=\"line\">    points.add(pointFactory(-<span class=\"number\">45</span> - <span class=\"number\">90</span> , baseR / <span class=\"number\">5F</span>))</span><br><span class=\"line\">    points.add(pointFactory(-<span class=\"number\">30</span> - <span class=\"number\">90</span> , baseR))</span><br><span class=\"line\">    points.add(pointFactory(<span class=\"number\">45</span> + <span class=\"number\">90</span> , baseR / <span class=\"number\">2F</span>))</span><br><span class=\"line\">    points.add(pointFactory(<span class=\"number\">45</span> , baseR / <span class=\"number\">5F</span>))</span><br><span class=\"line\">    points.add(pointFactory(<span class=\"number\">60</span> , baseR))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置闪电的偏移量(模拟运动情况)</span></span><br><span class=\"line\">    <span class=\"comment\">//原本还想实现一个中心放大的透镜效果,但是效果很僵硬,只能移除了</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i in <span class=\"number\">0</span>..points.size - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        points.set(i , Point(points[i].x + changeR , points[i].y))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    path.moveTo(points[<span class=\"number\">0</span>].x , points[<span class=\"number\">0</span>].y)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (index in <span class=\"number\">1</span>..points.size - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        path.lineTo(points[index].x , points[index].y)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.drawPath(path , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//闪电绘制辅助坐标系</span></span><br><span class=\"line\"><span class=\"comment\">//        val paint2 = Paint()</span></span><br><span class=\"line\"><span class=\"comment\">//        paint2.strokeWidth = 5F</span></span><br><span class=\"line\"><span class=\"comment\">//        paint2.color = Color.YELLOW</span></span><br><span class=\"line\"><span class=\"comment\">//        canvas.drawLine(1000F , 0F ,-1000F , 0F , paint2)</span></span><br><span class=\"line\"><span class=\"comment\">//        canvas.drawLine( 0F ,-1000F , 0F , 1000F , paint2)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>闪电的实现还是很简单的,因为不涉及到图形的变化,只有一个简单的位移效果</p>\n<h2 id=\"霜-水-之哀伤篇\"><a href=\"#霜-水-之哀伤篇\" class=\"headerlink\" title=\"霜(水)之哀伤篇\"></a>霜(水)之哀伤篇</h2><h3 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h3><p>水滴的实现相对对于闪电来说麻烦一些,一是水滴本身不是很好绘制,又因为水滴在下落的过程中存在变化,最后选择通过贝塞尔曲线实现.二是水滴和背景之间的交互,在水滴未完全下落到背景中的时候,水滴背景的上部有个向下凹陷的过程,这个不是闪电背景的简单变化可能做到的.最后也是使用贝塞尔曲线绘制的一个圆弧的区域遮盖来实现.</p>\n<p>整理需要变化的元素是水滴及顶部的遮盖.都是使用贝塞尔曲线实现的.顶部的凹陷随着水滴的下落不断凹陷,直至水滴脱离顶部后再渐渐回落.主要是找到水滴完全脱离的时间当做顶部凹陷的关键点就好.水滴下落的过程中是需要变化,最开始可能稍微瘦长一些,然后相对变扁.</p>\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><ul>\n<li><p>水滴背景的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//绘制水滴背景</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> fun  <span class=\"title\">drawBaseButton</span><span class=\"params\">(canvas: Canvas , index: Float)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//计算水滴半进入区间(确定水滴背景上部变化范围)</span></span><br><span class=\"line\">        val waterRand = (baseR * <span class=\"number\">1.25</span> * coefficient) / ((baseR * <span class=\"number\">1.25</span> * coefficient) + baseR)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置画笔</span></span><br><span class=\"line\">        val paint = Paint()</span><br><span class=\"line\">        paint.color = Color.parseColor(<span class=\"string\">\"#45AAE1\"</span>)</span><br><span class=\"line\">        paint.style = Paint.Style.FILL</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//绘制水滴背景下半部分的(此部分不需要变换)</span></span><br><span class=\"line\">        canvas.drawArc(RectF(-baseR, -baseR, baseR, baseR), <span class=\"number\">180F</span> , <span class=\"number\">180F</span>,<span class=\"keyword\">true</span> , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置点list 顺序存储相关路径及关键点</span></span><br><span class=\"line\">        val points : MutableList&lt;Point&gt; = ArrayList()</span><br><span class=\"line\">        points.add(Point(-baseR , <span class=\"number\">0F</span>))</span><br><span class=\"line\">        points.add(Point(-baseR , baseR * C))</span><br><span class=\"line\">        points.add(Point(-baseR * C , baseR ))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> baseButtonTop : Float</span><br><span class=\"line\">        <span class=\"comment\">//根据index判断上部的形态</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt;= waterRand)&#123;</span><br><span class=\"line\">            baseButtonTop = baseR - (baseR * coefficient * index) * <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            baseButtonTop = baseR - (baseR * coefficient) * <span class=\"number\">2</span> + (baseR * coefficient * index) * <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (baseButtonTop &gt; baseR)&#123;</span><br><span class=\"line\">                baseButtonTop = baseR</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        points.add(Point(<span class=\"number\">0F</span>, baseButtonTop))</span><br><span class=\"line\"></span><br><span class=\"line\">        points.add(Point(baseR * C , baseR))</span><br><span class=\"line\">        points.add(Point(baseR , baseR * C ))</span><br><span class=\"line\">        points.add(Point(baseR , <span class=\"number\">0F</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        val path = Path()</span><br><span class=\"line\">        <span class=\"comment\">//画笔移动到指定位置(不移动的话通过贝塞尔绘制的图形会有误差)</span></span><br><span class=\"line\">        path.moveTo(points[<span class=\"number\">0</span>].x , points[<span class=\"number\">0</span>].y)</span><br><span class=\"line\">        <span class=\"comment\">//设置贝塞尔曲线</span></span><br><span class=\"line\">        path.cubicTo(</span><br><span class=\"line\">                points[<span class=\"number\">1</span>].x , points[<span class=\"number\">1</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">2</span>].x , points[<span class=\"number\">2</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">3</span>].x , points[<span class=\"number\">3</span>].y)</span><br><span class=\"line\"></span><br><span class=\"line\">        path.cubicTo(</span><br><span class=\"line\">                points[<span class=\"number\">4</span>].x , points[<span class=\"number\">4</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">5</span>].x , points[<span class=\"number\">5</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">6</span>].x , points[<span class=\"number\">6</span>].y)</span><br><span class=\"line\">        <span class=\"comment\">//绘制</span></span><br><span class=\"line\">        canvas.drawPath(path, paint)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>水滴的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun  <span class=\"title\">drawDrops</span><span class=\"params\">(canvas: Canvas , index: Float)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//设置水滴半径</span></span><br><span class=\"line\">        val baseR = baseR * coefficient</span><br><span class=\"line\">        val index = <span class=\"number\">1</span> - index</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//根据index将画布中心移动到对应位置</span></span><br><span class=\"line\">        canvas.translate( <span class=\"number\">0F</span> , (<span class=\"keyword\">this</span>.baseR * <span class=\"number\">1.125F</span> + baseR)* index - <span class=\"keyword\">this</span>.baseR / <span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置画笔</span></span><br><span class=\"line\">        val paint = Paint()</span><br><span class=\"line\">        paint.style = Paint.Style.FILL</span><br><span class=\"line\">        paint.color = viewBackgroundColor</span><br><span class=\"line\">        <span class=\"comment\">//存储关键点坐标</span></span><br><span class=\"line\">        val points : MutableList&lt;Point&gt; = ArrayList()</span><br><span class=\"line\">        points.add(Point(-baseR , <span class=\"number\">0F</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//水滴顶部变换系数</span></span><br><span class=\"line\">        val topCoefficient = <span class=\"number\">1.5F</span></span><br><span class=\"line\"></span><br><span class=\"line\">        points.add(Point(-baseR , baseR * C))</span><br><span class=\"line\">        points.add(Point(-baseR * C , baseR ))</span><br><span class=\"line\">        points.add(Point(<span class=\"number\">0F</span>, (<span class=\"number\">1.5</span> * baseR + baseR * topCoefficient * index).toFloat()))</span><br><span class=\"line\"></span><br><span class=\"line\">        points.add(Point(baseR * C , baseR))</span><br><span class=\"line\">        points.add(Point(baseR , baseR * C ))</span><br><span class=\"line\">        points.add(Point(baseR , <span class=\"number\">0F</span>))</span><br><span class=\"line\">        <span class=\"comment\">//水滴底部变换系数</span></span><br><span class=\"line\">        <span class=\"comment\">//这两个变换系数使得水滴在下落的过程中渐渐变扁</span></span><br><span class=\"line\">        val bottomCoefficient = <span class=\"number\">0.3F</span></span><br><span class=\"line\">        val tempBaseR = (baseR - baseR * bottomCoefficient * index)</span><br><span class=\"line\">        points.add(Point(baseR , -tempBaseR * C))</span><br><span class=\"line\">        points.add(Point(baseR * C , -tempBaseR ))</span><br><span class=\"line\">        points.add(Point(<span class=\"number\">0F</span>, -tempBaseR))</span><br><span class=\"line\"></span><br><span class=\"line\">        points.add(Point(-baseR * C , -tempBaseR))</span><br><span class=\"line\">        points.add(Point(-baseR , -tempBaseR * C ))</span><br><span class=\"line\">        points.add(Point(-baseR , <span class=\"number\">0F</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置四个部分(90°一个部分)的贝塞尔曲线</span></span><br><span class=\"line\">        <span class=\"comment\">//关于贝塞尔曲线的事情...  感觉可以再做点记录</span></span><br><span class=\"line\">        val path = Path()</span><br><span class=\"line\">        path.moveTo(points[<span class=\"number\">0</span>].x , points[<span class=\"number\">0</span>].y)</span><br><span class=\"line\">        path.cubicTo(</span><br><span class=\"line\">                points[<span class=\"number\">1</span>].x , points[<span class=\"number\">1</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">2</span>].x , points[<span class=\"number\">2</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">3</span>].x , points[<span class=\"number\">3</span>].y)</span><br><span class=\"line\"></span><br><span class=\"line\">        path.cubicTo(</span><br><span class=\"line\">                points[<span class=\"number\">4</span>].x , points[<span class=\"number\">4</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">5</span>].x , points[<span class=\"number\">5</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">6</span>].x , points[<span class=\"number\">6</span>].y)</span><br><span class=\"line\"></span><br><span class=\"line\">        path.cubicTo(</span><br><span class=\"line\">                points[<span class=\"number\">7</span>].x , points[<span class=\"number\">7</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">8</span>].x , points[<span class=\"number\">8</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">9</span>].x , points[<span class=\"number\">9</span>].y)</span><br><span class=\"line\"></span><br><span class=\"line\">        path.cubicTo(</span><br><span class=\"line\">                points[<span class=\"number\">10</span>].x , points[<span class=\"number\">10</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">11</span>].x , points[<span class=\"number\">11</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">12</span>].x , points[<span class=\"number\">12</span>].y)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//绘制图形</span></span><br><span class=\"line\">        canvas.drawPath(path, paint)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>偷懒的原因所以直接使用背景色做的一个简单的遮盖,没有使用遮罩(其实闪电的部分也是).</p>\n<p>相对来说水滴的实现最为满意,主要的预期效果都成功的实现出来了,整体看来效果还是可以的</p>\n<h2 id=\"火之高兴篇\"><a href=\"#火之高兴篇\" class=\"headerlink\" title=\"火之高兴篇\"></a>火之高兴篇</h2><h3 id=\"设计思路-1\"><a href=\"#设计思路-1\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h3><p>虽然整体看来,应该是一个难度中等的动画,但是在设计的过程中经历了空手用贝塞尔画火焰(最开始的想法本是火焰本身也是会动的),火焰扰动效果的实现(这个最为艰难,主要是不知道怎么控制火焰扰动的效果,其次是遮罩层的使用,具体的坑会另开文字来讲解),最后只能简单做了个底部向上的遮罩层来当做火焰的扰动情况</p>\n<p>所以其实就是绘制一个火焰的形状,然后再用个遮罩层来遮盖实现火焰的扰动</p>\n<h3 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>因为背景没有什么特效,就不贴背景的代码了</p>\n<ul>\n<li>整体火焰效果控制</li>\n</ul>\n<p>因为火焰需要展示绘制完成的火焰和遮罩层中相交的部分,要使用PorterDuffXfermode相关的方法,所以在绘制中将原图层和遮罩层分开设计</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun  <span class=\"title\">drawFires</span><span class=\"params\">(canvas: Canvas , index: Float)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置火焰半径</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置原图层(火焰绘制)</span></span><br><span class=\"line\">    val srcB = makeSrc(<span class=\"number\">2</span> * baseR.toInt(), <span class=\"number\">2</span> * baseR.toInt(), index)</span><br><span class=\"line\">    <span class=\"comment\">//设置遮罩层</span></span><br><span class=\"line\">    val dstB = makeDst(<span class=\"number\">2</span> * baseR.toInt(), <span class=\"number\">2</span> * baseR.toInt(), index)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    val paint = Paint()</span><br><span class=\"line\">    canvas.saveLayer(-baseR, -baseR, baseR , baseR, <span class=\"keyword\">null</span>, Canvas.ALL_SAVE_FLAG)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制遮罩层</span></span><br><span class=\"line\">    canvas.drawBitmap(dstB,  -baseR/<span class=\"number\">2</span>,  -baseR/<span class=\"number\">2</span>, paint)</span><br><span class=\"line\">    <span class=\"comment\">//设置遮罩模式为SRC_IN显示原图层中原图层与遮罩层相交部分</span></span><br><span class=\"line\">    paint.xfermode = PorterDuffXfermode(PorterDuff.Mode.SRC_IN)</span><br><span class=\"line\">    canvas.drawBitmap(srcB, -baseR/<span class=\"number\">2</span>, -baseR/<span class=\"number\">2</span>, paint)</span><br><span class=\"line\">    paint.xfermode = <span class=\"keyword\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>绘制原图层(火焰本身的绘制)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">makeSrc</span><span class=\"params\">(w: Int, h: Int , index :Float)</span>: Bitmap </span>&#123;</span><br><span class=\"line\">       val bm = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888)</span><br><span class=\"line\">       val canvas = Canvas(bm)</span><br><span class=\"line\"></span><br><span class=\"line\">       canvas.translate(baseR / <span class=\"number\">2F</span>, baseR / <span class=\"number\">2F</span>)   <span class=\"comment\">// 将坐标系移动到画布中央</span></span><br><span class=\"line\"></span><br><span class=\"line\">       val index = index * <span class=\"number\">0.5F</span> + <span class=\"number\">0.5F</span></span><br><span class=\"line\">       val baseR = baseR * coefficient * index</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//设置画笔</span></span><br><span class=\"line\">       val paint = Paint()</span><br><span class=\"line\">       paint.style = Paint.Style.FILL</span><br><span class=\"line\">       paint.color = viewBackgroundColor</span><br><span class=\"line\">       paint.strokeWidth = <span class=\"number\">10F</span></span><br><span class=\"line\">       <span class=\"comment\">//存储关键点坐标</span></span><br><span class=\"line\">       val points : MutableList&lt;Point&gt; = ArrayList()</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//整体火焰是由六个贝塞尔曲线绘制成的</span></span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">190F</span> , baseR))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">280F</span> , baseR / <span class=\"number\">3F</span> * <span class=\"number\">4</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">320F</span> ,  baseR / <span class=\"number\">6F</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">350F</span> , baseR))</span><br><span class=\"line\"></span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">10F</span> , baseR))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">30F</span> , baseR / <span class=\"number\">3F</span>* <span class=\"number\">2</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">50F</span> , baseR / <span class=\"number\">3F</span> ))</span><br><span class=\"line\"></span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">60F</span> , baseR / <span class=\"number\">6F</span> * <span class=\"number\">3</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">60F</span> , baseR / <span class=\"number\">6F</span> * <span class=\"number\">4</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">50F</span> , baseR / <span class=\"number\">6F</span> * <span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">85F</span> , baseR / <span class=\"number\">6F</span> * <span class=\"number\">5</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">120F</span> , baseR / <span class=\"number\">6F</span> * <span class=\"number\">5</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">150F</span> , baseR ))</span><br><span class=\"line\"></span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">160F</span> , baseR / <span class=\"number\">9F</span> * <span class=\"number\">7</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">170F</span> , baseR / <span class=\"number\">9F</span> * <span class=\"number\">5</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">180F</span> , baseR / <span class=\"number\">9F</span> * <span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">200F</span> , baseR / <span class=\"number\">3F</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">195F</span> , baseR / <span class=\"number\">3F</span> * <span class=\"number\">2</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">190F</span> , baseR ))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">       val path = Path()</span><br><span class=\"line\">       path.moveTo(points[<span class=\"number\">0</span>].x , points[<span class=\"number\">0</span>].y)</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (index in <span class=\"number\">0</span>..((points.size - <span class=\"number\">1</span>) / <span class=\"number\">3</span> - <span class=\"number\">1</span>) )&#123;</span><br><span class=\"line\">           path.cubicTo(</span><br><span class=\"line\">                   points[<span class=\"number\">3</span> * index + <span class=\"number\">1</span>].x , points[<span class=\"number\">3</span> * index + <span class=\"number\">1</span>].y ,</span><br><span class=\"line\">                   points[<span class=\"number\">3</span> * index + <span class=\"number\">2</span>].x , points[<span class=\"number\">3</span> * index + <span class=\"number\">2</span>].y ,</span><br><span class=\"line\">                   points[<span class=\"number\">3</span> * index + <span class=\"number\">3</span>].x , points[<span class=\"number\">3</span> * index + <span class=\"number\">3</span>].y)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//绘制图形</span></span><br><span class=\"line\">       canvas.drawPath(path, paint)</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> bm</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>绘制遮罩层(火焰的扰动效果)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">makeDst</span><span class=\"params\">(w: Int, h: Int, index :Float)</span>: Bitmap </span>&#123;</span><br><span class=\"line\">    val bm = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888)</span><br><span class=\"line\">    val canvas = Canvas(bm)</span><br><span class=\"line\">    canvas.translate(baseR / <span class=\"number\">2F</span>, <span class=\"number\">0F</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    val paint = Paint()</span><br><span class=\"line\">    paint.color = Color.YELLOW</span><br><span class=\"line\"></span><br><span class=\"line\">    val dstLength = baseR * coefficient * index * <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    val rectf = RectF(-dstLength, -dstLength, dstLength, dstLength)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//没找到合适的扰动效果,只能简单实现一个遮罩效果</span></span><br><span class=\"line\">    canvas.drawArc(rectf , <span class=\"number\">0F</span> , <span class=\"number\">360F</span> , <span class=\"keyword\">true</span>, paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bm</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>火焰来说,虽然需要的效果代码都实现了,但是缺少设计,整体的效果到时不尽如人意.针对效果来说还有很多的优化空间</p>\n","site":{"data":{}},"excerpt":"<p>#Android自定义View之元素按钮</p>\n<blockquote>\n<p>之前在dribbble看到的三个元素的按钮,参考了设计的创意,添加了自己定义的动画效果来实现.先看效果</p>\n</blockquote>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/91123430.jpg\" alt=\"效果图\"></p>","more":"<p>分别是水火电三个元素的按钮实现.其中电的实现最简单,水的次之,火的实际还并不满意,没有火焰扰动的感觉,尝试过几次但是效果都不理想,最后只保留了自下向上的扇形遮罩.如果有好的效果再优化实现.</p>\n<h2 id=\"闪电篇\"><a href=\"#闪电篇\" class=\"headerlink\" title=\"闪电篇\"></a>闪电篇</h2><h3 id=\"设计过程\"><a href=\"#设计过程\" class=\"headerlink\" title=\"设计过程\"></a>设计过程</h3><p>通过闪电的位置将整体划分成七个部分(七个部分的主要原因是最初设计了一个中部放大的透镜效果,但是没能实现),从右上角进入,在中心点附近运动,直到停在中心点.闪电本身可以看做一个中心对称的图形,整理就简化成了现将canvas旋转一定角度,然后绘制中心对称的闪电形状,最后在x轴上运动就可以了.</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/47003102.jpg\" alt=\"黄线是旋转后的坐标\"></p>\n<p>黄线是旋转后的坐标,可以看出简化后实现起来很简单.</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><ul>\n<li><p>背景部分</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//绘制闪电背景</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun  <span class=\"title\">drawBaseButton</span><span class=\"params\">(canvas: Canvas , index: Float)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置画笔</span></span><br><span class=\"line\">    val paint = Paint()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加闪电移动到指定位置时的背景颜色设置</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((index &lt;= <span class=\"number\">0.45F</span> &amp;&amp; index &gt;= <span class=\"number\">0.35F</span>) || (index &gt;= <span class=\"number\">0.65F</span> &amp;&amp; index &lt;= <span class=\"number\">0.75F</span>)) &#123;</span><br><span class=\"line\">        paint.color = Color.parseColor(<span class=\"string\">\"#ACADAC\"</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        paint.color = Color.parseColor(<span class=\"string\">\"#595A59\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    paint.style = Paint.Style.FILL</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制闪电背景</span></span><br><span class=\"line\">    canvas.drawArc(RectF(-baseR, -baseR, baseR, baseR), <span class=\"number\">0F</span> , <span class=\"number\">360F</span>,<span class=\"keyword\">true</span> , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>闪电部分</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun  <span class=\"title\">drawLighting</span><span class=\"params\">(canvas: Canvas , index: Float)</span> </span>&#123;</span><br><span class=\"line\">    val baseR = baseR * coefficient</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = index</span><br><span class=\"line\">    <span class=\"keyword\">var</span> changeR = <span class=\"number\">0F</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将整个闪电的运动拆成七个部分</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt;= <span class=\"number\">0.25</span>)&#123;</span><br><span class=\"line\">        changeR  = <span class=\"keyword\">this</span>.baseR + baseR</span><br><span class=\"line\">        changeR = (changeR * (<span class=\"number\">1</span> - index / <span class=\"number\">0.25</span>)).toFloat()</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index &lt;= <span class=\"number\">0.4</span>)&#123;</span><br><span class=\"line\">        index = index - <span class=\"number\">0.25F</span></span><br><span class=\"line\">        changeR  = <span class=\"keyword\">this</span>.baseR</span><br><span class=\"line\">        changeR = -(changeR * (index / (<span class=\"number\">0.4F</span> - <span class=\"number\">0.25F</span>)))</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index &lt;= <span class=\"number\">0.6F</span>)&#123;</span><br><span class=\"line\">        index = index - <span class=\"number\">0.4F</span></span><br><span class=\"line\">        changeR = <span class=\"keyword\">this</span>.baseR</span><br><span class=\"line\">        changeR = -changeR *  (<span class=\"number\">1</span> - index / <span class=\"number\">0.2F</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index &lt;= <span class=\"number\">0.7F</span>)&#123;</span><br><span class=\"line\">        index = index - <span class=\"number\">0.6F</span></span><br><span class=\"line\">        changeR = baseR</span><br><span class=\"line\">        changeR = changeR * index / <span class=\"number\">0.1F</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index &lt;= <span class=\"number\">0.8F</span>)&#123;</span><br><span class=\"line\">        index = index - <span class=\"number\">0.7F</span></span><br><span class=\"line\">        changeR = baseR</span><br><span class=\"line\">        changeR = baseR - changeR * index / <span class=\"number\">0.1F</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index &lt;= <span class=\"number\">0.9F</span>)&#123;</span><br><span class=\"line\">        index = index - <span class=\"number\">0.8F</span></span><br><span class=\"line\">        changeR = baseR</span><br><span class=\"line\">        changeR = -changeR * index / <span class=\"number\">0.1F</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index &lt;= <span class=\"number\">1F</span>)&#123;</span><br><span class=\"line\">        index = index - <span class=\"number\">0.9F</span></span><br><span class=\"line\">        changeR = baseR</span><br><span class=\"line\">        changeR = -changeR + changeR * (index / <span class=\"number\">0.1F</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置画笔</span></span><br><span class=\"line\">    val path = Path()</span><br><span class=\"line\">    val paint = Paint()</span><br><span class=\"line\">    paint.strokeWidth = <span class=\"number\">5F</span></span><br><span class=\"line\">    paint.style = Paint.Style.FILL</span><br><span class=\"line\">    paint.color = viewBackgroundColor</span><br><span class=\"line\"></span><br><span class=\"line\">    val points :MutableList&lt;Point&gt; = ArrayList()</span><br><span class=\"line\">    <span class=\"comment\">//设置绘制闪电的路径点</span></span><br><span class=\"line\">    points.add(pointFactory(<span class=\"number\">60</span> , baseR))</span><br><span class=\"line\">    points.add(pointFactory(-<span class=\"number\">45</span> , baseR / <span class=\"number\">2F</span>))</span><br><span class=\"line\">    points.add(pointFactory(-<span class=\"number\">45</span> - <span class=\"number\">90</span> , baseR / <span class=\"number\">5F</span>))</span><br><span class=\"line\">    points.add(pointFactory(-<span class=\"number\">30</span> - <span class=\"number\">90</span> , baseR))</span><br><span class=\"line\">    points.add(pointFactory(<span class=\"number\">45</span> + <span class=\"number\">90</span> , baseR / <span class=\"number\">2F</span>))</span><br><span class=\"line\">    points.add(pointFactory(<span class=\"number\">45</span> , baseR / <span class=\"number\">5F</span>))</span><br><span class=\"line\">    points.add(pointFactory(<span class=\"number\">60</span> , baseR))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置闪电的偏移量(模拟运动情况)</span></span><br><span class=\"line\">    <span class=\"comment\">//原本还想实现一个中心放大的透镜效果,但是效果很僵硬,只能移除了</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i in <span class=\"number\">0</span>..points.size - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        points.set(i , Point(points[i].x + changeR , points[i].y))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    path.moveTo(points[<span class=\"number\">0</span>].x , points[<span class=\"number\">0</span>].y)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (index in <span class=\"number\">1</span>..points.size - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        path.lineTo(points[index].x , points[index].y)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.drawPath(path , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//闪电绘制辅助坐标系</span></span><br><span class=\"line\"><span class=\"comment\">//        val paint2 = Paint()</span></span><br><span class=\"line\"><span class=\"comment\">//        paint2.strokeWidth = 5F</span></span><br><span class=\"line\"><span class=\"comment\">//        paint2.color = Color.YELLOW</span></span><br><span class=\"line\"><span class=\"comment\">//        canvas.drawLine(1000F , 0F ,-1000F , 0F , paint2)</span></span><br><span class=\"line\"><span class=\"comment\">//        canvas.drawLine( 0F ,-1000F , 0F , 1000F , paint2)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>闪电的实现还是很简单的,因为不涉及到图形的变化,只有一个简单的位移效果</p>\n<h2 id=\"霜-水-之哀伤篇\"><a href=\"#霜-水-之哀伤篇\" class=\"headerlink\" title=\"霜(水)之哀伤篇\"></a>霜(水)之哀伤篇</h2><h3 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h3><p>水滴的实现相对对于闪电来说麻烦一些,一是水滴本身不是很好绘制,又因为水滴在下落的过程中存在变化,最后选择通过贝塞尔曲线实现.二是水滴和背景之间的交互,在水滴未完全下落到背景中的时候,水滴背景的上部有个向下凹陷的过程,这个不是闪电背景的简单变化可能做到的.最后也是使用贝塞尔曲线绘制的一个圆弧的区域遮盖来实现.</p>\n<p>整理需要变化的元素是水滴及顶部的遮盖.都是使用贝塞尔曲线实现的.顶部的凹陷随着水滴的下落不断凹陷,直至水滴脱离顶部后再渐渐回落.主要是找到水滴完全脱离的时间当做顶部凹陷的关键点就好.水滴下落的过程中是需要变化,最开始可能稍微瘦长一些,然后相对变扁.</p>\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><ul>\n<li><p>水滴背景的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//绘制水滴背景</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> fun  <span class=\"title\">drawBaseButton</span><span class=\"params\">(canvas: Canvas , index: Float)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//计算水滴半进入区间(确定水滴背景上部变化范围)</span></span><br><span class=\"line\">        val waterRand = (baseR * <span class=\"number\">1.25</span> * coefficient) / ((baseR * <span class=\"number\">1.25</span> * coefficient) + baseR)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置画笔</span></span><br><span class=\"line\">        val paint = Paint()</span><br><span class=\"line\">        paint.color = Color.parseColor(<span class=\"string\">\"#45AAE1\"</span>)</span><br><span class=\"line\">        paint.style = Paint.Style.FILL</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//绘制水滴背景下半部分的(此部分不需要变换)</span></span><br><span class=\"line\">        canvas.drawArc(RectF(-baseR, -baseR, baseR, baseR), <span class=\"number\">180F</span> , <span class=\"number\">180F</span>,<span class=\"keyword\">true</span> , paint)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置点list 顺序存储相关路径及关键点</span></span><br><span class=\"line\">        val points : MutableList&lt;Point&gt; = ArrayList()</span><br><span class=\"line\">        points.add(Point(-baseR , <span class=\"number\">0F</span>))</span><br><span class=\"line\">        points.add(Point(-baseR , baseR * C))</span><br><span class=\"line\">        points.add(Point(-baseR * C , baseR ))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> baseButtonTop : Float</span><br><span class=\"line\">        <span class=\"comment\">//根据index判断上部的形态</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt;= waterRand)&#123;</span><br><span class=\"line\">            baseButtonTop = baseR - (baseR * coefficient * index) * <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            baseButtonTop = baseR - (baseR * coefficient) * <span class=\"number\">2</span> + (baseR * coefficient * index) * <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (baseButtonTop &gt; baseR)&#123;</span><br><span class=\"line\">                baseButtonTop = baseR</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        points.add(Point(<span class=\"number\">0F</span>, baseButtonTop))</span><br><span class=\"line\"></span><br><span class=\"line\">        points.add(Point(baseR * C , baseR))</span><br><span class=\"line\">        points.add(Point(baseR , baseR * C ))</span><br><span class=\"line\">        points.add(Point(baseR , <span class=\"number\">0F</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        val path = Path()</span><br><span class=\"line\">        <span class=\"comment\">//画笔移动到指定位置(不移动的话通过贝塞尔绘制的图形会有误差)</span></span><br><span class=\"line\">        path.moveTo(points[<span class=\"number\">0</span>].x , points[<span class=\"number\">0</span>].y)</span><br><span class=\"line\">        <span class=\"comment\">//设置贝塞尔曲线</span></span><br><span class=\"line\">        path.cubicTo(</span><br><span class=\"line\">                points[<span class=\"number\">1</span>].x , points[<span class=\"number\">1</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">2</span>].x , points[<span class=\"number\">2</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">3</span>].x , points[<span class=\"number\">3</span>].y)</span><br><span class=\"line\"></span><br><span class=\"line\">        path.cubicTo(</span><br><span class=\"line\">                points[<span class=\"number\">4</span>].x , points[<span class=\"number\">4</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">5</span>].x , points[<span class=\"number\">5</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">6</span>].x , points[<span class=\"number\">6</span>].y)</span><br><span class=\"line\">        <span class=\"comment\">//绘制</span></span><br><span class=\"line\">        canvas.drawPath(path, paint)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>水滴的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun  <span class=\"title\">drawDrops</span><span class=\"params\">(canvas: Canvas , index: Float)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//设置水滴半径</span></span><br><span class=\"line\">        val baseR = baseR * coefficient</span><br><span class=\"line\">        val index = <span class=\"number\">1</span> - index</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//根据index将画布中心移动到对应位置</span></span><br><span class=\"line\">        canvas.translate( <span class=\"number\">0F</span> , (<span class=\"keyword\">this</span>.baseR * <span class=\"number\">1.125F</span> + baseR)* index - <span class=\"keyword\">this</span>.baseR / <span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置画笔</span></span><br><span class=\"line\">        val paint = Paint()</span><br><span class=\"line\">        paint.style = Paint.Style.FILL</span><br><span class=\"line\">        paint.color = viewBackgroundColor</span><br><span class=\"line\">        <span class=\"comment\">//存储关键点坐标</span></span><br><span class=\"line\">        val points : MutableList&lt;Point&gt; = ArrayList()</span><br><span class=\"line\">        points.add(Point(-baseR , <span class=\"number\">0F</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//水滴顶部变换系数</span></span><br><span class=\"line\">        val topCoefficient = <span class=\"number\">1.5F</span></span><br><span class=\"line\"></span><br><span class=\"line\">        points.add(Point(-baseR , baseR * C))</span><br><span class=\"line\">        points.add(Point(-baseR * C , baseR ))</span><br><span class=\"line\">        points.add(Point(<span class=\"number\">0F</span>, (<span class=\"number\">1.5</span> * baseR + baseR * topCoefficient * index).toFloat()))</span><br><span class=\"line\"></span><br><span class=\"line\">        points.add(Point(baseR * C , baseR))</span><br><span class=\"line\">        points.add(Point(baseR , baseR * C ))</span><br><span class=\"line\">        points.add(Point(baseR , <span class=\"number\">0F</span>))</span><br><span class=\"line\">        <span class=\"comment\">//水滴底部变换系数</span></span><br><span class=\"line\">        <span class=\"comment\">//这两个变换系数使得水滴在下落的过程中渐渐变扁</span></span><br><span class=\"line\">        val bottomCoefficient = <span class=\"number\">0.3F</span></span><br><span class=\"line\">        val tempBaseR = (baseR - baseR * bottomCoefficient * index)</span><br><span class=\"line\">        points.add(Point(baseR , -tempBaseR * C))</span><br><span class=\"line\">        points.add(Point(baseR * C , -tempBaseR ))</span><br><span class=\"line\">        points.add(Point(<span class=\"number\">0F</span>, -tempBaseR))</span><br><span class=\"line\"></span><br><span class=\"line\">        points.add(Point(-baseR * C , -tempBaseR))</span><br><span class=\"line\">        points.add(Point(-baseR , -tempBaseR * C ))</span><br><span class=\"line\">        points.add(Point(-baseR , <span class=\"number\">0F</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置四个部分(90°一个部分)的贝塞尔曲线</span></span><br><span class=\"line\">        <span class=\"comment\">//关于贝塞尔曲线的事情...  感觉可以再做点记录</span></span><br><span class=\"line\">        val path = Path()</span><br><span class=\"line\">        path.moveTo(points[<span class=\"number\">0</span>].x , points[<span class=\"number\">0</span>].y)</span><br><span class=\"line\">        path.cubicTo(</span><br><span class=\"line\">                points[<span class=\"number\">1</span>].x , points[<span class=\"number\">1</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">2</span>].x , points[<span class=\"number\">2</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">3</span>].x , points[<span class=\"number\">3</span>].y)</span><br><span class=\"line\"></span><br><span class=\"line\">        path.cubicTo(</span><br><span class=\"line\">                points[<span class=\"number\">4</span>].x , points[<span class=\"number\">4</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">5</span>].x , points[<span class=\"number\">5</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">6</span>].x , points[<span class=\"number\">6</span>].y)</span><br><span class=\"line\"></span><br><span class=\"line\">        path.cubicTo(</span><br><span class=\"line\">                points[<span class=\"number\">7</span>].x , points[<span class=\"number\">7</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">8</span>].x , points[<span class=\"number\">8</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">9</span>].x , points[<span class=\"number\">9</span>].y)</span><br><span class=\"line\"></span><br><span class=\"line\">        path.cubicTo(</span><br><span class=\"line\">                points[<span class=\"number\">10</span>].x , points[<span class=\"number\">10</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">11</span>].x , points[<span class=\"number\">11</span>].y ,</span><br><span class=\"line\">                points[<span class=\"number\">12</span>].x , points[<span class=\"number\">12</span>].y)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//绘制图形</span></span><br><span class=\"line\">        canvas.drawPath(path, paint)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>偷懒的原因所以直接使用背景色做的一个简单的遮盖,没有使用遮罩(其实闪电的部分也是).</p>\n<p>相对来说水滴的实现最为满意,主要的预期效果都成功的实现出来了,整体看来效果还是可以的</p>\n<h2 id=\"火之高兴篇\"><a href=\"#火之高兴篇\" class=\"headerlink\" title=\"火之高兴篇\"></a>火之高兴篇</h2><h3 id=\"设计思路-1\"><a href=\"#设计思路-1\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h3><p>虽然整体看来,应该是一个难度中等的动画,但是在设计的过程中经历了空手用贝塞尔画火焰(最开始的想法本是火焰本身也是会动的),火焰扰动效果的实现(这个最为艰难,主要是不知道怎么控制火焰扰动的效果,其次是遮罩层的使用,具体的坑会另开文字来讲解),最后只能简单做了个底部向上的遮罩层来当做火焰的扰动情况</p>\n<p>所以其实就是绘制一个火焰的形状,然后再用个遮罩层来遮盖实现火焰的扰动</p>\n<h3 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>因为背景没有什么特效,就不贴背景的代码了</p>\n<ul>\n<li>整体火焰效果控制</li>\n</ul>\n<p>因为火焰需要展示绘制完成的火焰和遮罩层中相交的部分,要使用PorterDuffXfermode相关的方法,所以在绘制中将原图层和遮罩层分开设计</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun  <span class=\"title\">drawFires</span><span class=\"params\">(canvas: Canvas , index: Float)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置火焰半径</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置原图层(火焰绘制)</span></span><br><span class=\"line\">    val srcB = makeSrc(<span class=\"number\">2</span> * baseR.toInt(), <span class=\"number\">2</span> * baseR.toInt(), index)</span><br><span class=\"line\">    <span class=\"comment\">//设置遮罩层</span></span><br><span class=\"line\">    val dstB = makeDst(<span class=\"number\">2</span> * baseR.toInt(), <span class=\"number\">2</span> * baseR.toInt(), index)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    val paint = Paint()</span><br><span class=\"line\">    canvas.saveLayer(-baseR, -baseR, baseR , baseR, <span class=\"keyword\">null</span>, Canvas.ALL_SAVE_FLAG)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制遮罩层</span></span><br><span class=\"line\">    canvas.drawBitmap(dstB,  -baseR/<span class=\"number\">2</span>,  -baseR/<span class=\"number\">2</span>, paint)</span><br><span class=\"line\">    <span class=\"comment\">//设置遮罩模式为SRC_IN显示原图层中原图层与遮罩层相交部分</span></span><br><span class=\"line\">    paint.xfermode = PorterDuffXfermode(PorterDuff.Mode.SRC_IN)</span><br><span class=\"line\">    canvas.drawBitmap(srcB, -baseR/<span class=\"number\">2</span>, -baseR/<span class=\"number\">2</span>, paint)</span><br><span class=\"line\">    paint.xfermode = <span class=\"keyword\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>绘制原图层(火焰本身的绘制)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">makeSrc</span><span class=\"params\">(w: Int, h: Int , index :Float)</span>: Bitmap </span>&#123;</span><br><span class=\"line\">       val bm = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888)</span><br><span class=\"line\">       val canvas = Canvas(bm)</span><br><span class=\"line\"></span><br><span class=\"line\">       canvas.translate(baseR / <span class=\"number\">2F</span>, baseR / <span class=\"number\">2F</span>)   <span class=\"comment\">// 将坐标系移动到画布中央</span></span><br><span class=\"line\"></span><br><span class=\"line\">       val index = index * <span class=\"number\">0.5F</span> + <span class=\"number\">0.5F</span></span><br><span class=\"line\">       val baseR = baseR * coefficient * index</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//设置画笔</span></span><br><span class=\"line\">       val paint = Paint()</span><br><span class=\"line\">       paint.style = Paint.Style.FILL</span><br><span class=\"line\">       paint.color = viewBackgroundColor</span><br><span class=\"line\">       paint.strokeWidth = <span class=\"number\">10F</span></span><br><span class=\"line\">       <span class=\"comment\">//存储关键点坐标</span></span><br><span class=\"line\">       val points : MutableList&lt;Point&gt; = ArrayList()</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//整体火焰是由六个贝塞尔曲线绘制成的</span></span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">190F</span> , baseR))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">280F</span> , baseR / <span class=\"number\">3F</span> * <span class=\"number\">4</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">320F</span> ,  baseR / <span class=\"number\">6F</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">350F</span> , baseR))</span><br><span class=\"line\"></span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">10F</span> , baseR))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">30F</span> , baseR / <span class=\"number\">3F</span>* <span class=\"number\">2</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">50F</span> , baseR / <span class=\"number\">3F</span> ))</span><br><span class=\"line\"></span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">60F</span> , baseR / <span class=\"number\">6F</span> * <span class=\"number\">3</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">60F</span> , baseR / <span class=\"number\">6F</span> * <span class=\"number\">4</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">50F</span> , baseR / <span class=\"number\">6F</span> * <span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">85F</span> , baseR / <span class=\"number\">6F</span> * <span class=\"number\">5</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">120F</span> , baseR / <span class=\"number\">6F</span> * <span class=\"number\">5</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">150F</span> , baseR ))</span><br><span class=\"line\"></span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">160F</span> , baseR / <span class=\"number\">9F</span> * <span class=\"number\">7</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">170F</span> , baseR / <span class=\"number\">9F</span> * <span class=\"number\">5</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">180F</span> , baseR / <span class=\"number\">9F</span> * <span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">200F</span> , baseR / <span class=\"number\">3F</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">195F</span> , baseR / <span class=\"number\">3F</span> * <span class=\"number\">2</span>))</span><br><span class=\"line\">       points.add(pointFactory( <span class=\"number\">190F</span> , baseR ))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">       val path = Path()</span><br><span class=\"line\">       path.moveTo(points[<span class=\"number\">0</span>].x , points[<span class=\"number\">0</span>].y)</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (index in <span class=\"number\">0</span>..((points.size - <span class=\"number\">1</span>) / <span class=\"number\">3</span> - <span class=\"number\">1</span>) )&#123;</span><br><span class=\"line\">           path.cubicTo(</span><br><span class=\"line\">                   points[<span class=\"number\">3</span> * index + <span class=\"number\">1</span>].x , points[<span class=\"number\">3</span> * index + <span class=\"number\">1</span>].y ,</span><br><span class=\"line\">                   points[<span class=\"number\">3</span> * index + <span class=\"number\">2</span>].x , points[<span class=\"number\">3</span> * index + <span class=\"number\">2</span>].y ,</span><br><span class=\"line\">                   points[<span class=\"number\">3</span> * index + <span class=\"number\">3</span>].x , points[<span class=\"number\">3</span> * index + <span class=\"number\">3</span>].y)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//绘制图形</span></span><br><span class=\"line\">       canvas.drawPath(path, paint)</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> bm</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>绘制遮罩层(火焰的扰动效果)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">makeDst</span><span class=\"params\">(w: Int, h: Int, index :Float)</span>: Bitmap </span>&#123;</span><br><span class=\"line\">    val bm = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888)</span><br><span class=\"line\">    val canvas = Canvas(bm)</span><br><span class=\"line\">    canvas.translate(baseR / <span class=\"number\">2F</span>, <span class=\"number\">0F</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    val paint = Paint()</span><br><span class=\"line\">    paint.color = Color.YELLOW</span><br><span class=\"line\"></span><br><span class=\"line\">    val dstLength = baseR * coefficient * index * <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    val rectf = RectF(-dstLength, -dstLength, dstLength, dstLength)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//没找到合适的扰动效果,只能简单实现一个遮罩效果</span></span><br><span class=\"line\">    canvas.drawArc(rectf , <span class=\"number\">0F</span> , <span class=\"number\">360F</span> , <span class=\"keyword\">true</span>, paint)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bm</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>火焰来说,虽然需要的效果代码都实现了,但是缺少设计,整体的效果到时不尽如人意.针对效果来说还有很多的优化空间</p>"},{"title":"在搬瓦工中搭建个人vpn(ss和pptp)","date":"2017-02-04T16:08:52.000Z","_content":"\n\n> 帮助为了方便访问一些不存在的网站的你们\n\n## 搬瓦工\n[官方网站](http://bandwagonhost.com/) 虽然经常连接不上  反而这个[备用地址](http://bwh1.net)倒是连接速度很快\n一个支持*ailpay*的国外vps 价格十分的感人 现在应该是2.99美元一个月 同时五个机房可以随意更换 也就是说可以获得五个ip地址 某些情况下十分的有用\n\n同样价格感人的还有Host1plus 2美元每月 但是线路不是很稳定详细的可以查看[官方网站](https://www.host1plus.com/)\n\n这里只是简单的介绍了两个可以通过支付宝支付的国外vps 免去了还得申请visa卡的纠结 更多详细的内容可以查看[十个便宜VPS(国内国外)主机分享-VPS服务器建站和搭建应用服务体验](https://zhuanlan.zhihu.com/p/21872685)\n  <!-- more -->\n\n## ss和pptp\nss就是Shadowsocks 一个轻量级的科学上网方式支持OS X Windows Linux iOS android的客户端. 具体可以参考[Shadowsocks的详细说明](https://zh.wikipedia.org/zh-cn/Shadowsocks)\n\npptp是一种点对点隧道协议 可以用来实现科学上网相对于ss来说可配置性更多. 具体的也可以参考[点对点隧道协议](https://zh.wikipedia.org/wiki/%E9%BB%9E%E5%B0%8D%E9%BB%9E%E9%9A%A7%E9%81%93%E5%8D%94%E8%AD%B0)\n\n\n## 个人vpn搭建教程\n\n## vps的准备\n由于是在搬瓦工中搭建的vpn 所以还是推荐购买搬瓦工的服务器 需要注意以下几点\n1. 注册的邮箱需要真实 省的以后无法找回密码\n2. 同样是注册时 用拼音填写就可以 资料是否真实无所谓 但是国家 省份需要真实存在的\n3. 购买的时候选择价格最低的就好 国外的服务器一般都是用来搭建这个的不是 500g额度也够你使用了 可以根据自己的情况选择购买的方式 一月 一季度 半年和一年的四种方式 时间越长每月的花销越低 看个人的选择\n4. 玄学是洛杉矶的机房的网速最快\n5. 搬瓦工的对文本的操作是会在额外的弹窗中进行的 注意不要阻止弹出 要不你会因为奇怪的提示而怀疑人生的\n\n\n## 通过ss搭建个人vpn\n搬瓦工有一键开启ss的功能 只是想简单的自己做个vpn没有额外其他的要求可以使用一下 十分的便捷 同样 我也会说一下手动配置的方法 也十分的便捷其实\n### 利用ss的Shadowsocks Server一键开启vpn\n1. 进入控制台\n![进入控制台](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/51872827.jpg)\n\n2. 对系统进行更新\n![对系统进行更新](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/4821245.jpg)\n\n3. 一键生成ss服务\n\n  ![一键生成ss服务](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/47291324.jpg)\n  选择一键生成的功能\n\n  ![成功生成](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/33245491.jpg)\n  这个时候就说明生成成功了\n\n  ![查看信息](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/3453713.jpg)\n  ss服务的相关配置信息\n\n  ![配置ss客户端](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/77964504.jpg)\n  下载ss客户端后创建新的连接 输入相关的信息\n\n  ![相关介绍](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/60933694.jpg)\n\n  ![关闭ss](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/99019643.jpg)\n  不需要的时候可以点击这里关闭ss服务\n\n### 手动配置ss服务开启vpn\n\n1. 进入控制台\n\n2. 利用pip安装ss服务\n\n  ```\n  # yum install python-setuptools && easy_install pip  \n  # pip install shadowsocks\n  ```\n3. 配置相关信息\n\n  也有两种方式 推荐第一种 配置信息方便查看和更改\n  *  创建配置信息\n    ```\n    # touch /etc/shadowsocks.json\n    # vi /etc/shadowsocks.json\n\n    {\n    \"server\":\"xxx.xxx.xxx\", //服务器的IP\n    \"server_port\":443,      //服务器断开\n    \"local_address\": \"127.0.0.1\",   //客户端地址\n    \"local_port\":1080,              //客户端端口\n    \"password\":\"MyPass\",    //密码\n    \"timeout\":600,          //超时时间(s)\n    \"method\":\"rc4-md5\"      //加密方式 可选“bf-cfb”, “aes-256-cfb”, \"salsa20\" , “rc4″等\n    }\n    ```\n    运行ss服务\n    ```\n    # ssserver -c /etc/shadowsocks.json -d start\n    ```\n  * 直接设置相关信息\n    ```\n    # ssserver -p 443 -k MyPass -m rc4-md5 -d start\n    ```\n4. 停止ss服务\n  ```\n  #ssserver -c /etc/shadowsocks.json -d stop\n  //通过json文件配置开启的服务关闭方法\n\n  #ssserver -d stop\n  //直接配置信息开启的服务关闭的方法\n  ```\n\n## 通过pptp搭建个人vpn\n1. 安装PPP和iptables\n  ```\n  # yum install -y ppp iptables\n  ```\n2. 安装pptpd\n  由于我们是通过yum安转的ppp 因为yum安转的ppp是最新的版本 所以我们要根据当前的ppp版本来选择pptp的版本\n  ```\n  # yum list installed ppp  //查看当前ppp版本\n  ```\n  ![查看当前ppp版本](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/34188869.jpg)\n\n  根据当期ppp版本选择对应的pptp版本 可以在[这里](http://poptop.sourceforge.net/yum/stable/packages/)找到对应的版本下载\n\n  ppp 2.4.4 对应 pptp 1.3.4的版本\n\n  ppp 2.4.5 对应 pptp 1.4.0的版本\n\n  ```\n  # wget http://poptop.sourceforge.net/yum/stable/packages/pptpd-1.4.0-1.el6.x86_64.rpm\n  //下载对应的版本\n  # yum install perl\n  //安装perl\n  # rpm -ivh pptpd-1.4.0-1.el6.x86_64.rpm\n  //安装pptp\n  ```\n\n  至此均安装完毕 下面进行配置\n\n3. vpn相关配置\n  一下均对配置文件进行备份 有需要的可以回滚操作\n\n  * 配置 /etc/ppp/options.pptpd\n\n  ```\n  # cp /etc/ppp/options.pptpd /etc/ppp/options.pptpd.bak\n  //备份\n  # vi /etc/ppp/options.pptpd\n\n  //将以下内容添加到options.pptpd当中\n  ms-dns 8.8.8.8\n  ms-dns 8.8.4.4\n  ```\n  * 配置 /etc/ppp/chap-secrets\n\n  ```\n  # cp /etc/ppp/chap-secrets   /etc/ppp/chap-secrets.bak\n  //备份\n  # vi /etc/ppp/chap-secrets\n\n  //添加以下内容\n  myusername pptpd mypassword *\n  //myusername vpn账号\n  //mypassword vpn密码\n  //* 可连接的ip地址 *表示接受所有ip地址的来源\n  ```\n  * 配置 /etc/pptpd.conf\n\n  ```\n  # cp /etc/pptpd.conf     /etc/pptpd.conf.bak\n  //备份\n  # vi /etc/pptpd.conf\n\n  //添加一下内容 用于获得vpn客户端获得ip的范围\n  localip 192.168.0.1\n  remoteip 192.168.0.234-238,192.168.0.245\n\n  //配置文件的最后要以空行结尾\n  ```\n\n  * 配置 /etc/sysctl.conf\n\n  ```\n  # cp /etc/sysctl.conf /etc/sysctl.conf.bak\n  # vi /etc/sysctl.conf\n\n  //修改以下内容 使其支持转发\n  net.ipv4.ip_forward = 1\n\n  # /sbin/sysctl -p\n  //保存修改后的文件\n  ```\n\n  * 启动pptp服务和iptables\n\n  ```\n  # /sbin/service iptables start\n  //启动iptables\n\n  # iptables -t nat -A POSTROUTING -o eth0 -s 192.168.0.0/24 -j SNAT --to-source xxx.xxx.xxx.xxx\n  //设置转发功能 -o eth0制定网卡\n  // xxx.xxx.xxx.xxx为公网ip\n\n  # /etc/init.d/iptables save\n  //保存iptables的转发规则\n  # /sbin/service iptables restart\n  //重新启动iptables\n\n  # service pptpd start\n  ```\n\n## FinalSpeed对ss的优化提速\n```\n# wget http://fs.d1sm.net/finalspeed/install_fs.sh\n# chmod +x install_fs.sh\n# ./install_fs.sh 2>&1 | tee install.log\n```\n\n\n## 相关注意事项\n**个人学习用 不要用于奇怪的地方 游戏延迟可能很高**\n","source":"_posts/vpn.md","raw":"---\ntitle: 在搬瓦工中搭建个人vpn(ss和pptp)\ndate: 2017-02-05 00:08:52\ntags: [\"vpn\" , \"搬瓦工\" , \"bandwagonhost\" , \"Shadowsocks\" , \"ss\"]\ncategories: \"教程\"\n---\n\n\n> 帮助为了方便访问一些不存在的网站的你们\n\n## 搬瓦工\n[官方网站](http://bandwagonhost.com/) 虽然经常连接不上  反而这个[备用地址](http://bwh1.net)倒是连接速度很快\n一个支持*ailpay*的国外vps 价格十分的感人 现在应该是2.99美元一个月 同时五个机房可以随意更换 也就是说可以获得五个ip地址 某些情况下十分的有用\n\n同样价格感人的还有Host1plus 2美元每月 但是线路不是很稳定详细的可以查看[官方网站](https://www.host1plus.com/)\n\n这里只是简单的介绍了两个可以通过支付宝支付的国外vps 免去了还得申请visa卡的纠结 更多详细的内容可以查看[十个便宜VPS(国内国外)主机分享-VPS服务器建站和搭建应用服务体验](https://zhuanlan.zhihu.com/p/21872685)\n  <!-- more -->\n\n## ss和pptp\nss就是Shadowsocks 一个轻量级的科学上网方式支持OS X Windows Linux iOS android的客户端. 具体可以参考[Shadowsocks的详细说明](https://zh.wikipedia.org/zh-cn/Shadowsocks)\n\npptp是一种点对点隧道协议 可以用来实现科学上网相对于ss来说可配置性更多. 具体的也可以参考[点对点隧道协议](https://zh.wikipedia.org/wiki/%E9%BB%9E%E5%B0%8D%E9%BB%9E%E9%9A%A7%E9%81%93%E5%8D%94%E8%AD%B0)\n\n\n## 个人vpn搭建教程\n\n## vps的准备\n由于是在搬瓦工中搭建的vpn 所以还是推荐购买搬瓦工的服务器 需要注意以下几点\n1. 注册的邮箱需要真实 省的以后无法找回密码\n2. 同样是注册时 用拼音填写就可以 资料是否真实无所谓 但是国家 省份需要真实存在的\n3. 购买的时候选择价格最低的就好 国外的服务器一般都是用来搭建这个的不是 500g额度也够你使用了 可以根据自己的情况选择购买的方式 一月 一季度 半年和一年的四种方式 时间越长每月的花销越低 看个人的选择\n4. 玄学是洛杉矶的机房的网速最快\n5. 搬瓦工的对文本的操作是会在额外的弹窗中进行的 注意不要阻止弹出 要不你会因为奇怪的提示而怀疑人生的\n\n\n## 通过ss搭建个人vpn\n搬瓦工有一键开启ss的功能 只是想简单的自己做个vpn没有额外其他的要求可以使用一下 十分的便捷 同样 我也会说一下手动配置的方法 也十分的便捷其实\n### 利用ss的Shadowsocks Server一键开启vpn\n1. 进入控制台\n![进入控制台](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/51872827.jpg)\n\n2. 对系统进行更新\n![对系统进行更新](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/4821245.jpg)\n\n3. 一键生成ss服务\n\n  ![一键生成ss服务](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/47291324.jpg)\n  选择一键生成的功能\n\n  ![成功生成](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/33245491.jpg)\n  这个时候就说明生成成功了\n\n  ![查看信息](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/3453713.jpg)\n  ss服务的相关配置信息\n\n  ![配置ss客户端](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/77964504.jpg)\n  下载ss客户端后创建新的连接 输入相关的信息\n\n  ![相关介绍](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/60933694.jpg)\n\n  ![关闭ss](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/99019643.jpg)\n  不需要的时候可以点击这里关闭ss服务\n\n### 手动配置ss服务开启vpn\n\n1. 进入控制台\n\n2. 利用pip安装ss服务\n\n  ```\n  # yum install python-setuptools && easy_install pip  \n  # pip install shadowsocks\n  ```\n3. 配置相关信息\n\n  也有两种方式 推荐第一种 配置信息方便查看和更改\n  *  创建配置信息\n    ```\n    # touch /etc/shadowsocks.json\n    # vi /etc/shadowsocks.json\n\n    {\n    \"server\":\"xxx.xxx.xxx\", //服务器的IP\n    \"server_port\":443,      //服务器断开\n    \"local_address\": \"127.0.0.1\",   //客户端地址\n    \"local_port\":1080,              //客户端端口\n    \"password\":\"MyPass\",    //密码\n    \"timeout\":600,          //超时时间(s)\n    \"method\":\"rc4-md5\"      //加密方式 可选“bf-cfb”, “aes-256-cfb”, \"salsa20\" , “rc4″等\n    }\n    ```\n    运行ss服务\n    ```\n    # ssserver -c /etc/shadowsocks.json -d start\n    ```\n  * 直接设置相关信息\n    ```\n    # ssserver -p 443 -k MyPass -m rc4-md5 -d start\n    ```\n4. 停止ss服务\n  ```\n  #ssserver -c /etc/shadowsocks.json -d stop\n  //通过json文件配置开启的服务关闭方法\n\n  #ssserver -d stop\n  //直接配置信息开启的服务关闭的方法\n  ```\n\n## 通过pptp搭建个人vpn\n1. 安装PPP和iptables\n  ```\n  # yum install -y ppp iptables\n  ```\n2. 安装pptpd\n  由于我们是通过yum安转的ppp 因为yum安转的ppp是最新的版本 所以我们要根据当前的ppp版本来选择pptp的版本\n  ```\n  # yum list installed ppp  //查看当前ppp版本\n  ```\n  ![查看当前ppp版本](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/34188869.jpg)\n\n  根据当期ppp版本选择对应的pptp版本 可以在[这里](http://poptop.sourceforge.net/yum/stable/packages/)找到对应的版本下载\n\n  ppp 2.4.4 对应 pptp 1.3.4的版本\n\n  ppp 2.4.5 对应 pptp 1.4.0的版本\n\n  ```\n  # wget http://poptop.sourceforge.net/yum/stable/packages/pptpd-1.4.0-1.el6.x86_64.rpm\n  //下载对应的版本\n  # yum install perl\n  //安装perl\n  # rpm -ivh pptpd-1.4.0-1.el6.x86_64.rpm\n  //安装pptp\n  ```\n\n  至此均安装完毕 下面进行配置\n\n3. vpn相关配置\n  一下均对配置文件进行备份 有需要的可以回滚操作\n\n  * 配置 /etc/ppp/options.pptpd\n\n  ```\n  # cp /etc/ppp/options.pptpd /etc/ppp/options.pptpd.bak\n  //备份\n  # vi /etc/ppp/options.pptpd\n\n  //将以下内容添加到options.pptpd当中\n  ms-dns 8.8.8.8\n  ms-dns 8.8.4.4\n  ```\n  * 配置 /etc/ppp/chap-secrets\n\n  ```\n  # cp /etc/ppp/chap-secrets   /etc/ppp/chap-secrets.bak\n  //备份\n  # vi /etc/ppp/chap-secrets\n\n  //添加以下内容\n  myusername pptpd mypassword *\n  //myusername vpn账号\n  //mypassword vpn密码\n  //* 可连接的ip地址 *表示接受所有ip地址的来源\n  ```\n  * 配置 /etc/pptpd.conf\n\n  ```\n  # cp /etc/pptpd.conf     /etc/pptpd.conf.bak\n  //备份\n  # vi /etc/pptpd.conf\n\n  //添加一下内容 用于获得vpn客户端获得ip的范围\n  localip 192.168.0.1\n  remoteip 192.168.0.234-238,192.168.0.245\n\n  //配置文件的最后要以空行结尾\n  ```\n\n  * 配置 /etc/sysctl.conf\n\n  ```\n  # cp /etc/sysctl.conf /etc/sysctl.conf.bak\n  # vi /etc/sysctl.conf\n\n  //修改以下内容 使其支持转发\n  net.ipv4.ip_forward = 1\n\n  # /sbin/sysctl -p\n  //保存修改后的文件\n  ```\n\n  * 启动pptp服务和iptables\n\n  ```\n  # /sbin/service iptables start\n  //启动iptables\n\n  # iptables -t nat -A POSTROUTING -o eth0 -s 192.168.0.0/24 -j SNAT --to-source xxx.xxx.xxx.xxx\n  //设置转发功能 -o eth0制定网卡\n  // xxx.xxx.xxx.xxx为公网ip\n\n  # /etc/init.d/iptables save\n  //保存iptables的转发规则\n  # /sbin/service iptables restart\n  //重新启动iptables\n\n  # service pptpd start\n  ```\n\n## FinalSpeed对ss的优化提速\n```\n# wget http://fs.d1sm.net/finalspeed/install_fs.sh\n# chmod +x install_fs.sh\n# ./install_fs.sh 2>&1 | tee install.log\n```\n\n\n## 相关注意事项\n**个人学习用 不要用于奇怪的地方 游戏延迟可能很高**\n","slug":"vpn","published":1,"updated":"2020-03-13T09:33:05.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5e60011q7dqlzabgf8q","content":"<blockquote>\n<p>帮助为了方便访问一些不存在的网站的你们</p>\n</blockquote>\n<h2 id=\"搬瓦工\"><a href=\"#搬瓦工\" class=\"headerlink\" title=\"搬瓦工\"></a>搬瓦工</h2><p><a href=\"http://bandwagonhost.com/\" target=\"_blank\" rel=\"noopener\">官方网站</a> 虽然经常连接不上  反而这个<a href=\"http://bwh1.net\" target=\"_blank\" rel=\"noopener\">备用地址</a>倒是连接速度很快<br>一个支持<em>ailpay</em>的国外vps 价格十分的感人 现在应该是2.99美元一个月 同时五个机房可以随意更换 也就是说可以获得五个ip地址 某些情况下十分的有用</p>\n<p>同样价格感人的还有Host1plus 2美元每月 但是线路不是很稳定详细的可以查看<a href=\"https://www.host1plus.com/\" target=\"_blank\" rel=\"noopener\">官方网站</a></p>\n<p>这里只是简单的介绍了两个可以通过支付宝支付的国外vps 免去了还得申请visa卡的纠结 更多详细的内容可以查看<a href=\"https://zhuanlan.zhihu.com/p/21872685\" target=\"_blank\" rel=\"noopener\">十个便宜VPS(国内国外)主机分享-VPS服务器建站和搭建应用服务体验</a><br>  <a id=\"more\"></a></p>\n<h2 id=\"ss和pptp\"><a href=\"#ss和pptp\" class=\"headerlink\" title=\"ss和pptp\"></a>ss和pptp</h2><p>ss就是Shadowsocks 一个轻量级的科学上网方式支持OS X Windows Linux iOS android的客户端. 具体可以参考<a href=\"https://zh.wikipedia.org/zh-cn/Shadowsocks\" target=\"_blank\" rel=\"noopener\">Shadowsocks的详细说明</a></p>\n<p>pptp是一种点对点隧道协议 可以用来实现科学上网相对于ss来说可配置性更多. 具体的也可以参考<a href=\"https://zh.wikipedia.org/wiki/%E9%BB%9E%E5%B0%8D%E9%BB%9E%E9%9A%A7%E9%81%93%E5%8D%94%E8%AD%B0\" target=\"_blank\" rel=\"noopener\">点对点隧道协议</a></p>\n<h2 id=\"个人vpn搭建教程\"><a href=\"#个人vpn搭建教程\" class=\"headerlink\" title=\"个人vpn搭建教程\"></a>个人vpn搭建教程</h2><h2 id=\"vps的准备\"><a href=\"#vps的准备\" class=\"headerlink\" title=\"vps的准备\"></a>vps的准备</h2><p>由于是在搬瓦工中搭建的vpn 所以还是推荐购买搬瓦工的服务器 需要注意以下几点</p>\n<ol>\n<li>注册的邮箱需要真实 省的以后无法找回密码</li>\n<li>同样是注册时 用拼音填写就可以 资料是否真实无所谓 但是国家 省份需要真实存在的</li>\n<li>购买的时候选择价格最低的就好 国外的服务器一般都是用来搭建这个的不是 500g额度也够你使用了 可以根据自己的情况选择购买的方式 一月 一季度 半年和一年的四种方式 时间越长每月的花销越低 看个人的选择</li>\n<li>玄学是洛杉矶的机房的网速最快</li>\n<li>搬瓦工的对文本的操作是会在额外的弹窗中进行的 注意不要阻止弹出 要不你会因为奇怪的提示而怀疑人生的</li>\n</ol>\n<h2 id=\"通过ss搭建个人vpn\"><a href=\"#通过ss搭建个人vpn\" class=\"headerlink\" title=\"通过ss搭建个人vpn\"></a>通过ss搭建个人vpn</h2><p>搬瓦工有一键开启ss的功能 只是想简单的自己做个vpn没有额外其他的要求可以使用一下 十分的便捷 同样 我也会说一下手动配置的方法 也十分的便捷其实</p>\n<h3 id=\"利用ss的Shadowsocks-Server一键开启vpn\"><a href=\"#利用ss的Shadowsocks-Server一键开启vpn\" class=\"headerlink\" title=\"利用ss的Shadowsocks Server一键开启vpn\"></a>利用ss的Shadowsocks Server一键开启vpn</h3><ol>\n<li><p>进入控制台<br><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/51872827.jpg\" alt=\"进入控制台\"></p>\n</li>\n<li><p>对系统进行更新<br><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/4821245.jpg\" alt=\"对系统进行更新\"></p>\n</li>\n<li><p>一键生成ss服务</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/47291324.jpg\" alt=\"一键生成ss服务\"><br>选择一键生成的功能</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/33245491.jpg\" alt=\"成功生成\"><br>这个时候就说明生成成功了</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/3453713.jpg\" alt=\"查看信息\"><br>ss服务的相关配置信息</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/77964504.jpg\" alt=\"配置ss客户端\"><br>下载ss客户端后创建新的连接 输入相关的信息</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/60933694.jpg\" alt=\"相关介绍\"></p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/99019643.jpg\" alt=\"关闭ss\"><br>不需要的时候可以点击这里关闭ss服务</p>\n</li>\n</ol>\n<h3 id=\"手动配置ss服务开启vpn\"><a href=\"#手动配置ss服务开启vpn\" class=\"headerlink\" title=\"手动配置ss服务开启vpn\"></a>手动配置ss服务开启vpn</h3><ol>\n<li><p>进入控制台</p>\n</li>\n<li><p>利用pip安装ss服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install python-setuptools &amp;&amp; easy_install pip  </span><br><span class=\"line\"># pip install shadowsocks</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置相关信息</p>\n<p>也有两种方式 推荐第一种 配置信息方便查看和更改</p>\n<ul>\n<li><p>创建配置信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># touch /etc/shadowsocks.json</span><br><span class=\"line\"># vi /etc/shadowsocks.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;server&quot;:&quot;xxx.xxx.xxx&quot;, //服务器的IP</span><br><span class=\"line\">&quot;server_port&quot;:443,      //服务器断开</span><br><span class=\"line\">&quot;local_address&quot;: &quot;127.0.0.1&quot;,   //客户端地址</span><br><span class=\"line\">&quot;local_port&quot;:1080,              //客户端端口</span><br><span class=\"line\">&quot;password&quot;:&quot;MyPass&quot;,    //密码</span><br><span class=\"line\">&quot;timeout&quot;:600,          //超时时间(s)</span><br><span class=\"line\">&quot;method&quot;:&quot;rc4-md5&quot;      //加密方式 可选“bf-cfb”, “aes-256-cfb”, &quot;salsa20&quot; , “rc4″等</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行ss服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ssserver -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>直接设置相关信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ssserver -p 443 -k MyPass -m rc4-md5 -d start</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>停止ss服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ssserver -c /etc/shadowsocks.json -d stop</span><br><span class=\"line\">//通过json文件配置开启的服务关闭方法</span><br><span class=\"line\"></span><br><span class=\"line\">#ssserver -d stop</span><br><span class=\"line\">//直接配置信息开启的服务关闭的方法</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"通过pptp搭建个人vpn\"><a href=\"#通过pptp搭建个人vpn\" class=\"headerlink\" title=\"通过pptp搭建个人vpn\"></a>通过pptp搭建个人vpn</h2><ol>\n<li><p>安装PPP和iptables</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install -y ppp iptables</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装pptpd<br>由于我们是通过yum安转的ppp 因为yum安转的ppp是最新的版本 所以我们要根据当前的ppp版本来选择pptp的版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum list installed ppp  //查看当前ppp版本</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/34188869.jpg\" alt=\"查看当前ppp版本\"></p>\n<p>根据当期ppp版本选择对应的pptp版本 可以在<a href=\"http://poptop.sourceforge.net/yum/stable/packages/\" target=\"_blank\" rel=\"noopener\">这里</a>找到对应的版本下载</p>\n<p>ppp 2.4.4 对应 pptp 1.3.4的版本</p>\n<p>ppp 2.4.5 对应 pptp 1.4.0的版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wget http://poptop.sourceforge.net/yum/stable/packages/pptpd-1.4.0-1.el6.x86_64.rpm</span><br><span class=\"line\">//下载对应的版本</span><br><span class=\"line\"># yum install perl</span><br><span class=\"line\">//安装perl</span><br><span class=\"line\"># rpm -ivh pptpd-1.4.0-1.el6.x86_64.rpm</span><br><span class=\"line\">//安装pptp</span><br></pre></td></tr></table></figure>\n<p>至此均安装完毕 下面进行配置</p>\n</li>\n<li><p>vpn相关配置<br>一下均对配置文件进行备份 有需要的可以回滚操作</p>\n<ul>\n<li>配置 /etc/ppp/options.pptpd</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cp /etc/ppp/options.pptpd /etc/ppp/options.pptpd.bak</span><br><span class=\"line\">//备份</span><br><span class=\"line\"># vi /etc/ppp/options.pptpd</span><br><span class=\"line\"></span><br><span class=\"line\">//将以下内容添加到options.pptpd当中</span><br><span class=\"line\">ms-dns 8.8.8.8</span><br><span class=\"line\">ms-dns 8.8.4.4</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置 /etc/ppp/chap-secrets</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cp /etc/ppp/chap-secrets   /etc/ppp/chap-secrets.bak</span><br><span class=\"line\">//备份</span><br><span class=\"line\"># vi /etc/ppp/chap-secrets</span><br><span class=\"line\"></span><br><span class=\"line\">//添加以下内容</span><br><span class=\"line\">myusername pptpd mypassword *</span><br><span class=\"line\">//myusername vpn账号</span><br><span class=\"line\">//mypassword vpn密码</span><br><span class=\"line\">//* 可连接的ip地址 *表示接受所有ip地址的来源</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置 /etc/pptpd.conf</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cp /etc/pptpd.conf     /etc/pptpd.conf.bak</span><br><span class=\"line\">//备份</span><br><span class=\"line\"># vi /etc/pptpd.conf</span><br><span class=\"line\"></span><br><span class=\"line\">//添加一下内容 用于获得vpn客户端获得ip的范围</span><br><span class=\"line\">localip 192.168.0.1</span><br><span class=\"line\">remoteip 192.168.0.234-238,192.168.0.245</span><br><span class=\"line\"></span><br><span class=\"line\">//配置文件的最后要以空行结尾</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置 /etc/sysctl.conf</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cp /etc/sysctl.conf /etc/sysctl.conf.bak</span><br><span class=\"line\"># vi /etc/sysctl.conf</span><br><span class=\"line\"></span><br><span class=\"line\">//修改以下内容 使其支持转发</span><br><span class=\"line\">net.ipv4.ip_forward = 1</span><br><span class=\"line\"></span><br><span class=\"line\"># /sbin/sysctl -p</span><br><span class=\"line\">//保存修改后的文件</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动pptp服务和iptables</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /sbin/service iptables start</span><br><span class=\"line\">//启动iptables</span><br><span class=\"line\"></span><br><span class=\"line\"># iptables -t nat -A POSTROUTING -o eth0 -s 192.168.0.0/24 -j SNAT --to-source xxx.xxx.xxx.xxx</span><br><span class=\"line\">//设置转发功能 -o eth0制定网卡</span><br><span class=\"line\">// xxx.xxx.xxx.xxx为公网ip</span><br><span class=\"line\"></span><br><span class=\"line\"># /etc/init.d/iptables save</span><br><span class=\"line\">//保存iptables的转发规则</span><br><span class=\"line\"># /sbin/service iptables restart</span><br><span class=\"line\">//重新启动iptables</span><br><span class=\"line\"></span><br><span class=\"line\"># service pptpd start</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"FinalSpeed对ss的优化提速\"><a href=\"#FinalSpeed对ss的优化提速\" class=\"headerlink\" title=\"FinalSpeed对ss的优化提速\"></a>FinalSpeed对ss的优化提速</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wget http://fs.d1sm.net/finalspeed/install_fs.sh</span><br><span class=\"line\"># chmod +x install_fs.sh</span><br><span class=\"line\"># ./install_fs.sh 2&gt;&amp;1 | tee install.log</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关注意事项\"><a href=\"#相关注意事项\" class=\"headerlink\" title=\"相关注意事项\"></a>相关注意事项</h2><p><strong>个人学习用 不要用于奇怪的地方 游戏延迟可能很高</strong></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>帮助为了方便访问一些不存在的网站的你们</p>\n</blockquote>\n<h2 id=\"搬瓦工\"><a href=\"#搬瓦工\" class=\"headerlink\" title=\"搬瓦工\"></a>搬瓦工</h2><p><a href=\"http://bandwagonhost.com/\" target=\"_blank\" rel=\"noopener\">官方网站</a> 虽然经常连接不上  反而这个<a href=\"http://bwh1.net\" target=\"_blank\" rel=\"noopener\">备用地址</a>倒是连接速度很快<br>一个支持<em>ailpay</em>的国外vps 价格十分的感人 现在应该是2.99美元一个月 同时五个机房可以随意更换 也就是说可以获得五个ip地址 某些情况下十分的有用</p>\n<p>同样价格感人的还有Host1plus 2美元每月 但是线路不是很稳定详细的可以查看<a href=\"https://www.host1plus.com/\" target=\"_blank\" rel=\"noopener\">官方网站</a></p>\n<p>这里只是简单的介绍了两个可以通过支付宝支付的国外vps 免去了还得申请visa卡的纠结 更多详细的内容可以查看<a href=\"https://zhuanlan.zhihu.com/p/21872685\" target=\"_blank\" rel=\"noopener\">十个便宜VPS(国内国外)主机分享-VPS服务器建站和搭建应用服务体验</a><br>","more":"</p>\n<h2 id=\"ss和pptp\"><a href=\"#ss和pptp\" class=\"headerlink\" title=\"ss和pptp\"></a>ss和pptp</h2><p>ss就是Shadowsocks 一个轻量级的科学上网方式支持OS X Windows Linux iOS android的客户端. 具体可以参考<a href=\"https://zh.wikipedia.org/zh-cn/Shadowsocks\" target=\"_blank\" rel=\"noopener\">Shadowsocks的详细说明</a></p>\n<p>pptp是一种点对点隧道协议 可以用来实现科学上网相对于ss来说可配置性更多. 具体的也可以参考<a href=\"https://zh.wikipedia.org/wiki/%E9%BB%9E%E5%B0%8D%E9%BB%9E%E9%9A%A7%E9%81%93%E5%8D%94%E8%AD%B0\" target=\"_blank\" rel=\"noopener\">点对点隧道协议</a></p>\n<h2 id=\"个人vpn搭建教程\"><a href=\"#个人vpn搭建教程\" class=\"headerlink\" title=\"个人vpn搭建教程\"></a>个人vpn搭建教程</h2><h2 id=\"vps的准备\"><a href=\"#vps的准备\" class=\"headerlink\" title=\"vps的准备\"></a>vps的准备</h2><p>由于是在搬瓦工中搭建的vpn 所以还是推荐购买搬瓦工的服务器 需要注意以下几点</p>\n<ol>\n<li>注册的邮箱需要真实 省的以后无法找回密码</li>\n<li>同样是注册时 用拼音填写就可以 资料是否真实无所谓 但是国家 省份需要真实存在的</li>\n<li>购买的时候选择价格最低的就好 国外的服务器一般都是用来搭建这个的不是 500g额度也够你使用了 可以根据自己的情况选择购买的方式 一月 一季度 半年和一年的四种方式 时间越长每月的花销越低 看个人的选择</li>\n<li>玄学是洛杉矶的机房的网速最快</li>\n<li>搬瓦工的对文本的操作是会在额外的弹窗中进行的 注意不要阻止弹出 要不你会因为奇怪的提示而怀疑人生的</li>\n</ol>\n<h2 id=\"通过ss搭建个人vpn\"><a href=\"#通过ss搭建个人vpn\" class=\"headerlink\" title=\"通过ss搭建个人vpn\"></a>通过ss搭建个人vpn</h2><p>搬瓦工有一键开启ss的功能 只是想简单的自己做个vpn没有额外其他的要求可以使用一下 十分的便捷 同样 我也会说一下手动配置的方法 也十分的便捷其实</p>\n<h3 id=\"利用ss的Shadowsocks-Server一键开启vpn\"><a href=\"#利用ss的Shadowsocks-Server一键开启vpn\" class=\"headerlink\" title=\"利用ss的Shadowsocks Server一键开启vpn\"></a>利用ss的Shadowsocks Server一键开启vpn</h3><ol>\n<li><p>进入控制台<br><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/51872827.jpg\" alt=\"进入控制台\"></p>\n</li>\n<li><p>对系统进行更新<br><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/4821245.jpg\" alt=\"对系统进行更新\"></p>\n</li>\n<li><p>一键生成ss服务</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/47291324.jpg\" alt=\"一键生成ss服务\"><br>选择一键生成的功能</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/33245491.jpg\" alt=\"成功生成\"><br>这个时候就说明生成成功了</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/3453713.jpg\" alt=\"查看信息\"><br>ss服务的相关配置信息</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/77964504.jpg\" alt=\"配置ss客户端\"><br>下载ss客户端后创建新的连接 输入相关的信息</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/60933694.jpg\" alt=\"相关介绍\"></p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/99019643.jpg\" alt=\"关闭ss\"><br>不需要的时候可以点击这里关闭ss服务</p>\n</li>\n</ol>\n<h3 id=\"手动配置ss服务开启vpn\"><a href=\"#手动配置ss服务开启vpn\" class=\"headerlink\" title=\"手动配置ss服务开启vpn\"></a>手动配置ss服务开启vpn</h3><ol>\n<li><p>进入控制台</p>\n</li>\n<li><p>利用pip安装ss服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install python-setuptools &amp;&amp; easy_install pip  </span><br><span class=\"line\"># pip install shadowsocks</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置相关信息</p>\n<p>也有两种方式 推荐第一种 配置信息方便查看和更改</p>\n<ul>\n<li><p>创建配置信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># touch /etc/shadowsocks.json</span><br><span class=\"line\"># vi /etc/shadowsocks.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;server&quot;:&quot;xxx.xxx.xxx&quot;, //服务器的IP</span><br><span class=\"line\">&quot;server_port&quot;:443,      //服务器断开</span><br><span class=\"line\">&quot;local_address&quot;: &quot;127.0.0.1&quot;,   //客户端地址</span><br><span class=\"line\">&quot;local_port&quot;:1080,              //客户端端口</span><br><span class=\"line\">&quot;password&quot;:&quot;MyPass&quot;,    //密码</span><br><span class=\"line\">&quot;timeout&quot;:600,          //超时时间(s)</span><br><span class=\"line\">&quot;method&quot;:&quot;rc4-md5&quot;      //加密方式 可选“bf-cfb”, “aes-256-cfb”, &quot;salsa20&quot; , “rc4″等</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行ss服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ssserver -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>直接设置相关信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ssserver -p 443 -k MyPass -m rc4-md5 -d start</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>停止ss服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ssserver -c /etc/shadowsocks.json -d stop</span><br><span class=\"line\">//通过json文件配置开启的服务关闭方法</span><br><span class=\"line\"></span><br><span class=\"line\">#ssserver -d stop</span><br><span class=\"line\">//直接配置信息开启的服务关闭的方法</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"通过pptp搭建个人vpn\"><a href=\"#通过pptp搭建个人vpn\" class=\"headerlink\" title=\"通过pptp搭建个人vpn\"></a>通过pptp搭建个人vpn</h2><ol>\n<li><p>安装PPP和iptables</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install -y ppp iptables</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装pptpd<br>由于我们是通过yum安转的ppp 因为yum安转的ppp是最新的版本 所以我们要根据当前的ppp版本来选择pptp的版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum list installed ppp  //查看当前ppp版本</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/34188869.jpg\" alt=\"查看当前ppp版本\"></p>\n<p>根据当期ppp版本选择对应的pptp版本 可以在<a href=\"http://poptop.sourceforge.net/yum/stable/packages/\" target=\"_blank\" rel=\"noopener\">这里</a>找到对应的版本下载</p>\n<p>ppp 2.4.4 对应 pptp 1.3.4的版本</p>\n<p>ppp 2.4.5 对应 pptp 1.4.0的版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wget http://poptop.sourceforge.net/yum/stable/packages/pptpd-1.4.0-1.el6.x86_64.rpm</span><br><span class=\"line\">//下载对应的版本</span><br><span class=\"line\"># yum install perl</span><br><span class=\"line\">//安装perl</span><br><span class=\"line\"># rpm -ivh pptpd-1.4.0-1.el6.x86_64.rpm</span><br><span class=\"line\">//安装pptp</span><br></pre></td></tr></table></figure>\n<p>至此均安装完毕 下面进行配置</p>\n</li>\n<li><p>vpn相关配置<br>一下均对配置文件进行备份 有需要的可以回滚操作</p>\n<ul>\n<li>配置 /etc/ppp/options.pptpd</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cp /etc/ppp/options.pptpd /etc/ppp/options.pptpd.bak</span><br><span class=\"line\">//备份</span><br><span class=\"line\"># vi /etc/ppp/options.pptpd</span><br><span class=\"line\"></span><br><span class=\"line\">//将以下内容添加到options.pptpd当中</span><br><span class=\"line\">ms-dns 8.8.8.8</span><br><span class=\"line\">ms-dns 8.8.4.4</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置 /etc/ppp/chap-secrets</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cp /etc/ppp/chap-secrets   /etc/ppp/chap-secrets.bak</span><br><span class=\"line\">//备份</span><br><span class=\"line\"># vi /etc/ppp/chap-secrets</span><br><span class=\"line\"></span><br><span class=\"line\">//添加以下内容</span><br><span class=\"line\">myusername pptpd mypassword *</span><br><span class=\"line\">//myusername vpn账号</span><br><span class=\"line\">//mypassword vpn密码</span><br><span class=\"line\">//* 可连接的ip地址 *表示接受所有ip地址的来源</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置 /etc/pptpd.conf</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cp /etc/pptpd.conf     /etc/pptpd.conf.bak</span><br><span class=\"line\">//备份</span><br><span class=\"line\"># vi /etc/pptpd.conf</span><br><span class=\"line\"></span><br><span class=\"line\">//添加一下内容 用于获得vpn客户端获得ip的范围</span><br><span class=\"line\">localip 192.168.0.1</span><br><span class=\"line\">remoteip 192.168.0.234-238,192.168.0.245</span><br><span class=\"line\"></span><br><span class=\"line\">//配置文件的最后要以空行结尾</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置 /etc/sysctl.conf</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cp /etc/sysctl.conf /etc/sysctl.conf.bak</span><br><span class=\"line\"># vi /etc/sysctl.conf</span><br><span class=\"line\"></span><br><span class=\"line\">//修改以下内容 使其支持转发</span><br><span class=\"line\">net.ipv4.ip_forward = 1</span><br><span class=\"line\"></span><br><span class=\"line\"># /sbin/sysctl -p</span><br><span class=\"line\">//保存修改后的文件</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动pptp服务和iptables</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /sbin/service iptables start</span><br><span class=\"line\">//启动iptables</span><br><span class=\"line\"></span><br><span class=\"line\"># iptables -t nat -A POSTROUTING -o eth0 -s 192.168.0.0/24 -j SNAT --to-source xxx.xxx.xxx.xxx</span><br><span class=\"line\">//设置转发功能 -o eth0制定网卡</span><br><span class=\"line\">// xxx.xxx.xxx.xxx为公网ip</span><br><span class=\"line\"></span><br><span class=\"line\"># /etc/init.d/iptables save</span><br><span class=\"line\">//保存iptables的转发规则</span><br><span class=\"line\"># /sbin/service iptables restart</span><br><span class=\"line\">//重新启动iptables</span><br><span class=\"line\"></span><br><span class=\"line\"># service pptpd start</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"FinalSpeed对ss的优化提速\"><a href=\"#FinalSpeed对ss的优化提速\" class=\"headerlink\" title=\"FinalSpeed对ss的优化提速\"></a>FinalSpeed对ss的优化提速</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wget http://fs.d1sm.net/finalspeed/install_fs.sh</span><br><span class=\"line\"># chmod +x install_fs.sh</span><br><span class=\"line\"># ./install_fs.sh 2&gt;&amp;1 | tee install.log</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关注意事项\"><a href=\"#相关注意事项\" class=\"headerlink\" title=\"相关注意事项\"></a>相关注意事项</h2><p><strong>个人学习用 不要用于奇怪的地方 游戏延迟可能很高</strong></p>"},{"title":"中国国家气象局api数据分析","date":"2017-08-31T14:57:44.000Z","_content":"\n# 中国国家气象局api数据分析\n\n>天气预报是程序中很常见的功能 然而现在免费好用的天气api却很难找 不妨仔细的看一下[国家气象局](http://m.weather.com.cn/) 本分就此网站来获取天气\n<!-- more -->\n\n## 地址及页面分析\n\n### 地址分析\n  通过尝试,想要获取某个城市或者地址的天气页面有两种方式,一种是通过经纬度访问[http://m.weather.com.cn/d/town/index?lat=39.915055&lon=116.403982](http://m.weather.com.cn/d/town/index?lat=39.915055&lon=116.403982),另一种是通过城市id访问[http://m.weather.com.cn/mweather/101010100.shtml](http://m.weather.com.cn/mweather/101010100.shtml) 两个地址都能得到北京市的天气情况 不过前一种是经纬度,另一种是城市id.\n\n  关于城市的id可以查看[http://mobile.weather.com.cn/js/citylist.xml](http://mobile.weather.com.cn/js/citylist.xml)可以得到全国2500多个城市县区及全球其他国家6000多个城市的数据 可以直接通过以上的接口获得相关城市的天气数据\n\n### 页面分析\n#### id查询\n  我们先访问以下[http://m.weather.com.cn/mweather/101010100.shtml](http://m.weather.com.cn/mweather/101010100.shtml)页面  看看整个页面都请求了什么\n  ![页面请求信息](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/2275119.jpg)\n\n  http://m.weather.com.cn/mweather/101010100.shtml 这个页面并没有返回对应的数据 也是 现在谁家的网页还能都是静态的\n  然后是这个位置的素质五连![数据五连](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/67360173.jpg)\n  后面是一个时间戳 模仿了对应的请求格式 但是每次访问的时候都被拒绝应该是页面js代码中有控制 看来直接通过城市id获取不行了\n\n#### 经纬度查询\n  如果直接通过经纬度地址进行访问[http://m.weather.com.cn/d/town/index?lat=39.915055&lon=116.403982](http://m.weather.com.cn/d/town/index?lat=39.915055&lon=116.403982)通过分析可以在直接访问的地址中找到返回这个部分数据\n![请求详情](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/10458430.jpg)\n\n## 数据分析\n  ```\n  ([{\"TEMMIN\":19,\"reftime\":\"201709022000\",\"WIND1\":\"04\",\"WINS1\":\"01\",\"WIND2\":\"01\",\"WINS2\":\"00\",\"WEATHER1\":\"02\",\"WEATHER2\":\"02\",\"TEMMAX\":29},{\"TEMMIN\":19,\"reftime\":\"201709032000\",\"WIND1\":\"01\",\"WINS1\":\"00\",\"WIND2\":\"08\",\"WINS2\":\"00\",\"WEATHER1\":\"02\",\"WEATHER2\":\"02\",\"TEMMAX\":27},{\"TEMMIN\":18,\"reftime\":\"201709042000\",\"WIND1\":\"01\",\"WINS1\":\"00\",\"WIND2\":\"01\",\"WINS2\":\"00\",\"WEATHER1\":\"01\",\"WEATHER2\":\"02\",\"TEMMAX\":27},{\"TEMMIN\":19,\"reftime\":\"201709052000\",\"WIND1\":\"01\",\"WINS1\":\"00\",\"WIND2\":\"08\",\"WINS2\":\"00\",\"WEATHER1\":\"07\",\"WEATHER2\":\"02\",\"TEMMAX\":29},{\"TEMMIN\":18,\"reftime\":\"201709062000\",\"WIND1\":\"01\",\"WINS1\":\"00\",\"WIND2\":\"02\",\"WINS2\":\"00\",\"WEATHER1\":\"00\",\"WEATHER2\":\"00\",\"TEMMAX\":30}],[{\"WIND\":\"05\",\"WEA08\":\"02\",\"reftime\":\"201709010800\",\"PRE08\":\"0.0\",\"TMAX\":28,\"TMIN\":21,\"WEA20\":\"02\",\"PRE20\":\"0.0\",\"WINS\":\"01\"}])\n  ```\n\n  这部分的数据可以看出来是个json格式数据 取其中一部分来分析\n  ```\n  {\"TEMMIN\":19,\"reftime\":\"201709022000\",\"WIND1\":\"04\",\"WINS1\":\"01\",\"WIND2\":\"01\",\"WINS2\":\"00\",\"WEATHER1\":\"02\",\"WEATHER2\":\"02\",\"TEMMAX\":29}\n  ```\n  经过整理后发现对应数据如下\n\n  TEMMIN : 最低温度\n  TEMMAX : 最高温度\n  reftime : 时间\n  WEATHER1 : 天气1 (晴转多云 的晴)\n  WEATHER2 : 天气2 (晴转多云 的多云)\n\n  weather的对应如下\n  ```\n  {\"00\":\"晴\",\"01\":\"多云\",\"02\":\"阴\",\"03\":\"阵雨\",\"04\":\"雷阵雨\",\"05\":\"雷阵雨伴有冰雹\",\"06\":\"雨夹雪\",\"07\":\"小雨\",\"08\":\"中雨\",\"09\":\"大雨\",\"10\":\"暴雨\",\"11\":\"大暴雨\",\"12\":\"特大暴雨\",\"13\":\"阵雪\",\"14\":\"小雪\",\"15\":\"中雪\",\"16\":\"大雪\",\"17\":\"暴雪\",\"18\":\"雾\",\"19\":\"冻雨\",\"20\":\"沙尘暴\",\"21\":\"小到中雨\",\"22\":\"中到大雨\",\"23\":\"大到暴雨\",\"24\":\"暴雨到大暴雨\",\"25\":\"大暴雨到特大暴雨\",\"26\":\"小到中雪\",\"27\":\"中到大雪\",\"28\":\"大到暴雪\",\"29\":\"浮尘\",\"30\":\"扬沙\",\"31\":\"强沙尘暴\",\"53\":\"霾\",\"99\":\"\"}\n  ```\n  WIND1 : 风向1\n  WINS1 : 风向1等级\n  WIND2 : 风向2\n  WINS2 : 风向2等级\n\n  WIND对应如下\n  ```\n  {\"0\":\"无持续风向\",\"1\":\"东北风\",\"2\":\"东风\",\"3\":\"东南风\",\"4\":\"南风\",\"5\":\"西南风\",\"6\":\"西风\",\"7\":\"西北风\",\"8\":\"北风\",\"9\":\"旋转风\"}\n  ```\n\n  WINS对应如下:\n  ```\n  {\"0\":\"微风\",\"1\":\"3-4级\",\"2\":\"4-5级\",\"3\":\"5-6级\",\"4\":\"6-7级\",\"5\":\"7-8级\",\"6\":\"8-9级\",\"7\":\"9-10级\",\"8\":\"10-11级\",\"9\":\"11-12级\"};\n  ```\n\n## 获取流程\n  通过经纬度可以直接获取天气信息 而且精度较高可以定位当前位置后再获取天气信息 但是只适用国内的天气信息 可以本地缓存全国所有地区的经纬度或者通过城市id访问天气信息的页面中获取经纬度 看实际使用情况斟酌\n\n  而通过城市id的方法可以获得全球的天气信息\n\n## 最后\n  页面还有很多数据可以发现\n","source":"_posts/中国国家气象局api数据分析.md","raw":"---\ntitle: 中国国家气象局api数据分析\ndate: 2017-08-31 22:57:44\ntags: [\"python\" , \"api\" , \"爬虫\"]\ncategories : \"数据收集\"\n---\n\n# 中国国家气象局api数据分析\n\n>天气预报是程序中很常见的功能 然而现在免费好用的天气api却很难找 不妨仔细的看一下[国家气象局](http://m.weather.com.cn/) 本分就此网站来获取天气\n<!-- more -->\n\n## 地址及页面分析\n\n### 地址分析\n  通过尝试,想要获取某个城市或者地址的天气页面有两种方式,一种是通过经纬度访问[http://m.weather.com.cn/d/town/index?lat=39.915055&lon=116.403982](http://m.weather.com.cn/d/town/index?lat=39.915055&lon=116.403982),另一种是通过城市id访问[http://m.weather.com.cn/mweather/101010100.shtml](http://m.weather.com.cn/mweather/101010100.shtml) 两个地址都能得到北京市的天气情况 不过前一种是经纬度,另一种是城市id.\n\n  关于城市的id可以查看[http://mobile.weather.com.cn/js/citylist.xml](http://mobile.weather.com.cn/js/citylist.xml)可以得到全国2500多个城市县区及全球其他国家6000多个城市的数据 可以直接通过以上的接口获得相关城市的天气数据\n\n### 页面分析\n#### id查询\n  我们先访问以下[http://m.weather.com.cn/mweather/101010100.shtml](http://m.weather.com.cn/mweather/101010100.shtml)页面  看看整个页面都请求了什么\n  ![页面请求信息](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/2275119.jpg)\n\n  http://m.weather.com.cn/mweather/101010100.shtml 这个页面并没有返回对应的数据 也是 现在谁家的网页还能都是静态的\n  然后是这个位置的素质五连![数据五连](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/67360173.jpg)\n  后面是一个时间戳 模仿了对应的请求格式 但是每次访问的时候都被拒绝应该是页面js代码中有控制 看来直接通过城市id获取不行了\n\n#### 经纬度查询\n  如果直接通过经纬度地址进行访问[http://m.weather.com.cn/d/town/index?lat=39.915055&lon=116.403982](http://m.weather.com.cn/d/town/index?lat=39.915055&lon=116.403982)通过分析可以在直接访问的地址中找到返回这个部分数据\n![请求详情](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/10458430.jpg)\n\n## 数据分析\n  ```\n  ([{\"TEMMIN\":19,\"reftime\":\"201709022000\",\"WIND1\":\"04\",\"WINS1\":\"01\",\"WIND2\":\"01\",\"WINS2\":\"00\",\"WEATHER1\":\"02\",\"WEATHER2\":\"02\",\"TEMMAX\":29},{\"TEMMIN\":19,\"reftime\":\"201709032000\",\"WIND1\":\"01\",\"WINS1\":\"00\",\"WIND2\":\"08\",\"WINS2\":\"00\",\"WEATHER1\":\"02\",\"WEATHER2\":\"02\",\"TEMMAX\":27},{\"TEMMIN\":18,\"reftime\":\"201709042000\",\"WIND1\":\"01\",\"WINS1\":\"00\",\"WIND2\":\"01\",\"WINS2\":\"00\",\"WEATHER1\":\"01\",\"WEATHER2\":\"02\",\"TEMMAX\":27},{\"TEMMIN\":19,\"reftime\":\"201709052000\",\"WIND1\":\"01\",\"WINS1\":\"00\",\"WIND2\":\"08\",\"WINS2\":\"00\",\"WEATHER1\":\"07\",\"WEATHER2\":\"02\",\"TEMMAX\":29},{\"TEMMIN\":18,\"reftime\":\"201709062000\",\"WIND1\":\"01\",\"WINS1\":\"00\",\"WIND2\":\"02\",\"WINS2\":\"00\",\"WEATHER1\":\"00\",\"WEATHER2\":\"00\",\"TEMMAX\":30}],[{\"WIND\":\"05\",\"WEA08\":\"02\",\"reftime\":\"201709010800\",\"PRE08\":\"0.0\",\"TMAX\":28,\"TMIN\":21,\"WEA20\":\"02\",\"PRE20\":\"0.0\",\"WINS\":\"01\"}])\n  ```\n\n  这部分的数据可以看出来是个json格式数据 取其中一部分来分析\n  ```\n  {\"TEMMIN\":19,\"reftime\":\"201709022000\",\"WIND1\":\"04\",\"WINS1\":\"01\",\"WIND2\":\"01\",\"WINS2\":\"00\",\"WEATHER1\":\"02\",\"WEATHER2\":\"02\",\"TEMMAX\":29}\n  ```\n  经过整理后发现对应数据如下\n\n  TEMMIN : 最低温度\n  TEMMAX : 最高温度\n  reftime : 时间\n  WEATHER1 : 天气1 (晴转多云 的晴)\n  WEATHER2 : 天气2 (晴转多云 的多云)\n\n  weather的对应如下\n  ```\n  {\"00\":\"晴\",\"01\":\"多云\",\"02\":\"阴\",\"03\":\"阵雨\",\"04\":\"雷阵雨\",\"05\":\"雷阵雨伴有冰雹\",\"06\":\"雨夹雪\",\"07\":\"小雨\",\"08\":\"中雨\",\"09\":\"大雨\",\"10\":\"暴雨\",\"11\":\"大暴雨\",\"12\":\"特大暴雨\",\"13\":\"阵雪\",\"14\":\"小雪\",\"15\":\"中雪\",\"16\":\"大雪\",\"17\":\"暴雪\",\"18\":\"雾\",\"19\":\"冻雨\",\"20\":\"沙尘暴\",\"21\":\"小到中雨\",\"22\":\"中到大雨\",\"23\":\"大到暴雨\",\"24\":\"暴雨到大暴雨\",\"25\":\"大暴雨到特大暴雨\",\"26\":\"小到中雪\",\"27\":\"中到大雪\",\"28\":\"大到暴雪\",\"29\":\"浮尘\",\"30\":\"扬沙\",\"31\":\"强沙尘暴\",\"53\":\"霾\",\"99\":\"\"}\n  ```\n  WIND1 : 风向1\n  WINS1 : 风向1等级\n  WIND2 : 风向2\n  WINS2 : 风向2等级\n\n  WIND对应如下\n  ```\n  {\"0\":\"无持续风向\",\"1\":\"东北风\",\"2\":\"东风\",\"3\":\"东南风\",\"4\":\"南风\",\"5\":\"西南风\",\"6\":\"西风\",\"7\":\"西北风\",\"8\":\"北风\",\"9\":\"旋转风\"}\n  ```\n\n  WINS对应如下:\n  ```\n  {\"0\":\"微风\",\"1\":\"3-4级\",\"2\":\"4-5级\",\"3\":\"5-6级\",\"4\":\"6-7级\",\"5\":\"7-8级\",\"6\":\"8-9级\",\"7\":\"9-10级\",\"8\":\"10-11级\",\"9\":\"11-12级\"};\n  ```\n\n## 获取流程\n  通过经纬度可以直接获取天气信息 而且精度较高可以定位当前位置后再获取天气信息 但是只适用国内的天气信息 可以本地缓存全国所有地区的经纬度或者通过城市id访问天气信息的页面中获取经纬度 看实际使用情况斟酌\n\n  而通过城市id的方法可以获得全球的天气信息\n\n## 最后\n  页面还有很多数据可以发现\n","slug":"中国国家气象局api数据分析","published":1,"updated":"2020-03-13T09:33:05.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5e70012q7dq8fo93fc5","content":"<h1 id=\"中国国家气象局api数据分析\"><a href=\"#中国国家气象局api数据分析\" class=\"headerlink\" title=\"中国国家气象局api数据分析\"></a>中国国家气象局api数据分析</h1><blockquote>\n<p>天气预报是程序中很常见的功能 然而现在免费好用的天气api却很难找 不妨仔细的看一下<a href=\"http://m.weather.com.cn/\" target=\"_blank\" rel=\"noopener\">国家气象局</a> 本分就此网站来获取天气<br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"地址及页面分析\"><a href=\"#地址及页面分析\" class=\"headerlink\" title=\"地址及页面分析\"></a>地址及页面分析</h2><h3 id=\"地址分析\"><a href=\"#地址分析\" class=\"headerlink\" title=\"地址分析\"></a>地址分析</h3><p>  通过尝试,想要获取某个城市或者地址的天气页面有两种方式,一种是通过经纬度访问<a href=\"http://m.weather.com.cn/d/town/index?lat=39.915055&amp;lon=116.403982\" target=\"_blank\" rel=\"noopener\">http://m.weather.com.cn/d/town/index?lat=39.915055&amp;lon=116.403982</a>,另一种是通过城市id访问<a href=\"http://m.weather.com.cn/mweather/101010100.shtml\" target=\"_blank\" rel=\"noopener\">http://m.weather.com.cn/mweather/101010100.shtml</a> 两个地址都能得到北京市的天气情况 不过前一种是经纬度,另一种是城市id.</p>\n<p>  关于城市的id可以查看<a href=\"http://mobile.weather.com.cn/js/citylist.xml\" target=\"_blank\" rel=\"noopener\">http://mobile.weather.com.cn/js/citylist.xml</a>可以得到全国2500多个城市县区及全球其他国家6000多个城市的数据 可以直接通过以上的接口获得相关城市的天气数据</p>\n<h3 id=\"页面分析\"><a href=\"#页面分析\" class=\"headerlink\" title=\"页面分析\"></a>页面分析</h3><h4 id=\"id查询\"><a href=\"#id查询\" class=\"headerlink\" title=\"id查询\"></a>id查询</h4><p>  我们先访问以下<a href=\"http://m.weather.com.cn/mweather/101010100.shtml\" target=\"_blank\" rel=\"noopener\">http://m.weather.com.cn/mweather/101010100.shtml</a>页面  看看整个页面都请求了什么<br>  <img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/2275119.jpg\" alt=\"页面请求信息\"></p>\n<p>  <a href=\"http://m.weather.com.cn/mweather/101010100.shtml\" target=\"_blank\" rel=\"noopener\">http://m.weather.com.cn/mweather/101010100.shtml</a> 这个页面并没有返回对应的数据 也是 现在谁家的网页还能都是静态的<br>  然后是这个位置的素质五连<img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/67360173.jpg\" alt=\"数据五连\"><br>  后面是一个时间戳 模仿了对应的请求格式 但是每次访问的时候都被拒绝应该是页面js代码中有控制 看来直接通过城市id获取不行了</p>\n<h4 id=\"经纬度查询\"><a href=\"#经纬度查询\" class=\"headerlink\" title=\"经纬度查询\"></a>经纬度查询</h4><p>  如果直接通过经纬度地址进行访问<a href=\"http://m.weather.com.cn/d/town/index?lat=39.915055&amp;lon=116.403982\" target=\"_blank\" rel=\"noopener\">http://m.weather.com.cn/d/town/index?lat=39.915055&amp;lon=116.403982</a>通过分析可以在直接访问的地址中找到返回这个部分数据<br><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/10458430.jpg\" alt=\"请求详情\"></p>\n<h2 id=\"数据分析\"><a href=\"#数据分析\" class=\"headerlink\" title=\"数据分析\"></a>数据分析</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">([&#123;&quot;TEMMIN&quot;:19,&quot;reftime&quot;:&quot;201709022000&quot;,&quot;WIND1&quot;:&quot;04&quot;,&quot;WINS1&quot;:&quot;01&quot;,&quot;WIND2&quot;:&quot;01&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;02&quot;,&quot;WEATHER2&quot;:&quot;02&quot;,&quot;TEMMAX&quot;:29&#125;,&#123;&quot;TEMMIN&quot;:19,&quot;reftime&quot;:&quot;201709032000&quot;,&quot;WIND1&quot;:&quot;01&quot;,&quot;WINS1&quot;:&quot;00&quot;,&quot;WIND2&quot;:&quot;08&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;02&quot;,&quot;WEATHER2&quot;:&quot;02&quot;,&quot;TEMMAX&quot;:27&#125;,&#123;&quot;TEMMIN&quot;:18,&quot;reftime&quot;:&quot;201709042000&quot;,&quot;WIND1&quot;:&quot;01&quot;,&quot;WINS1&quot;:&quot;00&quot;,&quot;WIND2&quot;:&quot;01&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;01&quot;,&quot;WEATHER2&quot;:&quot;02&quot;,&quot;TEMMAX&quot;:27&#125;,&#123;&quot;TEMMIN&quot;:19,&quot;reftime&quot;:&quot;201709052000&quot;,&quot;WIND1&quot;:&quot;01&quot;,&quot;WINS1&quot;:&quot;00&quot;,&quot;WIND2&quot;:&quot;08&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;07&quot;,&quot;WEATHER2&quot;:&quot;02&quot;,&quot;TEMMAX&quot;:29&#125;,&#123;&quot;TEMMIN&quot;:18,&quot;reftime&quot;:&quot;201709062000&quot;,&quot;WIND1&quot;:&quot;01&quot;,&quot;WINS1&quot;:&quot;00&quot;,&quot;WIND2&quot;:&quot;02&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;00&quot;,&quot;WEATHER2&quot;:&quot;00&quot;,&quot;TEMMAX&quot;:30&#125;],[&#123;&quot;WIND&quot;:&quot;05&quot;,&quot;WEA08&quot;:&quot;02&quot;,&quot;reftime&quot;:&quot;201709010800&quot;,&quot;PRE08&quot;:&quot;0.0&quot;,&quot;TMAX&quot;:28,&quot;TMIN&quot;:21,&quot;WEA20&quot;:&quot;02&quot;,&quot;PRE20&quot;:&quot;0.0&quot;,&quot;WINS&quot;:&quot;01&quot;&#125;])</span><br></pre></td></tr></table></figure>\n<p>  这部分的数据可以看出来是个json格式数据 取其中一部分来分析<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;TEMMIN&quot;:19,&quot;reftime&quot;:&quot;201709022000&quot;,&quot;WIND1&quot;:&quot;04&quot;,&quot;WINS1&quot;:&quot;01&quot;,&quot;WIND2&quot;:&quot;01&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;02&quot;,&quot;WEATHER2&quot;:&quot;02&quot;,&quot;TEMMAX&quot;:29&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  经过整理后发现对应数据如下</p>\n<p>  TEMMIN : 最低温度<br>  TEMMAX : 最高温度<br>  reftime : 时间<br>  WEATHER1 : 天气1 (晴转多云 的晴)<br>  WEATHER2 : 天气2 (晴转多云 的多云)</p>\n<p>  weather的对应如下<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;00&quot;:&quot;晴&quot;,&quot;01&quot;:&quot;多云&quot;,&quot;02&quot;:&quot;阴&quot;,&quot;03&quot;:&quot;阵雨&quot;,&quot;04&quot;:&quot;雷阵雨&quot;,&quot;05&quot;:&quot;雷阵雨伴有冰雹&quot;,&quot;06&quot;:&quot;雨夹雪&quot;,&quot;07&quot;:&quot;小雨&quot;,&quot;08&quot;:&quot;中雨&quot;,&quot;09&quot;:&quot;大雨&quot;,&quot;10&quot;:&quot;暴雨&quot;,&quot;11&quot;:&quot;大暴雨&quot;,&quot;12&quot;:&quot;特大暴雨&quot;,&quot;13&quot;:&quot;阵雪&quot;,&quot;14&quot;:&quot;小雪&quot;,&quot;15&quot;:&quot;中雪&quot;,&quot;16&quot;:&quot;大雪&quot;,&quot;17&quot;:&quot;暴雪&quot;,&quot;18&quot;:&quot;雾&quot;,&quot;19&quot;:&quot;冻雨&quot;,&quot;20&quot;:&quot;沙尘暴&quot;,&quot;21&quot;:&quot;小到中雨&quot;,&quot;22&quot;:&quot;中到大雨&quot;,&quot;23&quot;:&quot;大到暴雨&quot;,&quot;24&quot;:&quot;暴雨到大暴雨&quot;,&quot;25&quot;:&quot;大暴雨到特大暴雨&quot;,&quot;26&quot;:&quot;小到中雪&quot;,&quot;27&quot;:&quot;中到大雪&quot;,&quot;28&quot;:&quot;大到暴雪&quot;,&quot;29&quot;:&quot;浮尘&quot;,&quot;30&quot;:&quot;扬沙&quot;,&quot;31&quot;:&quot;强沙尘暴&quot;,&quot;53&quot;:&quot;霾&quot;,&quot;99&quot;:&quot;&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  WIND1 : 风向1<br>  WINS1 : 风向1等级<br>  WIND2 : 风向2<br>  WINS2 : 风向2等级</p>\n<p>  WIND对应如下<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;0&quot;:&quot;无持续风向&quot;,&quot;1&quot;:&quot;东北风&quot;,&quot;2&quot;:&quot;东风&quot;,&quot;3&quot;:&quot;东南风&quot;,&quot;4&quot;:&quot;南风&quot;,&quot;5&quot;:&quot;西南风&quot;,&quot;6&quot;:&quot;西风&quot;,&quot;7&quot;:&quot;西北风&quot;,&quot;8&quot;:&quot;北风&quot;,&quot;9&quot;:&quot;旋转风&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  WINS对应如下:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;0&quot;:&quot;微风&quot;,&quot;1&quot;:&quot;3-4级&quot;,&quot;2&quot;:&quot;4-5级&quot;,&quot;3&quot;:&quot;5-6级&quot;,&quot;4&quot;:&quot;6-7级&quot;,&quot;5&quot;:&quot;7-8级&quot;,&quot;6&quot;:&quot;8-9级&quot;,&quot;7&quot;:&quot;9-10级&quot;,&quot;8&quot;:&quot;10-11级&quot;,&quot;9&quot;:&quot;11-12级&quot;&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"获取流程\"><a href=\"#获取流程\" class=\"headerlink\" title=\"获取流程\"></a>获取流程</h2><p>  通过经纬度可以直接获取天气信息 而且精度较高可以定位当前位置后再获取天气信息 但是只适用国内的天气信息 可以本地缓存全国所有地区的经纬度或者通过城市id访问天气信息的页面中获取经纬度 看实际使用情况斟酌</p>\n<p>  而通过城市id的方法可以获得全球的天气信息</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>  页面还有很多数据可以发现</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"中国国家气象局api数据分析\"><a href=\"#中国国家气象局api数据分析\" class=\"headerlink\" title=\"中国国家气象局api数据分析\"></a>中国国家气象局api数据分析</h1><blockquote>\n<p>天气预报是程序中很常见的功能 然而现在免费好用的天气api却很难找 不妨仔细的看一下<a href=\"http://m.weather.com.cn/\" target=\"_blank\" rel=\"noopener\">国家气象局</a> 本分就此网站来获取天气<br>","more":"</p>\n</blockquote>\n<h2 id=\"地址及页面分析\"><a href=\"#地址及页面分析\" class=\"headerlink\" title=\"地址及页面分析\"></a>地址及页面分析</h2><h3 id=\"地址分析\"><a href=\"#地址分析\" class=\"headerlink\" title=\"地址分析\"></a>地址分析</h3><p>  通过尝试,想要获取某个城市或者地址的天气页面有两种方式,一种是通过经纬度访问<a href=\"http://m.weather.com.cn/d/town/index?lat=39.915055&amp;lon=116.403982\" target=\"_blank\" rel=\"noopener\">http://m.weather.com.cn/d/town/index?lat=39.915055&amp;lon=116.403982</a>,另一种是通过城市id访问<a href=\"http://m.weather.com.cn/mweather/101010100.shtml\" target=\"_blank\" rel=\"noopener\">http://m.weather.com.cn/mweather/101010100.shtml</a> 两个地址都能得到北京市的天气情况 不过前一种是经纬度,另一种是城市id.</p>\n<p>  关于城市的id可以查看<a href=\"http://mobile.weather.com.cn/js/citylist.xml\" target=\"_blank\" rel=\"noopener\">http://mobile.weather.com.cn/js/citylist.xml</a>可以得到全国2500多个城市县区及全球其他国家6000多个城市的数据 可以直接通过以上的接口获得相关城市的天气数据</p>\n<h3 id=\"页面分析\"><a href=\"#页面分析\" class=\"headerlink\" title=\"页面分析\"></a>页面分析</h3><h4 id=\"id查询\"><a href=\"#id查询\" class=\"headerlink\" title=\"id查询\"></a>id查询</h4><p>  我们先访问以下<a href=\"http://m.weather.com.cn/mweather/101010100.shtml\" target=\"_blank\" rel=\"noopener\">http://m.weather.com.cn/mweather/101010100.shtml</a>页面  看看整个页面都请求了什么<br>  <img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/2275119.jpg\" alt=\"页面请求信息\"></p>\n<p>  <a href=\"http://m.weather.com.cn/mweather/101010100.shtml\" target=\"_blank\" rel=\"noopener\">http://m.weather.com.cn/mweather/101010100.shtml</a> 这个页面并没有返回对应的数据 也是 现在谁家的网页还能都是静态的<br>  然后是这个位置的素质五连<img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/67360173.jpg\" alt=\"数据五连\"><br>  后面是一个时间戳 模仿了对应的请求格式 但是每次访问的时候都被拒绝应该是页面js代码中有控制 看来直接通过城市id获取不行了</p>\n<h4 id=\"经纬度查询\"><a href=\"#经纬度查询\" class=\"headerlink\" title=\"经纬度查询\"></a>经纬度查询</h4><p>  如果直接通过经纬度地址进行访问<a href=\"http://m.weather.com.cn/d/town/index?lat=39.915055&amp;lon=116.403982\" target=\"_blank\" rel=\"noopener\">http://m.weather.com.cn/d/town/index?lat=39.915055&amp;lon=116.403982</a>通过分析可以在直接访问的地址中找到返回这个部分数据<br><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/10458430.jpg\" alt=\"请求详情\"></p>\n<h2 id=\"数据分析\"><a href=\"#数据分析\" class=\"headerlink\" title=\"数据分析\"></a>数据分析</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">([&#123;&quot;TEMMIN&quot;:19,&quot;reftime&quot;:&quot;201709022000&quot;,&quot;WIND1&quot;:&quot;04&quot;,&quot;WINS1&quot;:&quot;01&quot;,&quot;WIND2&quot;:&quot;01&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;02&quot;,&quot;WEATHER2&quot;:&quot;02&quot;,&quot;TEMMAX&quot;:29&#125;,&#123;&quot;TEMMIN&quot;:19,&quot;reftime&quot;:&quot;201709032000&quot;,&quot;WIND1&quot;:&quot;01&quot;,&quot;WINS1&quot;:&quot;00&quot;,&quot;WIND2&quot;:&quot;08&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;02&quot;,&quot;WEATHER2&quot;:&quot;02&quot;,&quot;TEMMAX&quot;:27&#125;,&#123;&quot;TEMMIN&quot;:18,&quot;reftime&quot;:&quot;201709042000&quot;,&quot;WIND1&quot;:&quot;01&quot;,&quot;WINS1&quot;:&quot;00&quot;,&quot;WIND2&quot;:&quot;01&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;01&quot;,&quot;WEATHER2&quot;:&quot;02&quot;,&quot;TEMMAX&quot;:27&#125;,&#123;&quot;TEMMIN&quot;:19,&quot;reftime&quot;:&quot;201709052000&quot;,&quot;WIND1&quot;:&quot;01&quot;,&quot;WINS1&quot;:&quot;00&quot;,&quot;WIND2&quot;:&quot;08&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;07&quot;,&quot;WEATHER2&quot;:&quot;02&quot;,&quot;TEMMAX&quot;:29&#125;,&#123;&quot;TEMMIN&quot;:18,&quot;reftime&quot;:&quot;201709062000&quot;,&quot;WIND1&quot;:&quot;01&quot;,&quot;WINS1&quot;:&quot;00&quot;,&quot;WIND2&quot;:&quot;02&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;00&quot;,&quot;WEATHER2&quot;:&quot;00&quot;,&quot;TEMMAX&quot;:30&#125;],[&#123;&quot;WIND&quot;:&quot;05&quot;,&quot;WEA08&quot;:&quot;02&quot;,&quot;reftime&quot;:&quot;201709010800&quot;,&quot;PRE08&quot;:&quot;0.0&quot;,&quot;TMAX&quot;:28,&quot;TMIN&quot;:21,&quot;WEA20&quot;:&quot;02&quot;,&quot;PRE20&quot;:&quot;0.0&quot;,&quot;WINS&quot;:&quot;01&quot;&#125;])</span><br></pre></td></tr></table></figure>\n<p>  这部分的数据可以看出来是个json格式数据 取其中一部分来分析<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;TEMMIN&quot;:19,&quot;reftime&quot;:&quot;201709022000&quot;,&quot;WIND1&quot;:&quot;04&quot;,&quot;WINS1&quot;:&quot;01&quot;,&quot;WIND2&quot;:&quot;01&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;02&quot;,&quot;WEATHER2&quot;:&quot;02&quot;,&quot;TEMMAX&quot;:29&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  经过整理后发现对应数据如下</p>\n<p>  TEMMIN : 最低温度<br>  TEMMAX : 最高温度<br>  reftime : 时间<br>  WEATHER1 : 天气1 (晴转多云 的晴)<br>  WEATHER2 : 天气2 (晴转多云 的多云)</p>\n<p>  weather的对应如下<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;00&quot;:&quot;晴&quot;,&quot;01&quot;:&quot;多云&quot;,&quot;02&quot;:&quot;阴&quot;,&quot;03&quot;:&quot;阵雨&quot;,&quot;04&quot;:&quot;雷阵雨&quot;,&quot;05&quot;:&quot;雷阵雨伴有冰雹&quot;,&quot;06&quot;:&quot;雨夹雪&quot;,&quot;07&quot;:&quot;小雨&quot;,&quot;08&quot;:&quot;中雨&quot;,&quot;09&quot;:&quot;大雨&quot;,&quot;10&quot;:&quot;暴雨&quot;,&quot;11&quot;:&quot;大暴雨&quot;,&quot;12&quot;:&quot;特大暴雨&quot;,&quot;13&quot;:&quot;阵雪&quot;,&quot;14&quot;:&quot;小雪&quot;,&quot;15&quot;:&quot;中雪&quot;,&quot;16&quot;:&quot;大雪&quot;,&quot;17&quot;:&quot;暴雪&quot;,&quot;18&quot;:&quot;雾&quot;,&quot;19&quot;:&quot;冻雨&quot;,&quot;20&quot;:&quot;沙尘暴&quot;,&quot;21&quot;:&quot;小到中雨&quot;,&quot;22&quot;:&quot;中到大雨&quot;,&quot;23&quot;:&quot;大到暴雨&quot;,&quot;24&quot;:&quot;暴雨到大暴雨&quot;,&quot;25&quot;:&quot;大暴雨到特大暴雨&quot;,&quot;26&quot;:&quot;小到中雪&quot;,&quot;27&quot;:&quot;中到大雪&quot;,&quot;28&quot;:&quot;大到暴雪&quot;,&quot;29&quot;:&quot;浮尘&quot;,&quot;30&quot;:&quot;扬沙&quot;,&quot;31&quot;:&quot;强沙尘暴&quot;,&quot;53&quot;:&quot;霾&quot;,&quot;99&quot;:&quot;&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  WIND1 : 风向1<br>  WINS1 : 风向1等级<br>  WIND2 : 风向2<br>  WINS2 : 风向2等级</p>\n<p>  WIND对应如下<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;0&quot;:&quot;无持续风向&quot;,&quot;1&quot;:&quot;东北风&quot;,&quot;2&quot;:&quot;东风&quot;,&quot;3&quot;:&quot;东南风&quot;,&quot;4&quot;:&quot;南风&quot;,&quot;5&quot;:&quot;西南风&quot;,&quot;6&quot;:&quot;西风&quot;,&quot;7&quot;:&quot;西北风&quot;,&quot;8&quot;:&quot;北风&quot;,&quot;9&quot;:&quot;旋转风&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  WINS对应如下:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;0&quot;:&quot;微风&quot;,&quot;1&quot;:&quot;3-4级&quot;,&quot;2&quot;:&quot;4-5级&quot;,&quot;3&quot;:&quot;5-6级&quot;,&quot;4&quot;:&quot;6-7级&quot;,&quot;5&quot;:&quot;7-8级&quot;,&quot;6&quot;:&quot;8-9级&quot;,&quot;7&quot;:&quot;9-10级&quot;,&quot;8&quot;:&quot;10-11级&quot;,&quot;9&quot;:&quot;11-12级&quot;&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"获取流程\"><a href=\"#获取流程\" class=\"headerlink\" title=\"获取流程\"></a>获取流程</h2><p>  通过经纬度可以直接获取天气信息 而且精度较高可以定位当前位置后再获取天气信息 但是只适用国内的天气信息 可以本地缓存全国所有地区的经纬度或者通过城市id访问天气信息的页面中获取经纬度 看实际使用情况斟酌</p>\n<p>  而通过城市id的方法可以获得全球的天气信息</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>  页面还有很多数据可以发现</p>"},{"title":"Android View 相关源码分析之一 从setContentView与LayoutInflater说起","date":"2017-02-03T09:29:24.000Z","_content":"\n## 从setContentView与LayoutInflater说起\n### setContentView分析\n#### 相关关系\n\n  ![相关关系图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/61853049.jpg)  \n  <!-- more -->\n\n  Activity中有Window成员 实例化为PhoneWindow PhoneWindow是抽象Window类的实现类\n\n  Window提供了绘制窗口的通用API PhoneWindow中包含了DecorView对象 是所有窗口(Activity界面)的根View\n\n  具体的构如下\n\n  ![View层级分析](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/39785701.jpg)\n\n  具体的可以通过hierarchyviewer工具分析一下\n\n\n\n#### PhoneWindow的setContentView分析\n>Window类的setContentView方法 而Window的setContentView方法是抽象的  所以查看PhoneWindow的setContentView()\n\n1. setContentView方法\n  ```java\n    // This is the view in which the window contents are placed. It is either\n    // mDecor itself, or a child of mDecor where the contents go.\n    private ViewGroup mContentParent;\n\n    @Override\n    public void setContentView(int layoutResID) {\n        // Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window\n        // decor, when theme attributes and the like are crystalized. Do not check the feature\n        // before this happens.\n        if (mContentParent == null) {\n            //第一次调用\n            //下面会详细分析\n            installDecor();\n        } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            //移除该mContentParent下的所有View\n            //又因为这个的存在  我们可以多次使用setContentView()\n            mContentParent.removeAllViews();\n        }\n        //判断是否使用了Activity的过度动画\n        if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n          //设置动画场景\n            final Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,\n                    getContext());\n            transitionTo(newScene);\n        } else {\n            //将资源文件通过LayoutInflater对象装换为View树\n            //在PhoneWindow的构造函数中 mLayoutInflater = LayoutInflater.from(context);\n            mLayoutInflater.inflate(layoutResID, mContentParent);\n        }\n\n        //View中\n        /**\n         * Ask that a new dispatch of {@link #onApplyWindowInsets(WindowInsets)} be performed.\n         */\n        // public void requestApplyInsets() {\n        //     requestFitSystemWindows();\n        // }\n        mContentParent.requestApplyInsets();\n        final Callback cb = getCallback();\n        if (cb != null && !isDestroyed()) {\n            cb.onContentChanged();\n        }\n    }\n\n    @Override\n    public void setContentView(View view) {\n        setContentView(view, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));\n    }\n\n    @Override\n    public void setContentView(View view, ViewGroup.LayoutParams params) {\n        if (mContentParent == null) {\n            installDecor();\n        } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            mContentParent.removeAllViews();\n        }\n\n        if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            view.setLayoutParams(params);\n            final Scene newScene = new Scene(mContentParent, view);\n            transitionTo(newScene);\n        } else {\n          //已经为View 直接使用View的addView方法追加到当前mContentParent中\n            mContentParent.addView(view, params);\n        }\n        mContentParent.requestApplyInsets();\n        final Callback cb = getCallback();\n        //调用CallBack接口的onContentChange来通知Activity组件视图发生了变化\n        if (cb != null && !isDestroyed()) {\n            cb.onContentChanged();\n        }\n    }\n  ```\n2. installDecor方法\n  ```java\n    //截取部分主要分析代码\n    private void installDecor() {\n        if (mDecor == null) {\n            //如果mDecor为空则创建一个DecorView实例\n            // protected DecorView generateDecor() {\n            //   return new DecorView(getContext(), -1);\n            // }\n            mDecor = generateDecor();  \n            mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);\n            mDecor.setIsRootNamespace(true);\n            if (!mInvalidatePanelMenuPosted && mInvalidatePanelMenuFeatures != 0) {\n                mDecor.postOnAnimation(mInvalidatePanelMenuRunnable);\n            }\n        }\n        if (mContentParent == null) {\n            //根据窗口的风格修饰 选择对应的修饰布局文件 将id为content的FrameLayout赋值于mContentParent\n            mContentParent = generateLayout(mDecor);\n            ...\n          }\n    }\n  ```\n  ```java\n    protected ViewGroup generateLayout(DecorView decor) {\n         // Apply data from current theme.\n         //根据当前style修饰相应样式\n\n         TypedArray a = getWindowStyle();\n\n         ...\n         //一堆if判断\n\n         // 增加窗口修饰\n\n         int layoutResource;\n         int features = getLocalFeatures();\n\n         ...\n         //根据features选择不同的窗帘修饰布局文件得到\n         //把选中的窗口修饰布局文件添加到DecorView中, 指定contentParent的值\n         View in = mLayoutInflater.inflate(layoutResource, null);\n         decor.addView(in, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));\n         mContentRoot = (ViewGroup) in;\n\n         ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);\n         if (contentParent == null) {\n             throw new RuntimeException(\"Window couldn't find content container view\");\n         }\n\n         ...\n         return contentParent;\n     }\n  ```\n  该方法的主要功能为 根据窗口的style为该窗口选择不同的窗口根布局文件 将mDecor作为根视图将窗口布局添加,获取id为content的FrameLayout返回给mContentParent对象  实质为阐释mDecor和mContentParent对象\n3. (扩展)关于设置Activity属性需要在setContentView方法之前调用的问题\n\n  在设置Activity属性的时候 比如requestWindowFeature(Window.FEATURE_NO_TITLE) 需要在setContentView方法之前调用\n  ```java\n    public boolean requestFeature(int featureId) {\n        if (mContentParent != null) {\n            throw new AndroidRuntimeException(\"requestFeature() must be called before adding content\");\n        }\n        ...\n    }\n```\n\n4. onContentChanged方法\n\n  在PhoneWindow中没有重写getCallback相关方法 而在Window类下\n  ```java\n    /**\n     * Return the current Callback interface for this window.\n     */\n    public final Callback getCallback() {\n        return mCallback;\n    }\n  ```\n  mCallback相关的赋值方法\n  ```java\n    /**\n     * Set the Callback interface for this window, used to intercept key\n     * events and other dynamic operations in the window.\n     *\n     * @param callback The desired Callback interface.\n     */\n    public void setCallback(Callback callback) {\n        mCallback = callback;\n    }\n  ```\n  setCallback方法在Activity中被使用\n  ```java\n    final void attach(Context context, ActivityThread aThread,\n              Instrumentation instr, IBinder token, int ident,\n              Application application, Intent intent, ActivityInfo info,\n              CharSequence title, Activity parent, String id,\n              NonConfigurationInstances lastNonConfigurationInstances,\n              Configuration config, String referrer, IVoiceInteractor voiceInteractor) {\n          ...\n          mWindow.setCallback(this);\n          ...\n    }\n  ```\n  说明Activity实现了Window的CallBack接口 然后在Activity中找到onContentChanged方法\n  ```java\n    public void onContentChanged() {\n    }\n  ```\n  对 空方法. 说明在Activity的布局改动时 (setContentView或者addContentView 方法执行完毕后会调用改方法)\n   所以各种View的findViewById方法什么的可以放在这里\n\n5. setContentView源码总结\n  * 创建一个DecorView的对象mDector 该mDector将作为整个应用窗口的根视图\n  *  根据根据Feature等style theme创建不同的窗口修饰布局文件 并且通过findViewById获取Activity布局文件该存放的地方\n  *  将Activity的布局文件添加至id为content的FrameLayout内\n  *  执行到当前页面还没有显示出来\n\n6. Activity页面显示\n\n  我们都知道Activity的实际开始于ActivityThread的main方法 当该方法调运完之后会调用该类的performLaunchActivity方法来创建要启动的Activity组件 这个过程中还会为该Activity组件创建窗口对象和视图对象 当组件创建完成后用过调用该类的handleResumeActivity方法将其激活\n\n  ```java\n    final void handleResumeActivity(IBinder token,\n               boolean clearHide, boolean isForward, boolean reallyResume) {\n                 ...\n               if (!r.activity.mFinished && willBeVisible\n                       && r.activity.mDecor != null && !r.hideForNow) {\n                   ...\n                   if (r.activity.mVisibleFromClient) {\n                       r.activity.makeVisible();\n                       //这里这里 通过调用Activity的makeVisible方法来显示我们通过setContentView创建的mDecor\n                   }\n                   ...\n               }\n           } else {\n             ...\n           }\n       }\n  ```\n  ```java\n    //Activity的makeVisible方法\n    void makeVisible() {\n         if (!mWindowAdded) {\n             ViewManager wm = getWindowManager();\n             wm.addView(mDecor, getWindow().getAttributes());\n             mWindowAdded = true;\n         }\n         mDecor.setVisibility(View.VISIBLE);\n     }\n  ```\n  至此通过setContentView方法设置的页面才最后显示出来\n\n### LayoutInflater源码分析\n1. 与setContentView相关\n\n  在PhoneWindow的generateLayout中调用了     \n  ```java\n    View in = mLayoutInflater.inflate(layoutResource, null);\n  ```\n\n2. LayoutInflater中获取实例化方法\n  ```java\n    /**\n     * Obtains the LayoutInflater from the given context.\n     */\n    public static LayoutInflater from(Context context) {\n        LayoutInflater LayoutInflater =\n                (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        if (LayoutInflater == null) {\n            throw new AssertionError(\"LayoutInflater not found.\");\n        }\n        return LayoutInflater;\n    }\n  ```\n\n3. inflate方法相关\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root) {\n        return inflate(resource, root, root != null);\n    }\n\n    public View inflate(XmlPullParser parser, @Nullable ViewGroup root) {\n      return inflate(parser, root, root != null);\n    }\n  ```\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\n        final Resources res = getContext().getResources();\n        if (DEBUG) {\n            Log.d(TAG, \"INFLATING from resource: \\\"\" + res.getResourceName(resource) + \"\\\" (\"\n                    + Integer.toHexString(resource) + \")\");\n        }\n\n        final XmlResourceParser parser = res.getLayout(resource);\n        try {\n            return inflate(parser, root, attachToRoot);\n        } finally {\n            parser.close();\n        }\n    }\n  ```\n  最后发现都需要调用\n\n  ```java\n  public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n          synchronized (mConstructorArgs) {\n              Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n\n              final Context inflaterContext = mContext;\n              final AttributeSet attrs = Xml.asAttributeSet(parser);\n              Context lastContext = (Context) mConstructorArgs[0];\n              mConstructorArgs[0] = inflaterContext;\n              //定义返回值 初始化传入形参 root\n              View result = root;\n\n              try {\n                  // 找到根节点\n                  int type;\n                  while ((type = parser.next()) != XmlPullParser.START_TAG &&\n                          type != XmlPullParser.END_DOCUMENT) {\n                  }\n\n                  //验证type是否为Start_Tag  保证xml文件正确\n                  if (type != XmlPullParser.START_TAG) {\n                      throw new InflateException(parser.getPositionDescription()\n                              + \": No start tag found!\");\n                  }\n\n                  //type为 root node\n                  final String name = parser.getName();\n\n                  if (DEBUG) {\n                      System.out.println(\"**************************\");\n                      System.out.println(\"Creating root view: \"\n                              + name);\n                      System.out.println(\"**************************\");\n                  }\n\n                  if (TAG_MERGE.equals(name)) {\n                      //处理 merge相关\n                      //root需要非空 且attachToRoot为空\n                      if (root == null || !attachToRoot) {\n                          throw new InflateException(\"<merge /> can be used only with a valid \"\n                                  + \"ViewGroup root and attachToRoot=true\");\n                      }\n                      //递归inflate 方法调用\n                      rInflate(parser, root, inflaterContext, attrs, false);\n                  } else {\n                      //根据tag节点创建view对象\n                      final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                      ViewGroup.LayoutParams params = null;\n\n                      if (root != null) {\n                          if (DEBUG) {\n                              System.out.println(\"Creating params from root: \" +\n                                      root);\n                          }\n                          //根据root生成LayoutParams\n                          params = root.generateLayoutParams(attrs);\n                          if (!attachToRoot) {\n                              //如果attachToRoot为flase 则调用setLayoutParams\n                              temp.setLayoutParams(params);\n                          }\n                      }\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> start inflating children\");\n                      }\n                      //递归inflate剩下的children\n                      rInflateChildren(parser, temp, attrs, true);\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> done inflating children\");\n                      }\n\n                      // We are supposed to attach all the views we found (int temp)\n                      // to root. Do that now.\n                      if (root != null && attachToRoot) {\n                          //root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里\n                          root.addView(temp, params);\n                      }\n\n                      // Decide whether to return the root that was passed in or the\n                      // top view found in xml.\n                      if (root == null || !attachToRoot) {\n                          //返回xml里解析的root view\n                          result = temp;\n                      }\n                  }\n\n              } catch (XmlPullParserException e) {\n                  InflateException ex = new InflateException(e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } catch (Exception e) {\n                  InflateException ex = new InflateException(\n                          parser.getPositionDescription()\n                                  + \": \" + e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } finally {\n                  // Don't retain static reference on context.\n                  mConstructorArgs[0] = lastContext;\n                  mConstructorArgs[1] = null;\n              }\n\n              Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n              //返回参数root或xml文件里的root view\n              return result;\n          }\n      }\n\n  ```\n  相关inflate参数的结果\n  ![inflate参数.png](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/4341656.jpg)\n\n4. 相关方法解析\n  在Inflate中多次被调用的rInflate\n\n  ```java\n     void rInflate(XmlPullParser parser, View parent, Context context,\n             AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException {\n\n         final int depth = parser.getDepth();\n         int type;\n         //XmlPullParser解析器的标准解析模式\n         while (((type = parser.next()) != XmlPullParser.END_TAG ||\n                 parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {\n             //找到start_tag节点\n             if (type != XmlPullParser.START_TAG) {\n                 continue;\n             }\n             //获取Name标记\n             final String name = parser.getName();\n\n             //private static final String TAG_REQUEST_FOCUS = \"requestFocus\";\n             //处理requestFocus\n             if (TAG_REQUEST_FOCUS.equals(name)) {\n                 parseRequestFocus(parser, parent);\n             // private static final String TAG_TAG = \"tag\";\n             //处理tag\n             } else if (TAG_TAG.equals(name)) {\n                 parseViewTag(parser, parent, attrs);\n             //private static final String TAG_INCLUDE = \"include\";\n             //处理include\n             } else if (TAG_INCLUDE.equals(name)) {\n                 //如果是根节点则抛出异常\n                 if (parser.getDepth() == 0) {\n                     throw new InflateException(\"<include /> cannot be the root element\");\n                 }\n                 parseInclude(parser, context, parent, attrs);\n             //private static final String TAG_MERGE = \"merge\";\n             //处理merge merge需要是xml中的根节点\n             } else if (TAG_MERGE.equals(name)) {\n                 throw new InflateException(\"<merge /> must be the root element\");\n             } else {\n                 final View view = createViewFromTag(parent, name, context, attrs);\n                 final ViewGroup viewGroup = (ViewGroup) parent;\n                 final ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);\n                 rInflateChildren(parser, view, attrs, true);\n                 viewGroup.addView(view, params);\n             }\n         }\n\n          //parent的所有子节点都处理完毕的时候回onFinishInflate方法\n         if (finishInflate) {\n             parent.onFinishInflate();\n         }\n     }\n     //可以添加自定义逻辑\n      protected void onFinishInflate() {\n      }\n```\n","source":"_posts/从setContentView说起.md","raw":"---\ntitle: Android View 相关源码分析之一 从setContentView与LayoutInflater说起\ndate: 2017-02-03 17:29:24\ntags: [\"android\" , \"view\" , \"源码\"]\ncategories: \"android\"\n---\n\n## 从setContentView与LayoutInflater说起\n### setContentView分析\n#### 相关关系\n\n  ![相关关系图](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/61853049.jpg)  \n  <!-- more -->\n\n  Activity中有Window成员 实例化为PhoneWindow PhoneWindow是抽象Window类的实现类\n\n  Window提供了绘制窗口的通用API PhoneWindow中包含了DecorView对象 是所有窗口(Activity界面)的根View\n\n  具体的构如下\n\n  ![View层级分析](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/39785701.jpg)\n\n  具体的可以通过hierarchyviewer工具分析一下\n\n\n\n#### PhoneWindow的setContentView分析\n>Window类的setContentView方法 而Window的setContentView方法是抽象的  所以查看PhoneWindow的setContentView()\n\n1. setContentView方法\n  ```java\n    // This is the view in which the window contents are placed. It is either\n    // mDecor itself, or a child of mDecor where the contents go.\n    private ViewGroup mContentParent;\n\n    @Override\n    public void setContentView(int layoutResID) {\n        // Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window\n        // decor, when theme attributes and the like are crystalized. Do not check the feature\n        // before this happens.\n        if (mContentParent == null) {\n            //第一次调用\n            //下面会详细分析\n            installDecor();\n        } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            //移除该mContentParent下的所有View\n            //又因为这个的存在  我们可以多次使用setContentView()\n            mContentParent.removeAllViews();\n        }\n        //判断是否使用了Activity的过度动画\n        if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n          //设置动画场景\n            final Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,\n                    getContext());\n            transitionTo(newScene);\n        } else {\n            //将资源文件通过LayoutInflater对象装换为View树\n            //在PhoneWindow的构造函数中 mLayoutInflater = LayoutInflater.from(context);\n            mLayoutInflater.inflate(layoutResID, mContentParent);\n        }\n\n        //View中\n        /**\n         * Ask that a new dispatch of {@link #onApplyWindowInsets(WindowInsets)} be performed.\n         */\n        // public void requestApplyInsets() {\n        //     requestFitSystemWindows();\n        // }\n        mContentParent.requestApplyInsets();\n        final Callback cb = getCallback();\n        if (cb != null && !isDestroyed()) {\n            cb.onContentChanged();\n        }\n    }\n\n    @Override\n    public void setContentView(View view) {\n        setContentView(view, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));\n    }\n\n    @Override\n    public void setContentView(View view, ViewGroup.LayoutParams params) {\n        if (mContentParent == null) {\n            installDecor();\n        } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            mContentParent.removeAllViews();\n        }\n\n        if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            view.setLayoutParams(params);\n            final Scene newScene = new Scene(mContentParent, view);\n            transitionTo(newScene);\n        } else {\n          //已经为View 直接使用View的addView方法追加到当前mContentParent中\n            mContentParent.addView(view, params);\n        }\n        mContentParent.requestApplyInsets();\n        final Callback cb = getCallback();\n        //调用CallBack接口的onContentChange来通知Activity组件视图发生了变化\n        if (cb != null && !isDestroyed()) {\n            cb.onContentChanged();\n        }\n    }\n  ```\n2. installDecor方法\n  ```java\n    //截取部分主要分析代码\n    private void installDecor() {\n        if (mDecor == null) {\n            //如果mDecor为空则创建一个DecorView实例\n            // protected DecorView generateDecor() {\n            //   return new DecorView(getContext(), -1);\n            // }\n            mDecor = generateDecor();  \n            mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);\n            mDecor.setIsRootNamespace(true);\n            if (!mInvalidatePanelMenuPosted && mInvalidatePanelMenuFeatures != 0) {\n                mDecor.postOnAnimation(mInvalidatePanelMenuRunnable);\n            }\n        }\n        if (mContentParent == null) {\n            //根据窗口的风格修饰 选择对应的修饰布局文件 将id为content的FrameLayout赋值于mContentParent\n            mContentParent = generateLayout(mDecor);\n            ...\n          }\n    }\n  ```\n  ```java\n    protected ViewGroup generateLayout(DecorView decor) {\n         // Apply data from current theme.\n         //根据当前style修饰相应样式\n\n         TypedArray a = getWindowStyle();\n\n         ...\n         //一堆if判断\n\n         // 增加窗口修饰\n\n         int layoutResource;\n         int features = getLocalFeatures();\n\n         ...\n         //根据features选择不同的窗帘修饰布局文件得到\n         //把选中的窗口修饰布局文件添加到DecorView中, 指定contentParent的值\n         View in = mLayoutInflater.inflate(layoutResource, null);\n         decor.addView(in, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));\n         mContentRoot = (ViewGroup) in;\n\n         ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);\n         if (contentParent == null) {\n             throw new RuntimeException(\"Window couldn't find content container view\");\n         }\n\n         ...\n         return contentParent;\n     }\n  ```\n  该方法的主要功能为 根据窗口的style为该窗口选择不同的窗口根布局文件 将mDecor作为根视图将窗口布局添加,获取id为content的FrameLayout返回给mContentParent对象  实质为阐释mDecor和mContentParent对象\n3. (扩展)关于设置Activity属性需要在setContentView方法之前调用的问题\n\n  在设置Activity属性的时候 比如requestWindowFeature(Window.FEATURE_NO_TITLE) 需要在setContentView方法之前调用\n  ```java\n    public boolean requestFeature(int featureId) {\n        if (mContentParent != null) {\n            throw new AndroidRuntimeException(\"requestFeature() must be called before adding content\");\n        }\n        ...\n    }\n```\n\n4. onContentChanged方法\n\n  在PhoneWindow中没有重写getCallback相关方法 而在Window类下\n  ```java\n    /**\n     * Return the current Callback interface for this window.\n     */\n    public final Callback getCallback() {\n        return mCallback;\n    }\n  ```\n  mCallback相关的赋值方法\n  ```java\n    /**\n     * Set the Callback interface for this window, used to intercept key\n     * events and other dynamic operations in the window.\n     *\n     * @param callback The desired Callback interface.\n     */\n    public void setCallback(Callback callback) {\n        mCallback = callback;\n    }\n  ```\n  setCallback方法在Activity中被使用\n  ```java\n    final void attach(Context context, ActivityThread aThread,\n              Instrumentation instr, IBinder token, int ident,\n              Application application, Intent intent, ActivityInfo info,\n              CharSequence title, Activity parent, String id,\n              NonConfigurationInstances lastNonConfigurationInstances,\n              Configuration config, String referrer, IVoiceInteractor voiceInteractor) {\n          ...\n          mWindow.setCallback(this);\n          ...\n    }\n  ```\n  说明Activity实现了Window的CallBack接口 然后在Activity中找到onContentChanged方法\n  ```java\n    public void onContentChanged() {\n    }\n  ```\n  对 空方法. 说明在Activity的布局改动时 (setContentView或者addContentView 方法执行完毕后会调用改方法)\n   所以各种View的findViewById方法什么的可以放在这里\n\n5. setContentView源码总结\n  * 创建一个DecorView的对象mDector 该mDector将作为整个应用窗口的根视图\n  *  根据根据Feature等style theme创建不同的窗口修饰布局文件 并且通过findViewById获取Activity布局文件该存放的地方\n  *  将Activity的布局文件添加至id为content的FrameLayout内\n  *  执行到当前页面还没有显示出来\n\n6. Activity页面显示\n\n  我们都知道Activity的实际开始于ActivityThread的main方法 当该方法调运完之后会调用该类的performLaunchActivity方法来创建要启动的Activity组件 这个过程中还会为该Activity组件创建窗口对象和视图对象 当组件创建完成后用过调用该类的handleResumeActivity方法将其激活\n\n  ```java\n    final void handleResumeActivity(IBinder token,\n               boolean clearHide, boolean isForward, boolean reallyResume) {\n                 ...\n               if (!r.activity.mFinished && willBeVisible\n                       && r.activity.mDecor != null && !r.hideForNow) {\n                   ...\n                   if (r.activity.mVisibleFromClient) {\n                       r.activity.makeVisible();\n                       //这里这里 通过调用Activity的makeVisible方法来显示我们通过setContentView创建的mDecor\n                   }\n                   ...\n               }\n           } else {\n             ...\n           }\n       }\n  ```\n  ```java\n    //Activity的makeVisible方法\n    void makeVisible() {\n         if (!mWindowAdded) {\n             ViewManager wm = getWindowManager();\n             wm.addView(mDecor, getWindow().getAttributes());\n             mWindowAdded = true;\n         }\n         mDecor.setVisibility(View.VISIBLE);\n     }\n  ```\n  至此通过setContentView方法设置的页面才最后显示出来\n\n### LayoutInflater源码分析\n1. 与setContentView相关\n\n  在PhoneWindow的generateLayout中调用了     \n  ```java\n    View in = mLayoutInflater.inflate(layoutResource, null);\n  ```\n\n2. LayoutInflater中获取实例化方法\n  ```java\n    /**\n     * Obtains the LayoutInflater from the given context.\n     */\n    public static LayoutInflater from(Context context) {\n        LayoutInflater LayoutInflater =\n                (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        if (LayoutInflater == null) {\n            throw new AssertionError(\"LayoutInflater not found.\");\n        }\n        return LayoutInflater;\n    }\n  ```\n\n3. inflate方法相关\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root) {\n        return inflate(resource, root, root != null);\n    }\n\n    public View inflate(XmlPullParser parser, @Nullable ViewGroup root) {\n      return inflate(parser, root, root != null);\n    }\n  ```\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\n        final Resources res = getContext().getResources();\n        if (DEBUG) {\n            Log.d(TAG, \"INFLATING from resource: \\\"\" + res.getResourceName(resource) + \"\\\" (\"\n                    + Integer.toHexString(resource) + \")\");\n        }\n\n        final XmlResourceParser parser = res.getLayout(resource);\n        try {\n            return inflate(parser, root, attachToRoot);\n        } finally {\n            parser.close();\n        }\n    }\n  ```\n  最后发现都需要调用\n\n  ```java\n  public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n          synchronized (mConstructorArgs) {\n              Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n\n              final Context inflaterContext = mContext;\n              final AttributeSet attrs = Xml.asAttributeSet(parser);\n              Context lastContext = (Context) mConstructorArgs[0];\n              mConstructorArgs[0] = inflaterContext;\n              //定义返回值 初始化传入形参 root\n              View result = root;\n\n              try {\n                  // 找到根节点\n                  int type;\n                  while ((type = parser.next()) != XmlPullParser.START_TAG &&\n                          type != XmlPullParser.END_DOCUMENT) {\n                  }\n\n                  //验证type是否为Start_Tag  保证xml文件正确\n                  if (type != XmlPullParser.START_TAG) {\n                      throw new InflateException(parser.getPositionDescription()\n                              + \": No start tag found!\");\n                  }\n\n                  //type为 root node\n                  final String name = parser.getName();\n\n                  if (DEBUG) {\n                      System.out.println(\"**************************\");\n                      System.out.println(\"Creating root view: \"\n                              + name);\n                      System.out.println(\"**************************\");\n                  }\n\n                  if (TAG_MERGE.equals(name)) {\n                      //处理 merge相关\n                      //root需要非空 且attachToRoot为空\n                      if (root == null || !attachToRoot) {\n                          throw new InflateException(\"<merge /> can be used only with a valid \"\n                                  + \"ViewGroup root and attachToRoot=true\");\n                      }\n                      //递归inflate 方法调用\n                      rInflate(parser, root, inflaterContext, attrs, false);\n                  } else {\n                      //根据tag节点创建view对象\n                      final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                      ViewGroup.LayoutParams params = null;\n\n                      if (root != null) {\n                          if (DEBUG) {\n                              System.out.println(\"Creating params from root: \" +\n                                      root);\n                          }\n                          //根据root生成LayoutParams\n                          params = root.generateLayoutParams(attrs);\n                          if (!attachToRoot) {\n                              //如果attachToRoot为flase 则调用setLayoutParams\n                              temp.setLayoutParams(params);\n                          }\n                      }\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> start inflating children\");\n                      }\n                      //递归inflate剩下的children\n                      rInflateChildren(parser, temp, attrs, true);\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> done inflating children\");\n                      }\n\n                      // We are supposed to attach all the views we found (int temp)\n                      // to root. Do that now.\n                      if (root != null && attachToRoot) {\n                          //root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里\n                          root.addView(temp, params);\n                      }\n\n                      // Decide whether to return the root that was passed in or the\n                      // top view found in xml.\n                      if (root == null || !attachToRoot) {\n                          //返回xml里解析的root view\n                          result = temp;\n                      }\n                  }\n\n              } catch (XmlPullParserException e) {\n                  InflateException ex = new InflateException(e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } catch (Exception e) {\n                  InflateException ex = new InflateException(\n                          parser.getPositionDescription()\n                                  + \": \" + e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } finally {\n                  // Don't retain static reference on context.\n                  mConstructorArgs[0] = lastContext;\n                  mConstructorArgs[1] = null;\n              }\n\n              Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n              //返回参数root或xml文件里的root view\n              return result;\n          }\n      }\n\n  ```\n  相关inflate参数的结果\n  ![inflate参数.png](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/4341656.jpg)\n\n4. 相关方法解析\n  在Inflate中多次被调用的rInflate\n\n  ```java\n     void rInflate(XmlPullParser parser, View parent, Context context,\n             AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException {\n\n         final int depth = parser.getDepth();\n         int type;\n         //XmlPullParser解析器的标准解析模式\n         while (((type = parser.next()) != XmlPullParser.END_TAG ||\n                 parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {\n             //找到start_tag节点\n             if (type != XmlPullParser.START_TAG) {\n                 continue;\n             }\n             //获取Name标记\n             final String name = parser.getName();\n\n             //private static final String TAG_REQUEST_FOCUS = \"requestFocus\";\n             //处理requestFocus\n             if (TAG_REQUEST_FOCUS.equals(name)) {\n                 parseRequestFocus(parser, parent);\n             // private static final String TAG_TAG = \"tag\";\n             //处理tag\n             } else if (TAG_TAG.equals(name)) {\n                 parseViewTag(parser, parent, attrs);\n             //private static final String TAG_INCLUDE = \"include\";\n             //处理include\n             } else if (TAG_INCLUDE.equals(name)) {\n                 //如果是根节点则抛出异常\n                 if (parser.getDepth() == 0) {\n                     throw new InflateException(\"<include /> cannot be the root element\");\n                 }\n                 parseInclude(parser, context, parent, attrs);\n             //private static final String TAG_MERGE = \"merge\";\n             //处理merge merge需要是xml中的根节点\n             } else if (TAG_MERGE.equals(name)) {\n                 throw new InflateException(\"<merge /> must be the root element\");\n             } else {\n                 final View view = createViewFromTag(parent, name, context, attrs);\n                 final ViewGroup viewGroup = (ViewGroup) parent;\n                 final ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);\n                 rInflateChildren(parser, view, attrs, true);\n                 viewGroup.addView(view, params);\n             }\n         }\n\n          //parent的所有子节点都处理完毕的时候回onFinishInflate方法\n         if (finishInflate) {\n             parent.onFinishInflate();\n         }\n     }\n     //可以添加自定义逻辑\n      protected void onFinishInflate() {\n      }\n```\n","slug":"从setContentView说起","published":1,"updated":"2020-03-13T09:33:05.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5e70013q7dqxehciajx","content":"<h2 id=\"从setContentView与LayoutInflater说起\"><a href=\"#从setContentView与LayoutInflater说起\" class=\"headerlink\" title=\"从setContentView与LayoutInflater说起\"></a>从setContentView与LayoutInflater说起</h2><h3 id=\"setContentView分析\"><a href=\"#setContentView分析\" class=\"headerlink\" title=\"setContentView分析\"></a>setContentView分析</h3><h4 id=\"相关关系\"><a href=\"#相关关系\" class=\"headerlink\" title=\"相关关系\"></a>相关关系</h4><p>  <img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/61853049.jpg\" alt=\"相关关系图\"><br>  <a id=\"more\"></a></p>\n<p>  Activity中有Window成员 实例化为PhoneWindow PhoneWindow是抽象Window类的实现类</p>\n<p>  Window提供了绘制窗口的通用API PhoneWindow中包含了DecorView对象 是所有窗口(Activity界面)的根View</p>\n<p>  具体的构如下</p>\n<p>  <img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/39785701.jpg\" alt=\"View层级分析\"></p>\n<p>  具体的可以通过hierarchyviewer工具分析一下</p>\n<h4 id=\"PhoneWindow的setContentView分析\"><a href=\"#PhoneWindow的setContentView分析\" class=\"headerlink\" title=\"PhoneWindow的setContentView分析\"></a>PhoneWindow的setContentView分析</h4><blockquote>\n<p>Window类的setContentView方法 而Window的setContentView方法是抽象的  所以查看PhoneWindow的setContentView()</p>\n</blockquote>\n<ol>\n<li><p>setContentView方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This is the view in which the window contents are placed. It is either</span></span><br><span class=\"line\"><span class=\"comment\">// mDecor itself, or a child of mDecor where the contents go.</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ViewGroup mContentParent;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window</span></span><br><span class=\"line\">    <span class=\"comment\">// decor, when theme attributes and the like are crystalized. Do not check the feature</span></span><br><span class=\"line\">    <span class=\"comment\">// before this happens.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//第一次调用</span></span><br><span class=\"line\">        <span class=\"comment\">//下面会详细分析</span></span><br><span class=\"line\">        installDecor();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//移除该mContentParent下的所有View</span></span><br><span class=\"line\">        <span class=\"comment\">//又因为这个的存在  我们可以多次使用setContentView()</span></span><br><span class=\"line\">        mContentParent.removeAllViews();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断是否使用了Activity的过度动画</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//设置动画场景</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,</span><br><span class=\"line\">                getContext());</span><br><span class=\"line\">        transitionTo(newScene);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//将资源文件通过LayoutInflater对象装换为View树</span></span><br><span class=\"line\">        <span class=\"comment\">//在PhoneWindow的构造函数中 mLayoutInflater = LayoutInflater.from(context);</span></span><br><span class=\"line\">        mLayoutInflater.inflate(layoutResID, mContentParent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//View中</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Ask that a new dispatch of &#123;<span class=\"doctag\">@link</span> #onApplyWindowInsets(WindowInsets)&#125; be performed.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">// public void requestApplyInsets() &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     requestFitSystemWindows();</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    mContentParent.requestApplyInsets();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Callback cb = getCallback();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb != <span class=\"keyword\">null</span> &amp;&amp; !isDestroyed()) &#123;</span><br><span class=\"line\">        cb.onContentChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">    setContentView(view, <span class=\"keyword\">new</span> ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        installDecor();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class=\"line\">        mContentParent.removeAllViews();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class=\"line\">        view.setLayoutParams(params);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Scene newScene = <span class=\"keyword\">new</span> Scene(mContentParent, view);</span><br><span class=\"line\">        transitionTo(newScene);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//已经为View 直接使用View的addView方法追加到当前mContentParent中</span></span><br><span class=\"line\">        mContentParent.addView(view, params);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mContentParent.requestApplyInsets();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Callback cb = getCallback();</span><br><span class=\"line\">    <span class=\"comment\">//调用CallBack接口的onContentChange来通知Activity组件视图发生了变化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb != <span class=\"keyword\">null</span> &amp;&amp; !isDestroyed()) &#123;</span><br><span class=\"line\">        cb.onContentChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>installDecor方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//截取部分主要分析代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installDecor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mDecor == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果mDecor为空则创建一个DecorView实例</span></span><br><span class=\"line\">        <span class=\"comment\">// protected DecorView generateDecor() &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//   return new DecorView(getContext(), -1);</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        mDecor = generateDecor();  </span><br><span class=\"line\">        mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);</span><br><span class=\"line\">        mDecor.setIsRootNamespace(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mInvalidatePanelMenuPosted &amp;&amp; mInvalidatePanelMenuFeatures != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            mDecor.postOnAnimation(mInvalidatePanelMenuRunnable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据窗口的风格修饰 选择对应的修饰布局文件 将id为content的FrameLayout赋值于mContentParent</span></span><br><span class=\"line\">        mContentParent = generateLayout(mDecor);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ViewGroup <span class=\"title\">generateLayout</span><span class=\"params\">(DecorView decor)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// Apply data from current theme.</span></span><br><span class=\"line\">     <span class=\"comment\">//根据当前style修饰相应样式</span></span><br><span class=\"line\"></span><br><span class=\"line\">     TypedArray a = getWindowStyle();</span><br><span class=\"line\"></span><br><span class=\"line\">     ...</span><br><span class=\"line\">     <span class=\"comment\">//一堆if判断</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// 增加窗口修饰</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">int</span> layoutResource;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> features = getLocalFeatures();</span><br><span class=\"line\"></span><br><span class=\"line\">     ...</span><br><span class=\"line\">     <span class=\"comment\">//根据features选择不同的窗帘修饰布局文件得到</span></span><br><span class=\"line\">     <span class=\"comment\">//把选中的窗口修饰布局文件添加到DecorView中, 指定contentParent的值</span></span><br><span class=\"line\">     View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">     decor.addView(in, <span class=\"keyword\">new</span> ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));</span><br><span class=\"line\">     mContentRoot = (ViewGroup) in;</span><br><span class=\"line\"></span><br><span class=\"line\">     ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (contentParent == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Window couldn't find content container view\"</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     ...</span><br><span class=\"line\">     <span class=\"keyword\">return</span> contentParent;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>该方法的主要功能为 根据窗口的style为该窗口选择不同的窗口根布局文件 将mDecor作为根视图将窗口布局添加,获取id为content的FrameLayout返回给mContentParent对象  实质为阐释mDecor和mContentParent对象</p>\n</li>\n<li><p>(扩展)关于设置Activity属性需要在setContentView方法之前调用的问题</p>\n<p>在设置Activity属性的时候 比如requestWindowFeature(Window.FEATURE_NO_TITLE) 需要在setContentView方法之前调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">requestFeature</span><span class=\"params\">(<span class=\"keyword\">int</span> featureId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mContentParent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AndroidRuntimeException(<span class=\"string\">\"requestFeature() must be called before adding content\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>onContentChanged方法</p>\n<p>在PhoneWindow中没有重写getCallback相关方法 而在Window类下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return the current Callback interface for this window.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Callback <span class=\"title\">getCallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mCallback;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>mCallback相关的赋值方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Set the Callback interface for this window, used to intercept key</span></span><br><span class=\"line\"><span class=\"comment\"> * events and other dynamic operations in the window.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> callback The desired Callback interface.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCallback</span><span class=\"params\">(Callback callback)</span> </span>&#123;</span><br><span class=\"line\">    mCallback = callback;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>setCallback方法在Activity中被使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context, ActivityThread aThread,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          Instrumentation instr, IBinder token, <span class=\"keyword\">int</span> ident,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          Application application, Intent intent, ActivityInfo info,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          CharSequence title, Activity parent, String id,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          NonConfigurationInstances lastNonConfigurationInstances,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          Configuration config, String referrer, IVoiceInteractor voiceInteractor)</span> </span>&#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      mWindow.setCallback(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">      ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明Activity实现了Window的CallBack接口 然后在Activity中找到onContentChanged方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onContentChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对 空方法. 说明在Activity的布局改动时 (setContentView或者addContentView 方法执行完毕后会调用改方法)<br>所以各种View的findViewById方法什么的可以放在这里</p>\n</li>\n<li><p>setContentView源码总结</p>\n<ul>\n<li>创建一个DecorView的对象mDector 该mDector将作为整个应用窗口的根视图</li>\n<li>根据根据Feature等style theme创建不同的窗口修饰布局文件 并且通过findViewById获取Activity布局文件该存放的地方</li>\n<li>将Activity的布局文件添加至id为content的FrameLayout内</li>\n<li>执行到当前页面还没有显示出来</li>\n</ul>\n</li>\n<li><p>Activity页面显示</p>\n<p>我们都知道Activity的实际开始于ActivityThread的main方法 当该方法调运完之后会调用该类的performLaunchActivity方法来创建要启动的Activity组件 这个过程中还会为该Activity组件创建窗口对象和视图对象 当组件创建完成后用过调用该类的handleResumeActivity方法将其激活</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">handleResumeActivity</span><span class=\"params\">(IBinder token,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           <span class=\"keyword\">boolean</span> clearHide, <span class=\"keyword\">boolean</span> isForward, <span class=\"keyword\">boolean</span> reallyResume)</span> </span>&#123;</span><br><span class=\"line\">             ...</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!r.activity.mFinished &amp;&amp; willBeVisible</span><br><span class=\"line\">                   &amp;&amp; r.activity.mDecor != <span class=\"keyword\">null</span> &amp;&amp; !r.hideForNow) &#123;</span><br><span class=\"line\">               ...</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (r.activity.mVisibleFromClient) &#123;</span><br><span class=\"line\">                   r.activity.makeVisible();</span><br><span class=\"line\">                   <span class=\"comment\">//这里这里 通过调用Activity的makeVisible方法来显示我们通过setContentView创建的mDecor</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               ...</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         ...</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Activity的makeVisible方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">makeVisible</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!mWindowAdded) &#123;</span><br><span class=\"line\">         ViewManager wm = getWindowManager();</span><br><span class=\"line\">         wm.addView(mDecor, getWindow().getAttributes());</span><br><span class=\"line\">         mWindowAdded = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     mDecor.setVisibility(View.VISIBLE);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>至此通过setContentView方法设置的页面才最后显示出来</p>\n</li>\n</ol>\n<h3 id=\"LayoutInflater源码分析\"><a href=\"#LayoutInflater源码分析\" class=\"headerlink\" title=\"LayoutInflater源码分析\"></a>LayoutInflater源码分析</h3><ol>\n<li><p>与setContentView相关</p>\n<p>在PhoneWindow的generateLayout中调用了     </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>LayoutInflater中获取实例化方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Obtains the LayoutInflater from the given context.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LayoutInflater <span class=\"title\">from</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">    LayoutInflater LayoutInflater =</span><br><span class=\"line\">            (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (LayoutInflater == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">\"LayoutInflater not found.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> LayoutInflater;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>inflate方法相关</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inflate(resource, root, root != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> inflate(parser, root, root != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Resources res = getContext().getResources();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"INFLATING from resource: \\\"\"</span> + res.getResourceName(resource) + <span class=\"string\">\"\\\" (\"</span></span><br><span class=\"line\">                + Integer.toHexString(resource) + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> XmlResourceParser parser = res.getLayout(resource);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        parser.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后发现都需要调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</span><br><span class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"inflate\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> Context inflaterContext = mContext;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</span><br><span class=\"line\">            Context lastContext = (Context) mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</span><br><span class=\"line\">            <span class=\"comment\">//定义返回值 初始化传入形参 root</span></span><br><span class=\"line\">            View result = root;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 找到根节点</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> type;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</span><br><span class=\"line\">                        type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//验证type是否为Start_Tag  保证xml文件正确</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(parser.getPositionDescription()</span><br><span class=\"line\">                            + <span class=\"string\">\": No start tag found!\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//type为 root node</span></span><br><span class=\"line\">                <span class=\"keyword\">final</span> String name = parser.getName();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"Creating root view: \"</span></span><br><span class=\"line\">                            + name);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//处理 merge相关</span></span><br><span class=\"line\">                    <span class=\"comment\">//root需要非空 且attachToRoot为空</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; can be used only with a valid \"</span></span><br><span class=\"line\">                                + <span class=\"string\">\"ViewGroup root and attachToRoot=true\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//递归inflate 方法调用</span></span><br><span class=\"line\">                    rInflate(parser, root, inflaterContext, attrs, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//根据tag节点创建view对象</span></span><br><span class=\"line\">                    <span class=\"keyword\">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</span><br><span class=\"line\"></span><br><span class=\"line\">                    ViewGroup.LayoutParams params = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">\"Creating params from root: \"</span> +</span><br><span class=\"line\">                                    root);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">//根据root生成LayoutParams</span></span><br><span class=\"line\">                        params = root.generateLayoutParams(attrs);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!attachToRoot) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//如果attachToRoot为flase 则调用setLayoutParams</span></span><br><span class=\"line\">                            temp.setLayoutParams(params);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; start inflating children\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//递归inflate剩下的children</span></span><br><span class=\"line\">                    rInflateChildren(parser, temp, attrs, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; done inflating children\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></span><br><span class=\"line\">                    <span class=\"comment\">// to root. Do that now.</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; attachToRoot) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里</span></span><br><span class=\"line\">                        root.addView(temp, params);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></span><br><span class=\"line\">                    <span class=\"comment\">// top view found in xml.</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//返回xml里解析的root view</span></span><br><span class=\"line\">                        result = temp;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;</span><br><span class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(e.getMessage());</span><br><span class=\"line\">                ex.initCause(e);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(</span><br><span class=\"line\">                        parser.getPositionDescription()</span><br><span class=\"line\">                                + <span class=\"string\">\": \"</span> + e.getMessage());</span><br><span class=\"line\">                ex.initCause(e);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Don't retain static reference on context.</span></span><br><span class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</span><br><span class=\"line\">                mConstructorArgs[<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class=\"line\">            <span class=\"comment\">//返回参数root或xml文件里的root view</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>相关inflate参数的结果<br><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/4341656.jpg\" alt=\"inflate参数.png\"></p>\n</li>\n<li><p>相关方法解析<br>在Inflate中多次被调用的rInflate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        AttributeSet attrs, <span class=\"keyword\">boolean</span> finishInflate)</span> <span class=\"keyword\">throws</span> XmlPullParserException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> depth = parser.getDepth();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> type;</span><br><span class=\"line\">    <span class=\"comment\">//XmlPullParser解析器的标准解析模式</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</span><br><span class=\"line\">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//找到start_tag节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//获取Name标记</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> String name = parser.getName();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//private static final String TAG_REQUEST_FOCUS = \"requestFocus\";</span></span><br><span class=\"line\">        <span class=\"comment\">//处理requestFocus</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</span><br><span class=\"line\">            parseRequestFocus(parser, parent);</span><br><span class=\"line\">        <span class=\"comment\">// private static final String TAG_TAG = \"tag\";</span></span><br><span class=\"line\">        <span class=\"comment\">//处理tag</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</span><br><span class=\"line\">            parseViewTag(parser, parent, attrs);</span><br><span class=\"line\">        <span class=\"comment\">//private static final String TAG_INCLUDE = \"include\";</span></span><br><span class=\"line\">        <span class=\"comment\">//处理include</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果是根节点则抛出异常</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;include /&gt; cannot be the root element\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            parseInclude(parser, context, parent, attrs);</span><br><span class=\"line\">        <span class=\"comment\">//private static final String TAG_MERGE = \"merge\";</span></span><br><span class=\"line\">        <span class=\"comment\">//处理merge merge需要是xml中的根节点</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; must be the root element\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View view = createViewFromTag(parent, name, context, attrs);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ViewGroup viewGroup = (ViewGroup) parent;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);</span><br><span class=\"line\">            rInflateChildren(parser, view, attrs, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            viewGroup.addView(view, params);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//parent的所有子节点都处理完毕的时候回onFinishInflate方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finishInflate) &#123;</span><br><span class=\"line\">        parent.onFinishInflate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可以添加自定义逻辑</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinishInflate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"从setContentView与LayoutInflater说起\"><a href=\"#从setContentView与LayoutInflater说起\" class=\"headerlink\" title=\"从setContentView与LayoutInflater说起\"></a>从setContentView与LayoutInflater说起</h2><h3 id=\"setContentView分析\"><a href=\"#setContentView分析\" class=\"headerlink\" title=\"setContentView分析\"></a>setContentView分析</h3><h4 id=\"相关关系\"><a href=\"#相关关系\" class=\"headerlink\" title=\"相关关系\"></a>相关关系</h4><p>  <img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/61853049.jpg\" alt=\"相关关系图\"><br>","more":"</p>\n<p>  Activity中有Window成员 实例化为PhoneWindow PhoneWindow是抽象Window类的实现类</p>\n<p>  Window提供了绘制窗口的通用API PhoneWindow中包含了DecorView对象 是所有窗口(Activity界面)的根View</p>\n<p>  具体的构如下</p>\n<p>  <img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/39785701.jpg\" alt=\"View层级分析\"></p>\n<p>  具体的可以通过hierarchyviewer工具分析一下</p>\n<h4 id=\"PhoneWindow的setContentView分析\"><a href=\"#PhoneWindow的setContentView分析\" class=\"headerlink\" title=\"PhoneWindow的setContentView分析\"></a>PhoneWindow的setContentView分析</h4><blockquote>\n<p>Window类的setContentView方法 而Window的setContentView方法是抽象的  所以查看PhoneWindow的setContentView()</p>\n</blockquote>\n<ol>\n<li><p>setContentView方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This is the view in which the window contents are placed. It is either</span></span><br><span class=\"line\"><span class=\"comment\">// mDecor itself, or a child of mDecor where the contents go.</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ViewGroup mContentParent;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window</span></span><br><span class=\"line\">    <span class=\"comment\">// decor, when theme attributes and the like are crystalized. Do not check the feature</span></span><br><span class=\"line\">    <span class=\"comment\">// before this happens.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//第一次调用</span></span><br><span class=\"line\">        <span class=\"comment\">//下面会详细分析</span></span><br><span class=\"line\">        installDecor();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//移除该mContentParent下的所有View</span></span><br><span class=\"line\">        <span class=\"comment\">//又因为这个的存在  我们可以多次使用setContentView()</span></span><br><span class=\"line\">        mContentParent.removeAllViews();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断是否使用了Activity的过度动画</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//设置动画场景</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,</span><br><span class=\"line\">                getContext());</span><br><span class=\"line\">        transitionTo(newScene);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//将资源文件通过LayoutInflater对象装换为View树</span></span><br><span class=\"line\">        <span class=\"comment\">//在PhoneWindow的构造函数中 mLayoutInflater = LayoutInflater.from(context);</span></span><br><span class=\"line\">        mLayoutInflater.inflate(layoutResID, mContentParent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//View中</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Ask that a new dispatch of &#123;<span class=\"doctag\">@link</span> #onApplyWindowInsets(WindowInsets)&#125; be performed.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">// public void requestApplyInsets() &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     requestFitSystemWindows();</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    mContentParent.requestApplyInsets();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Callback cb = getCallback();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb != <span class=\"keyword\">null</span> &amp;&amp; !isDestroyed()) &#123;</span><br><span class=\"line\">        cb.onContentChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">    setContentView(view, <span class=\"keyword\">new</span> ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        installDecor();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class=\"line\">        mContentParent.removeAllViews();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class=\"line\">        view.setLayoutParams(params);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Scene newScene = <span class=\"keyword\">new</span> Scene(mContentParent, view);</span><br><span class=\"line\">        transitionTo(newScene);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//已经为View 直接使用View的addView方法追加到当前mContentParent中</span></span><br><span class=\"line\">        mContentParent.addView(view, params);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mContentParent.requestApplyInsets();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Callback cb = getCallback();</span><br><span class=\"line\">    <span class=\"comment\">//调用CallBack接口的onContentChange来通知Activity组件视图发生了变化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb != <span class=\"keyword\">null</span> &amp;&amp; !isDestroyed()) &#123;</span><br><span class=\"line\">        cb.onContentChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>installDecor方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//截取部分主要分析代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installDecor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mDecor == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果mDecor为空则创建一个DecorView实例</span></span><br><span class=\"line\">        <span class=\"comment\">// protected DecorView generateDecor() &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//   return new DecorView(getContext(), -1);</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        mDecor = generateDecor();  </span><br><span class=\"line\">        mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);</span><br><span class=\"line\">        mDecor.setIsRootNamespace(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mInvalidatePanelMenuPosted &amp;&amp; mInvalidatePanelMenuFeatures != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            mDecor.postOnAnimation(mInvalidatePanelMenuRunnable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据窗口的风格修饰 选择对应的修饰布局文件 将id为content的FrameLayout赋值于mContentParent</span></span><br><span class=\"line\">        mContentParent = generateLayout(mDecor);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ViewGroup <span class=\"title\">generateLayout</span><span class=\"params\">(DecorView decor)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// Apply data from current theme.</span></span><br><span class=\"line\">     <span class=\"comment\">//根据当前style修饰相应样式</span></span><br><span class=\"line\"></span><br><span class=\"line\">     TypedArray a = getWindowStyle();</span><br><span class=\"line\"></span><br><span class=\"line\">     ...</span><br><span class=\"line\">     <span class=\"comment\">//一堆if判断</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// 增加窗口修饰</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">int</span> layoutResource;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> features = getLocalFeatures();</span><br><span class=\"line\"></span><br><span class=\"line\">     ...</span><br><span class=\"line\">     <span class=\"comment\">//根据features选择不同的窗帘修饰布局文件得到</span></span><br><span class=\"line\">     <span class=\"comment\">//把选中的窗口修饰布局文件添加到DecorView中, 指定contentParent的值</span></span><br><span class=\"line\">     View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">     decor.addView(in, <span class=\"keyword\">new</span> ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));</span><br><span class=\"line\">     mContentRoot = (ViewGroup) in;</span><br><span class=\"line\"></span><br><span class=\"line\">     ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (contentParent == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Window couldn't find content container view\"</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     ...</span><br><span class=\"line\">     <span class=\"keyword\">return</span> contentParent;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>该方法的主要功能为 根据窗口的style为该窗口选择不同的窗口根布局文件 将mDecor作为根视图将窗口布局添加,获取id为content的FrameLayout返回给mContentParent对象  实质为阐释mDecor和mContentParent对象</p>\n</li>\n<li><p>(扩展)关于设置Activity属性需要在setContentView方法之前调用的问题</p>\n<p>在设置Activity属性的时候 比如requestWindowFeature(Window.FEATURE_NO_TITLE) 需要在setContentView方法之前调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">requestFeature</span><span class=\"params\">(<span class=\"keyword\">int</span> featureId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mContentParent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AndroidRuntimeException(<span class=\"string\">\"requestFeature() must be called before adding content\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>onContentChanged方法</p>\n<p>在PhoneWindow中没有重写getCallback相关方法 而在Window类下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return the current Callback interface for this window.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Callback <span class=\"title\">getCallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mCallback;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>mCallback相关的赋值方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Set the Callback interface for this window, used to intercept key</span></span><br><span class=\"line\"><span class=\"comment\"> * events and other dynamic operations in the window.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> callback The desired Callback interface.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCallback</span><span class=\"params\">(Callback callback)</span> </span>&#123;</span><br><span class=\"line\">    mCallback = callback;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>setCallback方法在Activity中被使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context, ActivityThread aThread,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          Instrumentation instr, IBinder token, <span class=\"keyword\">int</span> ident,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          Application application, Intent intent, ActivityInfo info,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          CharSequence title, Activity parent, String id,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          NonConfigurationInstances lastNonConfigurationInstances,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          Configuration config, String referrer, IVoiceInteractor voiceInteractor)</span> </span>&#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      mWindow.setCallback(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">      ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明Activity实现了Window的CallBack接口 然后在Activity中找到onContentChanged方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onContentChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对 空方法. 说明在Activity的布局改动时 (setContentView或者addContentView 方法执行完毕后会调用改方法)<br>所以各种View的findViewById方法什么的可以放在这里</p>\n</li>\n<li><p>setContentView源码总结</p>\n<ul>\n<li>创建一个DecorView的对象mDector 该mDector将作为整个应用窗口的根视图</li>\n<li>根据根据Feature等style theme创建不同的窗口修饰布局文件 并且通过findViewById获取Activity布局文件该存放的地方</li>\n<li>将Activity的布局文件添加至id为content的FrameLayout内</li>\n<li>执行到当前页面还没有显示出来</li>\n</ul>\n</li>\n<li><p>Activity页面显示</p>\n<p>我们都知道Activity的实际开始于ActivityThread的main方法 当该方法调运完之后会调用该类的performLaunchActivity方法来创建要启动的Activity组件 这个过程中还会为该Activity组件创建窗口对象和视图对象 当组件创建完成后用过调用该类的handleResumeActivity方法将其激活</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">handleResumeActivity</span><span class=\"params\">(IBinder token,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           <span class=\"keyword\">boolean</span> clearHide, <span class=\"keyword\">boolean</span> isForward, <span class=\"keyword\">boolean</span> reallyResume)</span> </span>&#123;</span><br><span class=\"line\">             ...</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!r.activity.mFinished &amp;&amp; willBeVisible</span><br><span class=\"line\">                   &amp;&amp; r.activity.mDecor != <span class=\"keyword\">null</span> &amp;&amp; !r.hideForNow) &#123;</span><br><span class=\"line\">               ...</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (r.activity.mVisibleFromClient) &#123;</span><br><span class=\"line\">                   r.activity.makeVisible();</span><br><span class=\"line\">                   <span class=\"comment\">//这里这里 通过调用Activity的makeVisible方法来显示我们通过setContentView创建的mDecor</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               ...</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         ...</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Activity的makeVisible方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">makeVisible</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!mWindowAdded) &#123;</span><br><span class=\"line\">         ViewManager wm = getWindowManager();</span><br><span class=\"line\">         wm.addView(mDecor, getWindow().getAttributes());</span><br><span class=\"line\">         mWindowAdded = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     mDecor.setVisibility(View.VISIBLE);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>至此通过setContentView方法设置的页面才最后显示出来</p>\n</li>\n</ol>\n<h3 id=\"LayoutInflater源码分析\"><a href=\"#LayoutInflater源码分析\" class=\"headerlink\" title=\"LayoutInflater源码分析\"></a>LayoutInflater源码分析</h3><ol>\n<li><p>与setContentView相关</p>\n<p>在PhoneWindow的generateLayout中调用了     </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>LayoutInflater中获取实例化方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Obtains the LayoutInflater from the given context.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LayoutInflater <span class=\"title\">from</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">    LayoutInflater LayoutInflater =</span><br><span class=\"line\">            (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (LayoutInflater == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">\"LayoutInflater not found.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> LayoutInflater;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>inflate方法相关</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inflate(resource, root, root != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> inflate(parser, root, root != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Resources res = getContext().getResources();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"INFLATING from resource: \\\"\"</span> + res.getResourceName(resource) + <span class=\"string\">\"\\\" (\"</span></span><br><span class=\"line\">                + Integer.toHexString(resource) + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> XmlResourceParser parser = res.getLayout(resource);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        parser.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后发现都需要调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</span><br><span class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"inflate\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> Context inflaterContext = mContext;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</span><br><span class=\"line\">            Context lastContext = (Context) mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</span><br><span class=\"line\">            <span class=\"comment\">//定义返回值 初始化传入形参 root</span></span><br><span class=\"line\">            View result = root;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 找到根节点</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> type;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</span><br><span class=\"line\">                        type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//验证type是否为Start_Tag  保证xml文件正确</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(parser.getPositionDescription()</span><br><span class=\"line\">                            + <span class=\"string\">\": No start tag found!\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//type为 root node</span></span><br><span class=\"line\">                <span class=\"keyword\">final</span> String name = parser.getName();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"Creating root view: \"</span></span><br><span class=\"line\">                            + name);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//处理 merge相关</span></span><br><span class=\"line\">                    <span class=\"comment\">//root需要非空 且attachToRoot为空</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; can be used only with a valid \"</span></span><br><span class=\"line\">                                + <span class=\"string\">\"ViewGroup root and attachToRoot=true\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//递归inflate 方法调用</span></span><br><span class=\"line\">                    rInflate(parser, root, inflaterContext, attrs, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//根据tag节点创建view对象</span></span><br><span class=\"line\">                    <span class=\"keyword\">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</span><br><span class=\"line\"></span><br><span class=\"line\">                    ViewGroup.LayoutParams params = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">\"Creating params from root: \"</span> +</span><br><span class=\"line\">                                    root);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">//根据root生成LayoutParams</span></span><br><span class=\"line\">                        params = root.generateLayoutParams(attrs);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!attachToRoot) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//如果attachToRoot为flase 则调用setLayoutParams</span></span><br><span class=\"line\">                            temp.setLayoutParams(params);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; start inflating children\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//递归inflate剩下的children</span></span><br><span class=\"line\">                    rInflateChildren(parser, temp, attrs, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; done inflating children\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></span><br><span class=\"line\">                    <span class=\"comment\">// to root. Do that now.</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; attachToRoot) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里</span></span><br><span class=\"line\">                        root.addView(temp, params);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></span><br><span class=\"line\">                    <span class=\"comment\">// top view found in xml.</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//返回xml里解析的root view</span></span><br><span class=\"line\">                        result = temp;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;</span><br><span class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(e.getMessage());</span><br><span class=\"line\">                ex.initCause(e);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(</span><br><span class=\"line\">                        parser.getPositionDescription()</span><br><span class=\"line\">                                + <span class=\"string\">\": \"</span> + e.getMessage());</span><br><span class=\"line\">                ex.initCause(e);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Don't retain static reference on context.</span></span><br><span class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</span><br><span class=\"line\">                mConstructorArgs[<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class=\"line\">            <span class=\"comment\">//返回参数root或xml文件里的root view</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>相关inflate参数的结果<br><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/4341656.jpg\" alt=\"inflate参数.png\"></p>\n</li>\n<li><p>相关方法解析<br>在Inflate中多次被调用的rInflate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        AttributeSet attrs, <span class=\"keyword\">boolean</span> finishInflate)</span> <span class=\"keyword\">throws</span> XmlPullParserException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> depth = parser.getDepth();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> type;</span><br><span class=\"line\">    <span class=\"comment\">//XmlPullParser解析器的标准解析模式</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</span><br><span class=\"line\">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//找到start_tag节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//获取Name标记</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> String name = parser.getName();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//private static final String TAG_REQUEST_FOCUS = \"requestFocus\";</span></span><br><span class=\"line\">        <span class=\"comment\">//处理requestFocus</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</span><br><span class=\"line\">            parseRequestFocus(parser, parent);</span><br><span class=\"line\">        <span class=\"comment\">// private static final String TAG_TAG = \"tag\";</span></span><br><span class=\"line\">        <span class=\"comment\">//处理tag</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</span><br><span class=\"line\">            parseViewTag(parser, parent, attrs);</span><br><span class=\"line\">        <span class=\"comment\">//private static final String TAG_INCLUDE = \"include\";</span></span><br><span class=\"line\">        <span class=\"comment\">//处理include</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果是根节点则抛出异常</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;include /&gt; cannot be the root element\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            parseInclude(parser, context, parent, attrs);</span><br><span class=\"line\">        <span class=\"comment\">//private static final String TAG_MERGE = \"merge\";</span></span><br><span class=\"line\">        <span class=\"comment\">//处理merge merge需要是xml中的根节点</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; must be the root element\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View view = createViewFromTag(parent, name, context, attrs);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ViewGroup viewGroup = (ViewGroup) parent;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);</span><br><span class=\"line\">            rInflateChildren(parser, view, attrs, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            viewGroup.addView(view, params);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//parent的所有子节点都处理完毕的时候回onFinishInflate方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finishInflate) &#123;</span><br><span class=\"line\">        parent.onFinishInflate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可以添加自定义逻辑</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinishInflate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"公告","date":"9998-12-31T16:00:00.000Z","top":0,"_content":"\n#公告\n\n为啥换回来了, 主要是之前用的halo的服务器...  那天测其它东西的时候忘记了服务器还有halo的docker, 服务器已经删除了, 数据也找不回来了......\n\n后期有时间再继续优化\n","source":"_posts/公告.md","raw":"---\ntitle: 公告\ndate: 9999-01-01 00:00:00\ntags:\ntop: 0\n---\n\n#公告\n\n为啥换回来了, 主要是之前用的halo的服务器...  那天测其它东西的时候忘记了服务器还有halo的docker, 服务器已经删除了, 数据也找不回来了......\n\n后期有时间再继续优化\n","slug":"公告","published":1,"updated":"2020-04-11T21:48:55.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5e80014q7dqc2tz1rvy","content":"<p>#公告</p>\n<p>为啥换回来了, 主要是之前用的halo的服务器…  那天测其它东西的时候忘记了服务器还有halo的docker, 服务器已经删除了, 数据也找不回来了……</p>\n<p>后期有时间再继续优化</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#公告</p>\n<p>为啥换回来了, 主要是之前用的halo的服务器…  那天测其它东西的时候忘记了服务器还有halo的docker, 服务器已经删除了, 数据也找不回来了……</p>\n<p>后期有时间再继续优化</p>\n"},{"title":"再看求最大公约数的算法","date":"2018-01-13T13:30:06.000Z","_content":"# 再看求最大公约数的算法\n\n> 由渐入深学习大公约数的算法,从最简单的遍历循环的方法到通过移位运算大幅提高大数情况下的计算效率\n\n>实例代码均为kotlin\n\n## 遍历计算\n### 思路\n都用遍历了... 还要什么思路\n### 代码实现\n![遍历方法 代码实现](http://upload-images.jianshu.io/upload_images/2191286-b1cda0cf508450bd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n  <!-- more -->\n\n### 优势\n\n思路简洁\n\n### 劣势\n\n效率十分低下,和其它方法花费的时间已不在一个数量级中\n\n\n## 辗转相除法\n> 辗转相除法:又名欧几里德算法（Euclidean algorithm）,是求最大公约数的一种方法.辗转相除法可以算得上是最早的算法\n\n### 思路\n用较小数除较大数，再用出现的余数（第一余数）去除除数，再用出现的余数（第二余数）去除第一余数，如此反复，直到最后余数是0为止。如果是求两个数的最大公约数，那么最后的除数就是这两个数的最大公约数。\n\n如果我们计算49和21的最大公约数\n1. 35 / 21 = 1...14 用较大的数除以较小的数,得到的余数为14\n2. 21 / 14 = 1...7 用上一步中的被除数除以上一步计算中得到的余数为7\n3. 14 / 7 = 2 重复上述的过程,直到计算的结果中不存在余数.此时除数就是我们需要的最大公约数\n\n### 代码实现\n![辗转相除法 代码实现](http://upload-images.jianshu.io/upload_images/2191286-afdd01bfc8784a25.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 优势\n\n当数据较小的时候性能最好\n\n### 劣势\n需要用到取余运算.现阶段的硬件中,整形多为64位,如果需要计算的数据多余硬件的整形位数就需要使用类似于多位数除法手算过程中的试商法,过程复杂而且需要消耗更多的时间\n\n## 更相减损术方法\n>更相减损术是出自《九章算术》的一种求最大公约数的算法,它原本是为约分而设计的,但它适用于任何需要求最大公约数的场合.\n\n### 思路\n原文是：\n可半者半之，不可半者，副置分母、子之数，以少减多，更相减损，求其等也。以等数约之。\n\n如果是偶数则先减半,不是偶数的话用大数减小数,用得到的差和上一步中较小的数再次相减,知道减数和差相等位置,最后相等的数字就是得到最大公约数.\n\n但是此方法中如果两个数都是偶数的情况下最后的得到的结果需要在加一倍,下面实现中先不涉及取半操作,只进行互减操作\n\n如果我们计算49和21的最大公约数\n1. 49 - 21 = 28 49和21都不是偶数,直接用较大的数减去较小的数\n2. 28 - 21 = 7 将上一步中得到的差和上一步中较小的数再次相减(用交大数减去较小数)\n3. 21 - 7 = 14\n4. 14 - 7 = 7\n5. 7 - 7 = 0 重复以上步骤 直至差和较小的数相等,此时相等的数就是需要的最大公约数\n\n### 代码实现\n![更相减损术方法 代码实现](http://upload-images.jianshu.io/upload_images/2191286-711acca4c19e1872.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 优势\n在计算大数的情况下依旧可以保持较快的速度\n\n### 劣势\n因为要不断互减,在两个数较为接近的时候需要的系统资源较大\n\n## Stein算法\n>Stein算法是一种计算两个数最大公约数的算法，是针对欧几里德算法在对大整数进行运算时，需要试商导致增加运算时间的缺陷而提出的改进算法。\n\n### 思路\n相对于辗转想相除法,相减损术方法和Stein算法更为接近.\n\n如果两个数都是偶数则想将其除以2 最后的结果再乘以2,如果其中的一个是偶数,则将其为偶数的数除以2,如果两个均为奇数,则用较大的数再减去较小的数,得到的差必为偶数,再重复上述过程,直到其中较小的数和查相同,此时相同的数就是需要得到的最大公约数\n\n如果我们计算49和21的最大公约数\n\n1. 49 - 21 = 28 49及21均为奇数,则用较大的数减去较小的数\n2. 28 / 2 = 14  其中得到的差为偶数,将偶数除以2\n3. 14 / 2 = 7 其中得到的差为偶数,将偶数除以2\n4. 7 - 7 = 0 重复上述过程 知道差和上一步中的较小数相同 相同的值就是最大公约数\n\n### 代码实现\n![Stein算法 代码实现](http://upload-images.jianshu.io/upload_images/2191286-4ec9f7b19c42b2d2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 优势\n只是用了移位运算及加减法\n\n在计算大数的过程中性能最佳\n\n### 劣势\n数据较小的时候,花费的时间相对辗转相除法及更相减损术略多,不适合较小的数据的计算\n\n代码可读性基本没有...\n","source":"_posts/再看求最大公约数的算法.md","raw":"---\ntitle: 再看求最大公约数的算法\ndate: 2018-01-13 21:30:06\ntags: [\"算法\" , \"kotlin\"]\ncategories : \"算法\"\n---\n# 再看求最大公约数的算法\n\n> 由渐入深学习大公约数的算法,从最简单的遍历循环的方法到通过移位运算大幅提高大数情况下的计算效率\n\n>实例代码均为kotlin\n\n## 遍历计算\n### 思路\n都用遍历了... 还要什么思路\n### 代码实现\n![遍历方法 代码实现](http://upload-images.jianshu.io/upload_images/2191286-b1cda0cf508450bd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n  <!-- more -->\n\n### 优势\n\n思路简洁\n\n### 劣势\n\n效率十分低下,和其它方法花费的时间已不在一个数量级中\n\n\n## 辗转相除法\n> 辗转相除法:又名欧几里德算法（Euclidean algorithm）,是求最大公约数的一种方法.辗转相除法可以算得上是最早的算法\n\n### 思路\n用较小数除较大数，再用出现的余数（第一余数）去除除数，再用出现的余数（第二余数）去除第一余数，如此反复，直到最后余数是0为止。如果是求两个数的最大公约数，那么最后的除数就是这两个数的最大公约数。\n\n如果我们计算49和21的最大公约数\n1. 35 / 21 = 1...14 用较大的数除以较小的数,得到的余数为14\n2. 21 / 14 = 1...7 用上一步中的被除数除以上一步计算中得到的余数为7\n3. 14 / 7 = 2 重复上述的过程,直到计算的结果中不存在余数.此时除数就是我们需要的最大公约数\n\n### 代码实现\n![辗转相除法 代码实现](http://upload-images.jianshu.io/upload_images/2191286-afdd01bfc8784a25.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 优势\n\n当数据较小的时候性能最好\n\n### 劣势\n需要用到取余运算.现阶段的硬件中,整形多为64位,如果需要计算的数据多余硬件的整形位数就需要使用类似于多位数除法手算过程中的试商法,过程复杂而且需要消耗更多的时间\n\n## 更相减损术方法\n>更相减损术是出自《九章算术》的一种求最大公约数的算法,它原本是为约分而设计的,但它适用于任何需要求最大公约数的场合.\n\n### 思路\n原文是：\n可半者半之，不可半者，副置分母、子之数，以少减多，更相减损，求其等也。以等数约之。\n\n如果是偶数则先减半,不是偶数的话用大数减小数,用得到的差和上一步中较小的数再次相减,知道减数和差相等位置,最后相等的数字就是得到最大公约数.\n\n但是此方法中如果两个数都是偶数的情况下最后的得到的结果需要在加一倍,下面实现中先不涉及取半操作,只进行互减操作\n\n如果我们计算49和21的最大公约数\n1. 49 - 21 = 28 49和21都不是偶数,直接用较大的数减去较小的数\n2. 28 - 21 = 7 将上一步中得到的差和上一步中较小的数再次相减(用交大数减去较小数)\n3. 21 - 7 = 14\n4. 14 - 7 = 7\n5. 7 - 7 = 0 重复以上步骤 直至差和较小的数相等,此时相等的数就是需要的最大公约数\n\n### 代码实现\n![更相减损术方法 代码实现](http://upload-images.jianshu.io/upload_images/2191286-711acca4c19e1872.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 优势\n在计算大数的情况下依旧可以保持较快的速度\n\n### 劣势\n因为要不断互减,在两个数较为接近的时候需要的系统资源较大\n\n## Stein算法\n>Stein算法是一种计算两个数最大公约数的算法，是针对欧几里德算法在对大整数进行运算时，需要试商导致增加运算时间的缺陷而提出的改进算法。\n\n### 思路\n相对于辗转想相除法,相减损术方法和Stein算法更为接近.\n\n如果两个数都是偶数则想将其除以2 最后的结果再乘以2,如果其中的一个是偶数,则将其为偶数的数除以2,如果两个均为奇数,则用较大的数再减去较小的数,得到的差必为偶数,再重复上述过程,直到其中较小的数和查相同,此时相同的数就是需要得到的最大公约数\n\n如果我们计算49和21的最大公约数\n\n1. 49 - 21 = 28 49及21均为奇数,则用较大的数减去较小的数\n2. 28 / 2 = 14  其中得到的差为偶数,将偶数除以2\n3. 14 / 2 = 7 其中得到的差为偶数,将偶数除以2\n4. 7 - 7 = 0 重复上述过程 知道差和上一步中的较小数相同 相同的值就是最大公约数\n\n### 代码实现\n![Stein算法 代码实现](http://upload-images.jianshu.io/upload_images/2191286-4ec9f7b19c42b2d2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 优势\n只是用了移位运算及加减法\n\n在计算大数的过程中性能最佳\n\n### 劣势\n数据较小的时候,花费的时间相对辗转相除法及更相减损术略多,不适合较小的数据的计算\n\n代码可读性基本没有...\n","slug":"再看求最大公约数的算法","published":1,"updated":"2020-03-13T09:33:05.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5e80015q7dqwqccrw8u","content":"<h1 id=\"再看求最大公约数的算法\"><a href=\"#再看求最大公约数的算法\" class=\"headerlink\" title=\"再看求最大公约数的算法\"></a>再看求最大公约数的算法</h1><blockquote>\n<p>由渐入深学习大公约数的算法,从最简单的遍历循环的方法到通过移位运算大幅提高大数情况下的计算效率</p>\n</blockquote>\n<blockquote>\n<p>实例代码均为kotlin</p>\n</blockquote>\n<h2 id=\"遍历计算\"><a href=\"#遍历计算\" class=\"headerlink\" title=\"遍历计算\"></a>遍历计算</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>都用遍历了… 还要什么思路</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-b1cda0cf508450bd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"遍历方法 代码实现\"></p>\n  <a id=\"more\"></a>\n<h3 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h3><p>思路简洁</p>\n<h3 id=\"劣势\"><a href=\"#劣势\" class=\"headerlink\" title=\"劣势\"></a>劣势</h3><p>效率十分低下,和其它方法花费的时间已不在一个数量级中</p>\n<h2 id=\"辗转相除法\"><a href=\"#辗转相除法\" class=\"headerlink\" title=\"辗转相除法\"></a>辗转相除法</h2><blockquote>\n<p>辗转相除法:又名欧几里德算法（Euclidean algorithm）,是求最大公约数的一种方法.辗转相除法可以算得上是最早的算法</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>用较小数除较大数，再用出现的余数（第一余数）去除除数，再用出现的余数（第二余数）去除第一余数，如此反复，直到最后余数是0为止。如果是求两个数的最大公约数，那么最后的除数就是这两个数的最大公约数。</p>\n<p>如果我们计算49和21的最大公约数</p>\n<ol>\n<li>35 / 21 = 1…14 用较大的数除以较小的数,得到的余数为14</li>\n<li>21 / 14 = 1…7 用上一步中的被除数除以上一步计算中得到的余数为7</li>\n<li>14 / 7 = 2 重复上述的过程,直到计算的结果中不存在余数.此时除数就是我们需要的最大公约数</li>\n</ol>\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-afdd01bfc8784a25.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"辗转相除法 代码实现\"></p>\n<h3 id=\"优势-1\"><a href=\"#优势-1\" class=\"headerlink\" title=\"优势\"></a>优势</h3><p>当数据较小的时候性能最好</p>\n<h3 id=\"劣势-1\"><a href=\"#劣势-1\" class=\"headerlink\" title=\"劣势\"></a>劣势</h3><p>需要用到取余运算.现阶段的硬件中,整形多为64位,如果需要计算的数据多余硬件的整形位数就需要使用类似于多位数除法手算过程中的试商法,过程复杂而且需要消耗更多的时间</p>\n<h2 id=\"更相减损术方法\"><a href=\"#更相减损术方法\" class=\"headerlink\" title=\"更相减损术方法\"></a>更相减损术方法</h2><blockquote>\n<p>更相减损术是出自《九章算术》的一种求最大公约数的算法,它原本是为约分而设计的,但它适用于任何需要求最大公约数的场合.</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>原文是：<br>可半者半之，不可半者，副置分母、子之数，以少减多，更相减损，求其等也。以等数约之。</p>\n<p>如果是偶数则先减半,不是偶数的话用大数减小数,用得到的差和上一步中较小的数再次相减,知道减数和差相等位置,最后相等的数字就是得到最大公约数.</p>\n<p>但是此方法中如果两个数都是偶数的情况下最后的得到的结果需要在加一倍,下面实现中先不涉及取半操作,只进行互减操作</p>\n<p>如果我们计算49和21的最大公约数</p>\n<ol>\n<li>49 - 21 = 28 49和21都不是偶数,直接用较大的数减去较小的数</li>\n<li>28 - 21 = 7 将上一步中得到的差和上一步中较小的数再次相减(用交大数减去较小数)</li>\n<li>21 - 7 = 14</li>\n<li>14 - 7 = 7</li>\n<li>7 - 7 = 0 重复以上步骤 直至差和较小的数相等,此时相等的数就是需要的最大公约数</li>\n</ol>\n<h3 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-711acca4c19e1872.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"更相减损术方法 代码实现\"></p>\n<h3 id=\"优势-2\"><a href=\"#优势-2\" class=\"headerlink\" title=\"优势\"></a>优势</h3><p>在计算大数的情况下依旧可以保持较快的速度</p>\n<h3 id=\"劣势-2\"><a href=\"#劣势-2\" class=\"headerlink\" title=\"劣势\"></a>劣势</h3><p>因为要不断互减,在两个数较为接近的时候需要的系统资源较大</p>\n<h2 id=\"Stein算法\"><a href=\"#Stein算法\" class=\"headerlink\" title=\"Stein算法\"></a>Stein算法</h2><blockquote>\n<p>Stein算法是一种计算两个数最大公约数的算法，是针对欧几里德算法在对大整数进行运算时，需要试商导致增加运算时间的缺陷而提出的改进算法。</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>相对于辗转想相除法,相减损术方法和Stein算法更为接近.</p>\n<p>如果两个数都是偶数则想将其除以2 最后的结果再乘以2,如果其中的一个是偶数,则将其为偶数的数除以2,如果两个均为奇数,则用较大的数再减去较小的数,得到的差必为偶数,再重复上述过程,直到其中较小的数和查相同,此时相同的数就是需要得到的最大公约数</p>\n<p>如果我们计算49和21的最大公约数</p>\n<ol>\n<li>49 - 21 = 28 49及21均为奇数,则用较大的数减去较小的数</li>\n<li>28 / 2 = 14  其中得到的差为偶数,将偶数除以2</li>\n<li>14 / 2 = 7 其中得到的差为偶数,将偶数除以2</li>\n<li>7 - 7 = 0 重复上述过程 知道差和上一步中的较小数相同 相同的值就是最大公约数</li>\n</ol>\n<h3 id=\"代码实现-3\"><a href=\"#代码实现-3\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-4ec9f7b19c42b2d2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Stein算法 代码实现\"></p>\n<h3 id=\"优势-3\"><a href=\"#优势-3\" class=\"headerlink\" title=\"优势\"></a>优势</h3><p>只是用了移位运算及加减法</p>\n<p>在计算大数的过程中性能最佳</p>\n<h3 id=\"劣势-3\"><a href=\"#劣势-3\" class=\"headerlink\" title=\"劣势\"></a>劣势</h3><p>数据较小的时候,花费的时间相对辗转相除法及更相减损术略多,不适合较小的数据的计算</p>\n<p>代码可读性基本没有…</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"再看求最大公约数的算法\"><a href=\"#再看求最大公约数的算法\" class=\"headerlink\" title=\"再看求最大公约数的算法\"></a>再看求最大公约数的算法</h1><blockquote>\n<p>由渐入深学习大公约数的算法,从最简单的遍历循环的方法到通过移位运算大幅提高大数情况下的计算效率</p>\n</blockquote>\n<blockquote>\n<p>实例代码均为kotlin</p>\n</blockquote>\n<h2 id=\"遍历计算\"><a href=\"#遍历计算\" class=\"headerlink\" title=\"遍历计算\"></a>遍历计算</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>都用遍历了… 还要什么思路</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-b1cda0cf508450bd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"遍历方法 代码实现\"></p>","more":"<h3 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h3><p>思路简洁</p>\n<h3 id=\"劣势\"><a href=\"#劣势\" class=\"headerlink\" title=\"劣势\"></a>劣势</h3><p>效率十分低下,和其它方法花费的时间已不在一个数量级中</p>\n<h2 id=\"辗转相除法\"><a href=\"#辗转相除法\" class=\"headerlink\" title=\"辗转相除法\"></a>辗转相除法</h2><blockquote>\n<p>辗转相除法:又名欧几里德算法（Euclidean algorithm）,是求最大公约数的一种方法.辗转相除法可以算得上是最早的算法</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>用较小数除较大数，再用出现的余数（第一余数）去除除数，再用出现的余数（第二余数）去除第一余数，如此反复，直到最后余数是0为止。如果是求两个数的最大公约数，那么最后的除数就是这两个数的最大公约数。</p>\n<p>如果我们计算49和21的最大公约数</p>\n<ol>\n<li>35 / 21 = 1…14 用较大的数除以较小的数,得到的余数为14</li>\n<li>21 / 14 = 1…7 用上一步中的被除数除以上一步计算中得到的余数为7</li>\n<li>14 / 7 = 2 重复上述的过程,直到计算的结果中不存在余数.此时除数就是我们需要的最大公约数</li>\n</ol>\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-afdd01bfc8784a25.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"辗转相除法 代码实现\"></p>\n<h3 id=\"优势-1\"><a href=\"#优势-1\" class=\"headerlink\" title=\"优势\"></a>优势</h3><p>当数据较小的时候性能最好</p>\n<h3 id=\"劣势-1\"><a href=\"#劣势-1\" class=\"headerlink\" title=\"劣势\"></a>劣势</h3><p>需要用到取余运算.现阶段的硬件中,整形多为64位,如果需要计算的数据多余硬件的整形位数就需要使用类似于多位数除法手算过程中的试商法,过程复杂而且需要消耗更多的时间</p>\n<h2 id=\"更相减损术方法\"><a href=\"#更相减损术方法\" class=\"headerlink\" title=\"更相减损术方法\"></a>更相减损术方法</h2><blockquote>\n<p>更相减损术是出自《九章算术》的一种求最大公约数的算法,它原本是为约分而设计的,但它适用于任何需要求最大公约数的场合.</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>原文是：<br>可半者半之，不可半者，副置分母、子之数，以少减多，更相减损，求其等也。以等数约之。</p>\n<p>如果是偶数则先减半,不是偶数的话用大数减小数,用得到的差和上一步中较小的数再次相减,知道减数和差相等位置,最后相等的数字就是得到最大公约数.</p>\n<p>但是此方法中如果两个数都是偶数的情况下最后的得到的结果需要在加一倍,下面实现中先不涉及取半操作,只进行互减操作</p>\n<p>如果我们计算49和21的最大公约数</p>\n<ol>\n<li>49 - 21 = 28 49和21都不是偶数,直接用较大的数减去较小的数</li>\n<li>28 - 21 = 7 将上一步中得到的差和上一步中较小的数再次相减(用交大数减去较小数)</li>\n<li>21 - 7 = 14</li>\n<li>14 - 7 = 7</li>\n<li>7 - 7 = 0 重复以上步骤 直至差和较小的数相等,此时相等的数就是需要的最大公约数</li>\n</ol>\n<h3 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-711acca4c19e1872.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"更相减损术方法 代码实现\"></p>\n<h3 id=\"优势-2\"><a href=\"#优势-2\" class=\"headerlink\" title=\"优势\"></a>优势</h3><p>在计算大数的情况下依旧可以保持较快的速度</p>\n<h3 id=\"劣势-2\"><a href=\"#劣势-2\" class=\"headerlink\" title=\"劣势\"></a>劣势</h3><p>因为要不断互减,在两个数较为接近的时候需要的系统资源较大</p>\n<h2 id=\"Stein算法\"><a href=\"#Stein算法\" class=\"headerlink\" title=\"Stein算法\"></a>Stein算法</h2><blockquote>\n<p>Stein算法是一种计算两个数最大公约数的算法，是针对欧几里德算法在对大整数进行运算时，需要试商导致增加运算时间的缺陷而提出的改进算法。</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>相对于辗转想相除法,相减损术方法和Stein算法更为接近.</p>\n<p>如果两个数都是偶数则想将其除以2 最后的结果再乘以2,如果其中的一个是偶数,则将其为偶数的数除以2,如果两个均为奇数,则用较大的数再减去较小的数,得到的差必为偶数,再重复上述过程,直到其中较小的数和查相同,此时相同的数就是需要得到的最大公约数</p>\n<p>如果我们计算49和21的最大公约数</p>\n<ol>\n<li>49 - 21 = 28 49及21均为奇数,则用较大的数减去较小的数</li>\n<li>28 / 2 = 14  其中得到的差为偶数,将偶数除以2</li>\n<li>14 / 2 = 7 其中得到的差为偶数,将偶数除以2</li>\n<li>7 - 7 = 0 重复上述过程 知道差和上一步中的较小数相同 相同的值就是最大公约数</li>\n</ol>\n<h3 id=\"代码实现-3\"><a href=\"#代码实现-3\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2191286-4ec9f7b19c42b2d2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Stein算法 代码实现\"></p>\n<h3 id=\"优势-3\"><a href=\"#优势-3\" class=\"headerlink\" title=\"优势\"></a>优势</h3><p>只是用了移位运算及加减法</p>\n<p>在计算大数的过程中性能最佳</p>\n<h3 id=\"劣势-3\"><a href=\"#劣势-3\" class=\"headerlink\" title=\"劣势\"></a>劣势</h3><p>数据较小的时候,花费的时间相对辗转相除法及更相减损术略多,不适合较小的数据的计算</p>\n<p>代码可读性基本没有…</p>"},{"title":"如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景","date":"2017-05-17T15:56:45.000Z","_content":"\n## 如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景\n\n## 介绍\nSpeed Dial Plus和Earth View from Google Earth都是Chrome中的两个十分好用的新标签页插件\n\nSpeed Dial Plus可以在你打开一个新的标签页的时候提供经常访问的页面的快捷方式 虽然还有很多扩展, 但是这个功能真心好用\n![Speed Dial Plus](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/39416953-file_1495036928867_860e.png)\n<!--more-->\nEarth View from Google Earth可以在你打开一个新的标签页的时候展示一副google earth拍摄的图片(虽然只有1500多个图片 但是每幅图都是十分别致的)\n![Earth View from Google Earth](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/62579920-file_1495037085098_d853.png)\n\n\n## 需求\n这两个都是十分优秀的标签页的工具,那么问题就是 这两个不能共同使用 虽然SDP提供了设置背景页面的方法,但是每次只能设置成一个页面\n\n## 解决思路\n通过分析Earth View from Google Earth来获取所有图片的地址 再在本地或者自己的服务器中部署一个服务器 可以随机返回有效图片地址中的一个 再将SDP中设置背景为自己的服务器设定的地址\n\n最终实现打开新标签页(SDP) SDP访问你的服务地址 服务随机返回一个图片地址 SDP最终访问你设定的新的图片地址\n\n## 分析Earth View from Google Earth\n本来是打算直接使用Chrome的开发者工具和charles直接分析网络请求，但是每次返回的图片地址都不一样只能进一步查看GoogelEarth的页面了\n如https://g.co/ev/2131 这样的短链，可以看到后面的2131这样的四位id 尝试了几次发现不是连续的。  本来打算写个脚本 验证下一定范围内哪些数字是有效的\n然后日常github 发现了[这个好东西](https://github.com/limhenry/earthview) 提供了一个一个[接口](https://raw.githubusercontent.com/limhenry/earthview/master/earthview.json)可以得到当前所有图片的信息\n![所有图片的信息](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/11845916-file_1495088848235_6c3c.png)\n\n可以通过这个json数据解析出所有的图片id  保存到本地作为服务器的数据源\n\n## 具体实现\n```Python\n\nimport requests\nimport random, re , threading , time , socket\nimport tornado.web\nimport tornado.ioloop\n\nallindex = 0\n\ndef getUrl():\n    #通过随机得到的位置来得到对应位置的\n    id = randomid()\n    with open('date', 'r') as f:\n        _image = f.read()\n\n    _imagelist = _image.split(',')\n    _imagelist.pop()\n    return _imagelist[id]\n\n\ndef updateindex():\n  #更新所有图片数量的数据\n    global  allindex\n    with open('daterand', 'r') as f:\n        allindex = f.read()\n\ndef getAllDate():\n  #从提供的接口中获取所有图片的id并保存下来 同时设置延时每天更新下数据\n    print('getAllDate')\n    reponse = requests.get('https://raw.githubusercontent.com/limhenry/earthview/master/earthview.json')\n    html = reponse.text\n\n    with open('date', 'w') as f:\n        imageList = re.findall('\"image\":\".*?\"' , html)\n        for image in imageList:\n            imageurl = re.findall('[0-9]{4,5}' ,image)\n            f.write(imageurl[0] + ',')\n\n    with open('daterand', 'w') as f:\n        f.write(str(len(imageList)))\n\n    updateindex()\n\n    time.sleep(60 * 60 * 24)\n    getAllDate()\n\n\ndef randomid():\n  #随机数什么的\n    global allindex\n    _allindex = int(allindex)\n    id = random.randint(0, _allindex)\n    return id\n\n\nclass earthImage(tornado.web.RequestHandler):\n    def get(self, *args, **kwargs):\n        _id = getUrl()\n        imageurl = 'http://www.gstatic.com/prettyearth/assets/full/%s.jpg'%(_id)\n        print(imageurl)\n        #直接指向随机图片的地址\n        self.redirect(imageurl)\n\napplication = tornado.web.Application([\n    (r\"/earthImage\" , earthImage)\n])\n\ndef runServer():\n  #trnado 服务器的配置 我这里在运行之后会显示当前的地址\n    port = 9011\n    application.listen(port)\n    localIP = socket.gethostbyname(socket.gethostname())\n    print(\"run in %s:%s\"%(localIP,port))\n    tornado.ioloop.IOLoop.instance().start()\n\ndef startServer():\n    print('startServer')\n    runServer()\n\ndef main():\n    //这里开了两个线程 防止取得图片数据的时候访问阻塞\n    updateindex()\n    thread_getInfoDate = threading.Thread(target=getAllDate, name='getAllDate')\n    thread_startServer = threading.Thread(target=startServer, name='startServer')\n\n    thread_getInfoDate.start()\n    thread_startServer.start()\nmain()\n```\n\n最后打开SpeedDialPlus的设置 更改其中主题里的自定义网址为你服务器运行后的地址就好了 当然 也可以部署在云服务器中\n\n## 改进\n程序写的很随意 山顶洞人编程 性能的话自用还可以的\n\n图片的话只有google erath的图片 可以配置或加入更多的图片 现阶段基本没有扩展性 只能看地球了(1500多张图片还不够看 只能说明 该换风格了)\n\n## 项目地址\n\nhttps://github.com/clwater/SpeedDialPlusImage\n","source":"_posts/如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景.md","raw":"---\ntitle: 如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景\ndate: 2017-05-17 23:56:45\ntags: [\"peed Dial Plus\" , \"Earth View from Google Earth\" , \"Chrome插件\" , \"Python\"]\ncategories: \"Python\"\n---\n\n## 如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景\n\n## 介绍\nSpeed Dial Plus和Earth View from Google Earth都是Chrome中的两个十分好用的新标签页插件\n\nSpeed Dial Plus可以在你打开一个新的标签页的时候提供经常访问的页面的快捷方式 虽然还有很多扩展, 但是这个功能真心好用\n![Speed Dial Plus](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/39416953-file_1495036928867_860e.png)\n<!--more-->\nEarth View from Google Earth可以在你打开一个新的标签页的时候展示一副google earth拍摄的图片(虽然只有1500多个图片 但是每幅图都是十分别致的)\n![Earth View from Google Earth](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/62579920-file_1495037085098_d853.png)\n\n\n## 需求\n这两个都是十分优秀的标签页的工具,那么问题就是 这两个不能共同使用 虽然SDP提供了设置背景页面的方法,但是每次只能设置成一个页面\n\n## 解决思路\n通过分析Earth View from Google Earth来获取所有图片的地址 再在本地或者自己的服务器中部署一个服务器 可以随机返回有效图片地址中的一个 再将SDP中设置背景为自己的服务器设定的地址\n\n最终实现打开新标签页(SDP) SDP访问你的服务地址 服务随机返回一个图片地址 SDP最终访问你设定的新的图片地址\n\n## 分析Earth View from Google Earth\n本来是打算直接使用Chrome的开发者工具和charles直接分析网络请求，但是每次返回的图片地址都不一样只能进一步查看GoogelEarth的页面了\n如https://g.co/ev/2131 这样的短链，可以看到后面的2131这样的四位id 尝试了几次发现不是连续的。  本来打算写个脚本 验证下一定范围内哪些数字是有效的\n然后日常github 发现了[这个好东西](https://github.com/limhenry/earthview) 提供了一个一个[接口](https://raw.githubusercontent.com/limhenry/earthview/master/earthview.json)可以得到当前所有图片的信息\n![所有图片的信息](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/11845916-file_1495088848235_6c3c.png)\n\n可以通过这个json数据解析出所有的图片id  保存到本地作为服务器的数据源\n\n## 具体实现\n```Python\n\nimport requests\nimport random, re , threading , time , socket\nimport tornado.web\nimport tornado.ioloop\n\nallindex = 0\n\ndef getUrl():\n    #通过随机得到的位置来得到对应位置的\n    id = randomid()\n    with open('date', 'r') as f:\n        _image = f.read()\n\n    _imagelist = _image.split(',')\n    _imagelist.pop()\n    return _imagelist[id]\n\n\ndef updateindex():\n  #更新所有图片数量的数据\n    global  allindex\n    with open('daterand', 'r') as f:\n        allindex = f.read()\n\ndef getAllDate():\n  #从提供的接口中获取所有图片的id并保存下来 同时设置延时每天更新下数据\n    print('getAllDate')\n    reponse = requests.get('https://raw.githubusercontent.com/limhenry/earthview/master/earthview.json')\n    html = reponse.text\n\n    with open('date', 'w') as f:\n        imageList = re.findall('\"image\":\".*?\"' , html)\n        for image in imageList:\n            imageurl = re.findall('[0-9]{4,5}' ,image)\n            f.write(imageurl[0] + ',')\n\n    with open('daterand', 'w') as f:\n        f.write(str(len(imageList)))\n\n    updateindex()\n\n    time.sleep(60 * 60 * 24)\n    getAllDate()\n\n\ndef randomid():\n  #随机数什么的\n    global allindex\n    _allindex = int(allindex)\n    id = random.randint(0, _allindex)\n    return id\n\n\nclass earthImage(tornado.web.RequestHandler):\n    def get(self, *args, **kwargs):\n        _id = getUrl()\n        imageurl = 'http://www.gstatic.com/prettyearth/assets/full/%s.jpg'%(_id)\n        print(imageurl)\n        #直接指向随机图片的地址\n        self.redirect(imageurl)\n\napplication = tornado.web.Application([\n    (r\"/earthImage\" , earthImage)\n])\n\ndef runServer():\n  #trnado 服务器的配置 我这里在运行之后会显示当前的地址\n    port = 9011\n    application.listen(port)\n    localIP = socket.gethostbyname(socket.gethostname())\n    print(\"run in %s:%s\"%(localIP,port))\n    tornado.ioloop.IOLoop.instance().start()\n\ndef startServer():\n    print('startServer')\n    runServer()\n\ndef main():\n    //这里开了两个线程 防止取得图片数据的时候访问阻塞\n    updateindex()\n    thread_getInfoDate = threading.Thread(target=getAllDate, name='getAllDate')\n    thread_startServer = threading.Thread(target=startServer, name='startServer')\n\n    thread_getInfoDate.start()\n    thread_startServer.start()\nmain()\n```\n\n最后打开SpeedDialPlus的设置 更改其中主题里的自定义网址为你服务器运行后的地址就好了 当然 也可以部署在云服务器中\n\n## 改进\n程序写的很随意 山顶洞人编程 性能的话自用还可以的\n\n图片的话只有google erath的图片 可以配置或加入更多的图片 现阶段基本没有扩展性 只能看地球了(1500多张图片还不够看 只能说明 该换风格了)\n\n## 项目地址\n\nhttps://github.com/clwater/SpeedDialPlusImage\n","slug":"如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景","published":1,"updated":"2020-03-13T09:33:05.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5e90016q7dq88xrrxzh","content":"<h2 id=\"如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景\"><a href=\"#如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景\" class=\"headerlink\" title=\"如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景\"></a>如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景</h2><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Speed Dial Plus和Earth View from Google Earth都是Chrome中的两个十分好用的新标签页插件</p>\n<p>Speed Dial Plus可以在你打开一个新的标签页的时候提供经常访问的页面的快捷方式 虽然还有很多扩展, 但是这个功能真心好用<br><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/39416953-file_1495036928867_860e.png\" alt=\"Speed Dial Plus\"><br><a id=\"more\"></a><br>Earth View from Google Earth可以在你打开一个新的标签页的时候展示一副google earth拍摄的图片(虽然只有1500多个图片 但是每幅图都是十分别致的)<br><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/62579920-file_1495037085098_d853.png\" alt=\"Earth View from Google Earth\"></p>\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>这两个都是十分优秀的标签页的工具,那么问题就是 这两个不能共同使用 虽然SDP提供了设置背景页面的方法,但是每次只能设置成一个页面</p>\n<h2 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h2><p>通过分析Earth View from Google Earth来获取所有图片的地址 再在本地或者自己的服务器中部署一个服务器 可以随机返回有效图片地址中的一个 再将SDP中设置背景为自己的服务器设定的地址</p>\n<p>最终实现打开新标签页(SDP) SDP访问你的服务地址 服务随机返回一个图片地址 SDP最终访问你设定的新的图片地址</p>\n<h2 id=\"分析Earth-View-from-Google-Earth\"><a href=\"#分析Earth-View-from-Google-Earth\" class=\"headerlink\" title=\"分析Earth View from Google Earth\"></a>分析Earth View from Google Earth</h2><p>本来是打算直接使用Chrome的开发者工具和charles直接分析网络请求，但是每次返回的图片地址都不一样只能进一步查看GoogelEarth的页面了<br>如<a href=\"https://g.co/ev/2131\" target=\"_blank\" rel=\"noopener\">https://g.co/ev/2131</a> 这样的短链，可以看到后面的2131这样的四位id 尝试了几次发现不是连续的。  本来打算写个脚本 验证下一定范围内哪些数字是有效的<br>然后日常github 发现了<a href=\"https://github.com/limhenry/earthview\" target=\"_blank\" rel=\"noopener\">这个好东西</a> 提供了一个一个<a href=\"https://raw.githubusercontent.com/limhenry/earthview/master/earthview.json\" target=\"_blank\" rel=\"noopener\">接口</a>可以得到当前所有图片的信息<br><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/11845916-file_1495088848235_6c3c.png\" alt=\"所有图片的信息\"></p>\n<p>可以通过这个json数据解析出所有的图片id  保存到本地作为服务器的数据源</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> random, re , threading , time , socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.web</span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</span><br><span class=\"line\"></span><br><span class=\"line\">allindex = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getUrl</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#通过随机得到的位置来得到对应位置的</span></span><br><span class=\"line\">    id = randomid()</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'date'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        _image = f.read()</span><br><span class=\"line\"></span><br><span class=\"line\">    _imagelist = _image.split(<span class=\"string\">','</span>)</span><br><span class=\"line\">    _imagelist.pop()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _imagelist[id]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">updateindex</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"comment\">#更新所有图片数量的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span>  allindex</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'daterand'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        allindex = f.read()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getAllDate</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"comment\">#从提供的接口中获取所有图片的id并保存下来 同时设置延时每天更新下数据</span></span><br><span class=\"line\">    print(<span class=\"string\">'getAllDate'</span>)</span><br><span class=\"line\">    reponse = requests.get(<span class=\"string\">'https://raw.githubusercontent.com/limhenry/earthview/master/earthview.json'</span>)</span><br><span class=\"line\">    html = reponse.text</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'date'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        imageList = re.findall(<span class=\"string\">'\"image\":\".*?\"'</span> , html)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> image <span class=\"keyword\">in</span> imageList:</span><br><span class=\"line\">            imageurl = re.findall(<span class=\"string\">'[0-9]&#123;4,5&#125;'</span> ,image)</span><br><span class=\"line\">            f.write(imageurl[<span class=\"number\">0</span>] + <span class=\"string\">','</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'daterand'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(str(len(imageList)))</span><br><span class=\"line\"></span><br><span class=\"line\">    updateindex()</span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>)</span><br><span class=\"line\">    getAllDate()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">randomid</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"comment\">#随机数什么的</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> allindex</span><br><span class=\"line\">    _allindex = int(allindex)</span><br><span class=\"line\">    id = random.randint(<span class=\"number\">0</span>, _allindex)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> id</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">earthImage</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        _id = getUrl()</span><br><span class=\"line\">        imageurl = <span class=\"string\">'http://www.gstatic.com/prettyearth/assets/full/%s.jpg'</span>%(_id)</span><br><span class=\"line\">        print(imageurl)</span><br><span class=\"line\">        <span class=\"comment\">#直接指向随机图片的地址</span></span><br><span class=\"line\">        self.redirect(imageurl)</span><br><span class=\"line\"></span><br><span class=\"line\">application = tornado.web.Application([</span><br><span class=\"line\">    (<span class=\"string\">r\"/earthImage\"</span> , earthImage)</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runServer</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"comment\">#trnado 服务器的配置 我这里在运行之后会显示当前的地址</span></span><br><span class=\"line\">    port = <span class=\"number\">9011</span></span><br><span class=\"line\">    application.listen(port)</span><br><span class=\"line\">    localIP = socket.gethostbyname(socket.gethostname())</span><br><span class=\"line\">    print(<span class=\"string\">\"run in %s:%s\"</span>%(localIP,port))</span><br><span class=\"line\">    tornado.ioloop.IOLoop.instance().start()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">startServer</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'startServer'</span>)</span><br><span class=\"line\">    runServer()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    //这里开了两个线程 防止取得图片数据的时候访问阻塞</span><br><span class=\"line\">    updateindex()</span><br><span class=\"line\">    thread_getInfoDate = threading.Thread(target=getAllDate, name=<span class=\"string\">'getAllDate'</span>)</span><br><span class=\"line\">    thread_startServer = threading.Thread(target=startServer, name=<span class=\"string\">'startServer'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    thread_getInfoDate.start()</span><br><span class=\"line\">    thread_startServer.start()</span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n<p>最后打开SpeedDialPlus的设置 更改其中主题里的自定义网址为你服务器运行后的地址就好了 当然 也可以部署在云服务器中</p>\n<h2 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h2><p>程序写的很随意 山顶洞人编程 性能的话自用还可以的</p>\n<p>图片的话只有google erath的图片 可以配置或加入更多的图片 现阶段基本没有扩展性 只能看地球了(1500多张图片还不够看 只能说明 该换风格了)</p>\n<h2 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h2><p><a href=\"https://github.com/clwater/SpeedDialPlusImage\" target=\"_blank\" rel=\"noopener\">https://github.com/clwater/SpeedDialPlusImage</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景\"><a href=\"#如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景\" class=\"headerlink\" title=\"如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景\"></a>如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景</h2><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Speed Dial Plus和Earth View from Google Earth都是Chrome中的两个十分好用的新标签页插件</p>\n<p>Speed Dial Plus可以在你打开一个新的标签页的时候提供经常访问的页面的快捷方式 虽然还有很多扩展, 但是这个功能真心好用<br><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/39416953-file_1495036928867_860e.png\" alt=\"Speed Dial Plus\"><br>","more":"<br>Earth View from Google Earth可以在你打开一个新的标签页的时候展示一副google earth拍摄的图片(虽然只有1500多个图片 但是每幅图都是十分别致的)<br><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/62579920-file_1495037085098_d853.png\" alt=\"Earth View from Google Earth\"></p>\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>这两个都是十分优秀的标签页的工具,那么问题就是 这两个不能共同使用 虽然SDP提供了设置背景页面的方法,但是每次只能设置成一个页面</p>\n<h2 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h2><p>通过分析Earth View from Google Earth来获取所有图片的地址 再在本地或者自己的服务器中部署一个服务器 可以随机返回有效图片地址中的一个 再将SDP中设置背景为自己的服务器设定的地址</p>\n<p>最终实现打开新标签页(SDP) SDP访问你的服务地址 服务随机返回一个图片地址 SDP最终访问你设定的新的图片地址</p>\n<h2 id=\"分析Earth-View-from-Google-Earth\"><a href=\"#分析Earth-View-from-Google-Earth\" class=\"headerlink\" title=\"分析Earth View from Google Earth\"></a>分析Earth View from Google Earth</h2><p>本来是打算直接使用Chrome的开发者工具和charles直接分析网络请求，但是每次返回的图片地址都不一样只能进一步查看GoogelEarth的页面了<br>如<a href=\"https://g.co/ev/2131\" target=\"_blank\" rel=\"noopener\">https://g.co/ev/2131</a> 这样的短链，可以看到后面的2131这样的四位id 尝试了几次发现不是连续的。  本来打算写个脚本 验证下一定范围内哪些数字是有效的<br>然后日常github 发现了<a href=\"https://github.com/limhenry/earthview\" target=\"_blank\" rel=\"noopener\">这个好东西</a> 提供了一个一个<a href=\"https://raw.githubusercontent.com/limhenry/earthview/master/earthview.json\" target=\"_blank\" rel=\"noopener\">接口</a>可以得到当前所有图片的信息<br><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/11845916-file_1495088848235_6c3c.png\" alt=\"所有图片的信息\"></p>\n<p>可以通过这个json数据解析出所有的图片id  保存到本地作为服务器的数据源</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> random, re , threading , time , socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.web</span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</span><br><span class=\"line\"></span><br><span class=\"line\">allindex = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getUrl</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#通过随机得到的位置来得到对应位置的</span></span><br><span class=\"line\">    id = randomid()</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'date'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        _image = f.read()</span><br><span class=\"line\"></span><br><span class=\"line\">    _imagelist = _image.split(<span class=\"string\">','</span>)</span><br><span class=\"line\">    _imagelist.pop()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _imagelist[id]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">updateindex</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"comment\">#更新所有图片数量的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span>  allindex</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'daterand'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        allindex = f.read()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getAllDate</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"comment\">#从提供的接口中获取所有图片的id并保存下来 同时设置延时每天更新下数据</span></span><br><span class=\"line\">    print(<span class=\"string\">'getAllDate'</span>)</span><br><span class=\"line\">    reponse = requests.get(<span class=\"string\">'https://raw.githubusercontent.com/limhenry/earthview/master/earthview.json'</span>)</span><br><span class=\"line\">    html = reponse.text</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'date'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        imageList = re.findall(<span class=\"string\">'\"image\":\".*?\"'</span> , html)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> image <span class=\"keyword\">in</span> imageList:</span><br><span class=\"line\">            imageurl = re.findall(<span class=\"string\">'[0-9]&#123;4,5&#125;'</span> ,image)</span><br><span class=\"line\">            f.write(imageurl[<span class=\"number\">0</span>] + <span class=\"string\">','</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'daterand'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(str(len(imageList)))</span><br><span class=\"line\"></span><br><span class=\"line\">    updateindex()</span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>)</span><br><span class=\"line\">    getAllDate()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">randomid</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"comment\">#随机数什么的</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> allindex</span><br><span class=\"line\">    _allindex = int(allindex)</span><br><span class=\"line\">    id = random.randint(<span class=\"number\">0</span>, _allindex)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> id</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">earthImage</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        _id = getUrl()</span><br><span class=\"line\">        imageurl = <span class=\"string\">'http://www.gstatic.com/prettyearth/assets/full/%s.jpg'</span>%(_id)</span><br><span class=\"line\">        print(imageurl)</span><br><span class=\"line\">        <span class=\"comment\">#直接指向随机图片的地址</span></span><br><span class=\"line\">        self.redirect(imageurl)</span><br><span class=\"line\"></span><br><span class=\"line\">application = tornado.web.Application([</span><br><span class=\"line\">    (<span class=\"string\">r\"/earthImage\"</span> , earthImage)</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runServer</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"comment\">#trnado 服务器的配置 我这里在运行之后会显示当前的地址</span></span><br><span class=\"line\">    port = <span class=\"number\">9011</span></span><br><span class=\"line\">    application.listen(port)</span><br><span class=\"line\">    localIP = socket.gethostbyname(socket.gethostname())</span><br><span class=\"line\">    print(<span class=\"string\">\"run in %s:%s\"</span>%(localIP,port))</span><br><span class=\"line\">    tornado.ioloop.IOLoop.instance().start()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">startServer</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'startServer'</span>)</span><br><span class=\"line\">    runServer()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    //这里开了两个线程 防止取得图片数据的时候访问阻塞</span><br><span class=\"line\">    updateindex()</span><br><span class=\"line\">    thread_getInfoDate = threading.Thread(target=getAllDate, name=<span class=\"string\">'getAllDate'</span>)</span><br><span class=\"line\">    thread_startServer = threading.Thread(target=startServer, name=<span class=\"string\">'startServer'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    thread_getInfoDate.start()</span><br><span class=\"line\">    thread_startServer.start()</span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n<p>最后打开SpeedDialPlus的设置 更改其中主题里的自定义网址为你服务器运行后的地址就好了 当然 也可以部署在云服务器中</p>\n<h2 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h2><p>程序写的很随意 山顶洞人编程 性能的话自用还可以的</p>\n<p>图片的话只有google erath的图片 可以配置或加入更多的图片 现阶段基本没有扩展性 只能看地球了(1500多张图片还不够看 只能说明 该换风格了)</p>\n<h2 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h2><p><a href=\"https://github.com/clwater/SpeedDialPlusImage\" target=\"_blank\" rel=\"noopener\">https://github.com/clwater/SpeedDialPlusImage</a></p>"},{"title":"写在RobinAlgo上线的前一天","date":"2020-10-09T16:16:48.000Z","_content":"# 写在RobinAlgo上线的前一天\n\n> 在写这篇文章的时候我特意去看了一下git的提交记录, RobinAlgo创建于5月13日, 兜兜转转也半年了, 网站略显简陋, 但是也是一个新的开始.\n\n<!-- more -->\n\n## 0. 起\n\n做点自己想做的事情在我还在大学的时候就一直萦绕在脑中, 不过因为各种各样都能知道的原因一直没有付出于行动, 毕业到现在的工作中这个念头也一直浮现, 也开始准备了一点点的事情, 但是到最后都是不了了之. 不过随着三月从之前的公司离职之后这个念头就愈发的强烈, 一边是都说的大环境不好的情况, 一边是有点为了做事而做事的想法. 不过最后的结果也显而易见了, 经过了一段时间的思考后还是觉得要努力一下. \n\n在思考的过程中想了很多也, 最初的开始还是感觉先有个工作, 然后先做点副业, 尝试经营下副业, 有一定的成效后再把副业转为全职, 不过最后还是没有选择这个, 一是之前工作的情况就一直是这个想法, 但是基本没有什么产出. 后面开始做RobinAlgo的时候才发现只用副业的精力的话不论效率还是产出的话都远远达不到我的要求. 人的精力还是有限的, 加上对自己的清晰的认知, 最后的还是选择了这条路. \n\n\n可能你发现了我到现在都我没有说过我在创业, 与其创业, 我更认为我现在做的更多的是为自己做一点事情, (感觉一直都没有完完全全的为自己做点有意义的事情不是).\n\n## 1. 承\nRobinAlgo是我做的第二个项目, 第一个项目的名称是春笋, 春笋对当时我来说就是完完全全的为了创业而创业的项目, 花费了大概一个月的时间. 在开发的春笋的时候看着一个又一个的提交记录, 页面一个又一个的完成. 实际最后春笋已经完成了九成以上的内容, 不过有一天看着页面的时候, 我突然觉得很陌生, 明明是自己一点点做的项目, 到最后我我自己不知道做的目的是什么, 已经渐渐变成了为了开发而开发. 加之有点欺骗自己的完成市场效益, 春笋的项目就果断的被我暂停了. (春笋看来短期是无法长成竹子了.)\n\n这个时候关于是否需要继续的问题摆在了我的面前, 不过, 对我来说短时间没有收入的话还是可以接受, 虽然也快一把年纪了, 不过还是继续了下来.\n\n## 2. 转\nRobinAlgo从何而来的呢? 在前面春笋的失败下, 感觉自己还是需要一个可以发挥自己能力的平台, 最后选择了RobinAlgo这个可视化视频教育的项目, 毁人不倦(😁)加上一堆奇淫技巧的我最终走向了不归路.\n\nRobinAlgo分为网站的建设和内容的制作, 虽然这几年一直做到都是Android开发, 不过网站最后还是顺利的建立了起来. 从设计到前端, 从后台到部署, 工作室的建立到现在的上线前夕, 每个部分对我来说都是十分珍贵的经验. 整体的话是使用React + Spring Boot 实现的网站, 部署的话使用了Docker加上亿点点自动化脚本.(自动化脚本是第一生产力).\n\nRobinAlgo实际上是还是一个算法的视频学习平台, 这样的平台现阶段不说人手一个, 但也有一定的平台, 我为什么还要做一个这样的平台呢? 当初立项的时候也想到了很多其他平台的问题, 一是对于我来说, 短时间内我可能做不了一个独一无二的东西, 一个短时间成为爆款的项目, 所以在立项的时候我更偏向于\"工具类\"的项目, RobinAlgo就是程序员的一个工具, 一个算法的工具. 二是虽然有其它的平台, 可以通过差异化来解决, 如果做一个和其它人完全一样的平台那对我来说也就和春笋一样了. 最后决定了通过加入可视化的算法理解动画来增加和其它平台的差异化. 简单来个就是把各个算法的解答思路动起来, 帮助大家理解算法. 感兴趣的话大家可以访问一下[RobinAlgo](https://robinalgo.com/welcome), 看看能否帮助到你. 其实动图的话我一般都是用ppt做的... 是的用ppt一帧一帧的修改的, [不打算点个start么?](https://github.com/clwater/LeetCodeAllAnimation)走过路过不要错过不是. \n\n\n网站的话大概一个多月的时间就完成了, 虽然到现在还有一些小问题, 不过已经不妨碍正常的使用了, 剩下的就是视频的制作了. 在6月初的时候制作了一些demo, 邀请了一些朋友来观看, 也很感觉朋友们提供的意见和建议. \n\n七月和八月两个月的时间基本上就是制作视频, 平均下来基本上一天要制作两个视频, 遇上难度比较高的题目可能一天只能完成一个. 当时还买了一个小的白板挂在墙上, 写下了每个月的目标和当前的进度, 对于独立开发来说, 如何保持自律我认为是最难的事情, 好在视频都如预期的完成了, 整体的质量也都差强人意, 后面也很针对初期的视频修复或重新录制.\n\n\n## 3. 合\n\n最开的时候是打算9月找个时间上线的, 不过很多的事情耽误了, 加上十一假期的期间大家都没什么学习的欲望. 最后选择了10月10日正式上线. \n\n虽然现在还积攒了很多的需求和功能需要完善(有点赶作业的感觉), 但是RobinAlgo对我来说, 是最好的项目.\n\n一个阶段的结束, 也是另一个阶段的开始.\n\n希望RobinAlgo可以帮助到更多的人\n\n","source":"_posts/写在RobinAlgo上线的前一天.md","raw":"---\ntitle: 写在RobinAlgo上线的前一天\ndate: 2020-10-10 00:16:48\ntags:\n---\n# 写在RobinAlgo上线的前一天\n\n> 在写这篇文章的时候我特意去看了一下git的提交记录, RobinAlgo创建于5月13日, 兜兜转转也半年了, 网站略显简陋, 但是也是一个新的开始.\n\n<!-- more -->\n\n## 0. 起\n\n做点自己想做的事情在我还在大学的时候就一直萦绕在脑中, 不过因为各种各样都能知道的原因一直没有付出于行动, 毕业到现在的工作中这个念头也一直浮现, 也开始准备了一点点的事情, 但是到最后都是不了了之. 不过随着三月从之前的公司离职之后这个念头就愈发的强烈, 一边是都说的大环境不好的情况, 一边是有点为了做事而做事的想法. 不过最后的结果也显而易见了, 经过了一段时间的思考后还是觉得要努力一下. \n\n在思考的过程中想了很多也, 最初的开始还是感觉先有个工作, 然后先做点副业, 尝试经营下副业, 有一定的成效后再把副业转为全职, 不过最后还是没有选择这个, 一是之前工作的情况就一直是这个想法, 但是基本没有什么产出. 后面开始做RobinAlgo的时候才发现只用副业的精力的话不论效率还是产出的话都远远达不到我的要求. 人的精力还是有限的, 加上对自己的清晰的认知, 最后的还是选择了这条路. \n\n\n可能你发现了我到现在都我没有说过我在创业, 与其创业, 我更认为我现在做的更多的是为自己做一点事情, (感觉一直都没有完完全全的为自己做点有意义的事情不是).\n\n## 1. 承\nRobinAlgo是我做的第二个项目, 第一个项目的名称是春笋, 春笋对当时我来说就是完完全全的为了创业而创业的项目, 花费了大概一个月的时间. 在开发的春笋的时候看着一个又一个的提交记录, 页面一个又一个的完成. 实际最后春笋已经完成了九成以上的内容, 不过有一天看着页面的时候, 我突然觉得很陌生, 明明是自己一点点做的项目, 到最后我我自己不知道做的目的是什么, 已经渐渐变成了为了开发而开发. 加之有点欺骗自己的完成市场效益, 春笋的项目就果断的被我暂停了. (春笋看来短期是无法长成竹子了.)\n\n这个时候关于是否需要继续的问题摆在了我的面前, 不过, 对我来说短时间没有收入的话还是可以接受, 虽然也快一把年纪了, 不过还是继续了下来.\n\n## 2. 转\nRobinAlgo从何而来的呢? 在前面春笋的失败下, 感觉自己还是需要一个可以发挥自己能力的平台, 最后选择了RobinAlgo这个可视化视频教育的项目, 毁人不倦(😁)加上一堆奇淫技巧的我最终走向了不归路.\n\nRobinAlgo分为网站的建设和内容的制作, 虽然这几年一直做到都是Android开发, 不过网站最后还是顺利的建立了起来. 从设计到前端, 从后台到部署, 工作室的建立到现在的上线前夕, 每个部分对我来说都是十分珍贵的经验. 整体的话是使用React + Spring Boot 实现的网站, 部署的话使用了Docker加上亿点点自动化脚本.(自动化脚本是第一生产力).\n\nRobinAlgo实际上是还是一个算法的视频学习平台, 这样的平台现阶段不说人手一个, 但也有一定的平台, 我为什么还要做一个这样的平台呢? 当初立项的时候也想到了很多其他平台的问题, 一是对于我来说, 短时间内我可能做不了一个独一无二的东西, 一个短时间成为爆款的项目, 所以在立项的时候我更偏向于\"工具类\"的项目, RobinAlgo就是程序员的一个工具, 一个算法的工具. 二是虽然有其它的平台, 可以通过差异化来解决, 如果做一个和其它人完全一样的平台那对我来说也就和春笋一样了. 最后决定了通过加入可视化的算法理解动画来增加和其它平台的差异化. 简单来个就是把各个算法的解答思路动起来, 帮助大家理解算法. 感兴趣的话大家可以访问一下[RobinAlgo](https://robinalgo.com/welcome), 看看能否帮助到你. 其实动图的话我一般都是用ppt做的... 是的用ppt一帧一帧的修改的, [不打算点个start么?](https://github.com/clwater/LeetCodeAllAnimation)走过路过不要错过不是. \n\n\n网站的话大概一个多月的时间就完成了, 虽然到现在还有一些小问题, 不过已经不妨碍正常的使用了, 剩下的就是视频的制作了. 在6月初的时候制作了一些demo, 邀请了一些朋友来观看, 也很感觉朋友们提供的意见和建议. \n\n七月和八月两个月的时间基本上就是制作视频, 平均下来基本上一天要制作两个视频, 遇上难度比较高的题目可能一天只能完成一个. 当时还买了一个小的白板挂在墙上, 写下了每个月的目标和当前的进度, 对于独立开发来说, 如何保持自律我认为是最难的事情, 好在视频都如预期的完成了, 整体的质量也都差强人意, 后面也很针对初期的视频修复或重新录制.\n\n\n## 3. 合\n\n最开的时候是打算9月找个时间上线的, 不过很多的事情耽误了, 加上十一假期的期间大家都没什么学习的欲望. 最后选择了10月10日正式上线. \n\n虽然现在还积攒了很多的需求和功能需要完善(有点赶作业的感觉), 但是RobinAlgo对我来说, 是最好的项目.\n\n一个阶段的结束, 也是另一个阶段的开始.\n\n希望RobinAlgo可以帮助到更多的人\n\n","slug":"写在RobinAlgo上线的前一天","published":1,"updated":"2020-10-09T17:27:47.437Z","_id":"ckg2it5e90017q7dqcq4xjjlc","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"写在RobinAlgo上线的前一天\"><a href=\"#写在RobinAlgo上线的前一天\" class=\"headerlink\" title=\"写在RobinAlgo上线的前一天\"></a>写在RobinAlgo上线的前一天</h1><blockquote>\n<p>在写这篇文章的时候我特意去看了一下git的提交记录, RobinAlgo创建于5月13日, 兜兜转转也半年了, 网站略显简陋, 但是也是一个新的开始.</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"0-起\"><a href=\"#0-起\" class=\"headerlink\" title=\"0. 起\"></a>0. 起</h2><p>做点自己想做的事情在我还在大学的时候就一直萦绕在脑中, 不过因为各种各样都能知道的原因一直没有付出于行动, 毕业到现在的工作中这个念头也一直浮现, 也开始准备了一点点的事情, 但是到最后都是不了了之. 不过随着三月从之前的公司离职之后这个念头就愈发的强烈, 一边是都说的大环境不好的情况, 一边是有点为了做事而做事的想法. 不过最后的结果也显而易见了, 经过了一段时间的思考后还是觉得要努力一下. </p>\n<p>在思考的过程中想了很多也, 最初的开始还是感觉先有个工作, 然后先做点副业, 尝试经营下副业, 有一定的成效后再把副业转为全职, 不过最后还是没有选择这个, 一是之前工作的情况就一直是这个想法, 但是基本没有什么产出. 后面开始做RobinAlgo的时候才发现只用副业的精力的话不论效率还是产出的话都远远达不到我的要求. 人的精力还是有限的, 加上对自己的清晰的认知, 最后的还是选择了这条路. </p>\n<p>可能你发现了我到现在都我没有说过我在创业, 与其创业, 我更认为我现在做的更多的是为自己做一点事情, (感觉一直都没有完完全全的为自己做点有意义的事情不是).</p>\n<h2 id=\"1-承\"><a href=\"#1-承\" class=\"headerlink\" title=\"1. 承\"></a>1. 承</h2><p>RobinAlgo是我做的第二个项目, 第一个项目的名称是春笋, 春笋对当时我来说就是完完全全的为了创业而创业的项目, 花费了大概一个月的时间. 在开发的春笋的时候看着一个又一个的提交记录, 页面一个又一个的完成. 实际最后春笋已经完成了九成以上的内容, 不过有一天看着页面的时候, 我突然觉得很陌生, 明明是自己一点点做的项目, 到最后我我自己不知道做的目的是什么, 已经渐渐变成了为了开发而开发. 加之有点欺骗自己的完成市场效益, 春笋的项目就果断的被我暂停了. (春笋看来短期是无法长成竹子了.)</p>\n<p>这个时候关于是否需要继续的问题摆在了我的面前, 不过, 对我来说短时间没有收入的话还是可以接受, 虽然也快一把年纪了, 不过还是继续了下来.</p>\n<h2 id=\"2-转\"><a href=\"#2-转\" class=\"headerlink\" title=\"2. 转\"></a>2. 转</h2><p>RobinAlgo从何而来的呢? 在前面春笋的失败下, 感觉自己还是需要一个可以发挥自己能力的平台, 最后选择了RobinAlgo这个可视化视频教育的项目, 毁人不倦(😁)加上一堆奇淫技巧的我最终走向了不归路.</p>\n<p>RobinAlgo分为网站的建设和内容的制作, 虽然这几年一直做到都是Android开发, 不过网站最后还是顺利的建立了起来. 从设计到前端, 从后台到部署, 工作室的建立到现在的上线前夕, 每个部分对我来说都是十分珍贵的经验. 整体的话是使用React + Spring Boot 实现的网站, 部署的话使用了Docker加上亿点点自动化脚本.(自动化脚本是第一生产力).</p>\n<p>RobinAlgo实际上是还是一个算法的视频学习平台, 这样的平台现阶段不说人手一个, 但也有一定的平台, 我为什么还要做一个这样的平台呢? 当初立项的时候也想到了很多其他平台的问题, 一是对于我来说, 短时间内我可能做不了一个独一无二的东西, 一个短时间成为爆款的项目, 所以在立项的时候我更偏向于”工具类”的项目, RobinAlgo就是程序员的一个工具, 一个算法的工具. 二是虽然有其它的平台, 可以通过差异化来解决, 如果做一个和其它人完全一样的平台那对我来说也就和春笋一样了. 最后决定了通过加入可视化的算法理解动画来增加和其它平台的差异化. 简单来个就是把各个算法的解答思路动起来, 帮助大家理解算法. 感兴趣的话大家可以访问一下<a href=\"https://robinalgo.com/welcome\" target=\"_blank\" rel=\"noopener\">RobinAlgo</a>, 看看能否帮助到你. 其实动图的话我一般都是用ppt做的… 是的用ppt一帧一帧的修改的, <a href=\"https://github.com/clwater/LeetCodeAllAnimation\" target=\"_blank\" rel=\"noopener\">不打算点个start么?</a>走过路过不要错过不是. </p>\n<p>网站的话大概一个多月的时间就完成了, 虽然到现在还有一些小问题, 不过已经不妨碍正常的使用了, 剩下的就是视频的制作了. 在6月初的时候制作了一些demo, 邀请了一些朋友来观看, 也很感觉朋友们提供的意见和建议. </p>\n<p>七月和八月两个月的时间基本上就是制作视频, 平均下来基本上一天要制作两个视频, 遇上难度比较高的题目可能一天只能完成一个. 当时还买了一个小的白板挂在墙上, 写下了每个月的目标和当前的进度, 对于独立开发来说, 如何保持自律我认为是最难的事情, 好在视频都如预期的完成了, 整体的质量也都差强人意, 后面也很针对初期的视频修复或重新录制.</p>\n<h2 id=\"3-合\"><a href=\"#3-合\" class=\"headerlink\" title=\"3. 合\"></a>3. 合</h2><p>最开的时候是打算9月找个时间上线的, 不过很多的事情耽误了, 加上十一假期的期间大家都没什么学习的欲望. 最后选择了10月10日正式上线. </p>\n<p>虽然现在还积攒了很多的需求和功能需要完善(有点赶作业的感觉), 但是RobinAlgo对我来说, 是最好的项目.</p>\n<p>一个阶段的结束, 也是另一个阶段的开始.</p>\n<p>希望RobinAlgo可以帮助到更多的人</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"写在RobinAlgo上线的前一天\"><a href=\"#写在RobinAlgo上线的前一天\" class=\"headerlink\" title=\"写在RobinAlgo上线的前一天\"></a>写在RobinAlgo上线的前一天</h1><blockquote>\n<p>在写这篇文章的时候我特意去看了一下git的提交记录, RobinAlgo创建于5月13日, 兜兜转转也半年了, 网站略显简陋, 但是也是一个新的开始.</p>\n</blockquote>","more":"<h2 id=\"0-起\"><a href=\"#0-起\" class=\"headerlink\" title=\"0. 起\"></a>0. 起</h2><p>做点自己想做的事情在我还在大学的时候就一直萦绕在脑中, 不过因为各种各样都能知道的原因一直没有付出于行动, 毕业到现在的工作中这个念头也一直浮现, 也开始准备了一点点的事情, 但是到最后都是不了了之. 不过随着三月从之前的公司离职之后这个念头就愈发的强烈, 一边是都说的大环境不好的情况, 一边是有点为了做事而做事的想法. 不过最后的结果也显而易见了, 经过了一段时间的思考后还是觉得要努力一下. </p>\n<p>在思考的过程中想了很多也, 最初的开始还是感觉先有个工作, 然后先做点副业, 尝试经营下副业, 有一定的成效后再把副业转为全职, 不过最后还是没有选择这个, 一是之前工作的情况就一直是这个想法, 但是基本没有什么产出. 后面开始做RobinAlgo的时候才发现只用副业的精力的话不论效率还是产出的话都远远达不到我的要求. 人的精力还是有限的, 加上对自己的清晰的认知, 最后的还是选择了这条路. </p>\n<p>可能你发现了我到现在都我没有说过我在创业, 与其创业, 我更认为我现在做的更多的是为自己做一点事情, (感觉一直都没有完完全全的为自己做点有意义的事情不是).</p>\n<h2 id=\"1-承\"><a href=\"#1-承\" class=\"headerlink\" title=\"1. 承\"></a>1. 承</h2><p>RobinAlgo是我做的第二个项目, 第一个项目的名称是春笋, 春笋对当时我来说就是完完全全的为了创业而创业的项目, 花费了大概一个月的时间. 在开发的春笋的时候看着一个又一个的提交记录, 页面一个又一个的完成. 实际最后春笋已经完成了九成以上的内容, 不过有一天看着页面的时候, 我突然觉得很陌生, 明明是自己一点点做的项目, 到最后我我自己不知道做的目的是什么, 已经渐渐变成了为了开发而开发. 加之有点欺骗自己的完成市场效益, 春笋的项目就果断的被我暂停了. (春笋看来短期是无法长成竹子了.)</p>\n<p>这个时候关于是否需要继续的问题摆在了我的面前, 不过, 对我来说短时间没有收入的话还是可以接受, 虽然也快一把年纪了, 不过还是继续了下来.</p>\n<h2 id=\"2-转\"><a href=\"#2-转\" class=\"headerlink\" title=\"2. 转\"></a>2. 转</h2><p>RobinAlgo从何而来的呢? 在前面春笋的失败下, 感觉自己还是需要一个可以发挥自己能力的平台, 最后选择了RobinAlgo这个可视化视频教育的项目, 毁人不倦(😁)加上一堆奇淫技巧的我最终走向了不归路.</p>\n<p>RobinAlgo分为网站的建设和内容的制作, 虽然这几年一直做到都是Android开发, 不过网站最后还是顺利的建立了起来. 从设计到前端, 从后台到部署, 工作室的建立到现在的上线前夕, 每个部分对我来说都是十分珍贵的经验. 整体的话是使用React + Spring Boot 实现的网站, 部署的话使用了Docker加上亿点点自动化脚本.(自动化脚本是第一生产力).</p>\n<p>RobinAlgo实际上是还是一个算法的视频学习平台, 这样的平台现阶段不说人手一个, 但也有一定的平台, 我为什么还要做一个这样的平台呢? 当初立项的时候也想到了很多其他平台的问题, 一是对于我来说, 短时间内我可能做不了一个独一无二的东西, 一个短时间成为爆款的项目, 所以在立项的时候我更偏向于”工具类”的项目, RobinAlgo就是程序员的一个工具, 一个算法的工具. 二是虽然有其它的平台, 可以通过差异化来解决, 如果做一个和其它人完全一样的平台那对我来说也就和春笋一样了. 最后决定了通过加入可视化的算法理解动画来增加和其它平台的差异化. 简单来个就是把各个算法的解答思路动起来, 帮助大家理解算法. 感兴趣的话大家可以访问一下<a href=\"https://robinalgo.com/welcome\" target=\"_blank\" rel=\"noopener\">RobinAlgo</a>, 看看能否帮助到你. 其实动图的话我一般都是用ppt做的… 是的用ppt一帧一帧的修改的, <a href=\"https://github.com/clwater/LeetCodeAllAnimation\" target=\"_blank\" rel=\"noopener\">不打算点个start么?</a>走过路过不要错过不是. </p>\n<p>网站的话大概一个多月的时间就完成了, 虽然到现在还有一些小问题, 不过已经不妨碍正常的使用了, 剩下的就是视频的制作了. 在6月初的时候制作了一些demo, 邀请了一些朋友来观看, 也很感觉朋友们提供的意见和建议. </p>\n<p>七月和八月两个月的时间基本上就是制作视频, 平均下来基本上一天要制作两个视频, 遇上难度比较高的题目可能一天只能完成一个. 当时还买了一个小的白板挂在墙上, 写下了每个月的目标和当前的进度, 对于独立开发来说, 如何保持自律我认为是最难的事情, 好在视频都如预期的完成了, 整体的质量也都差强人意, 后面也很针对初期的视频修复或重新录制.</p>\n<h2 id=\"3-合\"><a href=\"#3-合\" class=\"headerlink\" title=\"3. 合\"></a>3. 合</h2><p>最开的时候是打算9月找个时间上线的, 不过很多的事情耽误了, 加上十一假期的期间大家都没什么学习的欲望. 最后选择了10月10日正式上线. </p>\n<p>虽然现在还积攒了很多的需求和功能需要完善(有点赶作业的感觉), 但是RobinAlgo对我来说, 是最好的项目.</p>\n<p>一个阶段的结束, 也是另一个阶段的开始.</p>\n<p>希望RobinAlgo可以帮助到更多的人</p>"},{"title":"如何用最简单的方法发布Android library到jCenter(Bintray)","date":"2020-03-19T08:52:15.000Z","_content":"\n# 如何用最简单的方法发布Android library到jCenter(Bintray)\n\n> 最初的想法是做一个很简单基础的网络请求的封装作为一个自己常用的网络库(这是另一个故事了), 在这个故事里, 遇到了很多... 意想不到的问题,在此留作记录,希望可以帮助到大家.\n\n\n  <!-- more -->\n\n## 不想看太多只想简单操作就完事部分\n\n### Bintray 注册(虽然啰嗦, 但是这个不提的话很容易遇到问题的)\n[Bintray注册地址: https://bintray.com/signup/oss](https://bintray.com/signup/oss) 注意这里的地址是有带有oss的,是注册的个人账户\n\n以下是个人注册的页面\n\n![Bintray个人账户注册](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c6675f5ad?w=1548&h=779&f=png&s=65340)\n\n\n以下是组织注册的页面,可以看到需要你填写额外的内容\n\n![Bintray组织账户注册](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c67ecd104?w=1662&h=928&f=png&s=109517)\n\n\n通过github授权登录就可以了,填写相关的信息就可以了\n\n![填写相关信息](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c69044a16?w=717&h=520&f=png&s=41099)\n\n\n在上传之前, 我们要先建立一个Repository\n\n![创建Repository](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c69f6fb3b?w=1258&h=967&f=png&s=90977)\n\nType记得要选择Maven\n\n![Repository选择](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c6b8fd1a1?w=878&h=739&f=png&s=41020)\n\n创建成功后页面显示如下\n\n![创建成功](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c6c64b0cf?w=1317&h=691&f=png&s=80000)\n\n<!-- ![](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20191129225748.png) -->\n\n\n### 本地Library Module修改\n\n本地需要修改下面三个文件\n\n![修改相关](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c90d03fef?w=555&h=521&f=png&s=20896)\n\n1. 项目的gradle文件 加入下面内容\n\n![项目gradle](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c9245df7a?w=1102&h=843&f=png&s=73954)\n\n```java\n        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'\n        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'\n```\n\n2. library内的gradle修改\n\n![librarygradle](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c92b80b91?w=1219&h=812&f=png&s=98191)\n\n将下面的内容追加到文件内\n\n```java\n// 以下内容是将Library上传到Bintray的相关配置\napply plugin: 'com.github.dcendents.android-maven'\napply plugin: 'com.jfrog.bintray'\n\n//以下是需要针对项目需要修改的配置内容\n//发布者的组织名称\ngroup = \"com.clwater\"\n// 版本号，下次更新是只需要更改版本号即可\nversion = \"0.0.1\"\n//上面配置后上传至bintray后的编译路径是这样的： compile 'com.clwater:bintraylibrary:0.0.1'\n\nProperties properties = new Properties()\nproperties.load(project.rootProject.file('local.properties').newDataInputStream())\n//读取 local.properties 文件里面的 bintray.user\ndef bintrayUser = properties.getProperty(\"bintray.user\")\n//读取 local.properties 文件里面的 bintray.apikey\ndef bintrayKey = properties.getProperty(\"bintray.apikey\")\n\n//项目主页\ndef siteUrl = 'https://github.com/clwater/BintrayLibrary'\n//项目的版本控制地址\ndef gitUrl = 'https://github.com/clwater/BintrayLibrary.git'\n//发布到JCenter上的项目名字，必须填写\ndef libName = \"testlibrary\"\n//文档连接\ndef javaDocLinks = \"https://github.com/clwater\"\n//Bintray中Repository的名字\ndef bintrayRepo = \"ClwaterRepository\"\n//应用的描述\ndef bintrayDesc = \"Desc\"\n//组织的名字, 建立组织账号后上传的时候需要这个, 个人张海时候不需要修改这部分\ndef bintrayUserOrg = \"ClwaterRepository\"\n\n//生成源文件\ntask sourcesJar(type: Jar) {\n    from android.sourceSets.main.java.srcDirs\n    classifier = 'sources'\n}\n//生成文档\ntask javadoc(type: Javadoc) {\n    source = android.sourceSets.main.java.srcDirs\n    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))\n    //以下两个为项目中带有中文注释的支持\n    options.encoding \"UTF-8\"\n    options.charSet 'UTF-8'\n    options.author true\n    options.version true\n    options.links javaDocLinks\n    failOnError false\n}\n\n//文档打包成jar\ntask javadocJar(type: Jar, dependsOn: javadoc) {\n    classifier = 'javadoc'\n    from javadoc.destinationDir\n}\n//拷贝javadoc文件\ntask copyDoc(type: Copy) {\n    from \"${buildDir}/docs/\"\n    into \"docs\"\n}\n\n//上传到jcenter所需要的源码文件\nartifacts {\n    archives javadocJar\n    archives sourcesJar\n}\n\n// 配置maven库，生成POM.xml文件\ninstall {\n    repositories.mavenInstaller {\n        // This generates POM.xml with proper parameters\n        pom {\n            project {\n                packaging 'aar'\n                //项目名称和描述\n                name 'pom project name'\n                description 'pom project escription'\n                url siteUrl\n                licenses {\n                    license {\n                        //开源协议,在bintray中创建仓库时选择的license为Apache-2.0，复制下面的就可以\n                        name 'The Apache Software License, Version 2.0'\n                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'\n                    }\n                }\n                developers {\n                    //开发者的个人信息\n                    developer {\n                        id 'developer id '\n                        name 'developer name '\n                        email 'developer email'\n                    }\n                }\n                scm {\n                    connection gitUrl\n                    developerConnection gitUrl\n                    url siteUrl\n                }\n            }\n        }\n    }\n}\n\n//上传到jcenter\nbintray {\n    user = bintrayUser\n    key = bintrayKey\n    configurations = ['archives']\n    pkg {\n//        userOrg = bintrayUserOrg\n        repo = bintrayRepo\n        name = libName\n        desc =  bintrayDesc\n        websiteUrl = siteUrl\n        vcsUrl = gitUrl\n        licenses = [\"Apache-2.0\"]\n        publish = true\n    }\n}\n\n```\n\n3. local.properties修改\n\n在这里需要配置下Bintray内的信息\n\n![local.properties](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c93864559?w=988&h=690&f=png&s=59619)\n\n可以通过如下步骤来获取你的api\n\n![bintary信息](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c9eda7f29?w=1760&h=1018&f=png&s=104026)\n\n\n### 上传到Bintray\n\n进入项目分别执行以下执行\n\n```bash\n./gradlew install\n./gradlew bintrayUpload\n```\n\n成功执行后可以在你的Bintray中看到你刚刚上传的Library\n\n![上传到Bintray成功](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c9f1e75fc?w=1374&h=875&f=png&s=82740)\n\n\n\n### 提交到jCenter\n\n可以在页面详情提交到jCenter,不过需要审核才能在默认的情况下引入你的库\n\n![提交到jCenter](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90cb468f38e?w=1315&h=920&f=png&s=108655)\n\n那么如果不提交到jCenter中就无法使用了么, 当然不会的,在详情页面还有你自己的仓库maven地址和依赖引入地址,你可以把这些内容配置到你的项目中,就可以使用了\n\n![本地配置](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90cba036cc9?w=1014&h=836&f=png&s=82742)\n\n配置完成后就可以直接引用了\n\n![本地引用](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90cba78a0dd?w=668&h=313&f=png&s=21385)\n\n\n## 一顿操作猛如虎, 问题总比办法多部分(常见问题)\n\n1. Could not create package 'xxx/xxx/xxx': HTTP/1.1 404 Not Found [message:Repo 'xxx' was not found]\n\n    解决: 需要先在Bintray建立名为xxx的Repository\n\n2. Could not create version ‘0.1’: HTTP/1.1 401 Unauthorized [message:This resource requires authentication]\n    解决: 一是local.properties内的名字和api有问题\n         二是你注册了组织账号,需要额外配置userOrg(值为你注册时填写的组织名称,或者到Bintray中查看也可以找到)\n3. 没有dd to JCenter按钮\n    注册了组织账号, 需要个人账号来\n\n\n## 相关代码\n\n相关代码可以在[我的GitHub](https://github.com/clwater/BintrayLibrary)找到.","source":"_posts/如何用最简单的方法发布Android-library到jCenter-Bintray.md","raw":"---\ntitle: 如何用最简单的方法发布Android library到jCenter(Bintray)\ndate: 2020-03-19 16:52:15\ntags:\n---\n\n# 如何用最简单的方法发布Android library到jCenter(Bintray)\n\n> 最初的想法是做一个很简单基础的网络请求的封装作为一个自己常用的网络库(这是另一个故事了), 在这个故事里, 遇到了很多... 意想不到的问题,在此留作记录,希望可以帮助到大家.\n\n\n  <!-- more -->\n\n## 不想看太多只想简单操作就完事部分\n\n### Bintray 注册(虽然啰嗦, 但是这个不提的话很容易遇到问题的)\n[Bintray注册地址: https://bintray.com/signup/oss](https://bintray.com/signup/oss) 注意这里的地址是有带有oss的,是注册的个人账户\n\n以下是个人注册的页面\n\n![Bintray个人账户注册](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c6675f5ad?w=1548&h=779&f=png&s=65340)\n\n\n以下是组织注册的页面,可以看到需要你填写额外的内容\n\n![Bintray组织账户注册](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c67ecd104?w=1662&h=928&f=png&s=109517)\n\n\n通过github授权登录就可以了,填写相关的信息就可以了\n\n![填写相关信息](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c69044a16?w=717&h=520&f=png&s=41099)\n\n\n在上传之前, 我们要先建立一个Repository\n\n![创建Repository](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c69f6fb3b?w=1258&h=967&f=png&s=90977)\n\nType记得要选择Maven\n\n![Repository选择](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c6b8fd1a1?w=878&h=739&f=png&s=41020)\n\n创建成功后页面显示如下\n\n![创建成功](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c6c64b0cf?w=1317&h=691&f=png&s=80000)\n\n<!-- ![](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20191129225748.png) -->\n\n\n### 本地Library Module修改\n\n本地需要修改下面三个文件\n\n![修改相关](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c90d03fef?w=555&h=521&f=png&s=20896)\n\n1. 项目的gradle文件 加入下面内容\n\n![项目gradle](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c9245df7a?w=1102&h=843&f=png&s=73954)\n\n```java\n        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'\n        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'\n```\n\n2. library内的gradle修改\n\n![librarygradle](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c92b80b91?w=1219&h=812&f=png&s=98191)\n\n将下面的内容追加到文件内\n\n```java\n// 以下内容是将Library上传到Bintray的相关配置\napply plugin: 'com.github.dcendents.android-maven'\napply plugin: 'com.jfrog.bintray'\n\n//以下是需要针对项目需要修改的配置内容\n//发布者的组织名称\ngroup = \"com.clwater\"\n// 版本号，下次更新是只需要更改版本号即可\nversion = \"0.0.1\"\n//上面配置后上传至bintray后的编译路径是这样的： compile 'com.clwater:bintraylibrary:0.0.1'\n\nProperties properties = new Properties()\nproperties.load(project.rootProject.file('local.properties').newDataInputStream())\n//读取 local.properties 文件里面的 bintray.user\ndef bintrayUser = properties.getProperty(\"bintray.user\")\n//读取 local.properties 文件里面的 bintray.apikey\ndef bintrayKey = properties.getProperty(\"bintray.apikey\")\n\n//项目主页\ndef siteUrl = 'https://github.com/clwater/BintrayLibrary'\n//项目的版本控制地址\ndef gitUrl = 'https://github.com/clwater/BintrayLibrary.git'\n//发布到JCenter上的项目名字，必须填写\ndef libName = \"testlibrary\"\n//文档连接\ndef javaDocLinks = \"https://github.com/clwater\"\n//Bintray中Repository的名字\ndef bintrayRepo = \"ClwaterRepository\"\n//应用的描述\ndef bintrayDesc = \"Desc\"\n//组织的名字, 建立组织账号后上传的时候需要这个, 个人张海时候不需要修改这部分\ndef bintrayUserOrg = \"ClwaterRepository\"\n\n//生成源文件\ntask sourcesJar(type: Jar) {\n    from android.sourceSets.main.java.srcDirs\n    classifier = 'sources'\n}\n//生成文档\ntask javadoc(type: Javadoc) {\n    source = android.sourceSets.main.java.srcDirs\n    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))\n    //以下两个为项目中带有中文注释的支持\n    options.encoding \"UTF-8\"\n    options.charSet 'UTF-8'\n    options.author true\n    options.version true\n    options.links javaDocLinks\n    failOnError false\n}\n\n//文档打包成jar\ntask javadocJar(type: Jar, dependsOn: javadoc) {\n    classifier = 'javadoc'\n    from javadoc.destinationDir\n}\n//拷贝javadoc文件\ntask copyDoc(type: Copy) {\n    from \"${buildDir}/docs/\"\n    into \"docs\"\n}\n\n//上传到jcenter所需要的源码文件\nartifacts {\n    archives javadocJar\n    archives sourcesJar\n}\n\n// 配置maven库，生成POM.xml文件\ninstall {\n    repositories.mavenInstaller {\n        // This generates POM.xml with proper parameters\n        pom {\n            project {\n                packaging 'aar'\n                //项目名称和描述\n                name 'pom project name'\n                description 'pom project escription'\n                url siteUrl\n                licenses {\n                    license {\n                        //开源协议,在bintray中创建仓库时选择的license为Apache-2.0，复制下面的就可以\n                        name 'The Apache Software License, Version 2.0'\n                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'\n                    }\n                }\n                developers {\n                    //开发者的个人信息\n                    developer {\n                        id 'developer id '\n                        name 'developer name '\n                        email 'developer email'\n                    }\n                }\n                scm {\n                    connection gitUrl\n                    developerConnection gitUrl\n                    url siteUrl\n                }\n            }\n        }\n    }\n}\n\n//上传到jcenter\nbintray {\n    user = bintrayUser\n    key = bintrayKey\n    configurations = ['archives']\n    pkg {\n//        userOrg = bintrayUserOrg\n        repo = bintrayRepo\n        name = libName\n        desc =  bintrayDesc\n        websiteUrl = siteUrl\n        vcsUrl = gitUrl\n        licenses = [\"Apache-2.0\"]\n        publish = true\n    }\n}\n\n```\n\n3. local.properties修改\n\n在这里需要配置下Bintray内的信息\n\n![local.properties](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c93864559?w=988&h=690&f=png&s=59619)\n\n可以通过如下步骤来获取你的api\n\n![bintary信息](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c9eda7f29?w=1760&h=1018&f=png&s=104026)\n\n\n### 上传到Bintray\n\n进入项目分别执行以下执行\n\n```bash\n./gradlew install\n./gradlew bintrayUpload\n```\n\n成功执行后可以在你的Bintray中看到你刚刚上传的Library\n\n![上传到Bintray成功](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c9f1e75fc?w=1374&h=875&f=png&s=82740)\n\n\n\n### 提交到jCenter\n\n可以在页面详情提交到jCenter,不过需要审核才能在默认的情况下引入你的库\n\n![提交到jCenter](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90cb468f38e?w=1315&h=920&f=png&s=108655)\n\n那么如果不提交到jCenter中就无法使用了么, 当然不会的,在详情页面还有你自己的仓库maven地址和依赖引入地址,你可以把这些内容配置到你的项目中,就可以使用了\n\n![本地配置](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90cba036cc9?w=1014&h=836&f=png&s=82742)\n\n配置完成后就可以直接引用了\n\n![本地引用](https://user-gold-cdn.xitu.io/2019/11/30/16ebc90cba78a0dd?w=668&h=313&f=png&s=21385)\n\n\n## 一顿操作猛如虎, 问题总比办法多部分(常见问题)\n\n1. Could not create package 'xxx/xxx/xxx': HTTP/1.1 404 Not Found [message:Repo 'xxx' was not found]\n\n    解决: 需要先在Bintray建立名为xxx的Repository\n\n2. Could not create version ‘0.1’: HTTP/1.1 401 Unauthorized [message:This resource requires authentication]\n    解决: 一是local.properties内的名字和api有问题\n         二是你注册了组织账号,需要额外配置userOrg(值为你注册时填写的组织名称,或者到Bintray中查看也可以找到)\n3. 没有dd to JCenter按钮\n    注册了组织账号, 需要个人账号来\n\n\n## 相关代码\n\n相关代码可以在[我的GitHub](https://github.com/clwater/BintrayLibrary)找到.","slug":"如何用最简单的方法发布Android-library到jCenter-Bintray","published":1,"updated":"2020-03-19T08:52:45.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5e90018q7dqxsbhfpe2","content":"<h1 id=\"如何用最简单的方法发布Android-library到jCenter-Bintray\"><a href=\"#如何用最简单的方法发布Android-library到jCenter-Bintray\" class=\"headerlink\" title=\"如何用最简单的方法发布Android library到jCenter(Bintray)\"></a>如何用最简单的方法发布Android library到jCenter(Bintray)</h1><blockquote>\n<p>最初的想法是做一个很简单基础的网络请求的封装作为一个自己常用的网络库(这是另一个故事了), 在这个故事里, 遇到了很多… 意想不到的问题,在此留作记录,希望可以帮助到大家.</p>\n</blockquote>\n  <a id=\"more\"></a>\n<h2 id=\"不想看太多只想简单操作就完事部分\"><a href=\"#不想看太多只想简单操作就完事部分\" class=\"headerlink\" title=\"不想看太多只想简单操作就完事部分\"></a>不想看太多只想简单操作就完事部分</h2><h3 id=\"Bintray-注册-虽然啰嗦-但是这个不提的话很容易遇到问题的\"><a href=\"#Bintray-注册-虽然啰嗦-但是这个不提的话很容易遇到问题的\" class=\"headerlink\" title=\"Bintray 注册(虽然啰嗦, 但是这个不提的话很容易遇到问题的)\"></a>Bintray 注册(虽然啰嗦, 但是这个不提的话很容易遇到问题的)</h3><p><a href=\"https://bintray.com/signup/oss\" target=\"_blank\" rel=\"noopener\">Bintray注册地址: https://bintray.com/signup/oss</a> 注意这里的地址是有带有oss的,是注册的个人账户</p>\n<p>以下是个人注册的页面</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c6675f5ad?w=1548&amp;h=779&amp;f=png&amp;s=65340\" alt=\"Bintray个人账户注册\"></p>\n<p>以下是组织注册的页面,可以看到需要你填写额外的内容</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c67ecd104?w=1662&amp;h=928&amp;f=png&amp;s=109517\" alt=\"Bintray组织账户注册\"></p>\n<p>通过github授权登录就可以了,填写相关的信息就可以了</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c69044a16?w=717&amp;h=520&amp;f=png&amp;s=41099\" alt=\"填写相关信息\"></p>\n<p>在上传之前, 我们要先建立一个Repository</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c69f6fb3b?w=1258&amp;h=967&amp;f=png&amp;s=90977\" alt=\"创建Repository\"></p>\n<p>Type记得要选择Maven</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c6b8fd1a1?w=878&amp;h=739&amp;f=png&amp;s=41020\" alt=\"Repository选择\"></p>\n<p>创建成功后页面显示如下</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c6c64b0cf?w=1317&amp;h=691&amp;f=png&amp;s=80000\" alt=\"创建成功\"></p>\n<!-- ![](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20191129225748.png) -->\n<h3 id=\"本地Library-Module修改\"><a href=\"#本地Library-Module修改\" class=\"headerlink\" title=\"本地Library Module修改\"></a>本地Library Module修改</h3><p>本地需要修改下面三个文件</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c90d03fef?w=555&amp;h=521&amp;f=png&amp;s=20896\" alt=\"修改相关\"></p>\n<ol>\n<li>项目的gradle文件 加入下面内容</li>\n</ol>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c9245df7a?w=1102&amp;h=843&amp;f=png&amp;s=73954\" alt=\"项目gradle\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classpath <span class=\"string\">'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'</span></span><br><span class=\"line\">classpath <span class=\"string\">'com.github.dcendents:android-maven-gradle-plugin:2.1'</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>library内的gradle修改</li>\n</ol>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c92b80b91?w=1219&amp;h=812&amp;f=png&amp;s=98191\" alt=\"librarygradle\"></p>\n<p>将下面的内容追加到文件内</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以下内容是将Library上传到Bintray的相关配置</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">'com.github.dcendents.android-maven'</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">'com.jfrog.bintray'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以下是需要针对项目需要修改的配置内容</span></span><br><span class=\"line\"><span class=\"comment\">//发布者的组织名称</span></span><br><span class=\"line\">group = <span class=\"string\">\"com.clwater\"</span></span><br><span class=\"line\"><span class=\"comment\">// 版本号，下次更新是只需要更改版本号即可</span></span><br><span class=\"line\">version = <span class=\"string\">\"0.0.1\"</span></span><br><span class=\"line\"><span class=\"comment\">//上面配置后上传至bintray后的编译路径是这样的： compile 'com.clwater:bintraylibrary:0.0.1'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Properties properties = <span class=\"keyword\">new</span> Properties()</span><br><span class=\"line\">properties.load(project.rootProject.file(<span class=\"string\">'local.properties'</span>).newDataInputStream())</span><br><span class=\"line\"><span class=\"comment\">//读取 local.properties 文件里面的 bintray.user</span></span><br><span class=\"line\">def bintrayUser = properties.getProperty(<span class=\"string\">\"bintray.user\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//读取 local.properties 文件里面的 bintray.apikey</span></span><br><span class=\"line\">def bintrayKey = properties.getProperty(<span class=\"string\">\"bintray.apikey\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//项目主页</span></span><br><span class=\"line\">def siteUrl = <span class=\"string\">'https://github.com/clwater/BintrayLibrary'</span></span><br><span class=\"line\"><span class=\"comment\">//项目的版本控制地址</span></span><br><span class=\"line\">def gitUrl = <span class=\"string\">'https://github.com/clwater/BintrayLibrary.git'</span></span><br><span class=\"line\"><span class=\"comment\">//发布到JCenter上的项目名字，必须填写</span></span><br><span class=\"line\">def libName = <span class=\"string\">\"testlibrary\"</span></span><br><span class=\"line\"><span class=\"comment\">//文档连接</span></span><br><span class=\"line\">def javaDocLinks = <span class=\"string\">\"https://github.com/clwater\"</span></span><br><span class=\"line\"><span class=\"comment\">//Bintray中Repository的名字</span></span><br><span class=\"line\">def bintrayRepo = <span class=\"string\">\"ClwaterRepository\"</span></span><br><span class=\"line\"><span class=\"comment\">//应用的描述</span></span><br><span class=\"line\">def bintrayDesc = <span class=\"string\">\"Desc\"</span></span><br><span class=\"line\"><span class=\"comment\">//组织的名字, 建立组织账号后上传的时候需要这个, 个人张海时候不需要修改这部分</span></span><br><span class=\"line\">def bintrayUserOrg = <span class=\"string\">\"ClwaterRepository\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生成源文件</span></span><br><span class=\"line\"><span class=\"function\">task <span class=\"title\">sourcesJar</span><span class=\"params\">(type: Jar)</span> </span>&#123;</span><br><span class=\"line\">    from android.sourceSets.main.java.srcDirs</span><br><span class=\"line\">    classifier = <span class=\"string\">'sources'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//生成文档</span></span><br><span class=\"line\"><span class=\"function\">task <span class=\"title\">javadoc</span><span class=\"params\">(type: Javadoc)</span> </span>&#123;</span><br><span class=\"line\">    source = android.sourceSets.main.java.srcDirs</span><br><span class=\"line\">    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))</span><br><span class=\"line\">    <span class=\"comment\">//以下两个为项目中带有中文注释的支持</span></span><br><span class=\"line\">    options.encoding <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    options.charSet <span class=\"string\">'UTF-8'</span></span><br><span class=\"line\">    options.author <span class=\"keyword\">true</span></span><br><span class=\"line\">    options.version <span class=\"keyword\">true</span></span><br><span class=\"line\">    options.links javaDocLinks</span><br><span class=\"line\">    failOnError <span class=\"keyword\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//文档打包成jar</span></span><br><span class=\"line\"><span class=\"function\">task <span class=\"title\">javadocJar</span><span class=\"params\">(type: Jar, dependsOn: javadoc)</span> </span>&#123;</span><br><span class=\"line\">    classifier = <span class=\"string\">'javadoc'</span></span><br><span class=\"line\">    from javadoc.destinationDir</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//拷贝javadoc文件</span></span><br><span class=\"line\"><span class=\"function\">task <span class=\"title\">copyDoc</span><span class=\"params\">(type: Copy)</span> </span>&#123;</span><br><span class=\"line\">    from <span class=\"string\">\"$&#123;buildDir&#125;/docs/\"</span></span><br><span class=\"line\">    into <span class=\"string\">\"docs\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上传到jcenter所需要的源码文件</span></span><br><span class=\"line\">artifacts &#123;</span><br><span class=\"line\">    archives javadocJar</span><br><span class=\"line\">    archives sourcesJar</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置maven库，生成POM.xml文件</span></span><br><span class=\"line\">install &#123;</span><br><span class=\"line\">    repositories.mavenInstaller &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This generates POM.xml with proper parameters</span></span><br><span class=\"line\">        pom &#123;</span><br><span class=\"line\">            project &#123;</span><br><span class=\"line\">                packaging <span class=\"string\">'aar'</span></span><br><span class=\"line\">                <span class=\"comment\">//项目名称和描述</span></span><br><span class=\"line\">                name <span class=\"string\">'pom project name'</span></span><br><span class=\"line\">                description <span class=\"string\">'pom project escription'</span></span><br><span class=\"line\">                url siteUrl</span><br><span class=\"line\">                licenses &#123;</span><br><span class=\"line\">                    license &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//开源协议,在bintray中创建仓库时选择的license为Apache-2.0，复制下面的就可以</span></span><br><span class=\"line\">                        name <span class=\"string\">'The Apache Software License, Version 2.0'</span></span><br><span class=\"line\">                        url <span class=\"string\">'http://www.apache.org/licenses/LICENSE-2.0.txt'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                developers &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//开发者的个人信息</span></span><br><span class=\"line\">                    developer &#123;</span><br><span class=\"line\">                        id <span class=\"string\">'developer id '</span></span><br><span class=\"line\">                        name <span class=\"string\">'developer name '</span></span><br><span class=\"line\">                        email <span class=\"string\">'developer email'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                scm &#123;</span><br><span class=\"line\">                    connection gitUrl</span><br><span class=\"line\">                    developerConnection gitUrl</span><br><span class=\"line\">                    url siteUrl</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上传到jcenter</span></span><br><span class=\"line\">bintray &#123;</span><br><span class=\"line\">    user = bintrayUser</span><br><span class=\"line\">    key = bintrayKey</span><br><span class=\"line\">    configurations = [<span class=\"string\">'archives'</span>]</span><br><span class=\"line\">    pkg &#123;</span><br><span class=\"line\"><span class=\"comment\">//        userOrg = bintrayUserOrg</span></span><br><span class=\"line\">        repo = bintrayRepo</span><br><span class=\"line\">        name = libName</span><br><span class=\"line\">        desc =  bintrayDesc</span><br><span class=\"line\">        websiteUrl = siteUrl</span><br><span class=\"line\">        vcsUrl = gitUrl</span><br><span class=\"line\">        licenses = [<span class=\"string\">\"Apache-2.0\"</span>]</span><br><span class=\"line\">        publish = <span class=\"keyword\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>local.properties修改</li>\n</ol>\n<p>在这里需要配置下Bintray内的信息</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c93864559?w=988&amp;h=690&amp;f=png&amp;s=59619\" alt=\"local.properties\"></p>\n<p>可以通过如下步骤来获取你的api</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c9eda7f29?w=1760&amp;h=1018&amp;f=png&amp;s=104026\" alt=\"bintary信息\"></p>\n<h3 id=\"上传到Bintray\"><a href=\"#上传到Bintray\" class=\"headerlink\" title=\"上传到Bintray\"></a>上传到Bintray</h3><p>进入项目分别执行以下执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gradlew install</span><br><span class=\"line\">./gradlew bintrayUpload</span><br></pre></td></tr></table></figure>\n<p>成功执行后可以在你的Bintray中看到你刚刚上传的Library</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c9f1e75fc?w=1374&amp;h=875&amp;f=png&amp;s=82740\" alt=\"上传到Bintray成功\"></p>\n<h3 id=\"提交到jCenter\"><a href=\"#提交到jCenter\" class=\"headerlink\" title=\"提交到jCenter\"></a>提交到jCenter</h3><p>可以在页面详情提交到jCenter,不过需要审核才能在默认的情况下引入你的库</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90cb468f38e?w=1315&amp;h=920&amp;f=png&amp;s=108655\" alt=\"提交到jCenter\"></p>\n<p>那么如果不提交到jCenter中就无法使用了么, 当然不会的,在详情页面还有你自己的仓库maven地址和依赖引入地址,你可以把这些内容配置到你的项目中,就可以使用了</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90cba036cc9?w=1014&amp;h=836&amp;f=png&amp;s=82742\" alt=\"本地配置\"></p>\n<p>配置完成后就可以直接引用了</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90cba78a0dd?w=668&amp;h=313&amp;f=png&amp;s=21385\" alt=\"本地引用\"></p>\n<h2 id=\"一顿操作猛如虎-问题总比办法多部分-常见问题\"><a href=\"#一顿操作猛如虎-问题总比办法多部分-常见问题\" class=\"headerlink\" title=\"一顿操作猛如虎, 问题总比办法多部分(常见问题)\"></a>一顿操作猛如虎, 问题总比办法多部分(常见问题)</h2><ol>\n<li><p>Could not create package ‘xxx/xxx/xxx’: HTTP/1.1 404 Not Found [message:Repo ‘xxx’ was not found]</p>\n<p> 解决: 需要先在Bintray建立名为xxx的Repository</p>\n</li>\n<li><p>Could not create version ‘0.1’: HTTP/1.1 401 Unauthorized [message:This resource requires authentication]<br> 解决: 一是local.properties内的名字和api有问题</p>\n<pre><code>二是你注册了组织账号,需要额外配置userOrg(值为你注册时填写的组织名称,或者到Bintray中查看也可以找到)\n</code></pre></li>\n<li>没有dd to JCenter按钮<br> 注册了组织账号, 需要个人账号来</li>\n</ol>\n<h2 id=\"相关代码\"><a href=\"#相关代码\" class=\"headerlink\" title=\"相关代码\"></a>相关代码</h2><p>相关代码可以在<a href=\"https://github.com/clwater/BintrayLibrary\" target=\"_blank\" rel=\"noopener\">我的GitHub</a>找到.</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"如何用最简单的方法发布Android-library到jCenter-Bintray\"><a href=\"#如何用最简单的方法发布Android-library到jCenter-Bintray\" class=\"headerlink\" title=\"如何用最简单的方法发布Android library到jCenter(Bintray)\"></a>如何用最简单的方法发布Android library到jCenter(Bintray)</h1><blockquote>\n<p>最初的想法是做一个很简单基础的网络请求的封装作为一个自己常用的网络库(这是另一个故事了), 在这个故事里, 遇到了很多… 意想不到的问题,在此留作记录,希望可以帮助到大家.</p>\n</blockquote>","more":"<h2 id=\"不想看太多只想简单操作就完事部分\"><a href=\"#不想看太多只想简单操作就完事部分\" class=\"headerlink\" title=\"不想看太多只想简单操作就完事部分\"></a>不想看太多只想简单操作就完事部分</h2><h3 id=\"Bintray-注册-虽然啰嗦-但是这个不提的话很容易遇到问题的\"><a href=\"#Bintray-注册-虽然啰嗦-但是这个不提的话很容易遇到问题的\" class=\"headerlink\" title=\"Bintray 注册(虽然啰嗦, 但是这个不提的话很容易遇到问题的)\"></a>Bintray 注册(虽然啰嗦, 但是这个不提的话很容易遇到问题的)</h3><p><a href=\"https://bintray.com/signup/oss\" target=\"_blank\" rel=\"noopener\">Bintray注册地址: https://bintray.com/signup/oss</a> 注意这里的地址是有带有oss的,是注册的个人账户</p>\n<p>以下是个人注册的页面</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c6675f5ad?w=1548&amp;h=779&amp;f=png&amp;s=65340\" alt=\"Bintray个人账户注册\"></p>\n<p>以下是组织注册的页面,可以看到需要你填写额外的内容</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c67ecd104?w=1662&amp;h=928&amp;f=png&amp;s=109517\" alt=\"Bintray组织账户注册\"></p>\n<p>通过github授权登录就可以了,填写相关的信息就可以了</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c69044a16?w=717&amp;h=520&amp;f=png&amp;s=41099\" alt=\"填写相关信息\"></p>\n<p>在上传之前, 我们要先建立一个Repository</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c69f6fb3b?w=1258&amp;h=967&amp;f=png&amp;s=90977\" alt=\"创建Repository\"></p>\n<p>Type记得要选择Maven</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c6b8fd1a1?w=878&amp;h=739&amp;f=png&amp;s=41020\" alt=\"Repository选择\"></p>\n<p>创建成功后页面显示如下</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c6c64b0cf?w=1317&amp;h=691&amp;f=png&amp;s=80000\" alt=\"创建成功\"></p>\n<!-- ![](https://update-image.oss-cn-shanghai.aliyuncs.com/upImage/20191129225748.png) -->\n<h3 id=\"本地Library-Module修改\"><a href=\"#本地Library-Module修改\" class=\"headerlink\" title=\"本地Library Module修改\"></a>本地Library Module修改</h3><p>本地需要修改下面三个文件</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c90d03fef?w=555&amp;h=521&amp;f=png&amp;s=20896\" alt=\"修改相关\"></p>\n<ol>\n<li>项目的gradle文件 加入下面内容</li>\n</ol>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c9245df7a?w=1102&amp;h=843&amp;f=png&amp;s=73954\" alt=\"项目gradle\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classpath <span class=\"string\">'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'</span></span><br><span class=\"line\">classpath <span class=\"string\">'com.github.dcendents:android-maven-gradle-plugin:2.1'</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>library内的gradle修改</li>\n</ol>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c92b80b91?w=1219&amp;h=812&amp;f=png&amp;s=98191\" alt=\"librarygradle\"></p>\n<p>将下面的内容追加到文件内</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以下内容是将Library上传到Bintray的相关配置</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">'com.github.dcendents.android-maven'</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">'com.jfrog.bintray'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以下是需要针对项目需要修改的配置内容</span></span><br><span class=\"line\"><span class=\"comment\">//发布者的组织名称</span></span><br><span class=\"line\">group = <span class=\"string\">\"com.clwater\"</span></span><br><span class=\"line\"><span class=\"comment\">// 版本号，下次更新是只需要更改版本号即可</span></span><br><span class=\"line\">version = <span class=\"string\">\"0.0.1\"</span></span><br><span class=\"line\"><span class=\"comment\">//上面配置后上传至bintray后的编译路径是这样的： compile 'com.clwater:bintraylibrary:0.0.1'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Properties properties = <span class=\"keyword\">new</span> Properties()</span><br><span class=\"line\">properties.load(project.rootProject.file(<span class=\"string\">'local.properties'</span>).newDataInputStream())</span><br><span class=\"line\"><span class=\"comment\">//读取 local.properties 文件里面的 bintray.user</span></span><br><span class=\"line\">def bintrayUser = properties.getProperty(<span class=\"string\">\"bintray.user\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//读取 local.properties 文件里面的 bintray.apikey</span></span><br><span class=\"line\">def bintrayKey = properties.getProperty(<span class=\"string\">\"bintray.apikey\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//项目主页</span></span><br><span class=\"line\">def siteUrl = <span class=\"string\">'https://github.com/clwater/BintrayLibrary'</span></span><br><span class=\"line\"><span class=\"comment\">//项目的版本控制地址</span></span><br><span class=\"line\">def gitUrl = <span class=\"string\">'https://github.com/clwater/BintrayLibrary.git'</span></span><br><span class=\"line\"><span class=\"comment\">//发布到JCenter上的项目名字，必须填写</span></span><br><span class=\"line\">def libName = <span class=\"string\">\"testlibrary\"</span></span><br><span class=\"line\"><span class=\"comment\">//文档连接</span></span><br><span class=\"line\">def javaDocLinks = <span class=\"string\">\"https://github.com/clwater\"</span></span><br><span class=\"line\"><span class=\"comment\">//Bintray中Repository的名字</span></span><br><span class=\"line\">def bintrayRepo = <span class=\"string\">\"ClwaterRepository\"</span></span><br><span class=\"line\"><span class=\"comment\">//应用的描述</span></span><br><span class=\"line\">def bintrayDesc = <span class=\"string\">\"Desc\"</span></span><br><span class=\"line\"><span class=\"comment\">//组织的名字, 建立组织账号后上传的时候需要这个, 个人张海时候不需要修改这部分</span></span><br><span class=\"line\">def bintrayUserOrg = <span class=\"string\">\"ClwaterRepository\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生成源文件</span></span><br><span class=\"line\"><span class=\"function\">task <span class=\"title\">sourcesJar</span><span class=\"params\">(type: Jar)</span> </span>&#123;</span><br><span class=\"line\">    from android.sourceSets.main.java.srcDirs</span><br><span class=\"line\">    classifier = <span class=\"string\">'sources'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//生成文档</span></span><br><span class=\"line\"><span class=\"function\">task <span class=\"title\">javadoc</span><span class=\"params\">(type: Javadoc)</span> </span>&#123;</span><br><span class=\"line\">    source = android.sourceSets.main.java.srcDirs</span><br><span class=\"line\">    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))</span><br><span class=\"line\">    <span class=\"comment\">//以下两个为项目中带有中文注释的支持</span></span><br><span class=\"line\">    options.encoding <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    options.charSet <span class=\"string\">'UTF-8'</span></span><br><span class=\"line\">    options.author <span class=\"keyword\">true</span></span><br><span class=\"line\">    options.version <span class=\"keyword\">true</span></span><br><span class=\"line\">    options.links javaDocLinks</span><br><span class=\"line\">    failOnError <span class=\"keyword\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//文档打包成jar</span></span><br><span class=\"line\"><span class=\"function\">task <span class=\"title\">javadocJar</span><span class=\"params\">(type: Jar, dependsOn: javadoc)</span> </span>&#123;</span><br><span class=\"line\">    classifier = <span class=\"string\">'javadoc'</span></span><br><span class=\"line\">    from javadoc.destinationDir</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//拷贝javadoc文件</span></span><br><span class=\"line\"><span class=\"function\">task <span class=\"title\">copyDoc</span><span class=\"params\">(type: Copy)</span> </span>&#123;</span><br><span class=\"line\">    from <span class=\"string\">\"$&#123;buildDir&#125;/docs/\"</span></span><br><span class=\"line\">    into <span class=\"string\">\"docs\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上传到jcenter所需要的源码文件</span></span><br><span class=\"line\">artifacts &#123;</span><br><span class=\"line\">    archives javadocJar</span><br><span class=\"line\">    archives sourcesJar</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置maven库，生成POM.xml文件</span></span><br><span class=\"line\">install &#123;</span><br><span class=\"line\">    repositories.mavenInstaller &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This generates POM.xml with proper parameters</span></span><br><span class=\"line\">        pom &#123;</span><br><span class=\"line\">            project &#123;</span><br><span class=\"line\">                packaging <span class=\"string\">'aar'</span></span><br><span class=\"line\">                <span class=\"comment\">//项目名称和描述</span></span><br><span class=\"line\">                name <span class=\"string\">'pom project name'</span></span><br><span class=\"line\">                description <span class=\"string\">'pom project escription'</span></span><br><span class=\"line\">                url siteUrl</span><br><span class=\"line\">                licenses &#123;</span><br><span class=\"line\">                    license &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//开源协议,在bintray中创建仓库时选择的license为Apache-2.0，复制下面的就可以</span></span><br><span class=\"line\">                        name <span class=\"string\">'The Apache Software License, Version 2.0'</span></span><br><span class=\"line\">                        url <span class=\"string\">'http://www.apache.org/licenses/LICENSE-2.0.txt'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                developers &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//开发者的个人信息</span></span><br><span class=\"line\">                    developer &#123;</span><br><span class=\"line\">                        id <span class=\"string\">'developer id '</span></span><br><span class=\"line\">                        name <span class=\"string\">'developer name '</span></span><br><span class=\"line\">                        email <span class=\"string\">'developer email'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                scm &#123;</span><br><span class=\"line\">                    connection gitUrl</span><br><span class=\"line\">                    developerConnection gitUrl</span><br><span class=\"line\">                    url siteUrl</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上传到jcenter</span></span><br><span class=\"line\">bintray &#123;</span><br><span class=\"line\">    user = bintrayUser</span><br><span class=\"line\">    key = bintrayKey</span><br><span class=\"line\">    configurations = [<span class=\"string\">'archives'</span>]</span><br><span class=\"line\">    pkg &#123;</span><br><span class=\"line\"><span class=\"comment\">//        userOrg = bintrayUserOrg</span></span><br><span class=\"line\">        repo = bintrayRepo</span><br><span class=\"line\">        name = libName</span><br><span class=\"line\">        desc =  bintrayDesc</span><br><span class=\"line\">        websiteUrl = siteUrl</span><br><span class=\"line\">        vcsUrl = gitUrl</span><br><span class=\"line\">        licenses = [<span class=\"string\">\"Apache-2.0\"</span>]</span><br><span class=\"line\">        publish = <span class=\"keyword\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>local.properties修改</li>\n</ol>\n<p>在这里需要配置下Bintray内的信息</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c93864559?w=988&amp;h=690&amp;f=png&amp;s=59619\" alt=\"local.properties\"></p>\n<p>可以通过如下步骤来获取你的api</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c9eda7f29?w=1760&amp;h=1018&amp;f=png&amp;s=104026\" alt=\"bintary信息\"></p>\n<h3 id=\"上传到Bintray\"><a href=\"#上传到Bintray\" class=\"headerlink\" title=\"上传到Bintray\"></a>上传到Bintray</h3><p>进入项目分别执行以下执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gradlew install</span><br><span class=\"line\">./gradlew bintrayUpload</span><br></pre></td></tr></table></figure>\n<p>成功执行后可以在你的Bintray中看到你刚刚上传的Library</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90c9f1e75fc?w=1374&amp;h=875&amp;f=png&amp;s=82740\" alt=\"上传到Bintray成功\"></p>\n<h3 id=\"提交到jCenter\"><a href=\"#提交到jCenter\" class=\"headerlink\" title=\"提交到jCenter\"></a>提交到jCenter</h3><p>可以在页面详情提交到jCenter,不过需要审核才能在默认的情况下引入你的库</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90cb468f38e?w=1315&amp;h=920&amp;f=png&amp;s=108655\" alt=\"提交到jCenter\"></p>\n<p>那么如果不提交到jCenter中就无法使用了么, 当然不会的,在详情页面还有你自己的仓库maven地址和依赖引入地址,你可以把这些内容配置到你的项目中,就可以使用了</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90cba036cc9?w=1014&amp;h=836&amp;f=png&amp;s=82742\" alt=\"本地配置\"></p>\n<p>配置完成后就可以直接引用了</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc90cba78a0dd?w=668&amp;h=313&amp;f=png&amp;s=21385\" alt=\"本地引用\"></p>\n<h2 id=\"一顿操作猛如虎-问题总比办法多部分-常见问题\"><a href=\"#一顿操作猛如虎-问题总比办法多部分-常见问题\" class=\"headerlink\" title=\"一顿操作猛如虎, 问题总比办法多部分(常见问题)\"></a>一顿操作猛如虎, 问题总比办法多部分(常见问题)</h2><ol>\n<li><p>Could not create package ‘xxx/xxx/xxx’: HTTP/1.1 404 Not Found [message:Repo ‘xxx’ was not found]</p>\n<p> 解决: 需要先在Bintray建立名为xxx的Repository</p>\n</li>\n<li><p>Could not create version ‘0.1’: HTTP/1.1 401 Unauthorized [message:This resource requires authentication]<br> 解决: 一是local.properties内的名字和api有问题</p>\n<pre><code>二是你注册了组织账号,需要额外配置userOrg(值为你注册时填写的组织名称,或者到Bintray中查看也可以找到)\n</code></pre></li>\n<li>没有dd to JCenter按钮<br> 注册了组织账号, 需要个人账号来</li>\n</ol>\n<h2 id=\"相关代码\"><a href=\"#相关代码\" class=\"headerlink\" title=\"相关代码\"></a>相关代码</h2><p>相关代码可以在<a href=\"https://github.com/clwater/BintrayLibrary\" target=\"_blank\" rel=\"noopener\">我的GitHub</a>找到.</p>"},{"title":"Android 自定义贝塞尔曲线工具","date":"2018-01-26T06:42:31.000Z","_content":"\n# Android 自定义贝塞尔曲线工具\n\n>之前在学习贝塞尔曲线的相关内容,在查找相关资料的时候发现网上的资料重复的太多了,而且因为android的canvas只提供了quadTo,cubicTo两种方法来绘制二阶和三阶的贝塞尔曲线.在线的贝塞尔曲线绘制网站也很少,(在这提供一个[在线贝塞尔曲线](http://gitbug.top/webutils/B%C3%A9zier%20curve/%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7.html)的网站,根据网上的资料整理的),而在android手机中缺没有类似的工具,在设计或者使用贝塞尔曲线的时候增加了很多的工作,刚好在学习相关的知识,就做了一个较为完善的android端的贝塞尔曲线工具.\n\n<!-- more -->\n\n## 贝塞尔曲线\n基本的贝塞尔曲线的知识就不多说了,有兴趣的可以参考下我之后会完成的贝塞尔曲线的记录\n\n其实理解贝塞尔曲线十分容易,可以将其理解为一种递归的形式.根据比例系数计算当前线段中的点,得到所有点之后再按照顺序连接线段,重复以上步骤,直至只剩下一个点,此点就在贝塞尔曲线中,计算各个比例系数下的点,这些点的集合就是贝塞尔曲线.\n\n## 基本功能\n### 绘制常见的贝塞尔曲线\n可以绘制常见的二阶,三阶贝塞尔曲线\n\n![二阶贝塞尔曲线](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/21257830.jpg)\n\n\n### 绘制多阶的贝塞尔曲线\n可以绘制不常见的贝塞尔曲线\n\n![六阶贝塞尔曲线](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/26593287.jpg)\n\n### 开启/关闭辅助线\n可以开启不同颜色层级的辅助线段\n\n![开启关闭辅助线段](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/26642232.jpg)\n\n### 绘制无上限制的贝塞尔曲线\n突破15个关键点的限制 绘制无上限(虽然用处不大 但是开启辅助线后...迷之好玩)\n\n![无限制下不展示辅助线的贝塞尔曲线绘制](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/90938658.jpg)\n\n### 微调关键点绘制新的贝塞尔曲线\n微调关键点来绘制新的贝塞尔曲线\n\n![微调关键点绘制新的贝塞尔曲线](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/68892801.jpg)\n\n### 设置贝塞尔曲线的绘制时间\n设置贝塞尔曲线的绘制时间,绘制时间越长贝塞尔曲线越流畅\n\n![不同时间长度的贝塞尔曲线绘制](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/24247370.jpg)\n\n## 设计过程\n设计了两个自定义view,其中一个自定义view用于收集屏幕的触摸事件,并展示添加的控制点和控制点之间的连线,实现长按屏幕拖动一定范围内最近的点.另一个自定义view用于接收控制点的参数,并根据控制点绘制贝塞尔曲线及辅助信息.\n\n### 贝塞尔曲线绘制层\n通过递归的方法,每一层中绘制当前控制点控制点之间的线段.除了第一层的样式是固定的之外,一定阶数下的辅助线段及控制点都可以被控制是否展示.而当开启无限制模式的时候,当前绘制的贝塞尔曲线的控制点没有上限,但是为了展示的效果当前模式下的辅助线段的样式都是一致的.\n\n### 屏幕触摸事件监测层\n监测屏幕的点击事件,增加控制点,除此之外,在长时间触摸屏幕后还会开启是否需要移动一定范围内最近的点移动到触碰的位置的监测.并能提供当前点的列表用于贝塞尔曲线绘制层绘制贝塞尔曲线绘制层来绘制贝塞尔曲线.\n\n## 代码实现\n\n### 屏幕触摸事件监测层\n\n主要在于对屏幕的触碰事件的监测\n```java\noverride fun onTouchEvent(event: MotionEvent): Boolean {\n\n\n    touchX = event.x\n    touchY = event.y\n    when (event.action) {\n        MotionEvent.ACTION_DOWN -> {\n            toFindChageCounts = true\n            findPointChangeIndex = -1\n            //增加点前点击的点到屏幕中\n            if (controlIndex < maxPoint || isMore == true) {\n                addPoints(BezierCurveView.Point(touchX, touchY))\n            }\n            invalidate()\n        }\n        MotionEvent.ACTION_MOVE ->{\n            checkLevel++\n            //判断当前是否需要检测更换点坐标\n            if (inChangePoint){\n                //判断当前是否长按 用于开始查找附件的点\n                if (touchX == lastPoint.x && touchY == lastPoint.y){\n                    changePoint = true\n                    lastPoint.x = -1F\n                    lastPoint.y = -1F\n                }else{\n                    lastPoint.x = touchX\n                    lastPoint.y = touchY\n                }\n                //开始查找附近的点\n                if (changePoint){\n                    if (toFindChageCounts){\n                        findPointChangeIndex = findNearlyPoint(touchX , touchY)\n                    }\n                }\n\n                //判断是否存在附近的点\n                if (findPointChangeIndex == -1){\n                    if (checkLevel > 1){\n                        changePoint = false\n                    }\n\n                }else{\n                    //更新附近的点的坐标 并重新绘制页面内容\n                    points[findPointChangeIndex].x = touchX\n                    points[findPointChangeIndex].y = touchY\n                    toFindChageCounts = false\n                    invalidate()\n                }\n            }\n\n        }\n        MotionEvent.ACTION_UP ->{\n            checkLevel = -1\n            changePoint = false\n            toFindChageCounts = false\n        }\n\n    }\n    return true\n}\n```\n\n关于最近的点的检测,勾股定理就可以得到了.\n```java\n//判断当前触碰的点附近是否有绘制过的点\nprivate fun findNearlyPoint(touchX: Float, touchY: Float): Int {\n    Log.d(\"bsr\"  , \"touchX: ${touchX} , touchY: ${touchY}\")\n    var index = -1\n    var tempLength = 100000F\n    for (i in 0..points.size - 1){\n        val lengthX = Math.abs(touchX - points[i].x)\n        val lengthY = Math.abs(touchY - points[i].y)\n        val length = Math.sqrt((lengthX * lengthX + lengthY * lengthY).toDouble()).toFloat()\n        if (length < tempLength){\n            tempLength = length\n\n            if (tempLength < minLength){\n                toFindChageCounts = false\n                index = i\n            }\n        }\n    }\n\n    return index\n}\n```\n\n相对来说,主要的难点是屏幕的触碰检测,需要控制时间和是否长安后找到合适的点之后的移动.除此之外就是简单的更加触碰点添加线段就好.\n\n### 贝塞尔曲线绘制层\n主要的贝塞尔曲线是通过递归实现的\n```java\n//通过递归方法绘制贝塞尔曲线\nprivate fun  drawBezier(canvas: Canvas, per: Float, points: MutableList<Point>) {\n\n    val inBase: Boolean\n\n    //判断当前层级是否需要绘制线段\n    if (level == 0 || drawControl){\n        inBase = true\n    }else{\n        inBase = false\n    }\n\n\n    //根据当前层级和是否为无限制模式选择线段及文字的颜色\n    if (isMore){\n        linePaint.color = 0x3F000000\n        textPaint.color = 0x3F000000\n    }else {\n        linePaint.color = colorSequence[level].toInt()\n        textPaint.color = colorSequence[level].toInt()\n    }\n\n    //移动到开始的位置\n    path.moveTo(points[0].x , points[0].y)\n\n    //如果当前只有一个点\n    //根据贝塞尔曲线定义可以得知此点在贝塞尔曲线上\n    //将此点添加到贝塞尔曲线点集中(页面重新绘制后之前绘制的数据会丢失 需要重新回去前段的曲线路径)\n    //将当前点绘制到页面中\n    if (points.size == 1){\n        bezierPoints.add(Point(points[0].x , points[0].y))\n        drawBezierPoint(bezierPoints , canvas)\n        val paint = Paint()\n        paint.strokeWidth = 10F\n        paint.style = Paint.Style.FILL\n        canvas.drawPoint(points[0].x , points[0].y , paint)\n        return\n    }\n\n\n    val nextPoints: MutableList<Point> = ArrayList()\n\n    //更新路径信息\n    //计算下一级控制点的坐标\n    for (index in 1..points.size - 1){\n        path.lineTo(points[index].x , points[index].y)\n\n        val nextPointX = points[index - 1].x -(points[index - 1].x - points[index].x) * per\n        val nextPointY = points[index - 1].y -(points[index - 1].y - points[index].y) * per\n\n        nextPoints.add(Point(nextPointX , nextPointY))\n    }\n\n    //绘制控制点的文本信息\n    if (!(level !=0 && (per==0F || per == 1F) )) {\n        if (inBase) {\n            if (isMore && level != 0){\n                canvas.drawText(\"0:0\", points[0].x, points[0].y, textPaint)\n            }else {\n                canvas.drawText(\"${charSequence[level]}0\", points[0].x, points[0].y, textPaint)\n            }\n            for (index in 1..points.size - 1){\n                if (isMore && level != 0){\n                    canvas.drawText( \"${index}:${index}\" ,points[index].x , points[index].y , textPaint)\n                }else {\n                    canvas.drawText( \"${charSequence[level]}${index}\" ,points[index].x , points[index].y , textPaint)\n                }\n            }\n        }\n    }\n\n    //绘制当前层级\n    if (!(level !=0 && (per==0F || per == 1F) )) {\n        if (inBase) {\n            canvas.drawPath(path, linePaint)\n        }\n    }\n    path.reset()\n\n    //更新层级信息\n    level++\n\n    //绘制下一层\n    drawBezier(canvas, per, nextPoints)\n\n}\n```\n\n除此之外,因为每次计算得到的是贝塞尔曲线的点,所以需要将这些点收集起来,并将之前收集到的所有的点绘制出来\n```java\n//绘制前段贝塞尔曲线部分\nprivate fun  drawBezierPoint(bezierPoints: MutableList<Point> , canvas: Canvas) {\n    val paintBse = Paint()\n    paintBse.color = Color.RED\n    paintBse.strokeWidth = 5F\n    paintBse.style = Paint.Style.STROKE\n\n    val path = Path()\n    path.moveTo(bezierPoints[0].x , bezierPoints[0].y)\n\n    for (index in 1..bezierPoints.size -1){\n        path.lineTo(bezierPoints[index].x , bezierPoints[index].y)\n    }\n\n    canvas.drawPath(path , paintBse)\n\n}\n```\n\n相关的代码可以[访问我的Github](https://github.com/clwater/BezierCurve.git),欢迎大家star或提出建议.\n","source":"_posts/贝塞尔曲线.md","raw":"---\ntitle: Android 自定义贝塞尔曲线工具\ndate: 2018-01-26 14:42:31\ntags: [\"android\" , \"view\" , \"自定义\" , \"贝塞尔曲线\"]\ncategories : \"Android自定义View\"\n---\n\n# Android 自定义贝塞尔曲线工具\n\n>之前在学习贝塞尔曲线的相关内容,在查找相关资料的时候发现网上的资料重复的太多了,而且因为android的canvas只提供了quadTo,cubicTo两种方法来绘制二阶和三阶的贝塞尔曲线.在线的贝塞尔曲线绘制网站也很少,(在这提供一个[在线贝塞尔曲线](http://gitbug.top/webutils/B%C3%A9zier%20curve/%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7.html)的网站,根据网上的资料整理的),而在android手机中缺没有类似的工具,在设计或者使用贝塞尔曲线的时候增加了很多的工作,刚好在学习相关的知识,就做了一个较为完善的android端的贝塞尔曲线工具.\n\n<!-- more -->\n\n## 贝塞尔曲线\n基本的贝塞尔曲线的知识就不多说了,有兴趣的可以参考下我之后会完成的贝塞尔曲线的记录\n\n其实理解贝塞尔曲线十分容易,可以将其理解为一种递归的形式.根据比例系数计算当前线段中的点,得到所有点之后再按照顺序连接线段,重复以上步骤,直至只剩下一个点,此点就在贝塞尔曲线中,计算各个比例系数下的点,这些点的集合就是贝塞尔曲线.\n\n## 基本功能\n### 绘制常见的贝塞尔曲线\n可以绘制常见的二阶,三阶贝塞尔曲线\n\n![二阶贝塞尔曲线](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/21257830.jpg)\n\n\n### 绘制多阶的贝塞尔曲线\n可以绘制不常见的贝塞尔曲线\n\n![六阶贝塞尔曲线](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/26593287.jpg)\n\n### 开启/关闭辅助线\n可以开启不同颜色层级的辅助线段\n\n![开启关闭辅助线段](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/26642232.jpg)\n\n### 绘制无上限制的贝塞尔曲线\n突破15个关键点的限制 绘制无上限(虽然用处不大 但是开启辅助线后...迷之好玩)\n\n![无限制下不展示辅助线的贝塞尔曲线绘制](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/90938658.jpg)\n\n### 微调关键点绘制新的贝塞尔曲线\n微调关键点来绘制新的贝塞尔曲线\n\n![微调关键点绘制新的贝塞尔曲线](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/68892801.jpg)\n\n### 设置贝塞尔曲线的绘制时间\n设置贝塞尔曲线的绘制时间,绘制时间越长贝塞尔曲线越流畅\n\n![不同时间长度的贝塞尔曲线绘制](https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/24247370.jpg)\n\n## 设计过程\n设计了两个自定义view,其中一个自定义view用于收集屏幕的触摸事件,并展示添加的控制点和控制点之间的连线,实现长按屏幕拖动一定范围内最近的点.另一个自定义view用于接收控制点的参数,并根据控制点绘制贝塞尔曲线及辅助信息.\n\n### 贝塞尔曲线绘制层\n通过递归的方法,每一层中绘制当前控制点控制点之间的线段.除了第一层的样式是固定的之外,一定阶数下的辅助线段及控制点都可以被控制是否展示.而当开启无限制模式的时候,当前绘制的贝塞尔曲线的控制点没有上限,但是为了展示的效果当前模式下的辅助线段的样式都是一致的.\n\n### 屏幕触摸事件监测层\n监测屏幕的点击事件,增加控制点,除此之外,在长时间触摸屏幕后还会开启是否需要移动一定范围内最近的点移动到触碰的位置的监测.并能提供当前点的列表用于贝塞尔曲线绘制层绘制贝塞尔曲线绘制层来绘制贝塞尔曲线.\n\n## 代码实现\n\n### 屏幕触摸事件监测层\n\n主要在于对屏幕的触碰事件的监测\n```java\noverride fun onTouchEvent(event: MotionEvent): Boolean {\n\n\n    touchX = event.x\n    touchY = event.y\n    when (event.action) {\n        MotionEvent.ACTION_DOWN -> {\n            toFindChageCounts = true\n            findPointChangeIndex = -1\n            //增加点前点击的点到屏幕中\n            if (controlIndex < maxPoint || isMore == true) {\n                addPoints(BezierCurveView.Point(touchX, touchY))\n            }\n            invalidate()\n        }\n        MotionEvent.ACTION_MOVE ->{\n            checkLevel++\n            //判断当前是否需要检测更换点坐标\n            if (inChangePoint){\n                //判断当前是否长按 用于开始查找附件的点\n                if (touchX == lastPoint.x && touchY == lastPoint.y){\n                    changePoint = true\n                    lastPoint.x = -1F\n                    lastPoint.y = -1F\n                }else{\n                    lastPoint.x = touchX\n                    lastPoint.y = touchY\n                }\n                //开始查找附近的点\n                if (changePoint){\n                    if (toFindChageCounts){\n                        findPointChangeIndex = findNearlyPoint(touchX , touchY)\n                    }\n                }\n\n                //判断是否存在附近的点\n                if (findPointChangeIndex == -1){\n                    if (checkLevel > 1){\n                        changePoint = false\n                    }\n\n                }else{\n                    //更新附近的点的坐标 并重新绘制页面内容\n                    points[findPointChangeIndex].x = touchX\n                    points[findPointChangeIndex].y = touchY\n                    toFindChageCounts = false\n                    invalidate()\n                }\n            }\n\n        }\n        MotionEvent.ACTION_UP ->{\n            checkLevel = -1\n            changePoint = false\n            toFindChageCounts = false\n        }\n\n    }\n    return true\n}\n```\n\n关于最近的点的检测,勾股定理就可以得到了.\n```java\n//判断当前触碰的点附近是否有绘制过的点\nprivate fun findNearlyPoint(touchX: Float, touchY: Float): Int {\n    Log.d(\"bsr\"  , \"touchX: ${touchX} , touchY: ${touchY}\")\n    var index = -1\n    var tempLength = 100000F\n    for (i in 0..points.size - 1){\n        val lengthX = Math.abs(touchX - points[i].x)\n        val lengthY = Math.abs(touchY - points[i].y)\n        val length = Math.sqrt((lengthX * lengthX + lengthY * lengthY).toDouble()).toFloat()\n        if (length < tempLength){\n            tempLength = length\n\n            if (tempLength < minLength){\n                toFindChageCounts = false\n                index = i\n            }\n        }\n    }\n\n    return index\n}\n```\n\n相对来说,主要的难点是屏幕的触碰检测,需要控制时间和是否长安后找到合适的点之后的移动.除此之外就是简单的更加触碰点添加线段就好.\n\n### 贝塞尔曲线绘制层\n主要的贝塞尔曲线是通过递归实现的\n```java\n//通过递归方法绘制贝塞尔曲线\nprivate fun  drawBezier(canvas: Canvas, per: Float, points: MutableList<Point>) {\n\n    val inBase: Boolean\n\n    //判断当前层级是否需要绘制线段\n    if (level == 0 || drawControl){\n        inBase = true\n    }else{\n        inBase = false\n    }\n\n\n    //根据当前层级和是否为无限制模式选择线段及文字的颜色\n    if (isMore){\n        linePaint.color = 0x3F000000\n        textPaint.color = 0x3F000000\n    }else {\n        linePaint.color = colorSequence[level].toInt()\n        textPaint.color = colorSequence[level].toInt()\n    }\n\n    //移动到开始的位置\n    path.moveTo(points[0].x , points[0].y)\n\n    //如果当前只有一个点\n    //根据贝塞尔曲线定义可以得知此点在贝塞尔曲线上\n    //将此点添加到贝塞尔曲线点集中(页面重新绘制后之前绘制的数据会丢失 需要重新回去前段的曲线路径)\n    //将当前点绘制到页面中\n    if (points.size == 1){\n        bezierPoints.add(Point(points[0].x , points[0].y))\n        drawBezierPoint(bezierPoints , canvas)\n        val paint = Paint()\n        paint.strokeWidth = 10F\n        paint.style = Paint.Style.FILL\n        canvas.drawPoint(points[0].x , points[0].y , paint)\n        return\n    }\n\n\n    val nextPoints: MutableList<Point> = ArrayList()\n\n    //更新路径信息\n    //计算下一级控制点的坐标\n    for (index in 1..points.size - 1){\n        path.lineTo(points[index].x , points[index].y)\n\n        val nextPointX = points[index - 1].x -(points[index - 1].x - points[index].x) * per\n        val nextPointY = points[index - 1].y -(points[index - 1].y - points[index].y) * per\n\n        nextPoints.add(Point(nextPointX , nextPointY))\n    }\n\n    //绘制控制点的文本信息\n    if (!(level !=0 && (per==0F || per == 1F) )) {\n        if (inBase) {\n            if (isMore && level != 0){\n                canvas.drawText(\"0:0\", points[0].x, points[0].y, textPaint)\n            }else {\n                canvas.drawText(\"${charSequence[level]}0\", points[0].x, points[0].y, textPaint)\n            }\n            for (index in 1..points.size - 1){\n                if (isMore && level != 0){\n                    canvas.drawText( \"${index}:${index}\" ,points[index].x , points[index].y , textPaint)\n                }else {\n                    canvas.drawText( \"${charSequence[level]}${index}\" ,points[index].x , points[index].y , textPaint)\n                }\n            }\n        }\n    }\n\n    //绘制当前层级\n    if (!(level !=0 && (per==0F || per == 1F) )) {\n        if (inBase) {\n            canvas.drawPath(path, linePaint)\n        }\n    }\n    path.reset()\n\n    //更新层级信息\n    level++\n\n    //绘制下一层\n    drawBezier(canvas, per, nextPoints)\n\n}\n```\n\n除此之外,因为每次计算得到的是贝塞尔曲线的点,所以需要将这些点收集起来,并将之前收集到的所有的点绘制出来\n```java\n//绘制前段贝塞尔曲线部分\nprivate fun  drawBezierPoint(bezierPoints: MutableList<Point> , canvas: Canvas) {\n    val paintBse = Paint()\n    paintBse.color = Color.RED\n    paintBse.strokeWidth = 5F\n    paintBse.style = Paint.Style.STROKE\n\n    val path = Path()\n    path.moveTo(bezierPoints[0].x , bezierPoints[0].y)\n\n    for (index in 1..bezierPoints.size -1){\n        path.lineTo(bezierPoints[index].x , bezierPoints[index].y)\n    }\n\n    canvas.drawPath(path , paintBse)\n\n}\n```\n\n相关的代码可以[访问我的Github](https://github.com/clwater/BezierCurve.git),欢迎大家star或提出建议.\n","slug":"贝塞尔曲线","published":1,"updated":"2020-03-13T09:33:05.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5ea0019q7dqvqqwal6x","content":"<h1 id=\"Android-自定义贝塞尔曲线工具\"><a href=\"#Android-自定义贝塞尔曲线工具\" class=\"headerlink\" title=\"Android 自定义贝塞尔曲线工具\"></a>Android 自定义贝塞尔曲线工具</h1><blockquote>\n<p>之前在学习贝塞尔曲线的相关内容,在查找相关资料的时候发现网上的资料重复的太多了,而且因为android的canvas只提供了quadTo,cubicTo两种方法来绘制二阶和三阶的贝塞尔曲线.在线的贝塞尔曲线绘制网站也很少,(在这提供一个<a href=\"http://gitbug.top/webutils/B%C3%A9zier%20curve/%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7.html\" target=\"_blank\" rel=\"noopener\">在线贝塞尔曲线</a>的网站,根据网上的资料整理的),而在android手机中缺没有类似的工具,在设计或者使用贝塞尔曲线的时候增加了很多的工作,刚好在学习相关的知识,就做了一个较为完善的android端的贝塞尔曲线工具.</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"贝塞尔曲线\"><a href=\"#贝塞尔曲线\" class=\"headerlink\" title=\"贝塞尔曲线\"></a>贝塞尔曲线</h2><p>基本的贝塞尔曲线的知识就不多说了,有兴趣的可以参考下我之后会完成的贝塞尔曲线的记录</p>\n<p>其实理解贝塞尔曲线十分容易,可以将其理解为一种递归的形式.根据比例系数计算当前线段中的点,得到所有点之后再按照顺序连接线段,重复以上步骤,直至只剩下一个点,此点就在贝塞尔曲线中,计算各个比例系数下的点,这些点的集合就是贝塞尔曲线.</p>\n<h2 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h2><h3 id=\"绘制常见的贝塞尔曲线\"><a href=\"#绘制常见的贝塞尔曲线\" class=\"headerlink\" title=\"绘制常见的贝塞尔曲线\"></a>绘制常见的贝塞尔曲线</h3><p>可以绘制常见的二阶,三阶贝塞尔曲线</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/21257830.jpg\" alt=\"二阶贝塞尔曲线\"></p>\n<h3 id=\"绘制多阶的贝塞尔曲线\"><a href=\"#绘制多阶的贝塞尔曲线\" class=\"headerlink\" title=\"绘制多阶的贝塞尔曲线\"></a>绘制多阶的贝塞尔曲线</h3><p>可以绘制不常见的贝塞尔曲线</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/26593287.jpg\" alt=\"六阶贝塞尔曲线\"></p>\n<h3 id=\"开启-关闭辅助线\"><a href=\"#开启-关闭辅助线\" class=\"headerlink\" title=\"开启/关闭辅助线\"></a>开启/关闭辅助线</h3><p>可以开启不同颜色层级的辅助线段</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/26642232.jpg\" alt=\"开启关闭辅助线段\"></p>\n<h3 id=\"绘制无上限制的贝塞尔曲线\"><a href=\"#绘制无上限制的贝塞尔曲线\" class=\"headerlink\" title=\"绘制无上限制的贝塞尔曲线\"></a>绘制无上限制的贝塞尔曲线</h3><p>突破15个关键点的限制 绘制无上限(虽然用处不大 但是开启辅助线后…迷之好玩)</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/90938658.jpg\" alt=\"无限制下不展示辅助线的贝塞尔曲线绘制\"></p>\n<h3 id=\"微调关键点绘制新的贝塞尔曲线\"><a href=\"#微调关键点绘制新的贝塞尔曲线\" class=\"headerlink\" title=\"微调关键点绘制新的贝塞尔曲线\"></a>微调关键点绘制新的贝塞尔曲线</h3><p>微调关键点来绘制新的贝塞尔曲线</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/68892801.jpg\" alt=\"微调关键点绘制新的贝塞尔曲线\"></p>\n<h3 id=\"设置贝塞尔曲线的绘制时间\"><a href=\"#设置贝塞尔曲线的绘制时间\" class=\"headerlink\" title=\"设置贝塞尔曲线的绘制时间\"></a>设置贝塞尔曲线的绘制时间</h3><p>设置贝塞尔曲线的绘制时间,绘制时间越长贝塞尔曲线越流畅</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/24247370.jpg\" alt=\"不同时间长度的贝塞尔曲线绘制\"></p>\n<h2 id=\"设计过程\"><a href=\"#设计过程\" class=\"headerlink\" title=\"设计过程\"></a>设计过程</h2><p>设计了两个自定义view,其中一个自定义view用于收集屏幕的触摸事件,并展示添加的控制点和控制点之间的连线,实现长按屏幕拖动一定范围内最近的点.另一个自定义view用于接收控制点的参数,并根据控制点绘制贝塞尔曲线及辅助信息.</p>\n<h3 id=\"贝塞尔曲线绘制层\"><a href=\"#贝塞尔曲线绘制层\" class=\"headerlink\" title=\"贝塞尔曲线绘制层\"></a>贝塞尔曲线绘制层</h3><p>通过递归的方法,每一层中绘制当前控制点控制点之间的线段.除了第一层的样式是固定的之外,一定阶数下的辅助线段及控制点都可以被控制是否展示.而当开启无限制模式的时候,当前绘制的贝塞尔曲线的控制点没有上限,但是为了展示的效果当前模式下的辅助线段的样式都是一致的.</p>\n<h3 id=\"屏幕触摸事件监测层\"><a href=\"#屏幕触摸事件监测层\" class=\"headerlink\" title=\"屏幕触摸事件监测层\"></a>屏幕触摸事件监测层</h3><p>监测屏幕的点击事件,增加控制点,除此之外,在长时间触摸屏幕后还会开启是否需要移动一定范围内最近的点移动到触碰的位置的监测.并能提供当前点的列表用于贝塞尔曲线绘制层绘制贝塞尔曲线绘制层来绘制贝塞尔曲线.</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"屏幕触摸事件监测层-1\"><a href=\"#屏幕触摸事件监测层-1\" class=\"headerlink\" title=\"屏幕触摸事件监测层\"></a>屏幕触摸事件监测层</h3><p>主要在于对屏幕的触碰事件的监测<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">override fun <span class=\"title\">onTouchEvent</span><span class=\"params\">(event: MotionEvent)</span>: Boolean </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    touchX = event.x</span><br><span class=\"line\">    touchY = event.y</span><br><span class=\"line\">    when (event.action) &#123;</span><br><span class=\"line\">        MotionEvent.ACTION_DOWN -&gt; &#123;</span><br><span class=\"line\">            toFindChageCounts = <span class=\"keyword\">true</span></span><br><span class=\"line\">            findPointChangeIndex = -<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"comment\">//增加点前点击的点到屏幕中</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (controlIndex &lt; maxPoint || isMore == <span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                addPoints(BezierCurveView.Point(touchX, touchY))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            invalidate()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        MotionEvent.ACTION_MOVE -&gt;&#123;</span><br><span class=\"line\">            checkLevel++</span><br><span class=\"line\">            <span class=\"comment\">//判断当前是否需要检测更换点坐标</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inChangePoint)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断当前是否长按 用于开始查找附件的点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (touchX == lastPoint.x &amp;&amp; touchY == lastPoint.y)&#123;</span><br><span class=\"line\">                    changePoint = <span class=\"keyword\">true</span></span><br><span class=\"line\">                    lastPoint.x = -<span class=\"number\">1F</span></span><br><span class=\"line\">                    lastPoint.y = -<span class=\"number\">1F</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    lastPoint.x = touchX</span><br><span class=\"line\">                    lastPoint.y = touchY</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//开始查找附近的点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (changePoint)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (toFindChageCounts)&#123;</span><br><span class=\"line\">                        findPointChangeIndex = findNearlyPoint(touchX , touchY)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//判断是否存在附近的点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (findPointChangeIndex == -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (checkLevel &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                        changePoint = <span class=\"keyword\">false</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//更新附近的点的坐标 并重新绘制页面内容</span></span><br><span class=\"line\">                    points[findPointChangeIndex].x = touchX</span><br><span class=\"line\">                    points[findPointChangeIndex].y = touchY</span><br><span class=\"line\">                    toFindChageCounts = <span class=\"keyword\">false</span></span><br><span class=\"line\">                    invalidate()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        MotionEvent.ACTION_UP -&gt;&#123;</span><br><span class=\"line\">            checkLevel = -<span class=\"number\">1</span></span><br><span class=\"line\">            changePoint = <span class=\"keyword\">false</span></span><br><span class=\"line\">            toFindChageCounts = <span class=\"keyword\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>关于最近的点的检测,勾股定理就可以得到了.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断当前触碰的点附近是否有绘制过的点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">findNearlyPoint</span><span class=\"params\">(touchX: Float, touchY: Float)</span>: Int </span>&#123;</span><br><span class=\"line\">    Log.d(<span class=\"string\">\"bsr\"</span>  , <span class=\"string\">\"touchX: $&#123;touchX&#125; , touchY: $&#123;touchY&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tempLength = <span class=\"number\">100000F</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i in <span class=\"number\">0</span>..points.size - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        val lengthX = Math.abs(touchX - points[i].x)</span><br><span class=\"line\">        val lengthY = Math.abs(touchY - points[i].y)</span><br><span class=\"line\">        val length = Math.sqrt((lengthX * lengthX + lengthY * lengthY).toDouble()).toFloat()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (length &lt; tempLength)&#123;</span><br><span class=\"line\">            tempLength = length</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tempLength &lt; minLength)&#123;</span><br><span class=\"line\">                toFindChageCounts = <span class=\"keyword\">false</span></span><br><span class=\"line\">                index = i</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> index</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>相对来说,主要的难点是屏幕的触碰检测,需要控制时间和是否长安后找到合适的点之后的移动.除此之外就是简单的更加触碰点添加线段就好.</p>\n<h3 id=\"贝塞尔曲线绘制层-1\"><a href=\"#贝塞尔曲线绘制层-1\" class=\"headerlink\" title=\"贝塞尔曲线绘制层\"></a>贝塞尔曲线绘制层</h3><p>主要的贝塞尔曲线是通过递归实现的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过递归方法绘制贝塞尔曲线</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun  <span class=\"title\">drawBezier</span><span class=\"params\">(canvas: Canvas, per: Float, points: MutableList&lt;Point&gt;)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    val inBase: Boolean</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断当前层级是否需要绘制线段</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (level == <span class=\"number\">0</span> || drawControl)&#123;</span><br><span class=\"line\">        inBase = <span class=\"keyword\">true</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        inBase = <span class=\"keyword\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据当前层级和是否为无限制模式选择线段及文字的颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isMore)&#123;</span><br><span class=\"line\">        linePaint.color = <span class=\"number\">0x3F000000</span></span><br><span class=\"line\">        textPaint.color = <span class=\"number\">0x3F000000</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        linePaint.color = colorSequence[level].toInt()</span><br><span class=\"line\">        textPaint.color = colorSequence[level].toInt()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//移动到开始的位置</span></span><br><span class=\"line\">    path.moveTo(points[<span class=\"number\">0</span>].x , points[<span class=\"number\">0</span>].y)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果当前只有一个点</span></span><br><span class=\"line\">    <span class=\"comment\">//根据贝塞尔曲线定义可以得知此点在贝塞尔曲线上</span></span><br><span class=\"line\">    <span class=\"comment\">//将此点添加到贝塞尔曲线点集中(页面重新绘制后之前绘制的数据会丢失 需要重新回去前段的曲线路径)</span></span><br><span class=\"line\">    <span class=\"comment\">//将当前点绘制到页面中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (points.size == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        bezierPoints.add(Point(points[<span class=\"number\">0</span>].x , points[<span class=\"number\">0</span>].y))</span><br><span class=\"line\">        drawBezierPoint(bezierPoints , canvas)</span><br><span class=\"line\">        val paint = Paint()</span><br><span class=\"line\">        paint.strokeWidth = <span class=\"number\">10F</span></span><br><span class=\"line\">        paint.style = Paint.Style.FILL</span><br><span class=\"line\">        canvas.drawPoint(points[<span class=\"number\">0</span>].x , points[<span class=\"number\">0</span>].y , paint)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    val nextPoints: MutableList&lt;Point&gt; = ArrayList()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//更新路径信息</span></span><br><span class=\"line\">    <span class=\"comment\">//计算下一级控制点的坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (index in <span class=\"number\">1</span>..points.size - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        path.lineTo(points[index].x , points[index].y)</span><br><span class=\"line\"></span><br><span class=\"line\">        val nextPointX = points[index - <span class=\"number\">1</span>].x -(points[index - <span class=\"number\">1</span>].x - points[index].x) * per</span><br><span class=\"line\">        val nextPointY = points[index - <span class=\"number\">1</span>].y -(points[index - <span class=\"number\">1</span>].y - points[index].y) * per</span><br><span class=\"line\"></span><br><span class=\"line\">        nextPoints.add(Point(nextPointX , nextPointY))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制控制点的文本信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(level !=<span class=\"number\">0</span> &amp;&amp; (per==<span class=\"number\">0F</span> || per == <span class=\"number\">1F</span>) )) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inBase) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isMore &amp;&amp; level != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                canvas.drawText(<span class=\"string\">\"0:0\"</span>, points[<span class=\"number\">0</span>].x, points[<span class=\"number\">0</span>].y, textPaint)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                canvas.drawText(<span class=\"string\">\"$&#123;charSequence[level]&#125;0\"</span>, points[<span class=\"number\">0</span>].x, points[<span class=\"number\">0</span>].y, textPaint)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (index in <span class=\"number\">1</span>..points.size - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isMore &amp;&amp; level != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    canvas.drawText( <span class=\"string\">\"$&#123;index&#125;:$&#123;index&#125;\"</span> ,points[index].x , points[index].y , textPaint)</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    canvas.drawText( <span class=\"string\">\"$&#123;charSequence[level]&#125;$&#123;index&#125;\"</span> ,points[index].x , points[index].y , textPaint)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制当前层级</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(level !=<span class=\"number\">0</span> &amp;&amp; (per==<span class=\"number\">0F</span> || per == <span class=\"number\">1F</span>) )) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inBase) &#123;</span><br><span class=\"line\">            canvas.drawPath(path, linePaint)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    path.reset()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//更新层级信息</span></span><br><span class=\"line\">    level++</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制下一层</span></span><br><span class=\"line\">    drawBezier(canvas, per, nextPoints)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>除此之外,因为每次计算得到的是贝塞尔曲线的点,所以需要将这些点收集起来,并将之前收集到的所有的点绘制出来<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//绘制前段贝塞尔曲线部分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun  <span class=\"title\">drawBezierPoint</span><span class=\"params\">(bezierPoints: MutableList&lt;Point&gt; , canvas: Canvas)</span> </span>&#123;</span><br><span class=\"line\">    val paintBse = Paint()</span><br><span class=\"line\">    paintBse.color = Color.RED</span><br><span class=\"line\">    paintBse.strokeWidth = <span class=\"number\">5F</span></span><br><span class=\"line\">    paintBse.style = Paint.Style.STROKE</span><br><span class=\"line\"></span><br><span class=\"line\">    val path = Path()</span><br><span class=\"line\">    path.moveTo(bezierPoints[<span class=\"number\">0</span>].x , bezierPoints[<span class=\"number\">0</span>].y)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (index in <span class=\"number\">1</span>..bezierPoints.size -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        path.lineTo(bezierPoints[index].x , bezierPoints[index].y)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.drawPath(path , paintBse)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>相关的代码可以<a href=\"https://github.com/clwater/BezierCurve.git\" target=\"_blank\" rel=\"noopener\">访问我的Github</a>,欢迎大家star或提出建议.</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Android-自定义贝塞尔曲线工具\"><a href=\"#Android-自定义贝塞尔曲线工具\" class=\"headerlink\" title=\"Android 自定义贝塞尔曲线工具\"></a>Android 自定义贝塞尔曲线工具</h1><blockquote>\n<p>之前在学习贝塞尔曲线的相关内容,在查找相关资料的时候发现网上的资料重复的太多了,而且因为android的canvas只提供了quadTo,cubicTo两种方法来绘制二阶和三阶的贝塞尔曲线.在线的贝塞尔曲线绘制网站也很少,(在这提供一个<a href=\"http://gitbug.top/webutils/B%C3%A9zier%20curve/%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7.html\" target=\"_blank\" rel=\"noopener\">在线贝塞尔曲线</a>的网站,根据网上的资料整理的),而在android手机中缺没有类似的工具,在设计或者使用贝塞尔曲线的时候增加了很多的工作,刚好在学习相关的知识,就做了一个较为完善的android端的贝塞尔曲线工具.</p>\n</blockquote>","more":"<h2 id=\"贝塞尔曲线\"><a href=\"#贝塞尔曲线\" class=\"headerlink\" title=\"贝塞尔曲线\"></a>贝塞尔曲线</h2><p>基本的贝塞尔曲线的知识就不多说了,有兴趣的可以参考下我之后会完成的贝塞尔曲线的记录</p>\n<p>其实理解贝塞尔曲线十分容易,可以将其理解为一种递归的形式.根据比例系数计算当前线段中的点,得到所有点之后再按照顺序连接线段,重复以上步骤,直至只剩下一个点,此点就在贝塞尔曲线中,计算各个比例系数下的点,这些点的集合就是贝塞尔曲线.</p>\n<h2 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h2><h3 id=\"绘制常见的贝塞尔曲线\"><a href=\"#绘制常见的贝塞尔曲线\" class=\"headerlink\" title=\"绘制常见的贝塞尔曲线\"></a>绘制常见的贝塞尔曲线</h3><p>可以绘制常见的二阶,三阶贝塞尔曲线</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/21257830.jpg\" alt=\"二阶贝塞尔曲线\"></p>\n<h3 id=\"绘制多阶的贝塞尔曲线\"><a href=\"#绘制多阶的贝塞尔曲线\" class=\"headerlink\" title=\"绘制多阶的贝塞尔曲线\"></a>绘制多阶的贝塞尔曲线</h3><p>可以绘制不常见的贝塞尔曲线</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/26593287.jpg\" alt=\"六阶贝塞尔曲线\"></p>\n<h3 id=\"开启-关闭辅助线\"><a href=\"#开启-关闭辅助线\" class=\"headerlink\" title=\"开启/关闭辅助线\"></a>开启/关闭辅助线</h3><p>可以开启不同颜色层级的辅助线段</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/26642232.jpg\" alt=\"开启关闭辅助线段\"></p>\n<h3 id=\"绘制无上限制的贝塞尔曲线\"><a href=\"#绘制无上限制的贝塞尔曲线\" class=\"headerlink\" title=\"绘制无上限制的贝塞尔曲线\"></a>绘制无上限制的贝塞尔曲线</h3><p>突破15个关键点的限制 绘制无上限(虽然用处不大 但是开启辅助线后…迷之好玩)</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/90938658.jpg\" alt=\"无限制下不展示辅助线的贝塞尔曲线绘制\"></p>\n<h3 id=\"微调关键点绘制新的贝塞尔曲线\"><a href=\"#微调关键点绘制新的贝塞尔曲线\" class=\"headerlink\" title=\"微调关键点绘制新的贝塞尔曲线\"></a>微调关键点绘制新的贝塞尔曲线</h3><p>微调关键点来绘制新的贝塞尔曲线</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/68892801.jpg\" alt=\"微调关键点绘制新的贝塞尔曲线\"></p>\n<h3 id=\"设置贝塞尔曲线的绘制时间\"><a href=\"#设置贝塞尔曲线的绘制时间\" class=\"headerlink\" title=\"设置贝塞尔曲线的绘制时间\"></a>设置贝塞尔曲线的绘制时间</h3><p>设置贝塞尔曲线的绘制时间,绘制时间越长贝塞尔曲线越流畅</p>\n<p><img src=\"https://qiniu-ali-oss.oss-cn-hangzhou.aliyuncs.com/qiniuold/24247370.jpg\" alt=\"不同时间长度的贝塞尔曲线绘制\"></p>\n<h2 id=\"设计过程\"><a href=\"#设计过程\" class=\"headerlink\" title=\"设计过程\"></a>设计过程</h2><p>设计了两个自定义view,其中一个自定义view用于收集屏幕的触摸事件,并展示添加的控制点和控制点之间的连线,实现长按屏幕拖动一定范围内最近的点.另一个自定义view用于接收控制点的参数,并根据控制点绘制贝塞尔曲线及辅助信息.</p>\n<h3 id=\"贝塞尔曲线绘制层\"><a href=\"#贝塞尔曲线绘制层\" class=\"headerlink\" title=\"贝塞尔曲线绘制层\"></a>贝塞尔曲线绘制层</h3><p>通过递归的方法,每一层中绘制当前控制点控制点之间的线段.除了第一层的样式是固定的之外,一定阶数下的辅助线段及控制点都可以被控制是否展示.而当开启无限制模式的时候,当前绘制的贝塞尔曲线的控制点没有上限,但是为了展示的效果当前模式下的辅助线段的样式都是一致的.</p>\n<h3 id=\"屏幕触摸事件监测层\"><a href=\"#屏幕触摸事件监测层\" class=\"headerlink\" title=\"屏幕触摸事件监测层\"></a>屏幕触摸事件监测层</h3><p>监测屏幕的点击事件,增加控制点,除此之外,在长时间触摸屏幕后还会开启是否需要移动一定范围内最近的点移动到触碰的位置的监测.并能提供当前点的列表用于贝塞尔曲线绘制层绘制贝塞尔曲线绘制层来绘制贝塞尔曲线.</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"屏幕触摸事件监测层-1\"><a href=\"#屏幕触摸事件监测层-1\" class=\"headerlink\" title=\"屏幕触摸事件监测层\"></a>屏幕触摸事件监测层</h3><p>主要在于对屏幕的触碰事件的监测<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">override fun <span class=\"title\">onTouchEvent</span><span class=\"params\">(event: MotionEvent)</span>: Boolean </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    touchX = event.x</span><br><span class=\"line\">    touchY = event.y</span><br><span class=\"line\">    when (event.action) &#123;</span><br><span class=\"line\">        MotionEvent.ACTION_DOWN -&gt; &#123;</span><br><span class=\"line\">            toFindChageCounts = <span class=\"keyword\">true</span></span><br><span class=\"line\">            findPointChangeIndex = -<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"comment\">//增加点前点击的点到屏幕中</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (controlIndex &lt; maxPoint || isMore == <span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                addPoints(BezierCurveView.Point(touchX, touchY))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            invalidate()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        MotionEvent.ACTION_MOVE -&gt;&#123;</span><br><span class=\"line\">            checkLevel++</span><br><span class=\"line\">            <span class=\"comment\">//判断当前是否需要检测更换点坐标</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inChangePoint)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断当前是否长按 用于开始查找附件的点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (touchX == lastPoint.x &amp;&amp; touchY == lastPoint.y)&#123;</span><br><span class=\"line\">                    changePoint = <span class=\"keyword\">true</span></span><br><span class=\"line\">                    lastPoint.x = -<span class=\"number\">1F</span></span><br><span class=\"line\">                    lastPoint.y = -<span class=\"number\">1F</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    lastPoint.x = touchX</span><br><span class=\"line\">                    lastPoint.y = touchY</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//开始查找附近的点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (changePoint)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (toFindChageCounts)&#123;</span><br><span class=\"line\">                        findPointChangeIndex = findNearlyPoint(touchX , touchY)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//判断是否存在附近的点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (findPointChangeIndex == -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (checkLevel &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                        changePoint = <span class=\"keyword\">false</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//更新附近的点的坐标 并重新绘制页面内容</span></span><br><span class=\"line\">                    points[findPointChangeIndex].x = touchX</span><br><span class=\"line\">                    points[findPointChangeIndex].y = touchY</span><br><span class=\"line\">                    toFindChageCounts = <span class=\"keyword\">false</span></span><br><span class=\"line\">                    invalidate()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        MotionEvent.ACTION_UP -&gt;&#123;</span><br><span class=\"line\">            checkLevel = -<span class=\"number\">1</span></span><br><span class=\"line\">            changePoint = <span class=\"keyword\">false</span></span><br><span class=\"line\">            toFindChageCounts = <span class=\"keyword\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>关于最近的点的检测,勾股定理就可以得到了.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断当前触碰的点附近是否有绘制过的点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">findNearlyPoint</span><span class=\"params\">(touchX: Float, touchY: Float)</span>: Int </span>&#123;</span><br><span class=\"line\">    Log.d(<span class=\"string\">\"bsr\"</span>  , <span class=\"string\">\"touchX: $&#123;touchX&#125; , touchY: $&#123;touchY&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tempLength = <span class=\"number\">100000F</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i in <span class=\"number\">0</span>..points.size - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        val lengthX = Math.abs(touchX - points[i].x)</span><br><span class=\"line\">        val lengthY = Math.abs(touchY - points[i].y)</span><br><span class=\"line\">        val length = Math.sqrt((lengthX * lengthX + lengthY * lengthY).toDouble()).toFloat()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (length &lt; tempLength)&#123;</span><br><span class=\"line\">            tempLength = length</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tempLength &lt; minLength)&#123;</span><br><span class=\"line\">                toFindChageCounts = <span class=\"keyword\">false</span></span><br><span class=\"line\">                index = i</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> index</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>相对来说,主要的难点是屏幕的触碰检测,需要控制时间和是否长安后找到合适的点之后的移动.除此之外就是简单的更加触碰点添加线段就好.</p>\n<h3 id=\"贝塞尔曲线绘制层-1\"><a href=\"#贝塞尔曲线绘制层-1\" class=\"headerlink\" title=\"贝塞尔曲线绘制层\"></a>贝塞尔曲线绘制层</h3><p>主要的贝塞尔曲线是通过递归实现的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过递归方法绘制贝塞尔曲线</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun  <span class=\"title\">drawBezier</span><span class=\"params\">(canvas: Canvas, per: Float, points: MutableList&lt;Point&gt;)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    val inBase: Boolean</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断当前层级是否需要绘制线段</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (level == <span class=\"number\">0</span> || drawControl)&#123;</span><br><span class=\"line\">        inBase = <span class=\"keyword\">true</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        inBase = <span class=\"keyword\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据当前层级和是否为无限制模式选择线段及文字的颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isMore)&#123;</span><br><span class=\"line\">        linePaint.color = <span class=\"number\">0x3F000000</span></span><br><span class=\"line\">        textPaint.color = <span class=\"number\">0x3F000000</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        linePaint.color = colorSequence[level].toInt()</span><br><span class=\"line\">        textPaint.color = colorSequence[level].toInt()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//移动到开始的位置</span></span><br><span class=\"line\">    path.moveTo(points[<span class=\"number\">0</span>].x , points[<span class=\"number\">0</span>].y)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果当前只有一个点</span></span><br><span class=\"line\">    <span class=\"comment\">//根据贝塞尔曲线定义可以得知此点在贝塞尔曲线上</span></span><br><span class=\"line\">    <span class=\"comment\">//将此点添加到贝塞尔曲线点集中(页面重新绘制后之前绘制的数据会丢失 需要重新回去前段的曲线路径)</span></span><br><span class=\"line\">    <span class=\"comment\">//将当前点绘制到页面中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (points.size == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        bezierPoints.add(Point(points[<span class=\"number\">0</span>].x , points[<span class=\"number\">0</span>].y))</span><br><span class=\"line\">        drawBezierPoint(bezierPoints , canvas)</span><br><span class=\"line\">        val paint = Paint()</span><br><span class=\"line\">        paint.strokeWidth = <span class=\"number\">10F</span></span><br><span class=\"line\">        paint.style = Paint.Style.FILL</span><br><span class=\"line\">        canvas.drawPoint(points[<span class=\"number\">0</span>].x , points[<span class=\"number\">0</span>].y , paint)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    val nextPoints: MutableList&lt;Point&gt; = ArrayList()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//更新路径信息</span></span><br><span class=\"line\">    <span class=\"comment\">//计算下一级控制点的坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (index in <span class=\"number\">1</span>..points.size - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        path.lineTo(points[index].x , points[index].y)</span><br><span class=\"line\"></span><br><span class=\"line\">        val nextPointX = points[index - <span class=\"number\">1</span>].x -(points[index - <span class=\"number\">1</span>].x - points[index].x) * per</span><br><span class=\"line\">        val nextPointY = points[index - <span class=\"number\">1</span>].y -(points[index - <span class=\"number\">1</span>].y - points[index].y) * per</span><br><span class=\"line\"></span><br><span class=\"line\">        nextPoints.add(Point(nextPointX , nextPointY))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制控制点的文本信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(level !=<span class=\"number\">0</span> &amp;&amp; (per==<span class=\"number\">0F</span> || per == <span class=\"number\">1F</span>) )) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inBase) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isMore &amp;&amp; level != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                canvas.drawText(<span class=\"string\">\"0:0\"</span>, points[<span class=\"number\">0</span>].x, points[<span class=\"number\">0</span>].y, textPaint)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                canvas.drawText(<span class=\"string\">\"$&#123;charSequence[level]&#125;0\"</span>, points[<span class=\"number\">0</span>].x, points[<span class=\"number\">0</span>].y, textPaint)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (index in <span class=\"number\">1</span>..points.size - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isMore &amp;&amp; level != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    canvas.drawText( <span class=\"string\">\"$&#123;index&#125;:$&#123;index&#125;\"</span> ,points[index].x , points[index].y , textPaint)</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    canvas.drawText( <span class=\"string\">\"$&#123;charSequence[level]&#125;$&#123;index&#125;\"</span> ,points[index].x , points[index].y , textPaint)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制当前层级</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(level !=<span class=\"number\">0</span> &amp;&amp; (per==<span class=\"number\">0F</span> || per == <span class=\"number\">1F</span>) )) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inBase) &#123;</span><br><span class=\"line\">            canvas.drawPath(path, linePaint)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    path.reset()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//更新层级信息</span></span><br><span class=\"line\">    level++</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绘制下一层</span></span><br><span class=\"line\">    drawBezier(canvas, per, nextPoints)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>除此之外,因为每次计算得到的是贝塞尔曲线的点,所以需要将这些点收集起来,并将之前收集到的所有的点绘制出来<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//绘制前段贝塞尔曲线部分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun  <span class=\"title\">drawBezierPoint</span><span class=\"params\">(bezierPoints: MutableList&lt;Point&gt; , canvas: Canvas)</span> </span>&#123;</span><br><span class=\"line\">    val paintBse = Paint()</span><br><span class=\"line\">    paintBse.color = Color.RED</span><br><span class=\"line\">    paintBse.strokeWidth = <span class=\"number\">5F</span></span><br><span class=\"line\">    paintBse.style = Paint.Style.STROKE</span><br><span class=\"line\"></span><br><span class=\"line\">    val path = Path()</span><br><span class=\"line\">    path.moveTo(bezierPoints[<span class=\"number\">0</span>].x , bezierPoints[<span class=\"number\">0</span>].y)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (index in <span class=\"number\">1</span>..bezierPoints.size -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        path.lineTo(bezierPoints[index].x , bezierPoints[index].y)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.drawPath(path , paintBse)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>相关的代码可以<a href=\"https://github.com/clwater/BezierCurve.git\" target=\"_blank\" rel=\"noopener\">访问我的Github</a>,欢迎大家star或提出建议.</p>"},{"title":"网页中实现长图固定宽高滚动展示","date":"2020-04-11T21:33:55.000Z","_content":"\n# 网页中实现长图固定宽高滚动展示\n\n> 最近的事情比较多, 不能体系的整理相关资料, 所以开始多做一些小功能和解决小问题.  \n\n<!-- more -->\n问题的来源是做网站的时候需要实现一个比较长的图片, 固定宽度, 默认显示图片顶部的内容, 图片有最大的高度, 当超过最大的高度的时候可以滚动展示. 避免整个页面因为图片拉伸的过长.\n\n功能比较简陋也比较简单, 不过我在实现的时候耽误了不短的时间. 记录一下,简单的问题有时候思路容易陷入胡同中导致迟迟不能解决. 这里记录下, 希望可能帮到有需要的人\n\n下面直接看下效果图\n\n![git](https://update-image.oss-cn-shanghai.aliyuncs.com/pic/20200412054145.gif)\n\ndemo 比较简陋, 效果也很简单\n```html\n        <div style=\"width: 1000px; height: 400px; overflow-y: auto;\">\n            <img src=\"http://image\"\n                style=\"width: 100%; overflow-y: auto;\"    \n            />\n        </div>\n```","source":"_posts/网页中实现长图固定宽高滚动展示.md","raw":"---\ntitle: 网页中实现长图固定宽高滚动展示\ndate: 2020-04-12 05:33:55\ntags:\n---\n\n# 网页中实现长图固定宽高滚动展示\n\n> 最近的事情比较多, 不能体系的整理相关资料, 所以开始多做一些小功能和解决小问题.  \n\n<!-- more -->\n问题的来源是做网站的时候需要实现一个比较长的图片, 固定宽度, 默认显示图片顶部的内容, 图片有最大的高度, 当超过最大的高度的时候可以滚动展示. 避免整个页面因为图片拉伸的过长.\n\n功能比较简陋也比较简单, 不过我在实现的时候耽误了不短的时间. 记录一下,简单的问题有时候思路容易陷入胡同中导致迟迟不能解决. 这里记录下, 希望可能帮到有需要的人\n\n下面直接看下效果图\n\n![git](https://update-image.oss-cn-shanghai.aliyuncs.com/pic/20200412054145.gif)\n\ndemo 比较简陋, 效果也很简单\n```html\n        <div style=\"width: 1000px; height: 400px; overflow-y: auto;\">\n            <img src=\"http://image\"\n                style=\"width: 100%; overflow-y: auto;\"    \n            />\n        </div>\n```","slug":"网页中实现长图固定宽高滚动展示","published":1,"updated":"2020-04-11T21:48:20.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg2it5eb001aq7dqfo7e9liu","content":"<h1 id=\"网页中实现长图固定宽高滚动展示\"><a href=\"#网页中实现长图固定宽高滚动展示\" class=\"headerlink\" title=\"网页中实现长图固定宽高滚动展示\"></a>网页中实现长图固定宽高滚动展示</h1><blockquote>\n<p>最近的事情比较多, 不能体系的整理相关资料, 所以开始多做一些小功能和解决小问题.  </p>\n</blockquote>\n<a id=\"more\"></a>\n<p>问题的来源是做网站的时候需要实现一个比较长的图片, 固定宽度, 默认显示图片顶部的内容, 图片有最大的高度, 当超过最大的高度的时候可以滚动展示. 避免整个页面因为图片拉伸的过长.</p>\n<p>功能比较简陋也比较简单, 不过我在实现的时候耽误了不短的时间. 记录一下,简单的问题有时候思路容易陷入胡同中导致迟迟不能解决. 这里记录下, 希望可能帮到有需要的人</p>\n<p>下面直接看下效果图</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/pic/20200412054145.gif\" alt=\"git\"></p>\n<p>demo 比较简陋, 效果也很简单<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 1000px; height: 400px; overflow-y: auto;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://image\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100%; overflow-y: auto;\"</span>    </span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"网页中实现长图固定宽高滚动展示\"><a href=\"#网页中实现长图固定宽高滚动展示\" class=\"headerlink\" title=\"网页中实现长图固定宽高滚动展示\"></a>网页中实现长图固定宽高滚动展示</h1><blockquote>\n<p>最近的事情比较多, 不能体系的整理相关资料, 所以开始多做一些小功能和解决小问题.  </p>\n</blockquote>","more":"<p>问题的来源是做网站的时候需要实现一个比较长的图片, 固定宽度, 默认显示图片顶部的内容, 图片有最大的高度, 当超过最大的高度的时候可以滚动展示. 避免整个页面因为图片拉伸的过长.</p>\n<p>功能比较简陋也比较简单, 不过我在实现的时候耽误了不短的时间. 记录一下,简单的问题有时候思路容易陷入胡同中导致迟迟不能解决. 这里记录下, 希望可能帮到有需要的人</p>\n<p>下面直接看下效果图</p>\n<p><img src=\"https://update-image.oss-cn-shanghai.aliyuncs.com/pic/20200412054145.gif\" alt=\"git\"></p>\n<p>demo 比较简陋, 效果也很简单<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 1000px; height: 400px; overflow-y: auto;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://image\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100%; overflow-y: auto;\"</span>    </span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckg2it5dd0002q7dqm2vbo6ox","category_id":"ckg2it5ew001bq7dq482txmua","_id":"ckg2it5j2004uq7dqgxks2o6u"},{"post_id":"ckg2it5dg0004q7dqidpm1cw2","category_id":"ckg2it5ew001bq7dq482txmua","_id":"ckg2it5j2004wq7dqcdi6t9rb"},{"post_id":"ckg2it5dh0006q7dq5lzlc0x5","category_id":"ckg2it5f6001fq7dqgr17a7nc","_id":"ckg2it5j2004yq7dqqp8k4j07"},{"post_id":"ckg2it5di0007q7dqq060izhl","category_id":"ckg2it5f7001hq7dq7fsdv5q6","_id":"ckg2it5j20050q7dqfjz54k61"},{"post_id":"ckg2it5dj0008q7dqgvwrgqru","category_id":"ckg2it5f7001hq7dq7fsdv5q6","_id":"ckg2it5j30052q7dqm8710p0o"},{"post_id":"ckg2it5dk0009q7dq96y9gqsu","category_id":"ckg2it5f8001lq7dqrxohvkb0","_id":"ckg2it5j30054q7dqzd68jpi5"},{"post_id":"ckg2it5dl000aq7dqyweqz78p","category_id":"ckg2it5f8001lq7dqrxohvkb0","_id":"ckg2it5j30056q7dqsplieh1o"},{"post_id":"ckg2it5dm000bq7dqgenuep9r","category_id":"ckg2it5f8001lq7dqrxohvkb0","_id":"ckg2it5j30058q7dqq4sjq70f"},{"post_id":"ckg2it5dn000cq7dq5thsdn45","category_id":"ckg2it5f8001lq7dqrxohvkb0","_id":"ckg2it5j3005aq7dqswdymee4"},{"post_id":"ckg2it5dn000dq7dqk9x72guo","category_id":"ckg2it5f8001lq7dqrxohvkb0","_id":"ckg2it5j3005cq7dqaahghmcd"},{"post_id":"ckg2it5do000eq7dq8rpw3i0n","category_id":"ckg2it5f8001lq7dqrxohvkb0","_id":"ckg2it5j3005eq7dqj682zcjp"},{"post_id":"ckg2it5dp000fq7dqbupo0ipj","category_id":"ckg2it5f8001lq7dqrxohvkb0","_id":"ckg2it5j3005gq7dqyupgxag4"},{"post_id":"ckg2it5dq000gq7dqhd1tmrxs","category_id":"ckg2it5f8001lq7dqrxohvkb0","_id":"ckg2it5j3005iq7dqycl0iva6"},{"post_id":"ckg2it5dq000hq7dqhmm005um","category_id":"ckg2it5f8001lq7dqrxohvkb0","_id":"ckg2it5j4005kq7dqkzmhdu4u"},{"post_id":"ckg2it5dr000iq7dqb8tr8u0y","category_id":"ckg2it5f8001lq7dqrxohvkb0","_id":"ckg2it5j4005mq7dqnh8rk07g"},{"post_id":"ckg2it5dr000jq7dqlqmhhi37","category_id":"ckg2it5f8001lq7dqrxohvkb0","_id":"ckg2it5j4005oq7dqhczvfda1"},{"post_id":"ckg2it5ds000kq7dq0lm489oy","category_id":"ckg2it5f8001lq7dqrxohvkb0","_id":"ckg2it5j4005qq7dqqbkyax91"},{"post_id":"ckg2it5ds000lq7dqtuzg2fst","category_id":"ckg2it5f8001lq7dqrxohvkb0","_id":"ckg2it5j4005sq7dqopnfm6v2"},{"post_id":"ckg2it5dt000mq7dqnjsi3mx2","category_id":"ckg2it5f7001hq7dq7fsdv5q6","_id":"ckg2it5j4005uq7dqa5x0uvy0"},{"post_id":"ckg2it5dv000oq7dq2fxl57lp","category_id":"ckg2it5f7001hq7dq7fsdv5q6","_id":"ckg2it5j4005wq7dqiz1hoc3t"},{"post_id":"ckg2it5dw000pq7dqwk8ytcgu","category_id":"ckg2it5fk002fq7dqd1ohof46","_id":"ckg2it5j4005yq7dq4li23ihx"},{"post_id":"ckg2it5dx000qq7dqpdmd9q3c","category_id":"ckg2it5fk002fq7dqd1ohof46","_id":"ckg2it5j40060q7dqjq1bykyb"},{"post_id":"ckg2it5dy000rq7dqe3ixt1n3","category_id":"ckg2it5fk002fq7dqd1ohof46","_id":"ckg2it5j50062q7dqk11s1unu"},{"post_id":"ckg2it5dy000sq7dqctwk4ieb","category_id":"ckg2it5fk002fq7dqd1ohof46","_id":"ckg2it5j50064q7dqa5iucqv5"},{"post_id":"ckg2it5dz000tq7dq5bgh5zl9","category_id":"ckg2it5fk002fq7dqd1ohof46","_id":"ckg2it5j50066q7dqbftycppc"},{"post_id":"ckg2it5e0000uq7dqtit97h8q","category_id":"ckg2it5f7001hq7dq7fsdv5q6","_id":"ckg2it5j50068q7dqs94wk865"},{"post_id":"ckg2it5e0000vq7dqlndvacos","category_id":"ckg2it5ew001bq7dq482txmua","_id":"ckg2it5j5006aq7dqtvie12ex"},{"post_id":"ckg2it5e4000wq7dqrxtsqly3","category_id":"ckg2it5ew001bq7dq482txmua","_id":"ckg2it5j5006cq7dql8rm2ugw"},{"post_id":"ckg2it5e4000xq7dqiqpqd1hh","category_id":"ckg2it5fq002vq7dq4nqxcc51","_id":"ckg2it5j5006eq7dqqk307366"},{"post_id":"ckg2it5e5000yq7dqy1y94h99","category_id":"ckg2it5fr002xq7dqsfd84yoj","_id":"ckg2it5j5006gq7dqlci0w4q9"},{"post_id":"ckg2it5e60010q7dqoapkvyvs","category_id":"ckg2it5ew001bq7dq482txmua","_id":"ckg2it5j5006iq7dq4bt6f5na"},{"post_id":"ckg2it5e60011q7dqlzabgf8q","category_id":"ckg2it5fs0031q7dqnizegqd9","_id":"ckg2it5j5006kq7dqu8qdja0m"},{"post_id":"ckg2it5e70012q7dq8fo93fc5","category_id":"ckg2it5fs0033q7dqv0wh8q8w","_id":"ckg2it5j6006mq7dqh5ix5o0m"},{"post_id":"ckg2it5e70013q7dqxehciajx","category_id":"ckg2it5f7001hq7dq7fsdv5q6","_id":"ckg2it5j6006oq7dqe44c4zil"},{"post_id":"ckg2it5e80015q7dqwqccrw8u","category_id":"ckg2it5ft0037q7dqsqlyi36d","_id":"ckg2it5j6006qq7dq021t1w38"},{"post_id":"ckg2it5e90016q7dq88xrrxzh","category_id":"ckg2it5fu0039q7dqr078nyh1","_id":"ckg2it5j6006sq7dqb1rfqdww"},{"post_id":"ckg2it5ea0019q7dqvqqwal6x","category_id":"ckg2it5ew001bq7dq482txmua","_id":"ckg2it5j6006uq7dqvyxmeg6s"}],"PostTag":[{"post_id":"ckg2it5dd0002q7dqm2vbo6ox","tag_id":"ckg2it5f3001cq7dq4idaavp6","_id":"ckg2it5j2004tq7dqsu4xsdmy"},{"post_id":"ckg2it5dd0002q7dqm2vbo6ox","tag_id":"ckg2it5f4001eq7dq8p2v4di4","_id":"ckg2it5j2004vq7dq9ltm0a00"},{"post_id":"ckg2it5dd0002q7dqm2vbo6ox","tag_id":"ckg2it5f6001gq7dqpjtruc65","_id":"ckg2it5j2004xq7dqd7br3v5o"},{"post_id":"ckg2it5dg0004q7dqidpm1cw2","tag_id":"ckg2it5f3001cq7dq4idaavp6","_id":"ckg2it5j2004zq7dqe3rrgg28"},{"post_id":"ckg2it5dg0004q7dqidpm1cw2","tag_id":"ckg2it5f4001eq7dq8p2v4di4","_id":"ckg2it5j30051q7dqzwdl49pc"},{"post_id":"ckg2it5dg0004q7dqidpm1cw2","tag_id":"ckg2it5f6001gq7dqpjtruc65","_id":"ckg2it5j30053q7dq5co21d88"},{"post_id":"ckg2it5dh0006q7dq5lzlc0x5","tag_id":"ckg2it5f9001nq7dqts2u90pk","_id":"ckg2it5j30055q7dqn6afhis6"},{"post_id":"ckg2it5dh0006q7dq5lzlc0x5","tag_id":"ckg2it5fa001qq7dqib263s7n","_id":"ckg2it5j30057q7dqxydxmqym"},{"post_id":"ckg2it5di0007q7dqq060izhl","tag_id":"ckg2it5f3001cq7dq4idaavp6","_id":"ckg2it5j30059q7dqhyt635wg"},{"post_id":"ckg2it5di0007q7dqq060izhl","tag_id":"ckg2it5f4001eq7dq8p2v4di4","_id":"ckg2it5j3005bq7dqwqips68n"},{"post_id":"ckg2it5di0007q7dqq060izhl","tag_id":"ckg2it5fc001wq7dqp0grz2k7","_id":"ckg2it5j3005dq7dqxvhsoqmn"},{"post_id":"ckg2it5di0007q7dqq060izhl","tag_id":"ckg2it5fd001yq7dqdv6aptam","_id":"ckg2it5j3005fq7dqo5voblog"},{"post_id":"ckg2it5dj0008q7dqgvwrgqru","tag_id":"ckg2it5f3001cq7dq4idaavp6","_id":"ckg2it5j3005hq7dqq45vmg83"},{"post_id":"ckg2it5dj0008q7dqgvwrgqru","tag_id":"ckg2it5f4001eq7dq8p2v4di4","_id":"ckg2it5j4005jq7dqi81apjtq"},{"post_id":"ckg2it5dj0008q7dqgvwrgqru","tag_id":"ckg2it5ff0024q7dqjswec8vn","_id":"ckg2it5j4005lq7dq9oz77zbz"},{"post_id":"ckg2it5dk0009q7dq96y9gqsu","tag_id":"ckg2it5fh0026q7dqielwrf50","_id":"ckg2it5j4005nq7dqrllg6vdr"},{"post_id":"ckg2it5dk0009q7dq96y9gqsu","tag_id":"ckg2it5fi0028q7dqgej2bg5k","_id":"ckg2it5j4005pq7dqbgd2femo"},{"post_id":"ckg2it5dl000aq7dqyweqz78p","tag_id":"ckg2it5fh0026q7dqielwrf50","_id":"ckg2it5j4005rq7dq36fhqqne"},{"post_id":"ckg2it5dl000aq7dqyweqz78p","tag_id":"ckg2it5fi0028q7dqgej2bg5k","_id":"ckg2it5j4005tq7dqanpdyzip"},{"post_id":"ckg2it5dm000bq7dqgenuep9r","tag_id":"ckg2it5fh0026q7dqielwrf50","_id":"ckg2it5j4005vq7dqq3r5yg8t"},{"post_id":"ckg2it5dm000bq7dqgenuep9r","tag_id":"ckg2it5fi0028q7dqgej2bg5k","_id":"ckg2it5j4005xq7dqkfad6nm7"},{"post_id":"ckg2it5dn000cq7dq5thsdn45","tag_id":"ckg2it5fh0026q7dqielwrf50","_id":"ckg2it5j4005zq7dqmju68z7j"},{"post_id":"ckg2it5dn000cq7dq5thsdn45","tag_id":"ckg2it5fi0028q7dqgej2bg5k","_id":"ckg2it5j40061q7dqe8ljiu62"},{"post_id":"ckg2it5dn000dq7dqk9x72guo","tag_id":"ckg2it5fh0026q7dqielwrf50","_id":"ckg2it5j50063q7dq683m8al1"},{"post_id":"ckg2it5dn000dq7dqk9x72guo","tag_id":"ckg2it5fi0028q7dqgej2bg5k","_id":"ckg2it5j50065q7dqxuob3izg"},{"post_id":"ckg2it5do000eq7dq8rpw3i0n","tag_id":"ckg2it5fh0026q7dqielwrf50","_id":"ckg2it5j50067q7dqe67ot7ic"},{"post_id":"ckg2it5do000eq7dq8rpw3i0n","tag_id":"ckg2it5fi0028q7dqgej2bg5k","_id":"ckg2it5j50069q7dqosie0dne"},{"post_id":"ckg2it5dp000fq7dqbupo0ipj","tag_id":"ckg2it5fh0026q7dqielwrf50","_id":"ckg2it5j5006bq7dql0746cbd"},{"post_id":"ckg2it5dp000fq7dqbupo0ipj","tag_id":"ckg2it5fi0028q7dqgej2bg5k","_id":"ckg2it5j5006dq7dqzyi03ft8"},{"post_id":"ckg2it5dq000gq7dqhd1tmrxs","tag_id":"ckg2it5fh0026q7dqielwrf50","_id":"ckg2it5j5006fq7dq81zm6mcm"},{"post_id":"ckg2it5dq000gq7dqhd1tmrxs","tag_id":"ckg2it5fi0028q7dqgej2bg5k","_id":"ckg2it5j5006hq7dqnhojtkn2"},{"post_id":"ckg2it5dq000hq7dqhmm005um","tag_id":"ckg2it5fh0026q7dqielwrf50","_id":"ckg2it5j5006jq7dqrlqxef2k"},{"post_id":"ckg2it5dq000hq7dqhmm005um","tag_id":"ckg2it5fi0028q7dqgej2bg5k","_id":"ckg2it5j6006lq7dqb0moh5g0"},{"post_id":"ckg2it5dr000iq7dqb8tr8u0y","tag_id":"ckg2it5fh0026q7dqielwrf50","_id":"ckg2it5j6006nq7dqo3ut3uo4"},{"post_id":"ckg2it5dr000iq7dqb8tr8u0y","tag_id":"ckg2it5fi0028q7dqgej2bg5k","_id":"ckg2it5j6006pq7dq9tb0jwjy"},{"post_id":"ckg2it5dr000jq7dqlqmhhi37","tag_id":"ckg2it5fh0026q7dqielwrf50","_id":"ckg2it5j6006rq7dqn50b5t63"},{"post_id":"ckg2it5dr000jq7dqlqmhhi37","tag_id":"ckg2it5fi0028q7dqgej2bg5k","_id":"ckg2it5j6006tq7dqa8hs4xyn"},{"post_id":"ckg2it5ds000kq7dq0lm489oy","tag_id":"ckg2it5fh0026q7dqielwrf50","_id":"ckg2it5j6006vq7dqjfhoqmx2"},{"post_id":"ckg2it5ds000kq7dq0lm489oy","tag_id":"ckg2it5fi0028q7dqgej2bg5k","_id":"ckg2it5j6006wq7dq1zlyexrh"},{"post_id":"ckg2it5ds000lq7dqtuzg2fst","tag_id":"ckg2it5fh0026q7dqielwrf50","_id":"ckg2it5j6006xq7dqsmnxi4x9"},{"post_id":"ckg2it5ds000lq7dqtuzg2fst","tag_id":"ckg2it5fi0028q7dqgej2bg5k","_id":"ckg2it5j6006yq7dqvcf8qfsc"},{"post_id":"ckg2it5dt000mq7dqnjsi3mx2","tag_id":"ckg2it5f3001cq7dq4idaavp6","_id":"ckg2it5j6006zq7dqruc2yrdz"},{"post_id":"ckg2it5dt000mq7dqnjsi3mx2","tag_id":"ckg2it5f4001eq7dq8p2v4di4","_id":"ckg2it5j70070q7dq9yd9keqs"},{"post_id":"ckg2it5dt000mq7dqnjsi3mx2","tag_id":"ckg2it5ff0024q7dqjswec8vn","_id":"ckg2it5j70071q7dqg5rxnnjp"},{"post_id":"ckg2it5dv000oq7dq2fxl57lp","tag_id":"ckg2it5f3001cq7dq4idaavp6","_id":"ckg2it5j70072q7dqfyvkg6as"},{"post_id":"ckg2it5dv000oq7dq2fxl57lp","tag_id":"ckg2it5f4001eq7dq8p2v4di4","_id":"ckg2it5j70073q7dq61qjkbqi"},{"post_id":"ckg2it5dv000oq7dq2fxl57lp","tag_id":"ckg2it5ff0024q7dqjswec8vn","_id":"ckg2it5j70074q7dqtzexkjrw"},{"post_id":"ckg2it5dw000pq7dqwk8ytcgu","tag_id":"ckg2it5fy003nq7dqhh6pbl6e","_id":"ckg2it5j70075q7dqryv4vmpt"},{"post_id":"ckg2it5dx000qq7dqpdmd9q3c","tag_id":"ckg2it5fy003nq7dqhh6pbl6e","_id":"ckg2it5j70076q7dql94syfi2"},{"post_id":"ckg2it5dy000rq7dqe3ixt1n3","tag_id":"ckg2it5fy003nq7dqhh6pbl6e","_id":"ckg2it5j70077q7dqaoekl1h6"},{"post_id":"ckg2it5dy000sq7dqctwk4ieb","tag_id":"ckg2it5fy003nq7dqhh6pbl6e","_id":"ckg2it5j70078q7dq9kku2ubi"},{"post_id":"ckg2it5e0000uq7dqtit97h8q","tag_id":"ckg2it5f3001cq7dq4idaavp6","_id":"ckg2it5j70079q7dqx0tdzy45"},{"post_id":"ckg2it5e0000uq7dqtit97h8q","tag_id":"ckg2it5f4001eq7dq8p2v4di4","_id":"ckg2it5j7007aq7dqm792ab16"},{"post_id":"ckg2it5e0000uq7dqtit97h8q","tag_id":"ckg2it5ff0024q7dqjswec8vn","_id":"ckg2it5j7007bq7dqxx7rl216"},{"post_id":"ckg2it5e0000vq7dqlndvacos","tag_id":"ckg2it5f3001cq7dq4idaavp6","_id":"ckg2it5j7007cq7dqqbdmz8ax"},{"post_id":"ckg2it5e0000vq7dqlndvacos","tag_id":"ckg2it5f4001eq7dq8p2v4di4","_id":"ckg2it5j7007dq7dqkkjpse2d"},{"post_id":"ckg2it5e0000vq7dqlndvacos","tag_id":"ckg2it5f6001gq7dqpjtruc65","_id":"ckg2it5j7007eq7dqmdnlnft9"},{"post_id":"ckg2it5e4000wq7dqrxtsqly3","tag_id":"ckg2it5f3001cq7dq4idaavp6","_id":"ckg2it5j8007fq7dqmu84yvy0"},{"post_id":"ckg2it5e4000wq7dqrxtsqly3","tag_id":"ckg2it5f4001eq7dq8p2v4di4","_id":"ckg2it5j8007gq7dqmxqfos5m"},{"post_id":"ckg2it5e4000wq7dqrxtsqly3","tag_id":"ckg2it5f6001gq7dqpjtruc65","_id":"ckg2it5j8007hq7dqjx94vaa7"},{"post_id":"ckg2it5e4000xq7dqiqpqd1hh","tag_id":"ckg2it5g30040q7dqla4zt62s","_id":"ckg2it5j8007iq7dq0ukbrhxp"},{"post_id":"ckg2it5e5000yq7dqy1y94h99","tag_id":"ckg2it5g30041q7dq8r8vc2l5","_id":"ckg2it5j8007jq7dq46e86igx"},{"post_id":"ckg2it5e5000yq7dqy1y94h99","tag_id":"ckg2it5g30042q7dqd101pwx6","_id":"ckg2it5j8007kq7dq7eurq6ha"},{"post_id":"ckg2it5e5000yq7dqy1y94h99","tag_id":"ckg2it5g40043q7dqeo566hec","_id":"ckg2it5j8007lq7dqp9qq6434"},{"post_id":"ckg2it5e5000yq7dqy1y94h99","tag_id":"ckg2it5g40044q7dqcl8oa002","_id":"ckg2it5j8007mq7dq2w0burl8"},{"post_id":"ckg2it5e60010q7dqoapkvyvs","tag_id":"ckg2it5f3001cq7dq4idaavp6","_id":"ckg2it5j8007nq7dq8wervglb"},{"post_id":"ckg2it5e60010q7dqoapkvyvs","tag_id":"ckg2it5f4001eq7dq8p2v4di4","_id":"ckg2it5j8007oq7dqfeaf3rwc"},{"post_id":"ckg2it5e60010q7dqoapkvyvs","tag_id":"ckg2it5f6001gq7dqpjtruc65","_id":"ckg2it5j8007pq7dqf6ighu7j"},{"post_id":"ckg2it5e60011q7dqlzabgf8q","tag_id":"ckg2it5g50048q7dqdigk44xb","_id":"ckg2it5j8007qq7dqdjwv54gp"},{"post_id":"ckg2it5e60011q7dqlzabgf8q","tag_id":"ckg2it5g50049q7dqfn1i0nj2","_id":"ckg2it5j8007rq7dqhzolg8ah"},{"post_id":"ckg2it5e60011q7dqlzabgf8q","tag_id":"ckg2it5g6004aq7dqcmbnsype","_id":"ckg2it5j8007sq7dqdxsdcmph"},{"post_id":"ckg2it5e60011q7dqlzabgf8q","tag_id":"ckg2it5g6004bq7dq4ecvrjfp","_id":"ckg2it5j8007tq7dqhovi119u"},{"post_id":"ckg2it5e60011q7dqlzabgf8q","tag_id":"ckg2it5g6004cq7dq1wjub50q","_id":"ckg2it5j9007uq7dq2f6wabs2"},{"post_id":"ckg2it5e70012q7dq8fo93fc5","tag_id":"ckg2it5g6004dq7dqb5eqs0ee","_id":"ckg2it5j9007vq7dq1yi2wdwa"},{"post_id":"ckg2it5e70012q7dq8fo93fc5","tag_id":"ckg2it5g6004eq7dq593v25oy","_id":"ckg2it5j9007wq7dqd4jsuwre"},{"post_id":"ckg2it5e70012q7dq8fo93fc5","tag_id":"ckg2it5g6004fq7dqowdf6jzj","_id":"ckg2it5j9007xq7dqv5v4y5bm"},{"post_id":"ckg2it5e70013q7dqxehciajx","tag_id":"ckg2it5f3001cq7dq4idaavp6","_id":"ckg2it5j9007yq7dq2vjc5p10"},{"post_id":"ckg2it5e70013q7dqxehciajx","tag_id":"ckg2it5f4001eq7dq8p2v4di4","_id":"ckg2it5j9007zq7dqq4szbtly"},{"post_id":"ckg2it5e70013q7dqxehciajx","tag_id":"ckg2it5ff0024q7dqjswec8vn","_id":"ckg2it5j90080q7dqmedl2lte"},{"post_id":"ckg2it5e80015q7dqwqccrw8u","tag_id":"ckg2it5fh0026q7dqielwrf50","_id":"ckg2it5j90081q7dq5hd0v39q"},{"post_id":"ckg2it5e80015q7dqwqccrw8u","tag_id":"ckg2it5g7004kq7dq6op50ulq","_id":"ckg2it5j90082q7dq46szpbvb"},{"post_id":"ckg2it5e90016q7dq88xrrxzh","tag_id":"ckg2it5g8004lq7dqqfoul5m9","_id":"ckg2it5j90083q7dqx1jtknci"},{"post_id":"ckg2it5e90016q7dq88xrrxzh","tag_id":"ckg2it5g8004mq7dq8wxuhpxl","_id":"ckg2it5j90084q7dq4pwzquja"},{"post_id":"ckg2it5e90016q7dq88xrrxzh","tag_id":"ckg2it5g8004nq7dqeozv9dml","_id":"ckg2it5j90085q7dqjeevysrx"},{"post_id":"ckg2it5e90016q7dq88xrrxzh","tag_id":"ckg2it5g8004oq7dq6r7zor77","_id":"ckg2it5j90086q7dqhsga5yqr"},{"post_id":"ckg2it5ea0019q7dqvqqwal6x","tag_id":"ckg2it5f3001cq7dq4idaavp6","_id":"ckg2it5j90087q7dq2s90hy5x"},{"post_id":"ckg2it5ea0019q7dqvqqwal6x","tag_id":"ckg2it5f4001eq7dq8p2v4di4","_id":"ckg2it5j90088q7dqyjjj462x"},{"post_id":"ckg2it5ea0019q7dqvqqwal6x","tag_id":"ckg2it5f6001gq7dqpjtruc65","_id":"ckg2it5j90089q7dqwiqelqh3"},{"post_id":"ckg2it5ea0019q7dqvqqwal6x","tag_id":"ckg2it5g9004sq7dqhkxwjh72","_id":"ckg2it5j9008aq7dqn9mn6yaj"}],"Tag":[{"name":"android","_id":"ckg2it5f3001cq7dq4idaavp6"},{"name":"view","_id":"ckg2it5f4001eq7dq8p2v4di4"},{"name":"自定义","_id":"ckg2it5f6001gq7dqpjtruc65"},{"name":"hexo","_id":"ckg2it5f9001nq7dqts2u90pk"},{"name":"command not found","_id":"ckg2it5fa001qq7dqib263s7n"},{"name":"tools","_id":"ckg2it5fc001wq7dqp0grz2k7"},{"name":"Hierarchy Viewer","_id":"ckg2it5fd001yq7dqdv6aptam"},{"name":"源码","_id":"ckg2it5ff0024q7dqjswec8vn"},{"name":"算法","_id":"ckg2it5fh0026q7dqielwrf50"},{"name":"LeetCode","_id":"ckg2it5fi0028q7dqgej2bg5k"},{"name":"Rpg Maker","_id":"ckg2it5fy003nq7dqhh6pbl6e"},{"name":"https","_id":"ckg2it5g30040q7dqla4zt62s"},{"name":"七牛","_id":"ckg2it5g30041q7dq8r8vc2l5"},{"name":"image","_id":"ckg2it5g30042q7dqd101pwx6"},{"name":"图床","_id":"ckg2it5g40043q7dqeo566hec"},{"name":"阿里OSS","_id":"ckg2it5g40044q7dqcl8oa002"},{"name":"vpn","_id":"ckg2it5g50048q7dqdigk44xb"},{"name":"搬瓦工","_id":"ckg2it5g50049q7dqfn1i0nj2"},{"name":"bandwagonhost","_id":"ckg2it5g6004aq7dqcmbnsype"},{"name":"Shadowsocks","_id":"ckg2it5g6004bq7dq4ecvrjfp"},{"name":"ss","_id":"ckg2it5g6004cq7dq1wjub50q"},{"name":"python","_id":"ckg2it5g6004dq7dqb5eqs0ee"},{"name":"api","_id":"ckg2it5g6004eq7dq593v25oy"},{"name":"爬虫","_id":"ckg2it5g6004fq7dqowdf6jzj"},{"name":"kotlin","_id":"ckg2it5g7004kq7dq6op50ulq"},{"name":"peed Dial Plus","_id":"ckg2it5g8004lq7dqqfoul5m9"},{"name":"Earth View from Google Earth","_id":"ckg2it5g8004mq7dq8wxuhpxl"},{"name":"Chrome插件","_id":"ckg2it5g8004nq7dqeozv9dml"},{"name":"Python","_id":"ckg2it5g8004oq7dq6r7zor77"},{"name":"贝塞尔曲线","_id":"ckg2it5g9004sq7dqhkxwjh72"}]}}