{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/myicon.jpeg","path":"images/myicon.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"c57f46c8e9fef45e1ba982717f34b85ecc0d1406","modified":1507107903000},{"_id":"source/CNAME","hash":"42171f5d661de34ed171085370b75a75a6f67374","modified":1486392996000},{"_id":"source/404.html","hash":"0cee696e3bea01edad234cac4de69d18eed5fe79","modified":1486392996000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1486392996000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1486392996000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1486392996000},{"_id":"themes/next/.DS_Store","hash":"e5342e65d43b01d45b00a8647c70d1c028ed4370","modified":1507107792000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1486392996000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1486392996000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1486392996000},{"_id":"themes/next/README.en.md","hash":"3b0c7998cf17f9cf9e1a5bfcd65679a43a00c817","modified":1486392996000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1486392996000},{"_id":"themes/next/_config.yml","hash":"98b9ae1a6ab22f4b209c973eb0bdab5e61623ac3","modified":1506259392000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1486392996000},{"_id":"themes/next/favicon.ico","hash":"e045ba4041efdf518f3dba99c17ab28e060ba100","modified":1486392996000},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1486392996000},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1486392996000},{"_id":"source/_posts/.DS_Store","hash":"791b187bcd87745f5ad0a395cadf4df35dc2ca78","modified":1507107913000},{"_id":"source/_posts/.base.md","hash":"ae6c596a859fbb94cf7739a10cf48077aa1a0f21","modified":1486392996000},{"_id":"source/_posts/Hexo安装后的小问题.md","hash":"67e4956fab9b830713de10450a4b681f9a373e33","modified":1492949992000},{"_id":"source/_posts/LinearLayout 源码分析.md","hash":"3cdb53e8af8c4a396ea763747f0d425387dc57ef","modified":1486392996000},{"_id":"source/_posts/HierarchyViewer.md","hash":"2591648e1461748a33b10c5dc5ebbd37cf225826","modified":1486392996000},{"_id":"source/_posts/LayoutInflater.md","hash":"b9bc1518dbc73039066b167586d758d636fff6bf","modified":1486392996000},{"_id":"source/_posts/RelativeLayout 源码分析.md","hash":"b2dd0eb779830f7a72369d499738e5b58a3d9933","modified":1486392996000},{"_id":"source/_posts/RpgMaker入门教程1.md","hash":"7926318aeb46381469e80e97f23192ed239681a6","modified":1493101238000},{"_id":"source/_posts/RpgMaker教程3.md","hash":"363f7debd9d3ebb841d77506066ee18c0d275ec5","modified":1507113981000},{"_id":"source/_posts/RpgMaker教程2.md","hash":"4169a390cec53dcf0477e9b33d6babbc75733c63","modified":1493639643000},{"_id":"source/_posts/View 绘制源码分析.md","hash":"c9500df939ab7c260607a088429e0d7c9889552c","modified":1486392996000},{"_id":"source/_posts/android自定义View之仪表盘.md","hash":"149b50cc09d4885516e5f2d51a79c7e2db370496","modified":1504191628000},{"_id":"source/_posts/musicOfCoding.md","hash":"b2f91fd14179c83c4266ee95a834ee1232ef1b16","modified":1486392996000},{"_id":"source/_posts/从setContentView说起.md","hash":"085578517e03c2be22063672c8c654646eb24829","modified":1486392996000},{"_id":"source/_posts/中国国家气象局api数据分析.md","hash":"8aa981636f48c59a7bee26681835c80a12fc3c52","modified":1504365477000},{"_id":"source/_posts/vpn.md","hash":"2a32f2dd3b1ef6b8fc74e99697864a603067045d","modified":1486392945000},{"_id":"source/about/.DS_Store","hash":"b72281a24317a2efb14c8a48dca2e102d20b80c3","modified":1486392996000},{"_id":"source/_posts/如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景.md","hash":"13fd90f6a3d549448d94c0518b31fadbcb5c36a6","modified":1495101464000},{"_id":"source/about/index.md","hash":"85d1b6e97e2e0dd34619a66d6942d1f2f43062c4","modified":1486392996000},{"_id":"source/categories/.DS_Store","hash":"0203e668175914dff6a72b324de111ecf675c428","modified":1486392996000},{"_id":"source/tags/index.md","hash":"0c4d3bebe7ff03b130b425ced2fd8d5ad9e402e5","modified":1486392996000},{"_id":"source/categories/index.md","hash":"3d1b717cf45e66a19c850e452772c1001133cddc","modified":1486392996000},{"_id":"source/tags/.DS_Store","hash":"4b1737e2d95536850ac239b97c1d4b1deae9a602","modified":1486392996000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1486392996000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1486392996000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1486392996000},{"_id":"themes/next/source/favicon.ico","hash":"e045ba4041efdf518f3dba99c17ab28e060ba100","modified":1486392996000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1486392996000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1486392996000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1486392996000},{"_id":"themes/next/layout/_layout.swig","hash":"2fa3c74066843a859fac77803324a1de51044da9","modified":1486392996000},{"_id":"themes/next/layout/.DS_Store","hash":"265d5e1303c00a14bc860d81117caa6f471f1387","modified":1507107792000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1486392996000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1486392996000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1486392996000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1486392996000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1486392996000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1486392996000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1486392996000},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1486392996000},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1486392996000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1486392996000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1486392996000},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1486392996000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1486392996000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1486392996000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1486392996000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"28e54804c61545b14c0beb464e2c341616aec956","modified":1486392996000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1486392996000},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1486392996000},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1486392996000},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1486392996000},{"_id":"source/_posts/image/002.png","hash":"ac509cfdd5c61c02dff07f065be74d1ba4595b9a","modified":1493097784000},{"_id":"source/_posts/image/003.png","hash":"64e3b497bbc11db05888a7204ac0cf5d6b78df44","modified":1493108035000},{"_id":"source/_posts/image/001.png","hash":"1f0f5acfef25e32d6983b8bc81427f06132e42b0","modified":1492947835000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486392996000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1486392996000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1486392996000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1486392996000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1486392996000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1486392996000},{"_id":"source/_posts/image/图片_1.png","hash":"520f2896fa087665c69119f0afe4652936586db8","modified":1497837894000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1486392996000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1486392996000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1486392996000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1486392996000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1486392996000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1486392996000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1486392996000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1486392996000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1486392996000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1486392996000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1486392996000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1486392996000},{"_id":"themes/next/source/images/myicon.jpeg","hash":"c4c281479e470c7099fbfedcbeccbb6e82401138","modified":1486392996000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1486392996000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1486392996000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1486392996000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1486392996000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1486392996000},{"_id":"themes/next/layout/_partials/.DS_Store","hash":"355bfde94e6d47b79c69941d058e1a489a5aa17f","modified":1506259344000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"78ccfc1dc915247c1fec3c86d742e0f4c2f6d99c","modified":1486392996000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1486392996000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c7644fd2002f3290bb8ef0e1fd7f26c45869557a","modified":1506260546000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1486392996000},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1486392996000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1486392996000},{"_id":"themes/next/layout/_partials/header.swig","hash":"adab5c3f7b173f1b45454787f39dde07aea03483","modified":1486392996000},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1486392996000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1486392996000},{"_id":"themes/next/layout/_macro/post.swig","hash":"e6016def9b512188f4c2725399c9adc7bc41cdae","modified":1486392996000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"43d8830bb19da4fc7a5773866be19fa066b62645","modified":1486392996000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1486392996000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1486392996000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1486392996000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1486392996000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1486392996000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1486392996000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486392996000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486392996000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486392996000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486392996000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486392996000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486392996000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486392996000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c459aa6d607d8bcb747544e74f6ad0b8374aa3b1","modified":1486392996000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1486392996000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1486392996000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"fc185c6cec79593775d1c2440dbe2a71cfbe2e99","modified":1486392996000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1486392996000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1486392996000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1486392996000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1486392996000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1486392996000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1486392996000},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1486392996000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1486392996000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1486392996000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1486392996000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1486392996000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1486392996000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1486392996000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1486392996000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1486392996000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1486392996000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1486392996000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1486392996000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1486392996000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1486392996000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1486392996000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1486392996000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1486392996000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1486392996000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1486392996000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1486392996000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1486392996000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1486392996000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1486392996000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1486392996000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1486392996000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1486392996000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1486392996000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1486392996000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1486392996000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1486392996000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1486392996000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1486392996000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1486392996000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1486392996000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1486392996000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1486392996000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1486392996000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1486392996000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1486392996000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1486392996000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"4abc01bc870e1d7a783cdbd26166edc782a6a4f4","modified":1486392996000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1486392996000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1486392996000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1486392996000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1486392996000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1486392996000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1486392996000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1486392996000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1486392996000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1486392996000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1486392996000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1486392996000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1486392996000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1486392996000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1486392996000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1486392996000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"ff9f163bb05c0709577040a875924d36c9ab99d6","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"dcf9fe43b2ef78b923118ba39efedb38760e76b1","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9b63bd8effc7cf4b96acdea4d73add7df934a222","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1408209dfb9a22a0982a30bdbd14842c2b53f264","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1486392996000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1486392996000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1486392996000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1486392996000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1486392996000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1486392996000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1486392996000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1486392996000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1486392996000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1486392996000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1486392996000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1486392996000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1486392996000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1486392996000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1486392996000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1486392996000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1486392996000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1486392996000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1486392996000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1486392996000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1486392996000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1486392996000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1486392996000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1486392996000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1486392996000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1486392996000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"ea8078fa9e10be2bb042749d8b6a97adc38f914c","modified":1486392996000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1486392996000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1486392996000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1486392996000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1486392996000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"7f1aab694caf603809e33cff82beea84cd0128fd","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1486392996000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"fdfadbb4483043c7e0afd541ee9712389e633517","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1486392996000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1486392996000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1486392996000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1486392996000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1486392996000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1486392996000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1486392996000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1486392996000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1486392996000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1486392996000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1486392996000},{"_id":"public/search.xml","hash":"64bdbb71acf122c64e1d1129c5c8e1a784ad83d8","modified":1507114324200},{"_id":"public/404.html","hash":"572ff9f675fef608efb6e9ac02c18ed1f36ab681","modified":1507114324585},{"_id":"public/about/index.html","hash":"bb17d2eba6bdbce4a4ab6ea0f49629e5bcb007ac","modified":1507114324590},{"_id":"public/tags/index.html","hash":"1029c237d03cf2ba3bcd48e1363740cd9e4e5d9d","modified":1507114324590},{"_id":"public/categories/index.html","hash":"86469b2e1bf6621eb318d64ac30d35cc799f0902","modified":1507114324591},{"_id":"public/2017/10/04/RpgMaker教程3/index.html","hash":"93047bd76adc1fc4125db1b4a811d5e9d35b8966","modified":1507114324591},{"_id":"public/2017/08/31/中国国家气象局api数据分析/index.html","hash":"da7c3fa50a1b53689125906e98efa69ee0227542","modified":1507114324591},{"_id":"public/2017/08/10/android自定义View之仪表盘/index.html","hash":"3e0b312a509743dc2682fb58b804c987ecb7b746","modified":1507114324592},{"_id":"public/2017/05/17/如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景/index.html","hash":"9df361c527191d6473bec51793fe32e85c264ed3","modified":1507114324592},{"_id":"public/2017/04/25/RpgMaker教程2/index.html","hash":"1289a8b4f4abfaae07bf0ca8af322a93982908d9","modified":1507114324592},{"_id":"public/2017/04/24/RpgMaker入门教程1/index.html","hash":"d413f4ed2001df352b013c0a8df7174ad4fe6448","modified":1507114324592},{"_id":"public/2017/04/23/Hexo安装后的小问题/index.html","hash":"1256c748fccda9ac929bfe96e105f1a0a8258c7a","modified":1507114324592},{"_id":"public/2017/02/06/musicOfCoding/index.html","hash":"c62b8efc264e2d99e132b29ae3af118ae6ccfbb4","modified":1507114324592},{"_id":"public/2017/02/05/vpn/index.html","hash":"0ad99d76aba8d81f341a636f02e02a22c76dbf74","modified":1507114324593},{"_id":"public/2017/02/03/HierarchyViewer/index.html","hash":"991fe6b8ab6d64a866cccc3dab231f9f6926c7ca","modified":1507114324593},{"_id":"public/2017/02/03/RelativeLayout 源码分析/index.html","hash":"a18fd770b0cf403eeca611b7a54b416163ddaea5","modified":1507114324593},{"_id":"public/2017/02/03/LinearLayout 源码分析/index.html","hash":"410b3d345f23be3b779b992dfeaa05ccd80917fe","modified":1507114324593},{"_id":"public/2017/02/03/View 绘制源码分析/index.html","hash":"7250402a25ac732564db9e8ac72a46ad17eb36f7","modified":1507114324593},{"_id":"public/2017/02/03/LayoutInflater/index.html","hash":"ba516fc24552cf5a422ba3aa60a2c208c1e76654","modified":1507114324594},{"_id":"public/2017/02/03/从setContentView说起/index.html","hash":"f6ab21e7ebb1edcdf0bea6787c185d84369ca60b","modified":1507114324594},{"_id":"public/archives/index.html","hash":"84bba972b284d400adfb2b78be9fd3306c56d345","modified":1507114324595},{"_id":"public/archives/page/2/index.html","hash":"e3d86d2f9e01039230684dab101f6b62670be0e6","modified":1507114324595},{"_id":"public/archives/2017/index.html","hash":"c2ee91e25e3d3cebb879844725637034e1dddf61","modified":1507114324595},{"_id":"public/archives/2017/page/2/index.html","hash":"e795ce958245af6439fff92a61c3de4bdc9c5b41","modified":1507114324595},{"_id":"public/archives/2017/02/index.html","hash":"996d51a6556149cc0d782b02bed42bd08ccbda57","modified":1507114324595},{"_id":"public/archives/2017/04/index.html","hash":"a634262259ccfefdffaadd19f278a4726e13758c","modified":1507114324595},{"_id":"public/archives/2017/05/index.html","hash":"693adcd35be0cbb16a2553846f49a261aad15316","modified":1507114324596},{"_id":"public/archives/2017/08/index.html","hash":"0b41490f5f3776dd458bf757eddb2fdfff78b3b2","modified":1507114324596},{"_id":"public/archives/2017/10/index.html","hash":"8416457a2ddded7888ced5036869569b241580c9","modified":1507114324596},{"_id":"public/categories/Hexo/index.html","hash":"466630f8647f11a21c030cbb3ad439da2be874f3","modified":1507114324596},{"_id":"public/categories/android/index.html","hash":"b5fc1c8f5da00a52c0f955cc3a12a37b6b3d69c0","modified":1507114324596},{"_id":"public/categories/RpgMaker-教程/index.html","hash":"abdd8b4b5aa64de84681914b4346f3a7a93d0367","modified":1507114324596},{"_id":"public/categories/Android自定义View/index.html","hash":"5d9f15f01758ec88f4ff5185ec6731c7ed36c6e2","modified":1507114324596},{"_id":"public/categories/音乐/index.html","hash":"c708251277b04d3ee804b17024d735094aa54894","modified":1507114324596},{"_id":"public/categories/数据收集/index.html","hash":"f5eb3c4cfe4516e59a59cb2b0d1a101da3f26e29","modified":1507114324597},{"_id":"public/categories/教程/index.html","hash":"eac0795e79755d8b560cdd60be834b22d877c51f","modified":1507114324597},{"_id":"public/categories/Python/index.html","hash":"234b3f3707903d34fe8dbb3d6860b46d12eadc2d","modified":1507114324597},{"_id":"public/index.html","hash":"a57310bf41a1d0eeaa54511f4bf227ebfe04271d","modified":1507114324597},{"_id":"public/page/2/index.html","hash":"7e748772899c92533f14cab0635140447876a559","modified":1507114324597},{"_id":"public/tags/hexo/index.html","hash":"d1a617e0b0eddcfd51550baddc120ce749f12be1","modified":1507114324597},{"_id":"public/tags/command-not-found/index.html","hash":"3f76ee23a155054e823e9650cec66d1ae76c1833","modified":1507114324597},{"_id":"public/tags/android/index.html","hash":"27357288676be3505d3d9e50b27ef94ece323bf4","modified":1507114324597},{"_id":"public/tags/view/index.html","hash":"5e5d62abeaa7459e248639fcb1b10674d4abcf19","modified":1507114324597},{"_id":"public/tags/tools/index.html","hash":"0ebe235bebb26208df4372cc1c45f01c7c841247","modified":1507114324598},{"_id":"public/tags/Hierarchy-Viewer/index.html","hash":"1ae69856ed6ea1a5b760d3e9b312ec684d7bac56","modified":1507114324598},{"_id":"public/tags/源码/index.html","hash":"dcfcf7d3814678fcac78339e39ed9ee56d912319","modified":1507114324598},{"_id":"public/tags/Rpg-Maker/index.html","hash":"54fcde50280e7304854ff942483e7b2b77fdeb47","modified":1507114324598},{"_id":"public/tags/自定义/index.html","hash":"bd6039ae71ddda74f3169458ca2a675ea0702412","modified":1507114324598},{"_id":"public/tags/音乐/index.html","hash":"1934defa7bab4d20415eefe99f080c3ada16232a","modified":1507114324598},{"_id":"public/tags/music/index.html","hash":"17874803dac1e807288e2c1f65af4d658e56e4fc","modified":1507114324598},{"_id":"public/tags/代码/index.html","hash":"1d0a9cf5691f9021e4333736b428e1834e2eff69","modified":1507114324598},{"_id":"public/tags/coding/index.html","hash":"7d2775b039428c99b8a970fecb0e6e2921650a61","modified":1507114324598},{"_id":"public/tags/python/index.html","hash":"bc7bfa84a39ecebbaf06d25a1943dc4c389ec4ac","modified":1507114324598},{"_id":"public/tags/api/index.html","hash":"223114ce441bb905bf04629175f5fb59b7a9477d","modified":1507114324598},{"_id":"public/tags/爬虫/index.html","hash":"34a5787dd47c1534fda35f4a44e5143b523f42c7","modified":1507114324599},{"_id":"public/tags/vpn/index.html","hash":"115e14b68d641f1393c4e8773206e628ff93349b","modified":1507114324599},{"_id":"public/tags/搬瓦工/index.html","hash":"fc20c451718f7074c78fd8400aa106eae80208cd","modified":1507114324599},{"_id":"public/tags/bandwagonhost/index.html","hash":"33aef5778e70ef207e08f199b91d7e9e399bfe2b","modified":1507114324610},{"_id":"public/tags/Shadowsocks/index.html","hash":"b42000082bd27e0e613ea7ac97e7056376dd49e5","modified":1507114324610},{"_id":"public/tags/ss/index.html","hash":"e6a7d3fbca566ea44c186adff9d8e0ef96810e58","modified":1507114324611},{"_id":"public/tags/peed-Dial-Plus/index.html","hash":"fb9279f3a5523eb93c413d82e34386c670da94d7","modified":1507114324611},{"_id":"public/tags/Earth-View-from-Google-Earth/index.html","hash":"a418ce321d0cd11fc27f78695205a26485465e0f","modified":1507114324611},{"_id":"public/tags/Chrome插件/index.html","hash":"bc21efd1ded1f53f1e1008c361963e0544ca94fb","modified":1507114324611},{"_id":"public/tags/Python/index.html","hash":"1c78a0a13a874ae0f07cc0bb83690892d9bfaec3","modified":1507114324611},{"_id":"public/CNAME","hash":"42171f5d661de34ed171085370b75a75a6f67374","modified":1507114324611},{"_id":"public/favicon.ico","hash":"e045ba4041efdf518f3dba99c17ab28e060ba100","modified":1507114324611},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1507114324611},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1507114324611},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1507114324611},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1507114324611},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1507114324611},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1507114324611},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1507114324611},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1507114324611},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1507114324611},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1507114324611},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1507114324611},{"_id":"public/images/myicon.jpeg","hash":"c4c281479e470c7099fbfedcbeccbb6e82401138","modified":1507114324611},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1507114324611},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1507114324611},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1507114324611},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1507114324612},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1507114324612},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1507114324612},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1507114324612},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1507114324612},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1507114324612},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1507114324612},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1507114324612},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1507114324612},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1507114324612},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1507114326725},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1507114326730},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1507114326735},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1507114326735},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1507114326743},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1507114326743},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1507114326743},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1507114326743},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1507114326743},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1507114326743},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1507114326743},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1507114326743},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1507114326743},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1507114326743},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1507114326743},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1507114326743},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1507114326743},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1507114326743},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1507114326744},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1507114326744},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1507114326744},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1507114326744},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1507114326744},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1507114326744},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1507114326744},{"_id":"public/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1507114326744},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1507114326744},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1507114326744},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1507114326744},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1507114326744},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1507114326744},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1507114326744},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1507114326744},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1507114326744},{"_id":"public/css/main.css","hash":"99ab881d65e0c57a65c3b9127b53cfa1ef4c4441","modified":1507114326744},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1507114326744},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1507114326744},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1507114326744},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1507114326744},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1507114326744},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1507114326744},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1507114326744},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1507114326745},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1507114326745},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1507114326745},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1507114326746},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1507114326773}],"Category":[{"name":"Hexo","_id":"cj8cwyb5b0005o3xw7ke7nppg"},{"name":"android","_id":"cj8cwyb5p000bo3xwq2hja28v"},{"name":"RpgMaker 教程","_id":"cj8cwyb6c000xo3xwozq87kzl"},{"name":"Android自定义View","_id":"cj8cwyb6k001do3xwx16fzsl0"},{"name":"音乐","_id":"cj8cwyb6k001ho3xwz7164xib"},{"name":"数据收集","_id":"cj8cwyb6s001lo3xw3u5l6m7j"},{"name":"教程","_id":"cj8cwyb6t001qo3xwyuqvwzj2"},{"name":"Python","_id":"cj8cwyb6x001to3xw5g9ylwu7"}],"Data":[],"Page":[{"_content":"<html>\n    <head>\n         <meta http-equiv=\"Content-Type\" content=\"text/html\" charset=\"UTF-8\" />\n         <title>公益404</title>\n    </head>\n\n    <body>\n         <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://www.gengzhibo.com\" homePageName=\"回到我的主页\"></script>\n    </body>\n</html>\n","source":"404.html","raw":"<html>\n    <head>\n         <meta http-equiv=\"Content-Type\" content=\"text/html\" charset=\"UTF-8\" />\n         <title>公益404</title>\n    </head>\n\n    <body>\n         <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://www.gengzhibo.com\" homePageName=\"回到我的主页\"></script>\n    </body>\n</html>\n","date":"2017-02-06T14:56:36.000Z","updated":"2017-02-06T14:56:36.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj8cwyb2r0000o3xw4tly9sqc","content":"<html>\n    <head>\n         <meta http-equiv=\"Content-Type\" content=\"text/html\" charset=\"UTF-8\">\n         <title>公益404</title>\n    </head>\n\n    <body>\n         <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://www.gengzhibo.com\" homepagename=\"回到我的主页\"></script>\n    </body>\n</html>\n","excerpt":"","more":"<html>\n    <head>\n         <meta http-equiv=\"Content-Type\" content=\"text/html\" charset=\"UTF-8\" />\n         <title>公益404</title>\n    </head>\n\n    <body>\n         <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://www.gengzhibo.com\" homePageName=\"回到我的主页\"></script>\n    </body>\n</html>\n"},{"title":"关于我","date":"2017-02-03T07:44:46.000Z","type":"about","comments":0,"_content":"\n\n既然点开了这里 那就让我多说几句应该也没什么意见吧\n\n一个日常写bug的我 总想要留点东西\n\n兴趣爱好十分的奇怪 写点东西丰富起来就应该能解释了\n\n更多内容还可以点开侧边栏的相关连接\n\n对内容或者有想其他意向的可以通过邮件gengzhibo@gengzhibo.net来联系我\n\n感谢你的支持\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-02-03 15:44:46\ntype: \"about\"\ncomments: false\n---\n\n\n既然点开了这里 那就让我多说几句应该也没什么意见吧\n\n一个日常写bug的我 总想要留点东西\n\n兴趣爱好十分的奇怪 写点东西丰富起来就应该能解释了\n\n更多内容还可以点开侧边栏的相关连接\n\n对内容或者有想其他意向的可以通过邮件gengzhibo@gengzhibo.net来联系我\n\n感谢你的支持\n","updated":"2017-02-06T14:56:36.000Z","path":"about/index.html","layout":"page","_id":"cj8cwyb4w0002o3xwx1gfsnrl","content":"<p>既然点开了这里 那就让我多说几句应该也没什么意见吧</p>\n<p>一个日常写bug的我 总想要留点东西</p>\n<p>兴趣爱好十分的奇怪 写点东西丰富起来就应该能解释了</p>\n<p>更多内容还可以点开侧边栏的相关连接</p>\n<p>对内容或者有想其他意向的可以通过邮件gengzhibo@gengzhibo.net来联系我</p>\n<p>感谢你的支持</p>\n","excerpt":"","more":"<p>既然点开了这里 那就让我多说几句应该也没什么意见吧</p>\n<p>一个日常写bug的我 总想要留点东西</p>\n<p>兴趣爱好十分的奇怪 写点东西丰富起来就应该能解释了</p>\n<p>更多内容还可以点开侧边栏的相关连接</p>\n<p>对内容或者有想其他意向的可以通过邮件gengzhibo@gengzhibo.net来联系我</p>\n<p>感谢你的支持</p>\n"},{"title":"tags","date":"2017-02-03T06:56:44.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-02-03 14:56:44\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-02-06T14:56:36.000Z","path":"tags/index.html","layout":"page","_id":"cj8cwyb590004o3xwpkosrnuc","content":"","excerpt":"","more":""},{"title":"categories","date":"2017-02-03T06:53:58.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-02-03 14:53:58\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-02-06T14:56:36.000Z","path":"categories/index.html","layout":"page","_id":"cj8cwyb5g0008o3xwe4rq2ov4","content":"","excerpt":"","more":""}],"Post":[{"title":"Hexo安装后hexo指令无法被找到的解决方法","date":"2017-04-23T06:05:36.000Z","_content":"\n>[Hexo](https://hexo.io/) 是一个十分便捷的博客搭建工具 但是经常会遇见安装完成后再次打开终端操作的时候提示 command not found: hexo的情况 对应的github的issues中也没有详细的解决办法在这提供一种可行的解决思路 希望能帮助到大家\n<!-- more -->\n\n*相关的环境在mac下 部分终端指令在linux下可能有所不同*\n\nHexo安装后 `command not found: hexo`的解决方法\n\n出现这种情况主要是node的版本问题 可以通过nvm来控制一下node的版本来解决\n\n## nvm的安装\n\nnvm是nodejs的版本控制工具,可以很轻松来控制node的版本\n\n下面推荐两个安装方法,可以根据实际情况进行处理\n\n1. 通过brew进行安装\n\n```\n  brew install nvm\n  //这个过程中可能需要安装gcc或者其它需要依赖的工具 按照提示一次安装好即可\n  mkdir ~/.nvm\n  export NVM_DIR=~/.nvm\n  .$(brew --prefix nvm)/nvm.sh\n  //这个步骤中mac下的brew需要通过--prefix这种形式完成\n```\n2. 通过curl进行安装\n```\n curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n通过curl安装需要重启终端\n\n3. 可能出现的问题  command not found: nvm\n确定以上正确执行过以上两个方法之一后 可能会遇到这种问题 需要你手动添加相关的环境变量\n编辑 ~/.bash_profile文件 如果使用zsh(iterm)的话是 ~/.zshrc\n将以下内容添加到bash_profile或zshrc文件中\n```\n  export NVM_DIR=\"/Users/yourcomptername/.nvm\"\n  [ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"  # This loads nvm\n```\nyourcomptername的位置要填你自己的路径\n\n## 安装hexo等\n```\n  nvm install 4 (此处的版本可以根据实际情况处理)\n  //确保以上都完成后再安装hexo\n  sudo npm install hexo-cli -g\n```\n\n至此应该可以在终端中输入hexo来验证一下是否安装成功\n\n然后就可以重启终端了 再次输入hexo后会出现 command not found: hexo的提示  一般情况下都是首次安装hexo后可以正常使用 后来再次使用的时候发现无法使用\n\n## 正文开始\n也不能说是正文 之前的都是为所依赖的环境做准备 顺便简单排除一下其它因素\n\n**查看node的版本情况**\n\n![查看node的版本情况](http://i1.piimg.com/567571/40394f9488d8e335.png)\n(这个截图是我配置完成后的截图 初次使用的时候可能有部分出入)\n\n在这里可以看到我的node版本是4.8.2\n\n再进行一下的操作\n```\n  //切换对应的版本\n  nvm use 4.8.2\n\n  //但是每次重启终端后改设置都会失效 所以要设置默认的版本\n  nvm alias default 4.8.2\n```\n再次使用nvm ls命令来查看 当和前面的途中绿色箭头指向你所指定的版本好的时候就说明设置成功了\n\n至此应该可以解决command not found: hexo的问题了\n\n如果还是不可以 可以尝试通过 `sudo npm install hexo-cli -g` 重装一下hexo\n","source":"_posts/Hexo安装后的小问题.md","raw":"---\ntitle: Hexo安装后hexo指令无法被找到的解决方法\ndate: 2017-04-23 14:05:36\ntags: [\"hexo\" , \"command not found\"]\ncategories: \"Hexo\"\n---\n\n>[Hexo](https://hexo.io/) 是一个十分便捷的博客搭建工具 但是经常会遇见安装完成后再次打开终端操作的时候提示 command not found: hexo的情况 对应的github的issues中也没有详细的解决办法在这提供一种可行的解决思路 希望能帮助到大家\n<!-- more -->\n\n*相关的环境在mac下 部分终端指令在linux下可能有所不同*\n\nHexo安装后 `command not found: hexo`的解决方法\n\n出现这种情况主要是node的版本问题 可以通过nvm来控制一下node的版本来解决\n\n## nvm的安装\n\nnvm是nodejs的版本控制工具,可以很轻松来控制node的版本\n\n下面推荐两个安装方法,可以根据实际情况进行处理\n\n1. 通过brew进行安装\n\n```\n  brew install nvm\n  //这个过程中可能需要安装gcc或者其它需要依赖的工具 按照提示一次安装好即可\n  mkdir ~/.nvm\n  export NVM_DIR=~/.nvm\n  .$(brew --prefix nvm)/nvm.sh\n  //这个步骤中mac下的brew需要通过--prefix这种形式完成\n```\n2. 通过curl进行安装\n```\n curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n通过curl安装需要重启终端\n\n3. 可能出现的问题  command not found: nvm\n确定以上正确执行过以上两个方法之一后 可能会遇到这种问题 需要你手动添加相关的环境变量\n编辑 ~/.bash_profile文件 如果使用zsh(iterm)的话是 ~/.zshrc\n将以下内容添加到bash_profile或zshrc文件中\n```\n  export NVM_DIR=\"/Users/yourcomptername/.nvm\"\n  [ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"  # This loads nvm\n```\nyourcomptername的位置要填你自己的路径\n\n## 安装hexo等\n```\n  nvm install 4 (此处的版本可以根据实际情况处理)\n  //确保以上都完成后再安装hexo\n  sudo npm install hexo-cli -g\n```\n\n至此应该可以在终端中输入hexo来验证一下是否安装成功\n\n然后就可以重启终端了 再次输入hexo后会出现 command not found: hexo的提示  一般情况下都是首次安装hexo后可以正常使用 后来再次使用的时候发现无法使用\n\n## 正文开始\n也不能说是正文 之前的都是为所依赖的环境做准备 顺便简单排除一下其它因素\n\n**查看node的版本情况**\n\n![查看node的版本情况](http://i1.piimg.com/567571/40394f9488d8e335.png)\n(这个截图是我配置完成后的截图 初次使用的时候可能有部分出入)\n\n在这里可以看到我的node版本是4.8.2\n\n再进行一下的操作\n```\n  //切换对应的版本\n  nvm use 4.8.2\n\n  //但是每次重启终端后改设置都会失效 所以要设置默认的版本\n  nvm alias default 4.8.2\n```\n再次使用nvm ls命令来查看 当和前面的途中绿色箭头指向你所指定的版本好的时候就说明设置成功了\n\n至此应该可以解决command not found: hexo的问题了\n\n如果还是不可以 可以尝试通过 `sudo npm install hexo-cli -g` 重装一下hexo\n","slug":"Hexo安装后的小问题","published":1,"updated":"2017-04-23T12:19:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8cwyb4o0001o3xw06s9ftsp","content":"<blockquote>\n<p><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a> 是一个十分便捷的博客搭建工具 但是经常会遇见安装完成后再次打开终端操作的时候提示 command not found: hexo的情况 对应的github的issues中也没有详细的解决办法在这提供一种可行的解决思路 希望能帮助到大家<br><a id=\"more\"></a></p>\n</blockquote>\n<p><em>相关的环境在mac下 部分终端指令在linux下可能有所不同</em></p>\n<p>Hexo安装后 <code>command not found: hexo</code>的解决方法</p>\n<p>出现这种情况主要是node的版本问题 可以通过nvm来控制一下node的版本来解决</p>\n<h2 id=\"nvm的安装\"><a href=\"#nvm的安装\" class=\"headerlink\" title=\"nvm的安装\"></a>nvm的安装</h2><p>nvm是nodejs的版本控制工具,可以很轻松来控制node的版本</p>\n<p>下面推荐两个安装方法,可以根据实际情况进行处理</p>\n<ol>\n<li>通过brew进行安装</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install nvm</div><div class=\"line\">//这个过程中可能需要安装gcc或者其它需要依赖的工具 按照提示一次安装好即可</div><div class=\"line\">mkdir ~/.nvm</div><div class=\"line\">export NVM_DIR=~/.nvm</div><div class=\"line\">.$(brew --prefix nvm)/nvm.sh</div><div class=\"line\">//这个步骤中mac下的brew需要通过--prefix这种形式完成</div></pre></td></tr></table></figure>\n<ol>\n<li>通过curl进行安装<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>通过curl安装需要重启终端</p>\n<ol>\n<li>可能出现的问题  command not found: nvm<br>确定以上正确执行过以上两个方法之一后 可能会遇到这种问题 需要你手动添加相关的环境变量<br>编辑 ~/.bash_profile文件 如果使用zsh(iterm)的话是 ~/.zshrc<br>将以下内容添加到bash_profile或zshrc文件中<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export NVM_DIR=&quot;/Users/yourcomptername/.nvm&quot;</div><div class=\"line\">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>yourcomptername的位置要填你自己的路径</p>\n<h2 id=\"安装hexo等\"><a href=\"#安装hexo等\" class=\"headerlink\" title=\"安装hexo等\"></a>安装hexo等</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm install 4 (此处的版本可以根据实际情况处理)</div><div class=\"line\">//确保以上都完成后再安装hexo</div><div class=\"line\">sudo npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<p>至此应该可以在终端中输入hexo来验证一下是否安装成功</p>\n<p>然后就可以重启终端了 再次输入hexo后会出现 command not found: hexo的提示  一般情况下都是首次安装hexo后可以正常使用 后来再次使用的时候发现无法使用</p>\n<h2 id=\"正文开始\"><a href=\"#正文开始\" class=\"headerlink\" title=\"正文开始\"></a>正文开始</h2><p>也不能说是正文 之前的都是为所依赖的环境做准备 顺便简单排除一下其它因素</p>\n<p><strong>查看node的版本情况</strong></p>\n<p><img src=\"http://i1.piimg.com/567571/40394f9488d8e335.png\" alt=\"查看node的版本情况\"><br>(这个截图是我配置完成后的截图 初次使用的时候可能有部分出入)</p>\n<p>在这里可以看到我的node版本是4.8.2</p>\n<p>再进行一下的操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//切换对应的版本</div><div class=\"line\">nvm use 4.8.2</div><div class=\"line\"></div><div class=\"line\">//但是每次重启终端后改设置都会失效 所以要设置默认的版本</div><div class=\"line\">nvm alias default 4.8.2</div></pre></td></tr></table></figure></p>\n<p>再次使用nvm ls命令来查看 当和前面的途中绿色箭头指向你所指定的版本好的时候就说明设置成功了</p>\n<p>至此应该可以解决command not found: hexo的问题了</p>\n<p>如果还是不可以 可以尝试通过 <code>sudo npm install hexo-cli -g</code> 重装一下hexo</p>\n","excerpt":"<blockquote>\n<p><a href=\"https://hexo.io/\">Hexo</a> 是一个十分便捷的博客搭建工具 但是经常会遇见安装完成后再次打开终端操作的时候提示 command not found: hexo的情况 对应的github的issues中也没有详细的解决办法在这提供一种可行的解决思路 希望能帮助到大家<br>","more":"</p>\n</blockquote>\n<p><em>相关的环境在mac下 部分终端指令在linux下可能有所不同</em></p>\n<p>Hexo安装后 <code>command not found: hexo</code>的解决方法</p>\n<p>出现这种情况主要是node的版本问题 可以通过nvm来控制一下node的版本来解决</p>\n<h2 id=\"nvm的安装\"><a href=\"#nvm的安装\" class=\"headerlink\" title=\"nvm的安装\"></a>nvm的安装</h2><p>nvm是nodejs的版本控制工具,可以很轻松来控制node的版本</p>\n<p>下面推荐两个安装方法,可以根据实际情况进行处理</p>\n<ol>\n<li>通过brew进行安装</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install nvm</div><div class=\"line\">//这个过程中可能需要安装gcc或者其它需要依赖的工具 按照提示一次安装好即可</div><div class=\"line\">mkdir ~/.nvm</div><div class=\"line\">export NVM_DIR=~/.nvm</div><div class=\"line\">.$(brew --prefix nvm)/nvm.sh</div><div class=\"line\">//这个步骤中mac下的brew需要通过--prefix这种形式完成</div></pre></td></tr></table></figure>\n<ol>\n<li>通过curl进行安装<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>通过curl安装需要重启终端</p>\n<ol>\n<li>可能出现的问题  command not found: nvm<br>确定以上正确执行过以上两个方法之一后 可能会遇到这种问题 需要你手动添加相关的环境变量<br>编辑 ~/.bash_profile文件 如果使用zsh(iterm)的话是 ~/.zshrc<br>将以下内容添加到bash_profile或zshrc文件中<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export NVM_DIR=&quot;/Users/yourcomptername/.nvm&quot;</div><div class=\"line\">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>yourcomptername的位置要填你自己的路径</p>\n<h2 id=\"安装hexo等\"><a href=\"#安装hexo等\" class=\"headerlink\" title=\"安装hexo等\"></a>安装hexo等</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm install 4 (此处的版本可以根据实际情况处理)</div><div class=\"line\">//确保以上都完成后再安装hexo</div><div class=\"line\">sudo npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<p>至此应该可以在终端中输入hexo来验证一下是否安装成功</p>\n<p>然后就可以重启终端了 再次输入hexo后会出现 command not found: hexo的提示  一般情况下都是首次安装hexo后可以正常使用 后来再次使用的时候发现无法使用</p>\n<h2 id=\"正文开始\"><a href=\"#正文开始\" class=\"headerlink\" title=\"正文开始\"></a>正文开始</h2><p>也不能说是正文 之前的都是为所依赖的环境做准备 顺便简单排除一下其它因素</p>\n<p><strong>查看node的版本情况</strong></p>\n<p><img src=\"http://i1.piimg.com/567571/40394f9488d8e335.png\" alt=\"查看node的版本情况\"><br>(这个截图是我配置完成后的截图 初次使用的时候可能有部分出入)</p>\n<p>在这里可以看到我的node版本是4.8.2</p>\n<p>再进行一下的操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//切换对应的版本</div><div class=\"line\">nvm use 4.8.2</div><div class=\"line\"></div><div class=\"line\">//但是每次重启终端后改设置都会失效 所以要设置默认的版本</div><div class=\"line\">nvm alias default 4.8.2</div></pre></td></tr></table></figure></p>\n<p>再次使用nvm ls命令来查看 当和前面的途中绿色箭头指向你所指定的版本好的时候就说明设置成功了</p>\n<p>至此应该可以解决command not found: hexo的问题了</p>\n<p>如果还是不可以 可以尝试通过 <code>sudo npm install hexo-cli -g</code> 重装一下hexo</p>"},{"title":"Android Tools 之一 Hierarchy Viewer","date":"2017-02-03T10:02:56.000Z","_content":"# Android Tools 之一 Hierarchy Viewer\n\n>本系列旨在介绍一些被忽略的优质工具 毕竟 能被当做自带的工具总有些做的比较好的地方不是\n\n## Hierarchy Viewer\n\nHierarchy Viewer是一个可以用来查看View的使用工具 android sdk中自带\n\n[Optimizing Your UI -官方网站 需科学上网](https://developer.android.com/studio/profile/optimize-ui.html#lint)\n\n### 启动Hierarchy Viewer\n\nhierarchyviewer工具在sdk/tools路径下\n<!-- more -->\n\n再次打开后会出现如下提示\n```\nThe standalone version of hieararchyviewer is deprecated.\nPlease use Android Device Monitor (tools/monitor) instead.\n```\n主要想说的就是 单独使用hieararchyviewer已经不被建议  建议使用Android Device Monitor(Android Device Monitor的相关使用后续会详细介绍)\n\n直接运行monitor或者在在Android Studio -> tools -> android -> Android Device Monitor中将hieararchyviewer工具打开\n\n**以下对hieararchyviewer工具进行操作均为直接打开hieararchyviewer工具 和通过monitor工具打开的hieararchyviewer的UI可能略有不同  以直接打开hieararchyviewer工具操作为准**\n\n\n#### 无法正常使用\n\n在连接过程中可能遇到无法连接到手机的问题 详情参考以下文章\n\n[HierachyViewer无法连接真机调试](http://blog.csdn.net/yafeng_0306/article/details/17224001)\n\n[HierachyViewer无法连接真机调试详解](http://maider.blog.sohu.com/255448342.html)\n\n### 使用Hierarchy Viewer\n\n![Hierarchy Viewer 1-1](http://i1.piimg.com/567571/95498e5576c157e1.png)\n\n成功连接后会出现如上页面\n\n当前页面正在显示的进程被加粗显示\n\n(那些看着是空的位置 进入后会显示通知栏中的View布局)\n\n选择想要查看的进程后进入 Load View Hierarchy页面\n\n![Hierarchy Viewer 1-2](http://p1.bpimg.com/567571/08b13a1f4b3c6b97.png)\n\n下面对不同部分分别介绍一下\n\n![Hierarchy Viewer 1-3](http://i1.piimg.com/567571/ed16834323343ea2.png)\n\n1. Save as PNG: 把这个布局的层级另存为png格式\n2. Capture Layers: 把这个布局的层级另存为psd格式\n\n  可以查看各层级的情况\n\n  ![Capture Layers](http://i1.piimg.com/567571/62b7d9584993e3a1.png)\n\n3. Load View Hierarchy: 重新载入这个view层级图\n4. Evaluate Contrast: 查看层级布局的具体情况\n\n  ![Evaluate Contrast](http://i1.piimg.com/567571/594698903a3e6fa1.png)\n\n5. Display View: 在单独的一个窗口中显示所选择的view\n6. Invalidate Layout: 重绘当前窗口\n7. Request Layout: 对当前view进行layout\n8. Dump DisplayList: 使当前view输出它的显示列表到logcat中\n9. Dump Theme: 下载这个view主题的资源\n10. Profile Node: 得到measure，layout，draw的性能指示器\n\n![Hierarchy Viewer 1-6](http://p1.bpimg.com/567571/b7a6efcd6d505116.png)\n\n选取某个view节点可以查看选取的View的详情\n\n![Hierarchy Viewer 1-6](http://i1.piimg.com/567571/3b66b1216e20e81d.png)\n\n关于View的渲染机制可以参考一下本人关于android View相关机制解析的文章 [Android View 相关源码分析之三 View的绘制过程 ](http://www.jianshu.com/p/8f3e45663d06)\n\n关于对应渲染时间的速度中  我么知道View绘制分为measure layout 和draw三个过程 三个点分布对应以上三个过程 分为绿 黄 红三个颜色  绿色代表该View在本view tree中速度是前50% 黄色表示后50% 而红色表示是花费时间最长的\n\n还记得最开始使用Hierarchy Viewer中上方有Inspect screenshot的按钮 可以查看当前Activity的像素情况\n\n![Inspect screenshot](http://p1.bqimg.com/567571/82cd3eeaf8663969.png)\n\n(层级十分的清晰 就不仔细解释了)\n\n解释下相关功能\n\n1. Save as PNG: 保存当前显示的页面为png格式\n2. Refresh Screenshot: 刷新像素视图和放大镜视图(右边那两个)\n3. Refresh Tree: 刷新View tree\n4. Load Overlay: 在右侧放大镜视图中中加载一个覆盖图(官网中没有给出详细的定义 主要根据相关介绍理解 略有偏差 欢迎指出)\n5. Show In Loupe: 在中间的像素视图中显示之前加载的图片\n6. Auto Refresh: 会根据下发设置的Refresh Rate的时间自动\n更新View tree\n\n\n以上\n","source":"_posts/HierarchyViewer.md","raw":"---\ntitle: Android Tools 之一 Hierarchy Viewer\ndate: 2017-02-03 18:02:56\ntags: [\"android\" , \"view\" , \"tools\" , \"Hierarchy Viewer\"]\ncategories: \"android\"\n---\n# Android Tools 之一 Hierarchy Viewer\n\n>本系列旨在介绍一些被忽略的优质工具 毕竟 能被当做自带的工具总有些做的比较好的地方不是\n\n## Hierarchy Viewer\n\nHierarchy Viewer是一个可以用来查看View的使用工具 android sdk中自带\n\n[Optimizing Your UI -官方网站 需科学上网](https://developer.android.com/studio/profile/optimize-ui.html#lint)\n\n### 启动Hierarchy Viewer\n\nhierarchyviewer工具在sdk/tools路径下\n<!-- more -->\n\n再次打开后会出现如下提示\n```\nThe standalone version of hieararchyviewer is deprecated.\nPlease use Android Device Monitor (tools/monitor) instead.\n```\n主要想说的就是 单独使用hieararchyviewer已经不被建议  建议使用Android Device Monitor(Android Device Monitor的相关使用后续会详细介绍)\n\n直接运行monitor或者在在Android Studio -> tools -> android -> Android Device Monitor中将hieararchyviewer工具打开\n\n**以下对hieararchyviewer工具进行操作均为直接打开hieararchyviewer工具 和通过monitor工具打开的hieararchyviewer的UI可能略有不同  以直接打开hieararchyviewer工具操作为准**\n\n\n#### 无法正常使用\n\n在连接过程中可能遇到无法连接到手机的问题 详情参考以下文章\n\n[HierachyViewer无法连接真机调试](http://blog.csdn.net/yafeng_0306/article/details/17224001)\n\n[HierachyViewer无法连接真机调试详解](http://maider.blog.sohu.com/255448342.html)\n\n### 使用Hierarchy Viewer\n\n![Hierarchy Viewer 1-1](http://i1.piimg.com/567571/95498e5576c157e1.png)\n\n成功连接后会出现如上页面\n\n当前页面正在显示的进程被加粗显示\n\n(那些看着是空的位置 进入后会显示通知栏中的View布局)\n\n选择想要查看的进程后进入 Load View Hierarchy页面\n\n![Hierarchy Viewer 1-2](http://p1.bpimg.com/567571/08b13a1f4b3c6b97.png)\n\n下面对不同部分分别介绍一下\n\n![Hierarchy Viewer 1-3](http://i1.piimg.com/567571/ed16834323343ea2.png)\n\n1. Save as PNG: 把这个布局的层级另存为png格式\n2. Capture Layers: 把这个布局的层级另存为psd格式\n\n  可以查看各层级的情况\n\n  ![Capture Layers](http://i1.piimg.com/567571/62b7d9584993e3a1.png)\n\n3. Load View Hierarchy: 重新载入这个view层级图\n4. Evaluate Contrast: 查看层级布局的具体情况\n\n  ![Evaluate Contrast](http://i1.piimg.com/567571/594698903a3e6fa1.png)\n\n5. Display View: 在单独的一个窗口中显示所选择的view\n6. Invalidate Layout: 重绘当前窗口\n7. Request Layout: 对当前view进行layout\n8. Dump DisplayList: 使当前view输出它的显示列表到logcat中\n9. Dump Theme: 下载这个view主题的资源\n10. Profile Node: 得到measure，layout，draw的性能指示器\n\n![Hierarchy Viewer 1-6](http://p1.bpimg.com/567571/b7a6efcd6d505116.png)\n\n选取某个view节点可以查看选取的View的详情\n\n![Hierarchy Viewer 1-6](http://i1.piimg.com/567571/3b66b1216e20e81d.png)\n\n关于View的渲染机制可以参考一下本人关于android View相关机制解析的文章 [Android View 相关源码分析之三 View的绘制过程 ](http://www.jianshu.com/p/8f3e45663d06)\n\n关于对应渲染时间的速度中  我么知道View绘制分为measure layout 和draw三个过程 三个点分布对应以上三个过程 分为绿 黄 红三个颜色  绿色代表该View在本view tree中速度是前50% 黄色表示后50% 而红色表示是花费时间最长的\n\n还记得最开始使用Hierarchy Viewer中上方有Inspect screenshot的按钮 可以查看当前Activity的像素情况\n\n![Inspect screenshot](http://p1.bqimg.com/567571/82cd3eeaf8663969.png)\n\n(层级十分的清晰 就不仔细解释了)\n\n解释下相关功能\n\n1. Save as PNG: 保存当前显示的页面为png格式\n2. Refresh Screenshot: 刷新像素视图和放大镜视图(右边那两个)\n3. Refresh Tree: 刷新View tree\n4. Load Overlay: 在右侧放大镜视图中中加载一个覆盖图(官网中没有给出详细的定义 主要根据相关介绍理解 略有偏差 欢迎指出)\n5. Show In Loupe: 在中间的像素视图中显示之前加载的图片\n6. Auto Refresh: 会根据下发设置的Refresh Rate的时间自动\n更新View tree\n\n\n以上\n","slug":"HierarchyViewer","published":1,"updated":"2017-02-06T14:56:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8cwyb4z0003o3xw5i80pfg6","content":"<h1 id=\"Android-Tools-之一-Hierarchy-Viewer\"><a href=\"#Android-Tools-之一-Hierarchy-Viewer\" class=\"headerlink\" title=\"Android Tools 之一 Hierarchy Viewer\"></a>Android Tools 之一 Hierarchy Viewer</h1><blockquote>\n<p>本系列旨在介绍一些被忽略的优质工具 毕竟 能被当做自带的工具总有些做的比较好的地方不是</p>\n</blockquote>\n<h2 id=\"Hierarchy-Viewer\"><a href=\"#Hierarchy-Viewer\" class=\"headerlink\" title=\"Hierarchy Viewer\"></a>Hierarchy Viewer</h2><p>Hierarchy Viewer是一个可以用来查看View的使用工具 android sdk中自带</p>\n<p><a href=\"https://developer.android.com/studio/profile/optimize-ui.html#lint\" target=\"_blank\" rel=\"external\">Optimizing Your UI -官方网站 需科学上网</a></p>\n<h3 id=\"启动Hierarchy-Viewer\"><a href=\"#启动Hierarchy-Viewer\" class=\"headerlink\" title=\"启动Hierarchy Viewer\"></a>启动Hierarchy Viewer</h3><p>hierarchyviewer工具在sdk/tools路径下<br><a id=\"more\"></a></p>\n<p>再次打开后会出现如下提示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">The standalone version of hieararchyviewer is deprecated.</div><div class=\"line\">Please use Android Device Monitor (tools/monitor) instead.</div></pre></td></tr></table></figure></p>\n<p>主要想说的就是 单独使用hieararchyviewer已经不被建议  建议使用Android Device Monitor(Android Device Monitor的相关使用后续会详细介绍)</p>\n<p>直接运行monitor或者在在Android Studio -&gt; tools -&gt; android -&gt; Android Device Monitor中将hieararchyviewer工具打开</p>\n<p><strong>以下对hieararchyviewer工具进行操作均为直接打开hieararchyviewer工具 和通过monitor工具打开的hieararchyviewer的UI可能略有不同  以直接打开hieararchyviewer工具操作为准</strong></p>\n<h4 id=\"无法正常使用\"><a href=\"#无法正常使用\" class=\"headerlink\" title=\"无法正常使用\"></a>无法正常使用</h4><p>在连接过程中可能遇到无法连接到手机的问题 详情参考以下文章</p>\n<p><a href=\"http://blog.csdn.net/yafeng_0306/article/details/17224001\" target=\"_blank\" rel=\"external\">HierachyViewer无法连接真机调试</a></p>\n<p><a href=\"http://maider.blog.sohu.com/255448342.html\" target=\"_blank\" rel=\"external\">HierachyViewer无法连接真机调试详解</a></p>\n<h3 id=\"使用Hierarchy-Viewer\"><a href=\"#使用Hierarchy-Viewer\" class=\"headerlink\" title=\"使用Hierarchy Viewer\"></a>使用Hierarchy Viewer</h3><p><img src=\"http://i1.piimg.com/567571/95498e5576c157e1.png\" alt=\"Hierarchy Viewer 1-1\"></p>\n<p>成功连接后会出现如上页面</p>\n<p>当前页面正在显示的进程被加粗显示</p>\n<p>(那些看着是空的位置 进入后会显示通知栏中的View布局)</p>\n<p>选择想要查看的进程后进入 Load View Hierarchy页面</p>\n<p><img src=\"http://p1.bpimg.com/567571/08b13a1f4b3c6b97.png\" alt=\"Hierarchy Viewer 1-2\"></p>\n<p>下面对不同部分分别介绍一下</p>\n<p><img src=\"http://i1.piimg.com/567571/ed16834323343ea2.png\" alt=\"Hierarchy Viewer 1-3\"></p>\n<ol>\n<li>Save as PNG: 把这个布局的层级另存为png格式</li>\n<li><p>Capture Layers: 把这个布局的层级另存为psd格式</p>\n<p>可以查看各层级的情况</p>\n<p><img src=\"http://i1.piimg.com/567571/62b7d9584993e3a1.png\" alt=\"Capture Layers\"></p>\n</li>\n<li><p>Load View Hierarchy: 重新载入这个view层级图</p>\n</li>\n<li><p>Evaluate Contrast: 查看层级布局的具体情况</p>\n<p><img src=\"http://i1.piimg.com/567571/594698903a3e6fa1.png\" alt=\"Evaluate Contrast\"></p>\n</li>\n<li><p>Display View: 在单独的一个窗口中显示所选择的view</p>\n</li>\n<li>Invalidate Layout: 重绘当前窗口</li>\n<li>Request Layout: 对当前view进行layout</li>\n<li>Dump DisplayList: 使当前view输出它的显示列表到logcat中</li>\n<li>Dump Theme: 下载这个view主题的资源</li>\n<li>Profile Node: 得到measure，layout，draw的性能指示器</li>\n</ol>\n<p><img src=\"http://p1.bpimg.com/567571/b7a6efcd6d505116.png\" alt=\"Hierarchy Viewer 1-6\"></p>\n<p>选取某个view节点可以查看选取的View的详情</p>\n<p><img src=\"http://i1.piimg.com/567571/3b66b1216e20e81d.png\" alt=\"Hierarchy Viewer 1-6\"></p>\n<p>关于View的渲染机制可以参考一下本人关于android View相关机制解析的文章 <a href=\"http://www.jianshu.com/p/8f3e45663d06\" target=\"_blank\" rel=\"external\">Android View 相关源码分析之三 View的绘制过程 </a></p>\n<p>关于对应渲染时间的速度中  我么知道View绘制分为measure layout 和draw三个过程 三个点分布对应以上三个过程 分为绿 黄 红三个颜色  绿色代表该View在本view tree中速度是前50% 黄色表示后50% 而红色表示是花费时间最长的</p>\n<p>还记得最开始使用Hierarchy Viewer中上方有Inspect screenshot的按钮 可以查看当前Activity的像素情况</p>\n<p><img src=\"http://p1.bqimg.com/567571/82cd3eeaf8663969.png\" alt=\"Inspect screenshot\"></p>\n<p>(层级十分的清晰 就不仔细解释了)</p>\n<p>解释下相关功能</p>\n<ol>\n<li>Save as PNG: 保存当前显示的页面为png格式</li>\n<li>Refresh Screenshot: 刷新像素视图和放大镜视图(右边那两个)</li>\n<li>Refresh Tree: 刷新View tree</li>\n<li>Load Overlay: 在右侧放大镜视图中中加载一个覆盖图(官网中没有给出详细的定义 主要根据相关介绍理解 略有偏差 欢迎指出)</li>\n<li>Show In Loupe: 在中间的像素视图中显示之前加载的图片</li>\n<li>Auto Refresh: 会根据下发设置的Refresh Rate的时间自动<br>更新View tree</li>\n</ol>\n<p>以上</p>\n","excerpt":"<h1 id=\"Android-Tools-之一-Hierarchy-Viewer\"><a href=\"#Android-Tools-之一-Hierarchy-Viewer\" class=\"headerlink\" title=\"Android Tools 之一 Hierarchy Viewer\"></a>Android Tools 之一 Hierarchy Viewer</h1><blockquote>\n<p>本系列旨在介绍一些被忽略的优质工具 毕竟 能被当做自带的工具总有些做的比较好的地方不是</p>\n</blockquote>\n<h2 id=\"Hierarchy-Viewer\"><a href=\"#Hierarchy-Viewer\" class=\"headerlink\" title=\"Hierarchy Viewer\"></a>Hierarchy Viewer</h2><p>Hierarchy Viewer是一个可以用来查看View的使用工具 android sdk中自带</p>\n<p><a href=\"https://developer.android.com/studio/profile/optimize-ui.html#lint\">Optimizing Your UI -官方网站 需科学上网</a></p>\n<h3 id=\"启动Hierarchy-Viewer\"><a href=\"#启动Hierarchy-Viewer\" class=\"headerlink\" title=\"启动Hierarchy Viewer\"></a>启动Hierarchy Viewer</h3><p>hierarchyviewer工具在sdk/tools路径下<br>","more":"</p>\n<p>再次打开后会出现如下提示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">The standalone version of hieararchyviewer is deprecated.</div><div class=\"line\">Please use Android Device Monitor (tools/monitor) instead.</div></pre></td></tr></table></figure></p>\n<p>主要想说的就是 单独使用hieararchyviewer已经不被建议  建议使用Android Device Monitor(Android Device Monitor的相关使用后续会详细介绍)</p>\n<p>直接运行monitor或者在在Android Studio -&gt; tools -&gt; android -&gt; Android Device Monitor中将hieararchyviewer工具打开</p>\n<p><strong>以下对hieararchyviewer工具进行操作均为直接打开hieararchyviewer工具 和通过monitor工具打开的hieararchyviewer的UI可能略有不同  以直接打开hieararchyviewer工具操作为准</strong></p>\n<h4 id=\"无法正常使用\"><a href=\"#无法正常使用\" class=\"headerlink\" title=\"无法正常使用\"></a>无法正常使用</h4><p>在连接过程中可能遇到无法连接到手机的问题 详情参考以下文章</p>\n<p><a href=\"http://blog.csdn.net/yafeng_0306/article/details/17224001\">HierachyViewer无法连接真机调试</a></p>\n<p><a href=\"http://maider.blog.sohu.com/255448342.html\">HierachyViewer无法连接真机调试详解</a></p>\n<h3 id=\"使用Hierarchy-Viewer\"><a href=\"#使用Hierarchy-Viewer\" class=\"headerlink\" title=\"使用Hierarchy Viewer\"></a>使用Hierarchy Viewer</h3><p><img src=\"http://i1.piimg.com/567571/95498e5576c157e1.png\" alt=\"Hierarchy Viewer 1-1\"></p>\n<p>成功连接后会出现如上页面</p>\n<p>当前页面正在显示的进程被加粗显示</p>\n<p>(那些看着是空的位置 进入后会显示通知栏中的View布局)</p>\n<p>选择想要查看的进程后进入 Load View Hierarchy页面</p>\n<p><img src=\"http://p1.bpimg.com/567571/08b13a1f4b3c6b97.png\" alt=\"Hierarchy Viewer 1-2\"></p>\n<p>下面对不同部分分别介绍一下</p>\n<p><img src=\"http://i1.piimg.com/567571/ed16834323343ea2.png\" alt=\"Hierarchy Viewer 1-3\"></p>\n<ol>\n<li>Save as PNG: 把这个布局的层级另存为png格式</li>\n<li><p>Capture Layers: 把这个布局的层级另存为psd格式</p>\n<p>可以查看各层级的情况</p>\n<p><img src=\"http://i1.piimg.com/567571/62b7d9584993e3a1.png\" alt=\"Capture Layers\"></p>\n</li>\n<li><p>Load View Hierarchy: 重新载入这个view层级图</p>\n</li>\n<li><p>Evaluate Contrast: 查看层级布局的具体情况</p>\n<p><img src=\"http://i1.piimg.com/567571/594698903a3e6fa1.png\" alt=\"Evaluate Contrast\"></p>\n</li>\n<li><p>Display View: 在单独的一个窗口中显示所选择的view</p>\n</li>\n<li>Invalidate Layout: 重绘当前窗口</li>\n<li>Request Layout: 对当前view进行layout</li>\n<li>Dump DisplayList: 使当前view输出它的显示列表到logcat中</li>\n<li>Dump Theme: 下载这个view主题的资源</li>\n<li>Profile Node: 得到measure，layout，draw的性能指示器</li>\n</ol>\n<p><img src=\"http://p1.bpimg.com/567571/b7a6efcd6d505116.png\" alt=\"Hierarchy Viewer 1-6\"></p>\n<p>选取某个view节点可以查看选取的View的详情</p>\n<p><img src=\"http://i1.piimg.com/567571/3b66b1216e20e81d.png\" alt=\"Hierarchy Viewer 1-6\"></p>\n<p>关于View的渲染机制可以参考一下本人关于android View相关机制解析的文章 <a href=\"http://www.jianshu.com/p/8f3e45663d06\">Android View 相关源码分析之三 View的绘制过程 </a></p>\n<p>关于对应渲染时间的速度中  我么知道View绘制分为measure layout 和draw三个过程 三个点分布对应以上三个过程 分为绿 黄 红三个颜色  绿色代表该View在本view tree中速度是前50% 黄色表示后50% 而红色表示是花费时间最长的</p>\n<p>还记得最开始使用Hierarchy Viewer中上方有Inspect screenshot的按钮 可以查看当前Activity的像素情况</p>\n<p><img src=\"http://p1.bqimg.com/567571/82cd3eeaf8663969.png\" alt=\"Inspect screenshot\"></p>\n<p>(层级十分的清晰 就不仔细解释了)</p>\n<p>解释下相关功能</p>\n<ol>\n<li>Save as PNG: 保存当前显示的页面为png格式</li>\n<li>Refresh Screenshot: 刷新像素视图和放大镜视图(右边那两个)</li>\n<li>Refresh Tree: 刷新View tree</li>\n<li>Load Overlay: 在右侧放大镜视图中中加载一个覆盖图(官网中没有给出详细的定义 主要根据相关介绍理解 略有偏差 欢迎指出)</li>\n<li>Show In Loupe: 在中间的像素视图中显示之前加载的图片</li>\n<li>Auto Refresh: 会根据下发设置的Refresh Rate的时间自动<br>更新View tree</li>\n</ol>\n<p>以上</p>"},{"title":"Android View 相关源码分析之四 LinearLayout源码分析","date":"2017-02-03T09:55:53.000Z","_content":"## LinearLayout 源码分析\n### measure过程\n#### 主要过程\n* 根据布局方向选择measure过程分支\n* 初始化相关变量\n* 对View进行第一次测量\n* mTotalLength的再次测量\n* 二次测量部分View和对为测量的子View进行测量\n\n<!-- more -->\n\n```java\n  protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n      //判断布局方向\n      if (mOrientation == VERTICAL) {\n          measureVertical(widthMeasureSpec, heightMeasureSpec);\n      } else {\n          measureHorizontal(widthMeasureSpec, heightMeasureSpec);\n      }\n  }\n```\nmeasureVertical和measureHorizontal只是布局方向上的区别 以下主要分析measureVertical方法\n\n#### 初始化相关变量\n```java\n  //mTotalLength是记录内部使用的高度也就是子View的高度和 而不是LinearLayout的高度\n  mTotalLength = 0;\n  //子视图的最大宽度(不包括layout_weight>0的子View)\n  int maxWidth = 0;\n  int childState = 0;\n  int alternativeMaxWidth = 0;\n  //子视图的最大宽度(仅包含layout_weight>0的子View)\n  int weightedMaxWidth = 0;\n  //子视图是否均为fillParent 用于判断是否需要重新计算\n  boolean allFillParent = true;\n  //权重值的总和\n  float totalWeight = 0;\n  //子View的数量(统一级别下)\n  final int count = getVirtualChildCount();\n  //高度宽度模式\n  final int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n  final int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n  //子View的宽度是否需要由父View决定\n  boolean matchWidth = false;\n  boolean skippedMeasure = false;\n  //第几个子View的baseLine作为LinearLayout的基准线\n  final int baselineChildIndex = mBaselineAlignedChildIndex;  \n  //mUseLargestChild为是否使用最大子元素的尺寸作为标准再次测量\n  final boolean useLargestChild = mUseLargestChild;\n  //子View中最高高度\n  int largestChildHeight = Integer.MIN_VALUE;\n```\n\n#### 第一次测量\n```java\n  // See how tall everyone is. Also remember max width.\n  for (int i = 0; i < count; ++i) {\n      final View child = getVirtualChildAt(i);\n\n      // 测量为null的子视图的高度\n      // measureNullChild() 暂时返回 0 便于扩展\n      if (child == null) {\n          mTotalLength += measureNullChild(i);\n          continue;\n      }\n      //Visibility为Gone的时候跳过该View\n      // getChildrenSkipCount()方法同样返回0 便于扩展\n      if (child.getVisibility() == View.GONE) {\n         i += getChildrenSkipCount(child, i);\n         continue;\n      }\n      //根据showDivider的值(通过hasDividerBeforeChildAt()) 来决定当前子View是否需要添加分割线的高度\n      if (hasDividerBeforeChildAt(i)) {\n          mTotalLength += mDividerHeight;\n      }\n\n      //会将子view的LayoutParams强转为父View的LayoutParams类型\n      LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)child.getLayoutParams();\n\n      totalWeight += lp.weight;\n\n      if (heightMode == MeasureSpec.EXACTLY && lp.height == 0 && lp.weight > 0) {\n          // 满足该条件的话 不需要现在计算该子视图的高度 测量工作会在之后进行\n          // 若子View的height=0 且weight> 0 则说明该View希望使用的是LinearLayout的剩余空间\n          // LinearLayout是EXACTLY模式的说明LinearLayout高度已经确定 不需要依赖子View的测量结果来计算自己 就无需测量该子View\n\n          final int totalLength = mTotalLength;\n          mTotalLength = Math.max(totalLength, totalLength + lp.topMargin + lp.bottomMargin);\n          skippedMeasure = true;\n      } else {\n          //测量子View\n\n          int oldHeight = Integer.MIN_VALUE;\n\n          //当前View的height=0 且weight> 0 则说明该LinearLayout的高度需要靠子View测量(不需要的在上面分支处理了)\n          //将子View的高度设为-1 防止子View高度为0\n          if (lp.height == 0 && lp.weight > 0) {\n              oldHeight = 0;\n              lp.height = LayoutParams.WRAP_CONTENT;\n          }\n\n          //调用子View的measureChildWithMargins() 对子View进行测量\n          //第四个参数表示当前已使用的宽度  因为是竖直模式 所以为0\n          //最后一个参数表示已使用的高度 如果之前的子View或者当前的View有weight属性 则当前子视图使用 LinearLayout 的所有高度 已使用的高度为0\n          measureChildBeforeLayout(child, i, widthMeasureSpec, 0, heightMeasureSpec,\n                 totalWeight == 0 ? mTotalLength : 0);\n\n          if (oldHeight != Integer.MIN_VALUE) {\n             //测量完成后 重置子View高度\n             lp.height = oldHeight;\n          }\n\n          final int childHeight = child.getMeasuredHeight();\n          final int totalLength = mTotalLength;\n          // 比较child测量前后总高度 取较大值\n          ///getNextLocationOffset() 返回0 便于扩展\n          mTotalLength = Math.max(totalLength, totalLength + childHeight + lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));\n          // 设置最高子视图大小\n          if (useLargestChild) {\n              largestChildHeight = Math.max(childHeight, largestChildHeight);\n          }\n      }\n\n       // mBaselineChildTop 表示指定的 baseline 的子视图的顶部高度\n      if ((baselineChildIndex >= 0) && (baselineChildIndex == i + 1)) {\n         mBaselineChildTop = mTotalLength;\n      }\n\n      // 设置为 baseline 的子视图的前面不允许设置 weiget 属性\n      if (i < baselineChildIndex && lp.weight > 0) {\n          throw new RuntimeException(\"A child of LinearLayout with index \"\n                  + \"less than mBaselineAlignedChildIndex has weight > 0, which \"\n                  + \"won't work.  Either remove the weight, or don't set \"\n                  + \"mBaselineAlignedChildIndex.\");\n      }\n\n      // 宽度测量相关\n\n      boolean matchWidthLocally = false;\n\n      //当LinearLayout非EXACTLY模式 并且自View为MATCH_PARENT时\n      //设置matchWidth和matchWidthLocally为true\n      //该子View占据LinearLayout水平方向上所有空间\n\n      if (widthMode != MeasureSpec.EXACTLY && lp.width == LayoutParams.MATCH_PARENT) {\n          matchWidth = true;\n          matchWidthLocally = true;\n      }\n\n      final int margin = lp.leftMargin + lp.rightMargin;\n      final int measuredWidth = child.getMeasuredWidth() + margin;\n\n      //对一堆变量赋值\n      maxWidth = Math.max(maxWidth, measuredWidth);\n      childState = combineMeasuredStates(childState, child.getMeasuredState());\n\n      allFillParent = allFillParent && lp.width == LayoutParams.MATCH_PARENT;\n      if (lp.weight > 0) {\n          weightedMaxWidth = Math.max(weightedMaxWidth,\n                  matchWidthLocally ? margin : measuredWidth);\n      } else {\n          alternativeMaxWidth = Math.max(alternativeMaxWidth,\n                  matchWidthLocally ? margin : measuredWidth);\n      }\n\n      i += getChildrenSkipCount(child, i);\n  }\n```\n\n#### 二次测量mTotalLength\n\n```java\n  //根据hasDividerBeforeChildAt得到showDivider的值是否为end 来判断是否需要加上divider的高度\n  if (mTotalLength > 0 && hasDividerBeforeChildAt(count))\n      mTotalLength += mDividerHeight;\n  }\n  //如果高度测量模式为AT_MOST或者UNSPECIFIED 则进行二次测量 且设置了measureWithLargestChild\n  if (useLargestChild && (heightMode == MeasureSpec.AT_MOST ||\n      heightMode == MeasureSpec.UNSPECIFIED)) {\n      mTotalLength = 0;\n      for (int i = 0; i < count; ++i) {\n          final View child = getVirtualChildAt(i);\n          if (child == null) {\n              mTotalLength += measureNullChild(i);\n              continue;\n          }\n          if (child.getVisibility() == GONE) {\n              i += getChildrenSkipCount(child, i);\n              continue;\n          }\n          final LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)\n                  child.getLayoutParams();\n          // 计算所有子View的高度之和\n          final int totalLength = mTotalLength;\n          mTotalLength = Math.max(totalLength, totalLength + largestChildHeight +\n                  lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));\n      }\n  }\n```\n就是需要useLargestChild\n\n而 mUseLargestChild = a.getBoolean(R.styleable.LinearLayout_measureWithLargestChild, false);\n\n就是说仅在LinearLayout的measureWithLargestChild属性设置为True时(默认为false)才可能出现某个child被二次测量\n\n实例如下\n\n![LinearLayout二次测量](http://p1.bpimg.com/567571/8ac762ffc7d13b2e.png)\n\n\n\n#### 二次测量部分View和对为测量的子View进行测量\n\n```java\n\n   //加上padding的值\n   mTotalLength += mPaddingTop + mPaddingBottom;\n   int heightSize = mTotalLength;\n   //minHeight和当前使用的高度比较取较大值\n   heightSize = Math.max(heightSize, getSuggestedMinimumHeight());\n\n   //根据heightMeasureSpec协助计算heightSizeAndState的大小\n   //resolveSizeAndState方法之后会分析\n   int heightSizeAndState = resolveSizeAndState(heightSize, heightMeasureSpec, 0);\n   heightSize = heightSizeAndState & MEASURED_SIZE_MASK;\n\n   // Either expand children with weight to take up available space or\n   // shrink them if they extend beyond our current bounds. If we skipped\n   // measurement on any children, we need to measure them now.\n\n\n\n   //delta为额外的空间 及LinearLayout中未被分配的空间(可以为负)\n   int delta = heightSize - mTotalLength;\n   if (skippedMeasure || delta != 0 && totalWeight > 0.0f) {\n       //skippedMeasure为第一次测量下对跳过测量的子View设置的\n       //weightSum为权重和 如果设置了总权重则使用我们所设置的  如果没有则使用子View的weight和\n       float weightSum = mWeightSum > 0.0f ? mWeightSum : totalWeight;\n\n       mTotalLength = 0;\n       //测量什么的\n       for (int i = 0; i < count; ++i) {\n           final View child = getVirtualChildAt(i);\n\n           if (child.getVisibility() == View.GONE) {\n               continue;\n           }\n\n           LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) child.getLayoutParams();\n\n           float childExtra = lp.weight;\n           if (childExtra > 0) {\n               // Child said it could absorb extra space -- give him his share\n               //计算weight属性分配的大小\n               int share = (int) (childExtra * delta / weightSum);\n               //权重和减去已经分配权重\n               weightSum -= childExtra;\n               //剩余高度减去分配的高度\n               delta -= share;\n\n               final int childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,\n                       mPaddingLeft + mPaddingRight +\n                               lp.leftMargin + lp.rightMargin, lp.width);\n\n               // TODO: Use a field like lp.isMeasured to figure out if this\n               // child has been previously measured\n\n\n               if ((lp.height != 0) || (heightMode != MeasureSpec.EXACTLY)) {\n                   //子视图已经被测量过\n                   //非EXACTLY view需要加上share\n                   int childHeight = child.getMeasuredHeight() + share;\n                   if (childHeight < 0) {\n                       childHeight = 0;\n                   }\n                   //重新测量View\n                   child.measure(childWidthMeasureSpec,\n                           MeasureSpec.makeMeasureSpec(childHeight, MeasureSpec.EXACTLY));\n               } else {\n                   //如果当前是EXACTLY模式 说明没有被测量 需要进行测量\n                   //子视图首次被测量\n                   //EXACTLY模式下 将weight占比的高度分配给子View    \n                   child.measure(childWidthMeasureSpec,\n                           MeasureSpec.makeMeasureSpec(share > 0 ? share : 0,\n                                   MeasureSpec.EXACTLY));\n               }\n\n               // Child may now not fit in vertical dimension.\n               childState = combineMeasuredStates(childState, child.getMeasuredState()\n                       & (MEASURED_STATE_MASK>>MEASURED_HEIGHT_STATE_SHIFT));\n           }\n\n          //处理子视图宽度\n           final int margin =  lp.leftMargin + lp.rightMargin;\n           final int measuredWidth = child.getMeasuredWidth() + margin;\n           maxWidth = Math.max(maxWidth, measuredWidth);\n\n           boolean matchWidthLocally = widthMode != MeasureSpec.EXACTLY &&\n                   lp.width == LayoutParams.MATCH_PARENT;\n\n           alternativeMaxWidth = Math.max(alternativeMaxWidth,\n                   matchWidthLocally ? margin : measuredWidth);\n\n           allFillParent = allFillParent && lp.width == LayoutParams.MATCH_PARENT;\n\n           final int totalLength = mTotalLength;\n           mTotalLength = Math.max(totalLength, totalLength + child.getMeasuredHeight() +\n                   lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));\n       }\n\n       // Add in our padding\n       mTotalLength += mPaddingTop + mPaddingBottom;\n       // TODO: Should we recompute the heightSpec based on the new total length?\n   } else {\n       alternativeMaxWidth = Math.max(alternativeMaxWidth,\n                                      weightedMaxWidth);\n\n\n       // We have no limit, so make all weighted views as tall as the largest child.\n       // Children will have already been measured once.\n       if (useLargestChild && heightMode != MeasureSpec.EXACTLY) {\n           for (int i = 0; i < count; i++) {\n               final View child = getVirtualChildAt(i);\n\n               if (child == null || child.getVisibility() == View.GONE) {\n                   continue;\n               }\n\n               final LinearLayout.LayoutParams lp =\n                       (LinearLayout.LayoutParams) child.getLayoutParams();\n\n               float childExtra = lp.weight;\n               if (childExtra > 0) {\n                  //使用最大子视图高度测量\n                   child.measure(\n                           MeasureSpec.makeMeasureSpec(child.getMeasuredWidth(),\n                                   MeasureSpec.EXACTLY),\n                           MeasureSpec.makeMeasureSpec(largestChildHeight,\n                                   MeasureSpec.EXACTLY));\n               }\n           }\n       }\n   }\n\n   if (!allFillParent && widthMode != MeasureSpec.EXACTLY) {\n       maxWidth = alternativeMaxWidth;\n   }\n\n   maxWidth += mPaddingLeft + mPaddingRight;\n\n   // Check against our minimum width\n   maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());\n\n   setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),\n           heightSizeAndState);\n\n   if (matchWidth) {\n       forceUniformWidth(count, heightMeasureSpec);\n   }\n```\nresolveSizeAndState方法 定义在View中\n```java\n/**\n   * Utility to reconcile a desired size and state, with constraints imposed\n   * by a MeasureSpec. Will take the desired size, unless a different size\n   * is imposed by the constraints. The returned value is a compound integer,\n   * with the resolved size in the {@link #MEASURED_SIZE_MASK} bits and\n   * optionally the bit {@link #MEASURED_STATE_TOO_SMALL} set if the\n   * resulting size is smaller than the size the view wants to be.\n   *\n   * @param size How big the view wants to be.\n   * @param measureSpec Constraints imposed by the parent.\n   * @param childMeasuredState Size information bit mask for the view's\n   *                           children.\n   * @return Size information bit mask as defined by\n   *         {@link #MEASURED_SIZE_MASK} and\n   *         {@link #MEASURED_STATE_TOO_SMALL}.\n   */\n  public static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState) {\n      final int specMode = MeasureSpec.getMode(measureSpec);\n      final int specSize = MeasureSpec.getSize(measureSpec);\n      final int result;\n      switch (specMode) {\n          case MeasureSpec.AT_MOST:\n              if (specSize < size) {\n                  result = specSize | MEASURED_STATE_TOO_SMALL;\n              } else {\n                  result = size;\n              }\n              break;\n          case MeasureSpec.EXACTLY:\n              result = specSize;\n              break;\n          case MeasureSpec.UNSPECIFIED:\n          default:\n              result = size;\n      }\n      return result | (childMeasuredState & MEASURED_STATE_MASK);\n  }\n```\n\n###### delta为负的相关解析\n相关代码及效果如下\n\n![负delta.png](http://p1.bqimg.com/567571/214652b3a9d04170.png)\n\n根据之前的measure流程分析一下\n\n* 相关变量初始化\n* 第一次测量  两个子TextView都会被测量 TextView1.height = TextView1.height = 500dp 则mToatalLength为1000dp\n* mToatalLength再次测量跳过\n* 计算delta delta = heightSize - mTotalLength 根据resolveSizeAndState方法 父LinearLayout是EXACTLY模式 所以最终heightSize为500dp delta = -500dp\n* 根据weight分配剩余空间 TextView1.height = 500 + 1 / 5 * (- 500) = 400 dp\n  TextView2.height = 500 + 4 / 5 * (- 500) = 100 dp\n\n\n### layout过程\n\n\n```java\n  protected void onLayout(boolean changed, int l, int t, int r, int b) {\n    if (mOrientation == VERTICAL) {\n        layoutVertical(l, t, r, b);\n    } else {\n        layoutHorizontal(l, t, r, b);\n    }\n  }\n```\n我们可以看出 同样是分成水平和竖直两个方向的 同样分析竖直 方向下的layout过程\n\n```java\n/**\n    * Position the children during a layout pass if the orientation of this\n    * LinearLayout is set to {@link #VERTICAL}.\n    *\n    * @see #getOrientation()\n    * @see #setOrientation(int)\n    * @see #onLayout(boolean, int, int, int, int)\n    * @param left\n    * @param top\n    * @param right\n    * @param bottom\n    */\n   void layoutVertical(int left, int top, int right, int bottom) {\n       final int paddingLeft = mPaddingLeft;\n\n       int childTop;\n       int childLeft;\n\n       //父View默认子View的宽度\n       final int width = right - left;\n       //子View的右侧默认位置\n       int childRight = width - mPaddingRight;\n\n       // 子View的可用空间大小\n       int childSpace = width - paddingLeft - mPaddingRight;\n\n       //子View的个数\n       final int count = getVirtualChildCount();\n\n       final int majorGravity = mGravity & Gravity.VERTICAL_GRAVITY_MASK;\n       final int minorGravity = mGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;\n\n       //根据LinearLayout设置的对其方式 设置第一个子View的Top值\n       switch (majorGravity) {\n          case Gravity.BOTTOM:\n              // mTotalLength contains the padding already\n              childTop = mPaddingTop + bottom - top - mTotalLength;\n              break;\n\n              // mTotalLength contains the padding already\n          case Gravity.CENTER_VERTICAL:\n              childTop = mPaddingTop + (bottom - top - mTotalLength) / 2;\n              break;\n\n          case Gravity.TOP:\n          default:\n              childTop = mPaddingTop;\n              break;\n       }\n\n       //遍历各个子View\n       for (int i = 0; i < count; i++) {\n           final View child = getVirtualChildAt(i);\n           if (child == null) {\n               childTop += measureNullChild(i);\n           } else if (child.getVisibility() != GONE) {\n                //LinearLayout中子View的宽和高有measure过程决定\n               final int childWidth = child.getMeasuredWidth();\n               final int childHeight = child.getMeasuredHeight();\n               //获取子View的LayoutParams\n               final LinearLayout.LayoutParams lp =\n                       (LinearLayout.LayoutParams) child.getLayoutParams();\n\n               int gravity = lp.gravity;\n               if (gravity < 0) {\n                   gravity = minorGravity;\n               }\n               final int layoutDirection = getLayoutDirection();\n               final int absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);\n               //根据子View的对其方式设置Left值\n               switch (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {\n                   case Gravity.CENTER_HORIZONTAL:\n                       childLeft = paddingLeft + ((childSpace - childWidth) / 2)\n                               + lp.leftMargin - lp.rightMargin;\n                       break;\n\n                   case Gravity.RIGHT:\n                       childLeft = childRight - childWidth - lp.rightMargin;\n                       break;\n\n                   case Gravity.LEFT:\n                   default:\n                       childLeft = paddingLeft + lp.leftMargin;\n                       break;\n               }\n               //如果有分割线 添加分割线的高度\n               if (hasDividerBeforeChildAt(i)) {\n                   childTop += mDividerHeight;\n               }\n               //子View的top修改\n               childTop += lp.topMargin;\n               //用setChildFrame()方法设置子控件控件的在父控件上的坐标轴\n               setChildFrame(child, childLeft, childTop + getLocationOffset(child),\n                       childWidth, childHeight);\n               childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);\n\n               i += getChildrenSkipCount(child, i);\n           }\n       }\n   }\n```\n\n#### draw 源码分析\n```java\n  protected void onDraw(Canvas canvas) {\n    if (mDivider == null) {\n        return;\n    }\n\n    if (mOrientation == VERTICAL) {\n        drawDividersVertical(canvas);\n    } else {\n        drawDividersHorizontal(canvas);\n    }\n  }\n```\n同样主要分析垂直方向的处理\n\n```java\n\n  void drawDividersVertical(Canvas canvas) {\n      final int count = getVirtualChildCount();\n      //根据计算好的坐标绘制对应的子View\n      for (int i = 0; i < count; i++) {\n          final View child = getVirtualChildAt(i);\n\n          if (child != null && child.getVisibility() != GONE) {\n              if (hasDividerBeforeChildAt(i)) {\n                  final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n                  final int top = child.getTop() - lp.topMargin - mDividerHeight;\n                  drawHorizontalDivider(canvas, top);\n              }\n          }\n      }\n      //绘制分割线\n      if (hasDividerBeforeChildAt(count)) {\n          final View child = getLastNonGoneChild();\n          int bottom = 0;\n          if (child == null) {\n              bottom = getHeight() - getPaddingBottom() - mDividerHeight;\n          } else {\n              final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n              bottom = child.getBottom() + lp.bottomMargin;\n          }\n          drawHorizontalDivider(canvas, bottom);\n      }\n  }\n\n  void drawHorizontalDivider(Canvas canvas, int top) {\n    mDivider.setBounds(getPaddingLeft() + mDividerPadding, top,\n            getWidth() - getPaddingRight() - mDividerPadding, top + mDividerHeight);\n    mDivider.draw(canvas);\n  }\n```\n","source":"_posts/LinearLayout 源码分析.md","raw":"---\ntitle: Android View 相关源码分析之四 LinearLayout源码分析\ndate: 2017-02-03 17:55:53\ntags: [\"android\" , \"view\" , \"源码\"]\ncategories: \"android\"\n---\n## LinearLayout 源码分析\n### measure过程\n#### 主要过程\n* 根据布局方向选择measure过程分支\n* 初始化相关变量\n* 对View进行第一次测量\n* mTotalLength的再次测量\n* 二次测量部分View和对为测量的子View进行测量\n\n<!-- more -->\n\n```java\n  protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n      //判断布局方向\n      if (mOrientation == VERTICAL) {\n          measureVertical(widthMeasureSpec, heightMeasureSpec);\n      } else {\n          measureHorizontal(widthMeasureSpec, heightMeasureSpec);\n      }\n  }\n```\nmeasureVertical和measureHorizontal只是布局方向上的区别 以下主要分析measureVertical方法\n\n#### 初始化相关变量\n```java\n  //mTotalLength是记录内部使用的高度也就是子View的高度和 而不是LinearLayout的高度\n  mTotalLength = 0;\n  //子视图的最大宽度(不包括layout_weight>0的子View)\n  int maxWidth = 0;\n  int childState = 0;\n  int alternativeMaxWidth = 0;\n  //子视图的最大宽度(仅包含layout_weight>0的子View)\n  int weightedMaxWidth = 0;\n  //子视图是否均为fillParent 用于判断是否需要重新计算\n  boolean allFillParent = true;\n  //权重值的总和\n  float totalWeight = 0;\n  //子View的数量(统一级别下)\n  final int count = getVirtualChildCount();\n  //高度宽度模式\n  final int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n  final int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n  //子View的宽度是否需要由父View决定\n  boolean matchWidth = false;\n  boolean skippedMeasure = false;\n  //第几个子View的baseLine作为LinearLayout的基准线\n  final int baselineChildIndex = mBaselineAlignedChildIndex;  \n  //mUseLargestChild为是否使用最大子元素的尺寸作为标准再次测量\n  final boolean useLargestChild = mUseLargestChild;\n  //子View中最高高度\n  int largestChildHeight = Integer.MIN_VALUE;\n```\n\n#### 第一次测量\n```java\n  // See how tall everyone is. Also remember max width.\n  for (int i = 0; i < count; ++i) {\n      final View child = getVirtualChildAt(i);\n\n      // 测量为null的子视图的高度\n      // measureNullChild() 暂时返回 0 便于扩展\n      if (child == null) {\n          mTotalLength += measureNullChild(i);\n          continue;\n      }\n      //Visibility为Gone的时候跳过该View\n      // getChildrenSkipCount()方法同样返回0 便于扩展\n      if (child.getVisibility() == View.GONE) {\n         i += getChildrenSkipCount(child, i);\n         continue;\n      }\n      //根据showDivider的值(通过hasDividerBeforeChildAt()) 来决定当前子View是否需要添加分割线的高度\n      if (hasDividerBeforeChildAt(i)) {\n          mTotalLength += mDividerHeight;\n      }\n\n      //会将子view的LayoutParams强转为父View的LayoutParams类型\n      LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)child.getLayoutParams();\n\n      totalWeight += lp.weight;\n\n      if (heightMode == MeasureSpec.EXACTLY && lp.height == 0 && lp.weight > 0) {\n          // 满足该条件的话 不需要现在计算该子视图的高度 测量工作会在之后进行\n          // 若子View的height=0 且weight> 0 则说明该View希望使用的是LinearLayout的剩余空间\n          // LinearLayout是EXACTLY模式的说明LinearLayout高度已经确定 不需要依赖子View的测量结果来计算自己 就无需测量该子View\n\n          final int totalLength = mTotalLength;\n          mTotalLength = Math.max(totalLength, totalLength + lp.topMargin + lp.bottomMargin);\n          skippedMeasure = true;\n      } else {\n          //测量子View\n\n          int oldHeight = Integer.MIN_VALUE;\n\n          //当前View的height=0 且weight> 0 则说明该LinearLayout的高度需要靠子View测量(不需要的在上面分支处理了)\n          //将子View的高度设为-1 防止子View高度为0\n          if (lp.height == 0 && lp.weight > 0) {\n              oldHeight = 0;\n              lp.height = LayoutParams.WRAP_CONTENT;\n          }\n\n          //调用子View的measureChildWithMargins() 对子View进行测量\n          //第四个参数表示当前已使用的宽度  因为是竖直模式 所以为0\n          //最后一个参数表示已使用的高度 如果之前的子View或者当前的View有weight属性 则当前子视图使用 LinearLayout 的所有高度 已使用的高度为0\n          measureChildBeforeLayout(child, i, widthMeasureSpec, 0, heightMeasureSpec,\n                 totalWeight == 0 ? mTotalLength : 0);\n\n          if (oldHeight != Integer.MIN_VALUE) {\n             //测量完成后 重置子View高度\n             lp.height = oldHeight;\n          }\n\n          final int childHeight = child.getMeasuredHeight();\n          final int totalLength = mTotalLength;\n          // 比较child测量前后总高度 取较大值\n          ///getNextLocationOffset() 返回0 便于扩展\n          mTotalLength = Math.max(totalLength, totalLength + childHeight + lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));\n          // 设置最高子视图大小\n          if (useLargestChild) {\n              largestChildHeight = Math.max(childHeight, largestChildHeight);\n          }\n      }\n\n       // mBaselineChildTop 表示指定的 baseline 的子视图的顶部高度\n      if ((baselineChildIndex >= 0) && (baselineChildIndex == i + 1)) {\n         mBaselineChildTop = mTotalLength;\n      }\n\n      // 设置为 baseline 的子视图的前面不允许设置 weiget 属性\n      if (i < baselineChildIndex && lp.weight > 0) {\n          throw new RuntimeException(\"A child of LinearLayout with index \"\n                  + \"less than mBaselineAlignedChildIndex has weight > 0, which \"\n                  + \"won't work.  Either remove the weight, or don't set \"\n                  + \"mBaselineAlignedChildIndex.\");\n      }\n\n      // 宽度测量相关\n\n      boolean matchWidthLocally = false;\n\n      //当LinearLayout非EXACTLY模式 并且自View为MATCH_PARENT时\n      //设置matchWidth和matchWidthLocally为true\n      //该子View占据LinearLayout水平方向上所有空间\n\n      if (widthMode != MeasureSpec.EXACTLY && lp.width == LayoutParams.MATCH_PARENT) {\n          matchWidth = true;\n          matchWidthLocally = true;\n      }\n\n      final int margin = lp.leftMargin + lp.rightMargin;\n      final int measuredWidth = child.getMeasuredWidth() + margin;\n\n      //对一堆变量赋值\n      maxWidth = Math.max(maxWidth, measuredWidth);\n      childState = combineMeasuredStates(childState, child.getMeasuredState());\n\n      allFillParent = allFillParent && lp.width == LayoutParams.MATCH_PARENT;\n      if (lp.weight > 0) {\n          weightedMaxWidth = Math.max(weightedMaxWidth,\n                  matchWidthLocally ? margin : measuredWidth);\n      } else {\n          alternativeMaxWidth = Math.max(alternativeMaxWidth,\n                  matchWidthLocally ? margin : measuredWidth);\n      }\n\n      i += getChildrenSkipCount(child, i);\n  }\n```\n\n#### 二次测量mTotalLength\n\n```java\n  //根据hasDividerBeforeChildAt得到showDivider的值是否为end 来判断是否需要加上divider的高度\n  if (mTotalLength > 0 && hasDividerBeforeChildAt(count))\n      mTotalLength += mDividerHeight;\n  }\n  //如果高度测量模式为AT_MOST或者UNSPECIFIED 则进行二次测量 且设置了measureWithLargestChild\n  if (useLargestChild && (heightMode == MeasureSpec.AT_MOST ||\n      heightMode == MeasureSpec.UNSPECIFIED)) {\n      mTotalLength = 0;\n      for (int i = 0; i < count; ++i) {\n          final View child = getVirtualChildAt(i);\n          if (child == null) {\n              mTotalLength += measureNullChild(i);\n              continue;\n          }\n          if (child.getVisibility() == GONE) {\n              i += getChildrenSkipCount(child, i);\n              continue;\n          }\n          final LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)\n                  child.getLayoutParams();\n          // 计算所有子View的高度之和\n          final int totalLength = mTotalLength;\n          mTotalLength = Math.max(totalLength, totalLength + largestChildHeight +\n                  lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));\n      }\n  }\n```\n就是需要useLargestChild\n\n而 mUseLargestChild = a.getBoolean(R.styleable.LinearLayout_measureWithLargestChild, false);\n\n就是说仅在LinearLayout的measureWithLargestChild属性设置为True时(默认为false)才可能出现某个child被二次测量\n\n实例如下\n\n![LinearLayout二次测量](http://p1.bpimg.com/567571/8ac762ffc7d13b2e.png)\n\n\n\n#### 二次测量部分View和对为测量的子View进行测量\n\n```java\n\n   //加上padding的值\n   mTotalLength += mPaddingTop + mPaddingBottom;\n   int heightSize = mTotalLength;\n   //minHeight和当前使用的高度比较取较大值\n   heightSize = Math.max(heightSize, getSuggestedMinimumHeight());\n\n   //根据heightMeasureSpec协助计算heightSizeAndState的大小\n   //resolveSizeAndState方法之后会分析\n   int heightSizeAndState = resolveSizeAndState(heightSize, heightMeasureSpec, 0);\n   heightSize = heightSizeAndState & MEASURED_SIZE_MASK;\n\n   // Either expand children with weight to take up available space or\n   // shrink them if they extend beyond our current bounds. If we skipped\n   // measurement on any children, we need to measure them now.\n\n\n\n   //delta为额外的空间 及LinearLayout中未被分配的空间(可以为负)\n   int delta = heightSize - mTotalLength;\n   if (skippedMeasure || delta != 0 && totalWeight > 0.0f) {\n       //skippedMeasure为第一次测量下对跳过测量的子View设置的\n       //weightSum为权重和 如果设置了总权重则使用我们所设置的  如果没有则使用子View的weight和\n       float weightSum = mWeightSum > 0.0f ? mWeightSum : totalWeight;\n\n       mTotalLength = 0;\n       //测量什么的\n       for (int i = 0; i < count; ++i) {\n           final View child = getVirtualChildAt(i);\n\n           if (child.getVisibility() == View.GONE) {\n               continue;\n           }\n\n           LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) child.getLayoutParams();\n\n           float childExtra = lp.weight;\n           if (childExtra > 0) {\n               // Child said it could absorb extra space -- give him his share\n               //计算weight属性分配的大小\n               int share = (int) (childExtra * delta / weightSum);\n               //权重和减去已经分配权重\n               weightSum -= childExtra;\n               //剩余高度减去分配的高度\n               delta -= share;\n\n               final int childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,\n                       mPaddingLeft + mPaddingRight +\n                               lp.leftMargin + lp.rightMargin, lp.width);\n\n               // TODO: Use a field like lp.isMeasured to figure out if this\n               // child has been previously measured\n\n\n               if ((lp.height != 0) || (heightMode != MeasureSpec.EXACTLY)) {\n                   //子视图已经被测量过\n                   //非EXACTLY view需要加上share\n                   int childHeight = child.getMeasuredHeight() + share;\n                   if (childHeight < 0) {\n                       childHeight = 0;\n                   }\n                   //重新测量View\n                   child.measure(childWidthMeasureSpec,\n                           MeasureSpec.makeMeasureSpec(childHeight, MeasureSpec.EXACTLY));\n               } else {\n                   //如果当前是EXACTLY模式 说明没有被测量 需要进行测量\n                   //子视图首次被测量\n                   //EXACTLY模式下 将weight占比的高度分配给子View    \n                   child.measure(childWidthMeasureSpec,\n                           MeasureSpec.makeMeasureSpec(share > 0 ? share : 0,\n                                   MeasureSpec.EXACTLY));\n               }\n\n               // Child may now not fit in vertical dimension.\n               childState = combineMeasuredStates(childState, child.getMeasuredState()\n                       & (MEASURED_STATE_MASK>>MEASURED_HEIGHT_STATE_SHIFT));\n           }\n\n          //处理子视图宽度\n           final int margin =  lp.leftMargin + lp.rightMargin;\n           final int measuredWidth = child.getMeasuredWidth() + margin;\n           maxWidth = Math.max(maxWidth, measuredWidth);\n\n           boolean matchWidthLocally = widthMode != MeasureSpec.EXACTLY &&\n                   lp.width == LayoutParams.MATCH_PARENT;\n\n           alternativeMaxWidth = Math.max(alternativeMaxWidth,\n                   matchWidthLocally ? margin : measuredWidth);\n\n           allFillParent = allFillParent && lp.width == LayoutParams.MATCH_PARENT;\n\n           final int totalLength = mTotalLength;\n           mTotalLength = Math.max(totalLength, totalLength + child.getMeasuredHeight() +\n                   lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));\n       }\n\n       // Add in our padding\n       mTotalLength += mPaddingTop + mPaddingBottom;\n       // TODO: Should we recompute the heightSpec based on the new total length?\n   } else {\n       alternativeMaxWidth = Math.max(alternativeMaxWidth,\n                                      weightedMaxWidth);\n\n\n       // We have no limit, so make all weighted views as tall as the largest child.\n       // Children will have already been measured once.\n       if (useLargestChild && heightMode != MeasureSpec.EXACTLY) {\n           for (int i = 0; i < count; i++) {\n               final View child = getVirtualChildAt(i);\n\n               if (child == null || child.getVisibility() == View.GONE) {\n                   continue;\n               }\n\n               final LinearLayout.LayoutParams lp =\n                       (LinearLayout.LayoutParams) child.getLayoutParams();\n\n               float childExtra = lp.weight;\n               if (childExtra > 0) {\n                  //使用最大子视图高度测量\n                   child.measure(\n                           MeasureSpec.makeMeasureSpec(child.getMeasuredWidth(),\n                                   MeasureSpec.EXACTLY),\n                           MeasureSpec.makeMeasureSpec(largestChildHeight,\n                                   MeasureSpec.EXACTLY));\n               }\n           }\n       }\n   }\n\n   if (!allFillParent && widthMode != MeasureSpec.EXACTLY) {\n       maxWidth = alternativeMaxWidth;\n   }\n\n   maxWidth += mPaddingLeft + mPaddingRight;\n\n   // Check against our minimum width\n   maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());\n\n   setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),\n           heightSizeAndState);\n\n   if (matchWidth) {\n       forceUniformWidth(count, heightMeasureSpec);\n   }\n```\nresolveSizeAndState方法 定义在View中\n```java\n/**\n   * Utility to reconcile a desired size and state, with constraints imposed\n   * by a MeasureSpec. Will take the desired size, unless a different size\n   * is imposed by the constraints. The returned value is a compound integer,\n   * with the resolved size in the {@link #MEASURED_SIZE_MASK} bits and\n   * optionally the bit {@link #MEASURED_STATE_TOO_SMALL} set if the\n   * resulting size is smaller than the size the view wants to be.\n   *\n   * @param size How big the view wants to be.\n   * @param measureSpec Constraints imposed by the parent.\n   * @param childMeasuredState Size information bit mask for the view's\n   *                           children.\n   * @return Size information bit mask as defined by\n   *         {@link #MEASURED_SIZE_MASK} and\n   *         {@link #MEASURED_STATE_TOO_SMALL}.\n   */\n  public static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState) {\n      final int specMode = MeasureSpec.getMode(measureSpec);\n      final int specSize = MeasureSpec.getSize(measureSpec);\n      final int result;\n      switch (specMode) {\n          case MeasureSpec.AT_MOST:\n              if (specSize < size) {\n                  result = specSize | MEASURED_STATE_TOO_SMALL;\n              } else {\n                  result = size;\n              }\n              break;\n          case MeasureSpec.EXACTLY:\n              result = specSize;\n              break;\n          case MeasureSpec.UNSPECIFIED:\n          default:\n              result = size;\n      }\n      return result | (childMeasuredState & MEASURED_STATE_MASK);\n  }\n```\n\n###### delta为负的相关解析\n相关代码及效果如下\n\n![负delta.png](http://p1.bqimg.com/567571/214652b3a9d04170.png)\n\n根据之前的measure流程分析一下\n\n* 相关变量初始化\n* 第一次测量  两个子TextView都会被测量 TextView1.height = TextView1.height = 500dp 则mToatalLength为1000dp\n* mToatalLength再次测量跳过\n* 计算delta delta = heightSize - mTotalLength 根据resolveSizeAndState方法 父LinearLayout是EXACTLY模式 所以最终heightSize为500dp delta = -500dp\n* 根据weight分配剩余空间 TextView1.height = 500 + 1 / 5 * (- 500) = 400 dp\n  TextView2.height = 500 + 4 / 5 * (- 500) = 100 dp\n\n\n### layout过程\n\n\n```java\n  protected void onLayout(boolean changed, int l, int t, int r, int b) {\n    if (mOrientation == VERTICAL) {\n        layoutVertical(l, t, r, b);\n    } else {\n        layoutHorizontal(l, t, r, b);\n    }\n  }\n```\n我们可以看出 同样是分成水平和竖直两个方向的 同样分析竖直 方向下的layout过程\n\n```java\n/**\n    * Position the children during a layout pass if the orientation of this\n    * LinearLayout is set to {@link #VERTICAL}.\n    *\n    * @see #getOrientation()\n    * @see #setOrientation(int)\n    * @see #onLayout(boolean, int, int, int, int)\n    * @param left\n    * @param top\n    * @param right\n    * @param bottom\n    */\n   void layoutVertical(int left, int top, int right, int bottom) {\n       final int paddingLeft = mPaddingLeft;\n\n       int childTop;\n       int childLeft;\n\n       //父View默认子View的宽度\n       final int width = right - left;\n       //子View的右侧默认位置\n       int childRight = width - mPaddingRight;\n\n       // 子View的可用空间大小\n       int childSpace = width - paddingLeft - mPaddingRight;\n\n       //子View的个数\n       final int count = getVirtualChildCount();\n\n       final int majorGravity = mGravity & Gravity.VERTICAL_GRAVITY_MASK;\n       final int minorGravity = mGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;\n\n       //根据LinearLayout设置的对其方式 设置第一个子View的Top值\n       switch (majorGravity) {\n          case Gravity.BOTTOM:\n              // mTotalLength contains the padding already\n              childTop = mPaddingTop + bottom - top - mTotalLength;\n              break;\n\n              // mTotalLength contains the padding already\n          case Gravity.CENTER_VERTICAL:\n              childTop = mPaddingTop + (bottom - top - mTotalLength) / 2;\n              break;\n\n          case Gravity.TOP:\n          default:\n              childTop = mPaddingTop;\n              break;\n       }\n\n       //遍历各个子View\n       for (int i = 0; i < count; i++) {\n           final View child = getVirtualChildAt(i);\n           if (child == null) {\n               childTop += measureNullChild(i);\n           } else if (child.getVisibility() != GONE) {\n                //LinearLayout中子View的宽和高有measure过程决定\n               final int childWidth = child.getMeasuredWidth();\n               final int childHeight = child.getMeasuredHeight();\n               //获取子View的LayoutParams\n               final LinearLayout.LayoutParams lp =\n                       (LinearLayout.LayoutParams) child.getLayoutParams();\n\n               int gravity = lp.gravity;\n               if (gravity < 0) {\n                   gravity = minorGravity;\n               }\n               final int layoutDirection = getLayoutDirection();\n               final int absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);\n               //根据子View的对其方式设置Left值\n               switch (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {\n                   case Gravity.CENTER_HORIZONTAL:\n                       childLeft = paddingLeft + ((childSpace - childWidth) / 2)\n                               + lp.leftMargin - lp.rightMargin;\n                       break;\n\n                   case Gravity.RIGHT:\n                       childLeft = childRight - childWidth - lp.rightMargin;\n                       break;\n\n                   case Gravity.LEFT:\n                   default:\n                       childLeft = paddingLeft + lp.leftMargin;\n                       break;\n               }\n               //如果有分割线 添加分割线的高度\n               if (hasDividerBeforeChildAt(i)) {\n                   childTop += mDividerHeight;\n               }\n               //子View的top修改\n               childTop += lp.topMargin;\n               //用setChildFrame()方法设置子控件控件的在父控件上的坐标轴\n               setChildFrame(child, childLeft, childTop + getLocationOffset(child),\n                       childWidth, childHeight);\n               childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);\n\n               i += getChildrenSkipCount(child, i);\n           }\n       }\n   }\n```\n\n#### draw 源码分析\n```java\n  protected void onDraw(Canvas canvas) {\n    if (mDivider == null) {\n        return;\n    }\n\n    if (mOrientation == VERTICAL) {\n        drawDividersVertical(canvas);\n    } else {\n        drawDividersHorizontal(canvas);\n    }\n  }\n```\n同样主要分析垂直方向的处理\n\n```java\n\n  void drawDividersVertical(Canvas canvas) {\n      final int count = getVirtualChildCount();\n      //根据计算好的坐标绘制对应的子View\n      for (int i = 0; i < count; i++) {\n          final View child = getVirtualChildAt(i);\n\n          if (child != null && child.getVisibility() != GONE) {\n              if (hasDividerBeforeChildAt(i)) {\n                  final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n                  final int top = child.getTop() - lp.topMargin - mDividerHeight;\n                  drawHorizontalDivider(canvas, top);\n              }\n          }\n      }\n      //绘制分割线\n      if (hasDividerBeforeChildAt(count)) {\n          final View child = getLastNonGoneChild();\n          int bottom = 0;\n          if (child == null) {\n              bottom = getHeight() - getPaddingBottom() - mDividerHeight;\n          } else {\n              final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n              bottom = child.getBottom() + lp.bottomMargin;\n          }\n          drawHorizontalDivider(canvas, bottom);\n      }\n  }\n\n  void drawHorizontalDivider(Canvas canvas, int top) {\n    mDivider.setBounds(getPaddingLeft() + mDividerPadding, top,\n            getWidth() - getPaddingRight() - mDividerPadding, top + mDividerHeight);\n    mDivider.draw(canvas);\n  }\n```\n","slug":"LinearLayout 源码分析","published":1,"updated":"2017-02-06T14:56:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8cwyb5e0007o3xwjkoslr8m","content":"<h2 id=\"LinearLayout-源码分析\"><a href=\"#LinearLayout-源码分析\" class=\"headerlink\" title=\"LinearLayout 源码分析\"></a>LinearLayout 源码分析</h2><h3 id=\"measure过程\"><a href=\"#measure过程\" class=\"headerlink\" title=\"measure过程\"></a>measure过程</h3><h4 id=\"主要过程\"><a href=\"#主要过程\" class=\"headerlink\" title=\"主要过程\"></a>主要过程</h4><ul>\n<li>根据布局方向选择measure过程分支</li>\n<li>初始化相关变量</li>\n<li>对View进行第一次测量</li>\n<li>mTotalLength的再次测量</li>\n<li>二次测量部分View和对为测量的子View进行测量</li>\n</ul>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//判断布局方向</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</div><div class=\"line\">        measureVertical(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        measureHorizontal(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>measureVertical和measureHorizontal只是布局方向上的区别 以下主要分析measureVertical方法</p>\n<h4 id=\"初始化相关变量\"><a href=\"#初始化相关变量\" class=\"headerlink\" title=\"初始化相关变量\"></a>初始化相关变量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//mTotalLength是记录内部使用的高度也就是子View的高度和 而不是LinearLayout的高度</span></div><div class=\"line\">mTotalLength = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">//子视图的最大宽度(不包括layout_weight&gt;0的子View)</span></div><div class=\"line\"><span class=\"keyword\">int</span> maxWidth = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> childState = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> alternativeMaxWidth = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">//子视图的最大宽度(仅包含layout_weight&gt;0的子View)</span></div><div class=\"line\"><span class=\"keyword\">int</span> weightedMaxWidth = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">//子视图是否均为fillParent 用于判断是否需要重新计算</span></div><div class=\"line\"><span class=\"keyword\">boolean</span> allFillParent = <span class=\"keyword\">true</span>;</div><div class=\"line\"><span class=\"comment\">//权重值的总和</span></div><div class=\"line\"><span class=\"keyword\">float</span> totalWeight = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">//子View的数量(统一级别下)</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</div><div class=\"line\"><span class=\"comment\">//高度宽度模式</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\"><span class=\"comment\">//子View的宽度是否需要由父View决定</span></div><div class=\"line\"><span class=\"keyword\">boolean</span> matchWidth = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"keyword\">boolean</span> skippedMeasure = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"comment\">//第几个子View的baseLine作为LinearLayout的基准线</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> baselineChildIndex = mBaselineAlignedChildIndex;  </div><div class=\"line\"><span class=\"comment\">//mUseLargestChild为是否使用最大子元素的尺寸作为标准再次测量</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> useLargestChild = mUseLargestChild;</div><div class=\"line\"><span class=\"comment\">//子View中最高高度</span></div><div class=\"line\"><span class=\"keyword\">int</span> largestChildHeight = Integer.MIN_VALUE;</div></pre></td></tr></table></figure>\n<h4 id=\"第一次测量\"><a href=\"#第一次测量\" class=\"headerlink\" title=\"第一次测量\"></a>第一次测量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// See how tall everyone is. Also remember max width.</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 测量为null的子视图的高度</span></div><div class=\"line\">    <span class=\"comment\">// measureNullChild() 暂时返回 0 便于扩展</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mTotalLength += measureNullChild(i);</div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//Visibility为Gone的时候跳过该View</span></div><div class=\"line\">    <span class=\"comment\">// getChildrenSkipCount()方法同样返回0 便于扩展</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (child.getVisibility() == View.GONE) &#123;</div><div class=\"line\">       i += getChildrenSkipCount(child, i);</div><div class=\"line\">       <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//根据showDivider的值(通过hasDividerBeforeChildAt()) 来决定当前子View是否需要添加分割线的高度</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class=\"line\">        mTotalLength += mDividerHeight;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//会将子view的LayoutParams强转为父View的LayoutParams类型</span></div><div class=\"line\">    LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">    totalWeight += lp.weight;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (heightMode == MeasureSpec.EXACTLY &amp;&amp; lp.height == <span class=\"number\">0</span> &amp;&amp; lp.weight &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 满足该条件的话 不需要现在计算该子视图的高度 测量工作会在之后进行</span></div><div class=\"line\">        <span class=\"comment\">// 若子View的height=0 且weight&gt; 0 则说明该View希望使用的是LinearLayout的剩余空间</span></div><div class=\"line\">        <span class=\"comment\">// LinearLayout是EXACTLY模式的说明LinearLayout高度已经确定 不需要依赖子View的测量结果来计算自己 就无需测量该子View</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</div><div class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + lp.topMargin + lp.bottomMargin);</div><div class=\"line\">        skippedMeasure = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//测量子View</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> oldHeight = Integer.MIN_VALUE;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//当前View的height=0 且weight&gt; 0 则说明该LinearLayout的高度需要靠子View测量(不需要的在上面分支处理了)</span></div><div class=\"line\">        <span class=\"comment\">//将子View的高度设为-1 防止子View高度为0</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (lp.height == <span class=\"number\">0</span> &amp;&amp; lp.weight &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            oldHeight = <span class=\"number\">0</span>;</div><div class=\"line\">            lp.height = LayoutParams.WRAP_CONTENT;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//调用子View的measureChildWithMargins() 对子View进行测量</span></div><div class=\"line\">        <span class=\"comment\">//第四个参数表示当前已使用的宽度  因为是竖直模式 所以为0</span></div><div class=\"line\">        <span class=\"comment\">//最后一个参数表示已使用的高度 如果之前的子View或者当前的View有weight属性 则当前子视图使用 LinearLayout 的所有高度 已使用的高度为0</span></div><div class=\"line\">        measureChildBeforeLayout(child, i, widthMeasureSpec, <span class=\"number\">0</span>, heightMeasureSpec,</div><div class=\"line\">               totalWeight == <span class=\"number\">0</span> ? mTotalLength : <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (oldHeight != Integer.MIN_VALUE) &#123;</div><div class=\"line\">           <span class=\"comment\">//测量完成后 重置子View高度</span></div><div class=\"line\">           lp.height = oldHeight;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</div><div class=\"line\">        <span class=\"comment\">// 比较child测量前后总高度 取较大值</span></div><div class=\"line\">        <span class=\"comment\">///getNextLocationOffset() 返回0 便于扩展</span></div><div class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + childHeight + lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));</div><div class=\"line\">        <span class=\"comment\">// 设置最高子视图大小</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (useLargestChild) &#123;</div><div class=\"line\">            largestChildHeight = Math.max(childHeight, largestChildHeight);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// mBaselineChildTop 表示指定的 baseline 的子视图的顶部高度</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((baselineChildIndex &gt;= <span class=\"number\">0</span>) &amp;&amp; (baselineChildIndex == i + <span class=\"number\">1</span>)) &#123;</div><div class=\"line\">       mBaselineChildTop = mTotalLength;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 设置为 baseline 的子视图的前面不允许设置 weiget 属性</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (i &lt; baselineChildIndex &amp;&amp; lp.weight &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"A child of LinearLayout with index \"</span></div><div class=\"line\">                + <span class=\"string\">\"less than mBaselineAlignedChildIndex has weight &gt; 0, which \"</span></div><div class=\"line\">                + <span class=\"string\">\"won't work.  Either remove the weight, or don't set \"</span></div><div class=\"line\">                + <span class=\"string\">\"mBaselineAlignedChildIndex.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 宽度测量相关</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">boolean</span> matchWidthLocally = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//当LinearLayout非EXACTLY模式 并且自View为MATCH_PARENT时</span></div><div class=\"line\">    <span class=\"comment\">//设置matchWidth和matchWidthLocally为true</span></div><div class=\"line\">    <span class=\"comment\">//该子View占据LinearLayout水平方向上所有空间</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (widthMode != MeasureSpec.EXACTLY &amp;&amp; lp.width == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">        matchWidth = <span class=\"keyword\">true</span>;</div><div class=\"line\">        matchWidthLocally = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> margin = lp.leftMargin + lp.rightMargin;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> measuredWidth = child.getMeasuredWidth() + margin;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//对一堆变量赋值</span></div><div class=\"line\">    maxWidth = Math.max(maxWidth, measuredWidth);</div><div class=\"line\">    childState = combineMeasuredStates(childState, child.getMeasuredState());</div><div class=\"line\"></div><div class=\"line\">    allFillParent = allFillParent &amp;&amp; lp.width == LayoutParams.MATCH_PARENT;</div><div class=\"line\">    <span class=\"keyword\">if</span> (lp.weight &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        weightedMaxWidth = Math.max(weightedMaxWidth,</div><div class=\"line\">                matchWidthLocally ? margin : measuredWidth);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        alternativeMaxWidth = Math.max(alternativeMaxWidth,</div><div class=\"line\">                matchWidthLocally ? margin : measuredWidth);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    i += getChildrenSkipCount(child, i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"二次测量mTotalLength\"><a href=\"#二次测量mTotalLength\" class=\"headerlink\" title=\"二次测量mTotalLength\"></a>二次测量mTotalLength</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//根据hasDividerBeforeChildAt得到showDivider的值是否为end 来判断是否需要加上divider的高度</span></div><div class=\"line\"><span class=\"keyword\">if</span> (mTotalLength &gt; <span class=\"number\">0</span> &amp;&amp; hasDividerBeforeChildAt(count))</div><div class=\"line\">    mTotalLength += mDividerHeight;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//如果高度测量模式为AT_MOST或者UNSPECIFIED 则进行二次测量 且设置了measureWithLargestChild</span></div><div class=\"line\"><span class=\"keyword\">if</span> (useLargestChild &amp;&amp; (heightMode == MeasureSpec.AT_MOST ||</div><div class=\"line\">    heightMode == MeasureSpec.UNSPECIFIED)) &#123;</div><div class=\"line\">    mTotalLength = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\">        <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mTotalLength += measureNullChild(i);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() == GONE) &#123;</div><div class=\"line\">            i += getChildrenSkipCount(child, i);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)</div><div class=\"line\">                child.getLayoutParams();</div><div class=\"line\">        <span class=\"comment\">// 计算所有子View的高度之和</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</div><div class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + largestChildHeight +</div><div class=\"line\">                lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>就是需要useLargestChild</p>\n<p>而 mUseLargestChild = a.getBoolean(R.styleable.LinearLayout_measureWithLargestChild, false);</p>\n<p>就是说仅在LinearLayout的measureWithLargestChild属性设置为True时(默认为false)才可能出现某个child被二次测量</p>\n<p>实例如下</p>\n<p><img src=\"http://p1.bpimg.com/567571/8ac762ffc7d13b2e.png\" alt=\"LinearLayout二次测量\"></p>\n<h4 id=\"二次测量部分View和对为测量的子View进行测量\"><a href=\"#二次测量部分View和对为测量的子View进行测量\" class=\"headerlink\" title=\"二次测量部分View和对为测量的子View进行测量\"></a>二次测量部分View和对为测量的子View进行测量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加上padding的值</span></div><div class=\"line\">mTotalLength += mPaddingTop + mPaddingBottom;</div><div class=\"line\"><span class=\"keyword\">int</span> heightSize = mTotalLength;</div><div class=\"line\"><span class=\"comment\">//minHeight和当前使用的高度比较取较大值</span></div><div class=\"line\">heightSize = Math.max(heightSize, getSuggestedMinimumHeight());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据heightMeasureSpec协助计算heightSizeAndState的大小</span></div><div class=\"line\"><span class=\"comment\">//resolveSizeAndState方法之后会分析</span></div><div class=\"line\"><span class=\"keyword\">int</span> heightSizeAndState = resolveSizeAndState(heightSize, heightMeasureSpec, <span class=\"number\">0</span>);</div><div class=\"line\">heightSize = heightSizeAndState &amp; MEASURED_SIZE_MASK;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Either expand children with weight to take up available space or</span></div><div class=\"line\"><span class=\"comment\">// shrink them if they extend beyond our current bounds. If we skipped</span></div><div class=\"line\"><span class=\"comment\">// measurement on any children, we need to measure them now.</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//delta为额外的空间 及LinearLayout中未被分配的空间(可以为负)</span></div><div class=\"line\"><span class=\"keyword\">int</span> delta = heightSize - mTotalLength;</div><div class=\"line\"><span class=\"keyword\">if</span> (skippedMeasure || delta != <span class=\"number\">0</span> &amp;&amp; totalWeight &gt; <span class=\"number\">0.0f</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">//skippedMeasure为第一次测量下对跳过测量的子View设置的</span></div><div class=\"line\">    <span class=\"comment\">//weightSum为权重和 如果设置了总权重则使用我们所设置的  如果没有则使用子View的weight和</span></div><div class=\"line\">    <span class=\"keyword\">float</span> weightSum = mWeightSum &gt; <span class=\"number\">0.0f</span> ? mWeightSum : totalWeight;</div><div class=\"line\"></div><div class=\"line\">    mTotalLength = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">//测量什么的</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() == View.GONE) &#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">float</span> childExtra = lp.weight;</div><div class=\"line\">        <span class=\"keyword\">if</span> (childExtra &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// Child said it could absorb extra space -- give him his share</span></div><div class=\"line\">            <span class=\"comment\">//计算weight属性分配的大小</span></div><div class=\"line\">            <span class=\"keyword\">int</span> share = (<span class=\"keyword\">int</span>) (childExtra * delta / weightSum);</div><div class=\"line\">            <span class=\"comment\">//权重和减去已经分配权重</span></div><div class=\"line\">            weightSum -= childExtra;</div><div class=\"line\">            <span class=\"comment\">//剩余高度减去分配的高度</span></div><div class=\"line\">            delta -= share;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,</div><div class=\"line\">                    mPaddingLeft + mPaddingRight +</div><div class=\"line\">                            lp.leftMargin + lp.rightMargin, lp.width);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Use a field like lp.isMeasured to figure out if this</span></div><div class=\"line\">            <span class=\"comment\">// child has been previously measured</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> ((lp.height != <span class=\"number\">0</span>) || (heightMode != MeasureSpec.EXACTLY)) &#123;</div><div class=\"line\">                <span class=\"comment\">//子视图已经被测量过</span></div><div class=\"line\">                <span class=\"comment\">//非EXACTLY view需要加上share</span></div><div class=\"line\">                <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight() + share;</div><div class=\"line\">                <span class=\"keyword\">if</span> (childHeight &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    childHeight = <span class=\"number\">0</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//重新测量View</span></div><div class=\"line\">                child.measure(childWidthMeasureSpec,</div><div class=\"line\">                        MeasureSpec.makeMeasureSpec(childHeight, MeasureSpec.EXACTLY));</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//如果当前是EXACTLY模式 说明没有被测量 需要进行测量</span></div><div class=\"line\">                <span class=\"comment\">//子视图首次被测量</span></div><div class=\"line\">                <span class=\"comment\">//EXACTLY模式下 将weight占比的高度分配给子View    </span></div><div class=\"line\">                child.measure(childWidthMeasureSpec,</div><div class=\"line\">                        MeasureSpec.makeMeasureSpec(share &gt; <span class=\"number\">0</span> ? share : <span class=\"number\">0</span>,</div><div class=\"line\">                                MeasureSpec.EXACTLY));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Child may now not fit in vertical dimension.</span></div><div class=\"line\">            childState = combineMeasuredStates(childState, child.getMeasuredState()</div><div class=\"line\">                    &amp; (MEASURED_STATE_MASK&gt;&gt;MEASURED_HEIGHT_STATE_SHIFT));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//处理子视图宽度</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> margin =  lp.leftMargin + lp.rightMargin;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> measuredWidth = child.getMeasuredWidth() + margin;</div><div class=\"line\">        maxWidth = Math.max(maxWidth, measuredWidth);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">boolean</span> matchWidthLocally = widthMode != MeasureSpec.EXACTLY &amp;&amp;</div><div class=\"line\">                lp.width == LayoutParams.MATCH_PARENT;</div><div class=\"line\"></div><div class=\"line\">        alternativeMaxWidth = Math.max(alternativeMaxWidth,</div><div class=\"line\">                matchWidthLocally ? margin : measuredWidth);</div><div class=\"line\"></div><div class=\"line\">        allFillParent = allFillParent &amp;&amp; lp.width == LayoutParams.MATCH_PARENT;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</div><div class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + child.getMeasuredHeight() +</div><div class=\"line\">                lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Add in our padding</span></div><div class=\"line\">    mTotalLength += mPaddingTop + mPaddingBottom;</div><div class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Should we recompute the heightSpec based on the new total length?</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    alternativeMaxWidth = Math.max(alternativeMaxWidth,</div><div class=\"line\">                                   weightedMaxWidth);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// We have no limit, so make all weighted views as tall as the largest child.</span></div><div class=\"line\">    <span class=\"comment\">// Children will have already been measured once.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (useLargestChild &amp;&amp; heightMode != MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span> || child.getVisibility() == View.GONE) &#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp =</div><div class=\"line\">                    (LinearLayout.LayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">float</span> childExtra = lp.weight;</div><div class=\"line\">            <span class=\"keyword\">if</span> (childExtra &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               <span class=\"comment\">//使用最大子视图高度测量</span></div><div class=\"line\">                child.measure(</div><div class=\"line\">                        MeasureSpec.makeMeasureSpec(child.getMeasuredWidth(),</div><div class=\"line\">                                MeasureSpec.EXACTLY),</div><div class=\"line\">                        MeasureSpec.makeMeasureSpec(largestChildHeight,</div><div class=\"line\">                                MeasureSpec.EXACTLY));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (!allFillParent &amp;&amp; widthMode != MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">    maxWidth = alternativeMaxWidth;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">maxWidth += mPaddingLeft + mPaddingRight;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Check against our minimum width</span></div><div class=\"line\">maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());</div><div class=\"line\"></div><div class=\"line\">setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),</div><div class=\"line\">        heightSizeAndState);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (matchWidth) &#123;</div><div class=\"line\">    forceUniformWidth(count, heightMeasureSpec);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>resolveSizeAndState方法 定义在View中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">   * Utility to reconcile a desired size and state, with constraints imposed</div><div class=\"line\">   * by a MeasureSpec. Will take the desired size, unless a different size</div><div class=\"line\">   * is imposed by the constraints. The returned value is a compound integer,</div><div class=\"line\">   * with the resolved size in the &#123;<span class=\"doctag\">@link</span> #MEASURED_SIZE_MASK&#125; bits and</div><div class=\"line\">   * optionally the bit &#123;<span class=\"doctag\">@link</span> #MEASURED_STATE_TOO_SMALL&#125; set if the</div><div class=\"line\">   * resulting size is smaller than the size the view wants to be.</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> size How big the view wants to be.</div><div class=\"line\">   * <span class=\"doctag\">@param</span> measureSpec Constraints imposed by the parent.</div><div class=\"line\">   * <span class=\"doctag\">@param</span> childMeasuredState Size information bit mask for the view's</div><div class=\"line\">   *                           children.</div><div class=\"line\">   * <span class=\"doctag\">@return</span> Size information bit mask as defined by</div><div class=\"line\">   *         &#123;<span class=\"doctag\">@link</span> #MEASURED_SIZE_MASK&#125; and</div><div class=\"line\">   *         &#123;<span class=\"doctag\">@link</span> #MEASURED_STATE_TOO_SMALL&#125;.</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">resolveSizeAndState</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec, <span class=\"keyword\">int</span> childMeasuredState)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> result;</div><div class=\"line\">      <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">          <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">              <span class=\"keyword\">if</span> (specSize &lt; size) &#123;</div><div class=\"line\">                  result = specSize | MEASURED_STATE_TOO_SMALL;</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  result = size;</div><div class=\"line\">              &#125;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">              result = specSize;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">          <span class=\"keyword\">default</span>:</div><div class=\"line\">              result = size;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> result | (childMeasuredState &amp; MEASURED_STATE_MASK);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h6 id=\"delta为负的相关解析\"><a href=\"#delta为负的相关解析\" class=\"headerlink\" title=\"delta为负的相关解析\"></a>delta为负的相关解析</h6><p>相关代码及效果如下</p>\n<p><img src=\"http://p1.bqimg.com/567571/214652b3a9d04170.png\" alt=\"负delta.png\"></p>\n<p>根据之前的measure流程分析一下</p>\n<ul>\n<li>相关变量初始化</li>\n<li>第一次测量  两个子TextView都会被测量 TextView1.height = TextView1.height = 500dp 则mToatalLength为1000dp</li>\n<li>mToatalLength再次测量跳过</li>\n<li>计算delta delta = heightSize - mTotalLength 根据resolveSizeAndState方法 父LinearLayout是EXACTLY模式 所以最终heightSize为500dp delta = -500dp</li>\n<li>根据weight分配剩余空间 TextView1.height = 500 + 1 / 5 <em> (- 500) = 400 dp<br>TextView2.height = 500 + 4 / 5 </em> (- 500) = 100 dp</li>\n</ul>\n<h3 id=\"layout过程\"><a href=\"#layout过程\" class=\"headerlink\" title=\"layout过程\"></a>layout过程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</div><div class=\"line\">      layoutVertical(l, t, r, b);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      layoutHorizontal(l, t, r, b);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以看出 同样是分成水平和竖直两个方向的 同样分析竖直 方向下的layout过程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * Position the children during a layout pass if the orientation of this</div><div class=\"line\">    * LinearLayout is set to &#123;<span class=\"doctag\">@link</span> #VERTICAL&#125;.</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@see</span> #getOrientation()</div><div class=\"line\">    * <span class=\"doctag\">@see</span> #setOrientation(int)</div><div class=\"line\">    * <span class=\"doctag\">@see</span> #onLayout(boolean, int, int, int, int)</div><div class=\"line\">    * <span class=\"doctag\">@param</span> left</div><div class=\"line\">    * <span class=\"doctag\">@param</span> top</div><div class=\"line\">    * <span class=\"doctag\">@param</span> right</div><div class=\"line\">    * <span class=\"doctag\">@param</span> bottom</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">layoutVertical</span><span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingLeft = mPaddingLeft;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> childTop;</div><div class=\"line\">       <span class=\"keyword\">int</span> childLeft;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//父View默认子View的宽度</span></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = right - left;</div><div class=\"line\">       <span class=\"comment\">//子View的右侧默认位置</span></div><div class=\"line\">       <span class=\"keyword\">int</span> childRight = width - mPaddingRight;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 子View的可用空间大小</span></div><div class=\"line\">       <span class=\"keyword\">int</span> childSpace = width - paddingLeft - mPaddingRight;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//子View的个数</span></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> majorGravity = mGravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> minorGravity = mGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//根据LinearLayout设置的对其方式 设置第一个子View的Top值</span></div><div class=\"line\">       <span class=\"keyword\">switch</span> (majorGravity) &#123;</div><div class=\"line\">          <span class=\"keyword\">case</span> Gravity.BOTTOM:</div><div class=\"line\">              <span class=\"comment\">// mTotalLength contains the padding already</span></div><div class=\"line\">              childTop = mPaddingTop + bottom - top - mTotalLength;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"comment\">// mTotalLength contains the padding already</span></div><div class=\"line\">          <span class=\"keyword\">case</span> Gravity.CENTER_VERTICAL:</div><div class=\"line\">              childTop = mPaddingTop + (bottom - top - mTotalLength) / <span class=\"number\">2</span>;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">case</span> Gravity.TOP:</div><div class=\"line\">          <span class=\"keyword\">default</span>:</div><div class=\"line\">              childTop = mPaddingTop;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//遍历各个子View</span></div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\">           <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               childTop += measureNullChild(i);</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">                <span class=\"comment\">//LinearLayout中子View的宽和高有measure过程决定</span></div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = child.getMeasuredWidth();</div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</div><div class=\"line\">               <span class=\"comment\">//获取子View的LayoutParams</span></div><div class=\"line\">               <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp =</div><div class=\"line\">                       (LinearLayout.LayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">int</span> gravity = lp.gravity;</div><div class=\"line\">               <span class=\"keyword\">if</span> (gravity &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                   gravity = minorGravity;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);</div><div class=\"line\">               <span class=\"comment\">//根据子View的对其方式设置Left值</span></div><div class=\"line\">               <span class=\"keyword\">switch</span> (absoluteGravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) &#123;</div><div class=\"line\">                   <span class=\"keyword\">case</span> Gravity.CENTER_HORIZONTAL:</div><div class=\"line\">                       childLeft = paddingLeft + ((childSpace - childWidth) / <span class=\"number\">2</span>)</div><div class=\"line\">                               + lp.leftMargin - lp.rightMargin;</div><div class=\"line\">                       <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"keyword\">case</span> Gravity.RIGHT:</div><div class=\"line\">                       childLeft = childRight - childWidth - lp.rightMargin;</div><div class=\"line\">                       <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"keyword\">case</span> Gravity.LEFT:</div><div class=\"line\">                   <span class=\"keyword\">default</span>:</div><div class=\"line\">                       childLeft = paddingLeft + lp.leftMargin;</div><div class=\"line\">                       <span class=\"keyword\">break</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"comment\">//如果有分割线 添加分割线的高度</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class=\"line\">                   childTop += mDividerHeight;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"comment\">//子View的top修改</span></div><div class=\"line\">               childTop += lp.topMargin;</div><div class=\"line\">               <span class=\"comment\">//用setChildFrame()方法设置子控件控件的在父控件上的坐标轴</span></div><div class=\"line\">               setChildFrame(child, childLeft, childTop + getLocationOffset(child),</div><div class=\"line\">                       childWidth, childHeight);</div><div class=\"line\">               childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);</div><div class=\"line\"></div><div class=\"line\">               i += getChildrenSkipCount(child, i);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"draw-源码分析\"><a href=\"#draw-源码分析\" class=\"headerlink\" title=\"draw 源码分析\"></a>draw 源码分析</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mDivider == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</div><div class=\"line\">      drawDividersVertical(canvas);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      drawDividersHorizontal(canvas);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>同样主要分析垂直方向的处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">drawDividersVertical</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</div><div class=\"line\">    <span class=\"comment\">//根据计算好的坐标绘制对应的子View</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (child != <span class=\"keyword\">null</span> &amp;&amp; child.getVisibility() != GONE) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> top = child.getTop() - lp.topMargin - mDividerHeight;</div><div class=\"line\">                drawHorizontalDivider(canvas, top);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//绘制分割线</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(count)) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = getLastNonGoneChild();</div><div class=\"line\">        <span class=\"keyword\">int</span> bottom = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            bottom = getHeight() - getPaddingBottom() - mDividerHeight;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">            bottom = child.getBottom() + lp.bottomMargin;</div><div class=\"line\">        &#125;</div><div class=\"line\">        drawHorizontalDivider(canvas, bottom);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">drawHorizontalDivider</span><span class=\"params\">(Canvas canvas, <span class=\"keyword\">int</span> top)</span> </span>&#123;</div><div class=\"line\">  mDivider.setBounds(getPaddingLeft() + mDividerPadding, top,</div><div class=\"line\">          getWidth() - getPaddingRight() - mDividerPadding, top + mDividerHeight);</div><div class=\"line\">  mDivider.draw(canvas);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<h2 id=\"LinearLayout-源码分析\"><a href=\"#LinearLayout-源码分析\" class=\"headerlink\" title=\"LinearLayout 源码分析\"></a>LinearLayout 源码分析</h2><h3 id=\"measure过程\"><a href=\"#measure过程\" class=\"headerlink\" title=\"measure过程\"></a>measure过程</h3><h4 id=\"主要过程\"><a href=\"#主要过程\" class=\"headerlink\" title=\"主要过程\"></a>主要过程</h4><ul>\n<li>根据布局方向选择measure过程分支</li>\n<li>初始化相关变量</li>\n<li>对View进行第一次测量</li>\n<li>mTotalLength的再次测量</li>\n<li>二次测量部分View和对为测量的子View进行测量</li>\n</ul>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//判断布局方向</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</div><div class=\"line\">        measureVertical(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        measureHorizontal(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>measureVertical和measureHorizontal只是布局方向上的区别 以下主要分析measureVertical方法</p>\n<h4 id=\"初始化相关变量\"><a href=\"#初始化相关变量\" class=\"headerlink\" title=\"初始化相关变量\"></a>初始化相关变量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//mTotalLength是记录内部使用的高度也就是子View的高度和 而不是LinearLayout的高度</span></div><div class=\"line\">mTotalLength = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">//子视图的最大宽度(不包括layout_weight&gt;0的子View)</span></div><div class=\"line\"><span class=\"keyword\">int</span> maxWidth = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> childState = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> alternativeMaxWidth = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">//子视图的最大宽度(仅包含layout_weight&gt;0的子View)</span></div><div class=\"line\"><span class=\"keyword\">int</span> weightedMaxWidth = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">//子视图是否均为fillParent 用于判断是否需要重新计算</span></div><div class=\"line\"><span class=\"keyword\">boolean</span> allFillParent = <span class=\"keyword\">true</span>;</div><div class=\"line\"><span class=\"comment\">//权重值的总和</span></div><div class=\"line\"><span class=\"keyword\">float</span> totalWeight = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">//子View的数量(统一级别下)</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</div><div class=\"line\"><span class=\"comment\">//高度宽度模式</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\"><span class=\"comment\">//子View的宽度是否需要由父View决定</span></div><div class=\"line\"><span class=\"keyword\">boolean</span> matchWidth = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"keyword\">boolean</span> skippedMeasure = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"comment\">//第几个子View的baseLine作为LinearLayout的基准线</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> baselineChildIndex = mBaselineAlignedChildIndex;  </div><div class=\"line\"><span class=\"comment\">//mUseLargestChild为是否使用最大子元素的尺寸作为标准再次测量</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> useLargestChild = mUseLargestChild;</div><div class=\"line\"><span class=\"comment\">//子View中最高高度</span></div><div class=\"line\"><span class=\"keyword\">int</span> largestChildHeight = Integer.MIN_VALUE;</div></pre></td></tr></table></figure>\n<h4 id=\"第一次测量\"><a href=\"#第一次测量\" class=\"headerlink\" title=\"第一次测量\"></a>第一次测量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// See how tall everyone is. Also remember max width.</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 测量为null的子视图的高度</span></div><div class=\"line\">    <span class=\"comment\">// measureNullChild() 暂时返回 0 便于扩展</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mTotalLength += measureNullChild(i);</div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//Visibility为Gone的时候跳过该View</span></div><div class=\"line\">    <span class=\"comment\">// getChildrenSkipCount()方法同样返回0 便于扩展</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (child.getVisibility() == View.GONE) &#123;</div><div class=\"line\">       i += getChildrenSkipCount(child, i);</div><div class=\"line\">       <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//根据showDivider的值(通过hasDividerBeforeChildAt()) 来决定当前子View是否需要添加分割线的高度</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class=\"line\">        mTotalLength += mDividerHeight;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//会将子view的LayoutParams强转为父View的LayoutParams类型</span></div><div class=\"line\">    LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">    totalWeight += lp.weight;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (heightMode == MeasureSpec.EXACTLY &amp;&amp; lp.height == <span class=\"number\">0</span> &amp;&amp; lp.weight &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 满足该条件的话 不需要现在计算该子视图的高度 测量工作会在之后进行</span></div><div class=\"line\">        <span class=\"comment\">// 若子View的height=0 且weight&gt; 0 则说明该View希望使用的是LinearLayout的剩余空间</span></div><div class=\"line\">        <span class=\"comment\">// LinearLayout是EXACTLY模式的说明LinearLayout高度已经确定 不需要依赖子View的测量结果来计算自己 就无需测量该子View</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</div><div class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + lp.topMargin + lp.bottomMargin);</div><div class=\"line\">        skippedMeasure = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//测量子View</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> oldHeight = Integer.MIN_VALUE;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//当前View的height=0 且weight&gt; 0 则说明该LinearLayout的高度需要靠子View测量(不需要的在上面分支处理了)</span></div><div class=\"line\">        <span class=\"comment\">//将子View的高度设为-1 防止子View高度为0</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (lp.height == <span class=\"number\">0</span> &amp;&amp; lp.weight &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            oldHeight = <span class=\"number\">0</span>;</div><div class=\"line\">            lp.height = LayoutParams.WRAP_CONTENT;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//调用子View的measureChildWithMargins() 对子View进行测量</span></div><div class=\"line\">        <span class=\"comment\">//第四个参数表示当前已使用的宽度  因为是竖直模式 所以为0</span></div><div class=\"line\">        <span class=\"comment\">//最后一个参数表示已使用的高度 如果之前的子View或者当前的View有weight属性 则当前子视图使用 LinearLayout 的所有高度 已使用的高度为0</span></div><div class=\"line\">        measureChildBeforeLayout(child, i, widthMeasureSpec, <span class=\"number\">0</span>, heightMeasureSpec,</div><div class=\"line\">               totalWeight == <span class=\"number\">0</span> ? mTotalLength : <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (oldHeight != Integer.MIN_VALUE) &#123;</div><div class=\"line\">           <span class=\"comment\">//测量完成后 重置子View高度</span></div><div class=\"line\">           lp.height = oldHeight;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</div><div class=\"line\">        <span class=\"comment\">// 比较child测量前后总高度 取较大值</span></div><div class=\"line\">        <span class=\"comment\">///getNextLocationOffset() 返回0 便于扩展</span></div><div class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + childHeight + lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));</div><div class=\"line\">        <span class=\"comment\">// 设置最高子视图大小</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (useLargestChild) &#123;</div><div class=\"line\">            largestChildHeight = Math.max(childHeight, largestChildHeight);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// mBaselineChildTop 表示指定的 baseline 的子视图的顶部高度</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((baselineChildIndex &gt;= <span class=\"number\">0</span>) &amp;&amp; (baselineChildIndex == i + <span class=\"number\">1</span>)) &#123;</div><div class=\"line\">       mBaselineChildTop = mTotalLength;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 设置为 baseline 的子视图的前面不允许设置 weiget 属性</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (i &lt; baselineChildIndex &amp;&amp; lp.weight &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"A child of LinearLayout with index \"</span></div><div class=\"line\">                + <span class=\"string\">\"less than mBaselineAlignedChildIndex has weight &gt; 0, which \"</span></div><div class=\"line\">                + <span class=\"string\">\"won't work.  Either remove the weight, or don't set \"</span></div><div class=\"line\">                + <span class=\"string\">\"mBaselineAlignedChildIndex.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 宽度测量相关</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">boolean</span> matchWidthLocally = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//当LinearLayout非EXACTLY模式 并且自View为MATCH_PARENT时</span></div><div class=\"line\">    <span class=\"comment\">//设置matchWidth和matchWidthLocally为true</span></div><div class=\"line\">    <span class=\"comment\">//该子View占据LinearLayout水平方向上所有空间</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (widthMode != MeasureSpec.EXACTLY &amp;&amp; lp.width == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">        matchWidth = <span class=\"keyword\">true</span>;</div><div class=\"line\">        matchWidthLocally = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> margin = lp.leftMargin + lp.rightMargin;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> measuredWidth = child.getMeasuredWidth() + margin;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//对一堆变量赋值</span></div><div class=\"line\">    maxWidth = Math.max(maxWidth, measuredWidth);</div><div class=\"line\">    childState = combineMeasuredStates(childState, child.getMeasuredState());</div><div class=\"line\"></div><div class=\"line\">    allFillParent = allFillParent &amp;&amp; lp.width == LayoutParams.MATCH_PARENT;</div><div class=\"line\">    <span class=\"keyword\">if</span> (lp.weight &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        weightedMaxWidth = Math.max(weightedMaxWidth,</div><div class=\"line\">                matchWidthLocally ? margin : measuredWidth);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        alternativeMaxWidth = Math.max(alternativeMaxWidth,</div><div class=\"line\">                matchWidthLocally ? margin : measuredWidth);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    i += getChildrenSkipCount(child, i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"二次测量mTotalLength\"><a href=\"#二次测量mTotalLength\" class=\"headerlink\" title=\"二次测量mTotalLength\"></a>二次测量mTotalLength</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//根据hasDividerBeforeChildAt得到showDivider的值是否为end 来判断是否需要加上divider的高度</span></div><div class=\"line\"><span class=\"keyword\">if</span> (mTotalLength &gt; <span class=\"number\">0</span> &amp;&amp; hasDividerBeforeChildAt(count))</div><div class=\"line\">    mTotalLength += mDividerHeight;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//如果高度测量模式为AT_MOST或者UNSPECIFIED 则进行二次测量 且设置了measureWithLargestChild</span></div><div class=\"line\"><span class=\"keyword\">if</span> (useLargestChild &amp;&amp; (heightMode == MeasureSpec.AT_MOST ||</div><div class=\"line\">    heightMode == MeasureSpec.UNSPECIFIED)) &#123;</div><div class=\"line\">    mTotalLength = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\">        <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mTotalLength += measureNullChild(i);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() == GONE) &#123;</div><div class=\"line\">            i += getChildrenSkipCount(child, i);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)</div><div class=\"line\">                child.getLayoutParams();</div><div class=\"line\">        <span class=\"comment\">// 计算所有子View的高度之和</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</div><div class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + largestChildHeight +</div><div class=\"line\">                lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>就是需要useLargestChild</p>\n<p>而 mUseLargestChild = a.getBoolean(R.styleable.LinearLayout_measureWithLargestChild, false);</p>\n<p>就是说仅在LinearLayout的measureWithLargestChild属性设置为True时(默认为false)才可能出现某个child被二次测量</p>\n<p>实例如下</p>\n<p><img src=\"http://p1.bpimg.com/567571/8ac762ffc7d13b2e.png\" alt=\"LinearLayout二次测量\"></p>\n<h4 id=\"二次测量部分View和对为测量的子View进行测量\"><a href=\"#二次测量部分View和对为测量的子View进行测量\" class=\"headerlink\" title=\"二次测量部分View和对为测量的子View进行测量\"></a>二次测量部分View和对为测量的子View进行测量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加上padding的值</span></div><div class=\"line\">mTotalLength += mPaddingTop + mPaddingBottom;</div><div class=\"line\"><span class=\"keyword\">int</span> heightSize = mTotalLength;</div><div class=\"line\"><span class=\"comment\">//minHeight和当前使用的高度比较取较大值</span></div><div class=\"line\">heightSize = Math.max(heightSize, getSuggestedMinimumHeight());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据heightMeasureSpec协助计算heightSizeAndState的大小</span></div><div class=\"line\"><span class=\"comment\">//resolveSizeAndState方法之后会分析</span></div><div class=\"line\"><span class=\"keyword\">int</span> heightSizeAndState = resolveSizeAndState(heightSize, heightMeasureSpec, <span class=\"number\">0</span>);</div><div class=\"line\">heightSize = heightSizeAndState &amp; MEASURED_SIZE_MASK;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Either expand children with weight to take up available space or</span></div><div class=\"line\"><span class=\"comment\">// shrink them if they extend beyond our current bounds. If we skipped</span></div><div class=\"line\"><span class=\"comment\">// measurement on any children, we need to measure them now.</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//delta为额外的空间 及LinearLayout中未被分配的空间(可以为负)</span></div><div class=\"line\"><span class=\"keyword\">int</span> delta = heightSize - mTotalLength;</div><div class=\"line\"><span class=\"keyword\">if</span> (skippedMeasure || delta != <span class=\"number\">0</span> &amp;&amp; totalWeight &gt; <span class=\"number\">0.0f</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">//skippedMeasure为第一次测量下对跳过测量的子View设置的</span></div><div class=\"line\">    <span class=\"comment\">//weightSum为权重和 如果设置了总权重则使用我们所设置的  如果没有则使用子View的weight和</span></div><div class=\"line\">    <span class=\"keyword\">float</span> weightSum = mWeightSum &gt; <span class=\"number\">0.0f</span> ? mWeightSum : totalWeight;</div><div class=\"line\"></div><div class=\"line\">    mTotalLength = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">//测量什么的</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() == View.GONE) &#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">float</span> childExtra = lp.weight;</div><div class=\"line\">        <span class=\"keyword\">if</span> (childExtra &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// Child said it could absorb extra space -- give him his share</span></div><div class=\"line\">            <span class=\"comment\">//计算weight属性分配的大小</span></div><div class=\"line\">            <span class=\"keyword\">int</span> share = (<span class=\"keyword\">int</span>) (childExtra * delta / weightSum);</div><div class=\"line\">            <span class=\"comment\">//权重和减去已经分配权重</span></div><div class=\"line\">            weightSum -= childExtra;</div><div class=\"line\">            <span class=\"comment\">//剩余高度减去分配的高度</span></div><div class=\"line\">            delta -= share;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,</div><div class=\"line\">                    mPaddingLeft + mPaddingRight +</div><div class=\"line\">                            lp.leftMargin + lp.rightMargin, lp.width);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Use a field like lp.isMeasured to figure out if this</span></div><div class=\"line\">            <span class=\"comment\">// child has been previously measured</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> ((lp.height != <span class=\"number\">0</span>) || (heightMode != MeasureSpec.EXACTLY)) &#123;</div><div class=\"line\">                <span class=\"comment\">//子视图已经被测量过</span></div><div class=\"line\">                <span class=\"comment\">//非EXACTLY view需要加上share</span></div><div class=\"line\">                <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight() + share;</div><div class=\"line\">                <span class=\"keyword\">if</span> (childHeight &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    childHeight = <span class=\"number\">0</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//重新测量View</span></div><div class=\"line\">                child.measure(childWidthMeasureSpec,</div><div class=\"line\">                        MeasureSpec.makeMeasureSpec(childHeight, MeasureSpec.EXACTLY));</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//如果当前是EXACTLY模式 说明没有被测量 需要进行测量</span></div><div class=\"line\">                <span class=\"comment\">//子视图首次被测量</span></div><div class=\"line\">                <span class=\"comment\">//EXACTLY模式下 将weight占比的高度分配给子View    </span></div><div class=\"line\">                child.measure(childWidthMeasureSpec,</div><div class=\"line\">                        MeasureSpec.makeMeasureSpec(share &gt; <span class=\"number\">0</span> ? share : <span class=\"number\">0</span>,</div><div class=\"line\">                                MeasureSpec.EXACTLY));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Child may now not fit in vertical dimension.</span></div><div class=\"line\">            childState = combineMeasuredStates(childState, child.getMeasuredState()</div><div class=\"line\">                    &amp; (MEASURED_STATE_MASK&gt;&gt;MEASURED_HEIGHT_STATE_SHIFT));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//处理子视图宽度</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> margin =  lp.leftMargin + lp.rightMargin;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> measuredWidth = child.getMeasuredWidth() + margin;</div><div class=\"line\">        maxWidth = Math.max(maxWidth, measuredWidth);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">boolean</span> matchWidthLocally = widthMode != MeasureSpec.EXACTLY &amp;&amp;</div><div class=\"line\">                lp.width == LayoutParams.MATCH_PARENT;</div><div class=\"line\"></div><div class=\"line\">        alternativeMaxWidth = Math.max(alternativeMaxWidth,</div><div class=\"line\">                matchWidthLocally ? margin : measuredWidth);</div><div class=\"line\"></div><div class=\"line\">        allFillParent = allFillParent &amp;&amp; lp.width == LayoutParams.MATCH_PARENT;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</div><div class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + child.getMeasuredHeight() +</div><div class=\"line\">                lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Add in our padding</span></div><div class=\"line\">    mTotalLength += mPaddingTop + mPaddingBottom;</div><div class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Should we recompute the heightSpec based on the new total length?</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    alternativeMaxWidth = Math.max(alternativeMaxWidth,</div><div class=\"line\">                                   weightedMaxWidth);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// We have no limit, so make all weighted views as tall as the largest child.</span></div><div class=\"line\">    <span class=\"comment\">// Children will have already been measured once.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (useLargestChild &amp;&amp; heightMode != MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span> || child.getVisibility() == View.GONE) &#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp =</div><div class=\"line\">                    (LinearLayout.LayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">float</span> childExtra = lp.weight;</div><div class=\"line\">            <span class=\"keyword\">if</span> (childExtra &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               <span class=\"comment\">//使用最大子视图高度测量</span></div><div class=\"line\">                child.measure(</div><div class=\"line\">                        MeasureSpec.makeMeasureSpec(child.getMeasuredWidth(),</div><div class=\"line\">                                MeasureSpec.EXACTLY),</div><div class=\"line\">                        MeasureSpec.makeMeasureSpec(largestChildHeight,</div><div class=\"line\">                                MeasureSpec.EXACTLY));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (!allFillParent &amp;&amp; widthMode != MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">    maxWidth = alternativeMaxWidth;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">maxWidth += mPaddingLeft + mPaddingRight;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Check against our minimum width</span></div><div class=\"line\">maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());</div><div class=\"line\"></div><div class=\"line\">setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),</div><div class=\"line\">        heightSizeAndState);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (matchWidth) &#123;</div><div class=\"line\">    forceUniformWidth(count, heightMeasureSpec);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>resolveSizeAndState方法 定义在View中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">   * Utility to reconcile a desired size and state, with constraints imposed</div><div class=\"line\">   * by a MeasureSpec. Will take the desired size, unless a different size</div><div class=\"line\">   * is imposed by the constraints. The returned value is a compound integer,</div><div class=\"line\">   * with the resolved size in the &#123;<span class=\"doctag\">@link</span> #MEASURED_SIZE_MASK&#125; bits and</div><div class=\"line\">   * optionally the bit &#123;<span class=\"doctag\">@link</span> #MEASURED_STATE_TOO_SMALL&#125; set if the</div><div class=\"line\">   * resulting size is smaller than the size the view wants to be.</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> size How big the view wants to be.</div><div class=\"line\">   * <span class=\"doctag\">@param</span> measureSpec Constraints imposed by the parent.</div><div class=\"line\">   * <span class=\"doctag\">@param</span> childMeasuredState Size information bit mask for the view's</div><div class=\"line\">   *                           children.</div><div class=\"line\">   * <span class=\"doctag\">@return</span> Size information bit mask as defined by</div><div class=\"line\">   *         &#123;<span class=\"doctag\">@link</span> #MEASURED_SIZE_MASK&#125; and</div><div class=\"line\">   *         &#123;<span class=\"doctag\">@link</span> #MEASURED_STATE_TOO_SMALL&#125;.</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">resolveSizeAndState</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec, <span class=\"keyword\">int</span> childMeasuredState)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> result;</div><div class=\"line\">      <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">          <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">              <span class=\"keyword\">if</span> (specSize &lt; size) &#123;</div><div class=\"line\">                  result = specSize | MEASURED_STATE_TOO_SMALL;</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  result = size;</div><div class=\"line\">              &#125;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">              result = specSize;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">          <span class=\"keyword\">default</span>:</div><div class=\"line\">              result = size;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> result | (childMeasuredState &amp; MEASURED_STATE_MASK);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h6 id=\"delta为负的相关解析\"><a href=\"#delta为负的相关解析\" class=\"headerlink\" title=\"delta为负的相关解析\"></a>delta为负的相关解析</h6><p>相关代码及效果如下</p>\n<p><img src=\"http://p1.bqimg.com/567571/214652b3a9d04170.png\" alt=\"负delta.png\"></p>\n<p>根据之前的measure流程分析一下</p>\n<ul>\n<li>相关变量初始化</li>\n<li>第一次测量  两个子TextView都会被测量 TextView1.height = TextView1.height = 500dp 则mToatalLength为1000dp</li>\n<li>mToatalLength再次测量跳过</li>\n<li>计算delta delta = heightSize - mTotalLength 根据resolveSizeAndState方法 父LinearLayout是EXACTLY模式 所以最终heightSize为500dp delta = -500dp</li>\n<li>根据weight分配剩余空间 TextView1.height = 500 + 1 / 5 <em> (- 500) = 400 dp<br>TextView2.height = 500 + 4 / 5 </em> (- 500) = 100 dp</li>\n</ul>\n<h3 id=\"layout过程\"><a href=\"#layout过程\" class=\"headerlink\" title=\"layout过程\"></a>layout过程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</div><div class=\"line\">      layoutVertical(l, t, r, b);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      layoutHorizontal(l, t, r, b);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以看出 同样是分成水平和竖直两个方向的 同样分析竖直 方向下的layout过程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * Position the children during a layout pass if the orientation of this</div><div class=\"line\">    * LinearLayout is set to &#123;<span class=\"doctag\">@link</span> #VERTICAL&#125;.</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@see</span> #getOrientation()</div><div class=\"line\">    * <span class=\"doctag\">@see</span> #setOrientation(int)</div><div class=\"line\">    * <span class=\"doctag\">@see</span> #onLayout(boolean, int, int, int, int)</div><div class=\"line\">    * <span class=\"doctag\">@param</span> left</div><div class=\"line\">    * <span class=\"doctag\">@param</span> top</div><div class=\"line\">    * <span class=\"doctag\">@param</span> right</div><div class=\"line\">    * <span class=\"doctag\">@param</span> bottom</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">layoutVertical</span><span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingLeft = mPaddingLeft;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> childTop;</div><div class=\"line\">       <span class=\"keyword\">int</span> childLeft;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//父View默认子View的宽度</span></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = right - left;</div><div class=\"line\">       <span class=\"comment\">//子View的右侧默认位置</span></div><div class=\"line\">       <span class=\"keyword\">int</span> childRight = width - mPaddingRight;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 子View的可用空间大小</span></div><div class=\"line\">       <span class=\"keyword\">int</span> childSpace = width - paddingLeft - mPaddingRight;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//子View的个数</span></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> majorGravity = mGravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> minorGravity = mGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//根据LinearLayout设置的对其方式 设置第一个子View的Top值</span></div><div class=\"line\">       <span class=\"keyword\">switch</span> (majorGravity) &#123;</div><div class=\"line\">          <span class=\"keyword\">case</span> Gravity.BOTTOM:</div><div class=\"line\">              <span class=\"comment\">// mTotalLength contains the padding already</span></div><div class=\"line\">              childTop = mPaddingTop + bottom - top - mTotalLength;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"comment\">// mTotalLength contains the padding already</span></div><div class=\"line\">          <span class=\"keyword\">case</span> Gravity.CENTER_VERTICAL:</div><div class=\"line\">              childTop = mPaddingTop + (bottom - top - mTotalLength) / <span class=\"number\">2</span>;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">case</span> Gravity.TOP:</div><div class=\"line\">          <span class=\"keyword\">default</span>:</div><div class=\"line\">              childTop = mPaddingTop;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//遍历各个子View</span></div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\">           <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               childTop += measureNullChild(i);</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">                <span class=\"comment\">//LinearLayout中子View的宽和高有measure过程决定</span></div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = child.getMeasuredWidth();</div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</div><div class=\"line\">               <span class=\"comment\">//获取子View的LayoutParams</span></div><div class=\"line\">               <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp =</div><div class=\"line\">                       (LinearLayout.LayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">int</span> gravity = lp.gravity;</div><div class=\"line\">               <span class=\"keyword\">if</span> (gravity &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                   gravity = minorGravity;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);</div><div class=\"line\">               <span class=\"comment\">//根据子View的对其方式设置Left值</span></div><div class=\"line\">               <span class=\"keyword\">switch</span> (absoluteGravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) &#123;</div><div class=\"line\">                   <span class=\"keyword\">case</span> Gravity.CENTER_HORIZONTAL:</div><div class=\"line\">                       childLeft = paddingLeft + ((childSpace - childWidth) / <span class=\"number\">2</span>)</div><div class=\"line\">                               + lp.leftMargin - lp.rightMargin;</div><div class=\"line\">                       <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"keyword\">case</span> Gravity.RIGHT:</div><div class=\"line\">                       childLeft = childRight - childWidth - lp.rightMargin;</div><div class=\"line\">                       <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"keyword\">case</span> Gravity.LEFT:</div><div class=\"line\">                   <span class=\"keyword\">default</span>:</div><div class=\"line\">                       childLeft = paddingLeft + lp.leftMargin;</div><div class=\"line\">                       <span class=\"keyword\">break</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"comment\">//如果有分割线 添加分割线的高度</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class=\"line\">                   childTop += mDividerHeight;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"comment\">//子View的top修改</span></div><div class=\"line\">               childTop += lp.topMargin;</div><div class=\"line\">               <span class=\"comment\">//用setChildFrame()方法设置子控件控件的在父控件上的坐标轴</span></div><div class=\"line\">               setChildFrame(child, childLeft, childTop + getLocationOffset(child),</div><div class=\"line\">                       childWidth, childHeight);</div><div class=\"line\">               childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);</div><div class=\"line\"></div><div class=\"line\">               i += getChildrenSkipCount(child, i);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"draw-源码分析\"><a href=\"#draw-源码分析\" class=\"headerlink\" title=\"draw 源码分析\"></a>draw 源码分析</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mDivider == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</div><div class=\"line\">      drawDividersVertical(canvas);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      drawDividersHorizontal(canvas);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>同样主要分析垂直方向的处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">drawDividersVertical</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</div><div class=\"line\">    <span class=\"comment\">//根据计算好的坐标绘制对应的子View</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (child != <span class=\"keyword\">null</span> &amp;&amp; child.getVisibility() != GONE) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> top = child.getTop() - lp.topMargin - mDividerHeight;</div><div class=\"line\">                drawHorizontalDivider(canvas, top);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//绘制分割线</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(count)) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = getLastNonGoneChild();</div><div class=\"line\">        <span class=\"keyword\">int</span> bottom = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            bottom = getHeight() - getPaddingBottom() - mDividerHeight;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">            bottom = child.getBottom() + lp.bottomMargin;</div><div class=\"line\">        &#125;</div><div class=\"line\">        drawHorizontalDivider(canvas, bottom);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">drawHorizontalDivider</span><span class=\"params\">(Canvas canvas, <span class=\"keyword\">int</span> top)</span> </span>&#123;</div><div class=\"line\">  mDivider.setBounds(getPaddingLeft() + mDividerPadding, top,</div><div class=\"line\">          getWidth() - getPaddingRight() - mDividerPadding, top + mDividerHeight);</div><div class=\"line\">  mDivider.draw(canvas);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Android View 相关源码分析之二 继LayoutInflater来说","date":"2017-02-03T09:39:24.000Z","_content":"### LayoutInflater源码分析\n1. 与setContentView相关\n\n  在PhoneWindow的generateLayout中调用了     \n  ```java\n    View in = mLayoutInflater.inflate(layoutResource, null);\n  ```\n\n2. LayoutInflater中获取实例化方法\n  ```java\n    /**\n     * Obtains the LayoutInflater from the given context.\n     */\n    public static LayoutInflater from(Context context) {\n        LayoutInflater LayoutInflater =\n                (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        if (LayoutInflater == null) {\n            throw new AssertionError(\"LayoutInflater not found.\");\n        }\n        return LayoutInflater;\n    }\n  ```\n  <!-- more -->\n\n3. inflate方法相关\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root) {\n        return inflate(resource, root, root != null);\n    }\n\n    public View inflate(XmlPullParser parser, @Nullable ViewGroup root) {\n      return inflate(parser, root, root != null);\n    }\n  ```\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\n        final Resources res = getContext().getResources();\n        if (DEBUG) {\n            Log.d(TAG, \"INFLATING from resource: \\\"\" + res.getResourceName(resource) + \"\\\" (\"\n                    + Integer.toHexString(resource) + \")\");\n        }\n\n        final XmlResourceParser parser = res.getLayout(resource);\n        try {\n            return inflate(parser, root, attachToRoot);\n        } finally {\n            parser.close();\n        }\n    }\n  ```\n  最后发现都需要调用\n\n  ```java\n  public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n          synchronized (mConstructorArgs) {\n              Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n\n              final Context inflaterContext = mContext;\n              final AttributeSet attrs = Xml.asAttributeSet(parser);\n              Context lastContext = (Context) mConstructorArgs[0];\n              mConstructorArgs[0] = inflaterContext;\n              //定义返回值 初始化传入形参 root\n              View result = root;\n\n              try {\n                  // 找到根节点\n                  int type;\n                  while ((type = parser.next()) != XmlPullParser.START_TAG &&\n                          type != XmlPullParser.END_DOCUMENT) {\n                  }\n\n                  //验证type是否为Start_Tag  保证xml文件正确\n                  if (type != XmlPullParser.START_TAG) {\n                      throw new InflateException(parser.getPositionDescription()\n                              + \": No start tag found!\");\n                  }\n\n                  //type为 root node\n                  final String name = parser.getName();\n\n                  if (DEBUG) {\n                      System.out.println(\"**************************\");\n                      System.out.println(\"Creating root view: \"\n                              + name);\n                      System.out.println(\"**************************\");\n                  }\n\n                  if (TAG_MERGE.equals(name)) {\n                      //处理 merge相关\n                      //root需要非空 且attachToRoot为空\n                      if (root == null || !attachToRoot) {\n                          throw new InflateException(\"<merge /> can be used only with a valid \"\n                                  + \"ViewGroup root and attachToRoot=true\");\n                      }\n                      //递归inflate 方法调用\n                      rInflate(parser, root, inflaterContext, attrs, false);\n                  } else {\n                      //根据tag节点创建view对象\n                      final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                      ViewGroup.LayoutParams params = null;\n\n                      if (root != null) {\n                          if (DEBUG) {\n                              System.out.println(\"Creating params from root: \" +\n                                      root);\n                          }\n                          //根据root生成LayoutParams\n                          params = root.generateLayoutParams(attrs);\n                          if (!attachToRoot) {\n                              //如果attachToRoot为flase 则调用setLayoutParams\n                              temp.setLayoutParams(params);\n                          }\n                      }\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> start inflating children\");\n                      }\n                      //递归inflate剩下的children\n                      rInflateChildren(parser, temp, attrs, true);\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> done inflating children\");\n                      }\n\n                      // We are supposed to attach all the views we found (int temp)\n                      // to root. Do that now.\n                      if (root != null && attachToRoot) {\n                          //root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里\n                          root.addView(temp, params);\n                      }\n\n                      // Decide whether to return the root that was passed in or the\n                      // top view found in xml.\n                      if (root == null || !attachToRoot) {\n                          //返回xml里解析的root view\n                          result = temp;\n                      }\n                  }\n\n              } catch (XmlPullParserException e) {\n                  InflateException ex = new InflateException(e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } catch (Exception e) {\n                  InflateException ex = new InflateException(\n                          parser.getPositionDescription()\n                                  + \": \" + e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } finally {\n                  // Don't retain static reference on context.\n                  mConstructorArgs[0] = lastContext;\n                  mConstructorArgs[1] = null;\n              }\n\n              Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n              //返回参数root或xml文件里的root view\n              return result;\n          }\n      }\n\n  ```\n  相关inflate参数的结果\n  ![inflate参数.png](/inflate参数.png)\n\n4. 相关方法解析\n  在Inflate中多次被调用的rInflate\n\n  ```java\n     void rInflate(XmlPullParser parser, View parent, Context context,\n             AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException {\n\n         final int depth = parser.getDepth();\n         int type;\n         //XmlPullParser解析器的标准解析模式\n         while (((type = parser.next()) != XmlPullParser.END_TAG ||\n                 parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {\n             //找到start_tag节点\n             if (type != XmlPullParser.START_TAG) {\n                 continue;\n             }\n             //获取Name标记\n             final String name = parser.getName();\n\n             //private static final String TAG_REQUEST_FOCUS = \"requestFocus\";\n             //处理requestFocus\n             if (TAG_REQUEST_FOCUS.equals(name)) {\n                 parseRequestFocus(parser, parent);\n             // private static final String TAG_TAG = \"tag\";\n             //处理tag\n             } else if (TAG_TAG.equals(name)) {\n                 parseViewTag(parser, parent, attrs);\n             //private static final String TAG_INCLUDE = \"include\";\n             //处理include\n             } else if (TAG_INCLUDE.equals(name)) {\n                 //如果是根节点则抛出异常\n                 if (parser.getDepth() == 0) {\n                     throw new InflateException(\"<include /> cannot be the root element\");\n                 }\n                 parseInclude(parser, context, parent, attrs);\n             //private static final String TAG_MERGE = \"merge\";\n             //处理merge merge需要是xml中的根节点\n             } else if (TAG_MERGE.equals(name)) {\n                 throw new InflateException(\"<merge /> must be the root element\");\n             } else {\n                 final View view = createViewFromTag(parent, name, context, attrs);\n                 final ViewGroup viewGroup = (ViewGroup) parent;\n                 final ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);\n                 rInflateChildren(parser, view, attrs, true);\n                 viewGroup.addView(view, params);\n             }\n         }\n\n          //parent的所有子节点都处理完毕的时候回onFinishInflate方法\n         if (finishInflate) {\n             parent.onFinishInflate();\n         }\n     }\n     //可以添加自定义逻辑\n      protected void onFinishInflate() {\n      }\n```\n","source":"_posts/LayoutInflater.md","raw":"---\ntitle: Android View 相关源码分析之二 继LayoutInflater来说\ndate: 2017-02-03 17:39:24\ntags: [\"android\" , \"view\" , \"源码\"]\ncategories: \"android\"\n---\n### LayoutInflater源码分析\n1. 与setContentView相关\n\n  在PhoneWindow的generateLayout中调用了     \n  ```java\n    View in = mLayoutInflater.inflate(layoutResource, null);\n  ```\n\n2. LayoutInflater中获取实例化方法\n  ```java\n    /**\n     * Obtains the LayoutInflater from the given context.\n     */\n    public static LayoutInflater from(Context context) {\n        LayoutInflater LayoutInflater =\n                (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        if (LayoutInflater == null) {\n            throw new AssertionError(\"LayoutInflater not found.\");\n        }\n        return LayoutInflater;\n    }\n  ```\n  <!-- more -->\n\n3. inflate方法相关\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root) {\n        return inflate(resource, root, root != null);\n    }\n\n    public View inflate(XmlPullParser parser, @Nullable ViewGroup root) {\n      return inflate(parser, root, root != null);\n    }\n  ```\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\n        final Resources res = getContext().getResources();\n        if (DEBUG) {\n            Log.d(TAG, \"INFLATING from resource: \\\"\" + res.getResourceName(resource) + \"\\\" (\"\n                    + Integer.toHexString(resource) + \")\");\n        }\n\n        final XmlResourceParser parser = res.getLayout(resource);\n        try {\n            return inflate(parser, root, attachToRoot);\n        } finally {\n            parser.close();\n        }\n    }\n  ```\n  最后发现都需要调用\n\n  ```java\n  public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n          synchronized (mConstructorArgs) {\n              Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n\n              final Context inflaterContext = mContext;\n              final AttributeSet attrs = Xml.asAttributeSet(parser);\n              Context lastContext = (Context) mConstructorArgs[0];\n              mConstructorArgs[0] = inflaterContext;\n              //定义返回值 初始化传入形参 root\n              View result = root;\n\n              try {\n                  // 找到根节点\n                  int type;\n                  while ((type = parser.next()) != XmlPullParser.START_TAG &&\n                          type != XmlPullParser.END_DOCUMENT) {\n                  }\n\n                  //验证type是否为Start_Tag  保证xml文件正确\n                  if (type != XmlPullParser.START_TAG) {\n                      throw new InflateException(parser.getPositionDescription()\n                              + \": No start tag found!\");\n                  }\n\n                  //type为 root node\n                  final String name = parser.getName();\n\n                  if (DEBUG) {\n                      System.out.println(\"**************************\");\n                      System.out.println(\"Creating root view: \"\n                              + name);\n                      System.out.println(\"**************************\");\n                  }\n\n                  if (TAG_MERGE.equals(name)) {\n                      //处理 merge相关\n                      //root需要非空 且attachToRoot为空\n                      if (root == null || !attachToRoot) {\n                          throw new InflateException(\"<merge /> can be used only with a valid \"\n                                  + \"ViewGroup root and attachToRoot=true\");\n                      }\n                      //递归inflate 方法调用\n                      rInflate(parser, root, inflaterContext, attrs, false);\n                  } else {\n                      //根据tag节点创建view对象\n                      final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                      ViewGroup.LayoutParams params = null;\n\n                      if (root != null) {\n                          if (DEBUG) {\n                              System.out.println(\"Creating params from root: \" +\n                                      root);\n                          }\n                          //根据root生成LayoutParams\n                          params = root.generateLayoutParams(attrs);\n                          if (!attachToRoot) {\n                              //如果attachToRoot为flase 则调用setLayoutParams\n                              temp.setLayoutParams(params);\n                          }\n                      }\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> start inflating children\");\n                      }\n                      //递归inflate剩下的children\n                      rInflateChildren(parser, temp, attrs, true);\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> done inflating children\");\n                      }\n\n                      // We are supposed to attach all the views we found (int temp)\n                      // to root. Do that now.\n                      if (root != null && attachToRoot) {\n                          //root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里\n                          root.addView(temp, params);\n                      }\n\n                      // Decide whether to return the root that was passed in or the\n                      // top view found in xml.\n                      if (root == null || !attachToRoot) {\n                          //返回xml里解析的root view\n                          result = temp;\n                      }\n                  }\n\n              } catch (XmlPullParserException e) {\n                  InflateException ex = new InflateException(e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } catch (Exception e) {\n                  InflateException ex = new InflateException(\n                          parser.getPositionDescription()\n                                  + \": \" + e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } finally {\n                  // Don't retain static reference on context.\n                  mConstructorArgs[0] = lastContext;\n                  mConstructorArgs[1] = null;\n              }\n\n              Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n              //返回参数root或xml文件里的root view\n              return result;\n          }\n      }\n\n  ```\n  相关inflate参数的结果\n  ![inflate参数.png](/inflate参数.png)\n\n4. 相关方法解析\n  在Inflate中多次被调用的rInflate\n\n  ```java\n     void rInflate(XmlPullParser parser, View parent, Context context,\n             AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException {\n\n         final int depth = parser.getDepth();\n         int type;\n         //XmlPullParser解析器的标准解析模式\n         while (((type = parser.next()) != XmlPullParser.END_TAG ||\n                 parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {\n             //找到start_tag节点\n             if (type != XmlPullParser.START_TAG) {\n                 continue;\n             }\n             //获取Name标记\n             final String name = parser.getName();\n\n             //private static final String TAG_REQUEST_FOCUS = \"requestFocus\";\n             //处理requestFocus\n             if (TAG_REQUEST_FOCUS.equals(name)) {\n                 parseRequestFocus(parser, parent);\n             // private static final String TAG_TAG = \"tag\";\n             //处理tag\n             } else if (TAG_TAG.equals(name)) {\n                 parseViewTag(parser, parent, attrs);\n             //private static final String TAG_INCLUDE = \"include\";\n             //处理include\n             } else if (TAG_INCLUDE.equals(name)) {\n                 //如果是根节点则抛出异常\n                 if (parser.getDepth() == 0) {\n                     throw new InflateException(\"<include /> cannot be the root element\");\n                 }\n                 parseInclude(parser, context, parent, attrs);\n             //private static final String TAG_MERGE = \"merge\";\n             //处理merge merge需要是xml中的根节点\n             } else if (TAG_MERGE.equals(name)) {\n                 throw new InflateException(\"<merge /> must be the root element\");\n             } else {\n                 final View view = createViewFromTag(parent, name, context, attrs);\n                 final ViewGroup viewGroup = (ViewGroup) parent;\n                 final ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);\n                 rInflateChildren(parser, view, attrs, true);\n                 viewGroup.addView(view, params);\n             }\n         }\n\n          //parent的所有子节点都处理完毕的时候回onFinishInflate方法\n         if (finishInflate) {\n             parent.onFinishInflate();\n         }\n     }\n     //可以添加自定义逻辑\n      protected void onFinishInflate() {\n      }\n```\n","slug":"LayoutInflater","published":1,"updated":"2017-02-06T14:56:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8cwyb5m0009o3xwmjbkxez3","content":"<h3 id=\"LayoutInflater源码分析\"><a href=\"#LayoutInflater源码分析\" class=\"headerlink\" title=\"LayoutInflater源码分析\"></a>LayoutInflater源码分析</h3><ol>\n<li><p>与setContentView相关</p>\n<p>在PhoneWindow的generateLayout中调用了     </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>LayoutInflater中获取实例化方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Obtains the LayoutInflater from the given context.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LayoutInflater <span class=\"title\">from</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    LayoutInflater LayoutInflater =</div><div class=\"line\">            (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class=\"line\">    <span class=\"keyword\">if</span> (LayoutInflater == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">\"LayoutInflater not found.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> LayoutInflater;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n</li>\n<li><p>inflate方法相关</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> inflate(resource, root, root != <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> inflate(parser, root, root != <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Resources res = getContext().getResources();</div><div class=\"line\">    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"INFLATING from resource: \\\"\"</span> + res.getResourceName(resource) + <span class=\"string\">\"\\\" (\"</span></div><div class=\"line\">                + Integer.toHexString(resource) + <span class=\"string\">\")\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> XmlResourceParser parser = res.getLayout(resource);</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        parser.close();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后发现都需要调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</div><div class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"inflate\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> Context inflaterContext = mContext;</div><div class=\"line\">            <span class=\"keyword\">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</div><div class=\"line\">            Context lastContext = (Context) mConstructorArgs[<span class=\"number\">0</span>];</div><div class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</div><div class=\"line\">            <span class=\"comment\">//定义返回值 初始化传入形参 root</span></div><div class=\"line\">            View result = root;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// 找到根节点</span></div><div class=\"line\">                <span class=\"keyword\">int</span> type;</div><div class=\"line\">                <span class=\"keyword\">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</div><div class=\"line\">                        type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//验证type是否为Start_Tag  保证xml文件正确</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(parser.getPositionDescription()</div><div class=\"line\">                            + <span class=\"string\">\": No start tag found!\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//type为 root node</span></div><div class=\"line\">                <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Creating root view: \"</span></div><div class=\"line\">                            + name);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class=\"line\">                    <span class=\"comment\">//处理 merge相关</span></div><div class=\"line\">                    <span class=\"comment\">//root需要非空 且attachToRoot为空</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; can be used only with a valid \"</span></div><div class=\"line\">                                + <span class=\"string\">\"ViewGroup root and attachToRoot=true\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//递归inflate 方法调用</span></div><div class=\"line\">                    rInflate(parser, root, inflaterContext, attrs, <span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">//根据tag节点创建view对象</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</div><div class=\"line\"></div><div class=\"line\">                    ViewGroup.LayoutParams params = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                            System.out.println(<span class=\"string\">\"Creating params from root: \"</span> +</div><div class=\"line\">                                    root);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"comment\">//根据root生成LayoutParams</span></div><div class=\"line\">                        params = root.generateLayoutParams(attrs);</div><div class=\"line\">                        <span class=\"keyword\">if</span> (!attachToRoot) &#123;</div><div class=\"line\">                            <span class=\"comment\">//如果attachToRoot为flase 则调用setLayoutParams</span></div><div class=\"line\">                            temp.setLayoutParams(params);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; start inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//递归inflate剩下的children</span></div><div class=\"line\">                    rInflateChildren(parser, temp, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; done inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></div><div class=\"line\">                    <span class=\"comment\">// to root. Do that now.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"comment\">//root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里</span></div><div class=\"line\">                        root.addView(temp, params);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></div><div class=\"line\">                    <span class=\"comment\">// top view found in xml.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"comment\">//返回xml里解析的root view</span></div><div class=\"line\">                        result = temp;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;</div><div class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(e.getMessage());</div><div class=\"line\">                ex.initCause(e);</div><div class=\"line\">                <span class=\"keyword\">throw</span> ex;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(</div><div class=\"line\">                        parser.getPositionDescription()</div><div class=\"line\">                                + <span class=\"string\">\": \"</span> + e.getMessage());</div><div class=\"line\">                ex.initCause(e);</div><div class=\"line\">                <span class=\"keyword\">throw</span> ex;</div><div class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// Don't retain static reference on context.</span></div><div class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</div><div class=\"line\">                mConstructorArgs[<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">            <span class=\"comment\">//返回参数root或xml文件里的root view</span></div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>相关inflate参数的结果<br><img src=\"/inflate参数.png\" alt=\"inflate参数.png\"></p>\n</li>\n<li><p>相关方法解析<br>在Inflate中多次被调用的rInflate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</span></span></div><div class=\"line\">        AttributeSet attrs, <span class=\"keyword\">boolean</span> finishInflate) <span class=\"keyword\">throws</span> XmlPullParserException, IOException &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> depth = parser.getDepth();</div><div class=\"line\">    <span class=\"keyword\">int</span> type;</div><div class=\"line\">    <span class=\"comment\">//XmlPullParser解析器的标准解析模式</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</div><div class=\"line\">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">        <span class=\"comment\">//找到start_tag节点</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//获取Name标记</span></div><div class=\"line\">        <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_REQUEST_FOCUS = \"requestFocus\";</span></div><div class=\"line\">        <span class=\"comment\">//处理requestFocus</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</div><div class=\"line\">            parseRequestFocus(parser, parent);</div><div class=\"line\">        <span class=\"comment\">// private static final String TAG_TAG = \"tag\";</span></div><div class=\"line\">        <span class=\"comment\">//处理tag</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</div><div class=\"line\">            parseViewTag(parser, parent, attrs);</div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_INCLUDE = \"include\";</span></div><div class=\"line\">        <span class=\"comment\">//处理include</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;</div><div class=\"line\">            <span class=\"comment\">//如果是根节点则抛出异常</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;include /&gt; cannot be the root element\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            parseInclude(parser, context, parent, attrs);</div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_MERGE = \"merge\";</span></div><div class=\"line\">        <span class=\"comment\">//处理merge merge需要是xml中的根节点</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; must be the root element\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View view = createViewFromTag(parent, name, context, attrs);</div><div class=\"line\">            <span class=\"keyword\">final</span> ViewGroup viewGroup = (ViewGroup) parent;</div><div class=\"line\">            <span class=\"keyword\">final</span> ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);</div><div class=\"line\">            rInflateChildren(parser, view, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\">            viewGroup.addView(view, params);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">//parent的所有子节点都处理完毕的时候回onFinishInflate方法</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (finishInflate) &#123;</div><div class=\"line\">        parent.onFinishInflate();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//可以添加自定义逻辑</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinishInflate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"<h3 id=\"LayoutInflater源码分析\"><a href=\"#LayoutInflater源码分析\" class=\"headerlink\" title=\"LayoutInflater源码分析\"></a>LayoutInflater源码分析</h3><ol>\n<li><p>与setContentView相关</p>\n<p>在PhoneWindow的generateLayout中调用了     </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>LayoutInflater中获取实例化方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Obtains the LayoutInflater from the given context.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LayoutInflater <span class=\"title\">from</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    LayoutInflater LayoutInflater =</div><div class=\"line\">            (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class=\"line\">    <span class=\"keyword\">if</span> (LayoutInflater == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">\"LayoutInflater not found.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> LayoutInflater;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"</li>\n<li><p>inflate方法相关</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> inflate(resource, root, root != <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> inflate(parser, root, root != <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Resources res = getContext().getResources();</div><div class=\"line\">    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"INFLATING from resource: \\\"\"</span> + res.getResourceName(resource) + <span class=\"string\">\"\\\" (\"</span></div><div class=\"line\">                + Integer.toHexString(resource) + <span class=\"string\">\")\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> XmlResourceParser parser = res.getLayout(resource);</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        parser.close();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后发现都需要调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</div><div class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"inflate\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> Context inflaterContext = mContext;</div><div class=\"line\">            <span class=\"keyword\">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</div><div class=\"line\">            Context lastContext = (Context) mConstructorArgs[<span class=\"number\">0</span>];</div><div class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</div><div class=\"line\">            <span class=\"comment\">//定义返回值 初始化传入形参 root</span></div><div class=\"line\">            View result = root;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// 找到根节点</span></div><div class=\"line\">                <span class=\"keyword\">int</span> type;</div><div class=\"line\">                <span class=\"keyword\">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</div><div class=\"line\">                        type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//验证type是否为Start_Tag  保证xml文件正确</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(parser.getPositionDescription()</div><div class=\"line\">                            + <span class=\"string\">\": No start tag found!\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//type为 root node</span></div><div class=\"line\">                <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Creating root view: \"</span></div><div class=\"line\">                            + name);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class=\"line\">                    <span class=\"comment\">//处理 merge相关</span></div><div class=\"line\">                    <span class=\"comment\">//root需要非空 且attachToRoot为空</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; can be used only with a valid \"</span></div><div class=\"line\">                                + <span class=\"string\">\"ViewGroup root and attachToRoot=true\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//递归inflate 方法调用</span></div><div class=\"line\">                    rInflate(parser, root, inflaterContext, attrs, <span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">//根据tag节点创建view对象</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</div><div class=\"line\"></div><div class=\"line\">                    ViewGroup.LayoutParams params = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                            System.out.println(<span class=\"string\">\"Creating params from root: \"</span> +</div><div class=\"line\">                                    root);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"comment\">//根据root生成LayoutParams</span></div><div class=\"line\">                        params = root.generateLayoutParams(attrs);</div><div class=\"line\">                        <span class=\"keyword\">if</span> (!attachToRoot) &#123;</div><div class=\"line\">                            <span class=\"comment\">//如果attachToRoot为flase 则调用setLayoutParams</span></div><div class=\"line\">                            temp.setLayoutParams(params);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; start inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//递归inflate剩下的children</span></div><div class=\"line\">                    rInflateChildren(parser, temp, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; done inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></div><div class=\"line\">                    <span class=\"comment\">// to root. Do that now.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"comment\">//root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里</span></div><div class=\"line\">                        root.addView(temp, params);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></div><div class=\"line\">                    <span class=\"comment\">// top view found in xml.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"comment\">//返回xml里解析的root view</span></div><div class=\"line\">                        result = temp;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;</div><div class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(e.getMessage());</div><div class=\"line\">                ex.initCause(e);</div><div class=\"line\">                <span class=\"keyword\">throw</span> ex;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(</div><div class=\"line\">                        parser.getPositionDescription()</div><div class=\"line\">                                + <span class=\"string\">\": \"</span> + e.getMessage());</div><div class=\"line\">                ex.initCause(e);</div><div class=\"line\">                <span class=\"keyword\">throw</span> ex;</div><div class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// Don't retain static reference on context.</span></div><div class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</div><div class=\"line\">                mConstructorArgs[<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">            <span class=\"comment\">//返回参数root或xml文件里的root view</span></div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>相关inflate参数的结果<br><img src=\"/inflate参数.png\" alt=\"inflate参数.png\"></p>\n</li>\n<li><p>相关方法解析<br>在Inflate中多次被调用的rInflate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</div><div class=\"line\">        AttributeSet attrs, <span class=\"keyword\">boolean</span> finishInflate)</span> <span class=\"keyword\">throws</span> XmlPullParserException, IOException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> depth = parser.getDepth();</div><div class=\"line\">    <span class=\"keyword\">int</span> type;</div><div class=\"line\">    <span class=\"comment\">//XmlPullParser解析器的标准解析模式</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</div><div class=\"line\">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">        <span class=\"comment\">//找到start_tag节点</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//获取Name标记</span></div><div class=\"line\">        <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_REQUEST_FOCUS = \"requestFocus\";</span></div><div class=\"line\">        <span class=\"comment\">//处理requestFocus</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</div><div class=\"line\">            parseRequestFocus(parser, parent);</div><div class=\"line\">        <span class=\"comment\">// private static final String TAG_TAG = \"tag\";</span></div><div class=\"line\">        <span class=\"comment\">//处理tag</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</div><div class=\"line\">            parseViewTag(parser, parent, attrs);</div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_INCLUDE = \"include\";</span></div><div class=\"line\">        <span class=\"comment\">//处理include</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;</div><div class=\"line\">            <span class=\"comment\">//如果是根节点则抛出异常</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;include /&gt; cannot be the root element\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            parseInclude(parser, context, parent, attrs);</div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_MERGE = \"merge\";</span></div><div class=\"line\">        <span class=\"comment\">//处理merge merge需要是xml中的根节点</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; must be the root element\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View view = createViewFromTag(parent, name, context, attrs);</div><div class=\"line\">            <span class=\"keyword\">final</span> ViewGroup viewGroup = (ViewGroup) parent;</div><div class=\"line\">            <span class=\"keyword\">final</span> ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);</div><div class=\"line\">            rInflateChildren(parser, view, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\">            viewGroup.addView(view, params);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">//parent的所有子节点都处理完毕的时候回onFinishInflate方法</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (finishInflate) &#123;</div><div class=\"line\">        parent.onFinishInflate();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//可以添加自定义逻辑</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinishInflate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"Android View 相关源码分析之五 RelativeLayout 源码分析","date":"2017-02-03T09:59:16.000Z","_content":"## RelativeLayout  源码分析\n> 继承自ViewGroup 没有重载onDraw方法 内部子View又是相对 只要计算出View的坐标 layout过程同样简单\n\n### measure过程\n#### 主要过程\n1. 将内部View根据纵向关系和横向关系排序\n2. 初始化相关变量\n3. 遍历水平关系的View\n4. 遍历竖直关系的View\n5. baseline计算\n6. 宽度和高度修正\n\n  <!-- more -->\n\n\n\n#### 1 将内部View根据纵向关系和横向关系排序\n>layout_toRightOf 为横向关系  layout_below为纵向关系\n\n```java\n    //首先会根据mDirtyHierarchy的值判断是否需要将子View重新排序\n    if (mDirtyHierarchy) {\n        mDirtyHierarchy = false;\n        sortChildren();\n    }\n```\n相关调用方法\n```java\n    //mDirtyHierarchy的值只有在requestLayout方法下被更新\n    public void requestLayout() {\n        super.requestLayout();\n        mDirtyHierarchy = true;\n    }\n\n    //sortChildren()方法对横向纵向关系的view的数组进行非空判断 用DependencyGraph进行判断\n    private void sortChildren() {\n        final int count = getChildCount();\n        if (mSortedVerticalChildren == null || mSortedVerticalChildren.length != count) {\n            mSortedVerticalChildren = new View[count];\n        }\n\n        if (mSortedHorizontalChildren == null || mSortedHorizontalChildren.length != count) {\n            mSortedHorizontalChildren = new View[count];\n        }\n\n        final DependencyGraph graph = mGraph;\n        graph.clear();\n\n        for (int i = 0; i < count; i++) {\n            graph.add(getChildAt(i));\n        }\n\n        graph.getSortedViews(mSortedVerticalChildren, RULES_VERTICAL);\n        graph.getSortedViews(mSortedHorizontalChildren, RULES_HORIZONTAL);\n    }\n```\n**DependencyGraph的相关方法**\n```java\n    private static class DependencyGraph {\n        ...\n        /**\n         * Adds a view to the graph.\n         *\n         * @param view The view to be added as a node to the graph.\n         */\n        void add(View view) {\n            //因为是图 根据view生成一个节点\n            final int id = view.getId();\n            final Node node = Node.acquire(view);\n            //如果是有效的id 则将该节点添加到List中\n            if (id != View.NO_ID) {\n                mKeyNodes.put(id, node);\n            }\n\n            mNodes.add(node);\n        }     \n\n          /**\n           * Builds a sorted list of views. The sorting order depends on the dependencies\n           * between the view. For instance, if view C needs view A to be processed first\n           * and view A needs view B to be processed first, the dependency graph\n           * is: B -> A -> C. The sorted array will contain views B, A and C in this order.\n           *\n           * @param sorted The sorted list of views. The length of this array must\n           *        be equal to getChildCount().\n           * @param rules The list of rules to take into account.\n           */\n          void getSortedViews(View[] sorted, int... rules) {\n            //当前View找不到其它的可依赖的View时  作为root节点\n              final ArrayDeque<Node> roots = findRoots(rules);\n              int index = 0;\n\n              Node node;\n              //读取root的下一个node\n              while ((node = roots.pollLast()) != null) {\n                  final View view = node.view;\n                  final int key = view.getId();\n\n              //将符合规则的View加到 sorted中\n\n                  sorted[index++] = view;\n\n                  final ArrayMap<Node, DependencyGraph> dependents = node.dependents;\n                  //dependents 依赖该node的node  (A C依赖B 则B的dependents中存A C)\n                  final int count = dependents.size();\n                  //遍历所有依赖自己的node\n                  for (int i = 0; i < count; i++) {\n                      final Node dependent = dependents.keyAt(i);\n                      //dependencies 是被依赖的的node的规则和node(A 依赖 B D 则dependencies存有B D )\n                      final SparseArray<Node> dependencies = dependent.dependencies;\n\n                      //移除当前node和dependencies的依赖关系\n                      dependencies.remove(key);\n                      //如果解除依赖后没有其它依赖 则将该node也视为rootNode\n                      if (dependencies.size() == 0) {\n                          roots.add(dependent);\n                      }\n                  }\n              }\n\n              if (index < sorted.length) {\n                  throw new IllegalStateException(\"Circular dependencies cannot exist in RelativeLayout\");\n              }\n          }\n  ...\n}\n```\neg: A依赖B B依赖C 首先存入C 因为不依赖任何其它的\n\n```java\n\n        /**\n         * Finds the roots of the graph. A root is a node with no dependency and\n         * with [0..n] dependents.\n         *\n         * @param rulesFilter The list of rules to consider when building the\n         *        dependencies\n         *\n         * @return A list of node, each being a root of the graph\n         */\n        private ArrayDeque<Node> findRoots(int[] rulesFilter) {\n          //keyNodes为nodelist\n            final SparseArray<Node> keyNodes = mKeyNodes;\n            final ArrayList<Node> nodes = mNodes;\n            final int count = nodes.size();\n\n          //初始化依赖该node的node和该node依赖的node相关参数\n            for (int i = 0; i < count; i++) {\n                final Node node = nodes.get(i);\n                node.dependents.clear();\n                node.dependencies.clear();\n            }\n\n\n            //遍历所有node  存入当前view和他所依赖的关系\n            for (int i = 0; i < count; i++) {\n                final Node node = nodes.get(i);\n\n                final LayoutParams layoutParams = (LayoutParams) node.view.getLayoutParams();\n                //取出当前View所有的依赖关系\n                final int[] rules = layoutParams.mRules;\n                final int rulesCount = rulesFilter.length;\n\n                //遍历当前View所有的\n                for (int j = 0; j < rulesCount; j++) {\n                  //rule对应被依赖view的id\n                    final int rule = rules[rulesFilter[j]];\n                    if (rule > 0) {\n                        //找到被依赖的node\n                        final Node dependency = keyNodes.get(rule);\n                        //跳过空view和本身\n                        if (dependency == null || dependency == node) {\n                            continue;\n                        }\n                        //添加依赖被依赖的node\n                        dependency.dependents.put(node, this);\n                        node.dependencies.put(rule, dependency);\n                    }\n                }\n            }\n\n            final ArrayDeque<Node> roots = mRoots;\n            roots.clear();\n\n            // 再次遍历  如果该node的依赖关系为0 即该view不依赖任何view 则视为rootView\n            for (int i = 0; i < count; i++) {\n                final Node node = nodes.get(i);\n                if (node.dependencies.size() == 0) roots.addLast(node);\n            }\n\n            return roots;\n        }\n```\n\n#### 2 初始化相关变量\n```java\n  int myWidth = -1;\n  int myHeight = -1;\n\n  int width = 0;\n  int height = 0;\n\n  final int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n  final int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n  final int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n  final int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n\n  // 如果不是UNSPECIFIED模式 则将widthSize赋值于myWidth\n  if (widthMode != MeasureSpec.UNSPECIFIED) {\n      myWidth = widthSize;\n  }\n  // 如果不是UNSPECIFIED模式 则将heightSize赋值于myHeight\n  if (heightMode != MeasureSpec.UNSPECIFIED) {\n      myHeight = heightSize;\n  }\n  //如果是EXACTLY模式 则将myWidth和myHeight记录\n  if (widthMode == MeasureSpec.EXACTLY) {\n      width = myWidth;\n  }\n\n  if (heightMode == MeasureSpec.EXACTLY) {\n      height = myHeight;\n  }\n\n  View ignore = null;\n  //判断是否为Start 和  top 确定左上角坐标\n  int gravity = mGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;\n  final boolean horizontalGravity = gravity != Gravity.START && gravity != 0;\n  gravity = mGravity & Gravity.VERTICAL_GRAVITY_MASK;\n  final boolean verticalGravity = gravity != Gravity.TOP && gravity != 0;\n\n  int left = Integer.MAX_VALUE;\n  int top = Integer.MAX_VALUE;\n  int right = Integer.MIN_VALUE;\n  int bottom = Integer.MIN_VALUE;\n\n  boolean offsetHorizontalAxis = false;\n  boolean offsetVerticalAxis = false;\n  // 记录ignore的view\n  if ((horizontalGravity || verticalGravity) && mIgnoreGravity != View.NO_ID) {\n      ignore = findViewById(mIgnoreGravity);\n  }\n  //宽度个高度是否为warp模式\n  final boolean isWrapContentWidth = widthMode != MeasureSpec.EXACTLY;\n  final boolean isWrapContentHeight = heightMode != MeasureSpec.EXACTLY;\n\n  //在计算和分配的子View的坐标的时候 需要用到父VIew的尺寸 但是暂时无法拿到准确值(待完成下面操作)\n  //先使用默认值代替 在计算后 用偏移量更新真是坐标\n  final int layoutDirection = getLayoutDirection();\n  if (isLayoutRtl() && myWidth == -1) {\n      myWidth = DEFAULT_WIDTH;\n  }\n```\n\n#### 3  遍历水平关系的View\n```java\n    View[] views = mSortedHorizontalChildren;\n    int count = views.length;\n\n    for (int i = 0; i < count; i++) {\n        View child = views[i];\n        if (child.getVisibility() != GONE) {\n            LayoutParams params = (LayoutParams) child.getLayoutParams();\n            //根据方向获得子View中设置的规则\n            int[] rules = params.getRules(layoutDirection);\n            //将左右方向规则转换为左右的坐标\n            applyHorizontalSizeRules(params, myWidth, rules);\n            //测算水平方向的子View的尺寸\n            measureChildHorizontal(child, params, myWidth, myHeight);\n            //确定水平方向子View的位置\n            if (positionChildHorizontal(child, params, myWidth, isWrapContentWidth)) {\n                offsetHorizontalAxis = true;\n            }\n        }\n    }\n\n```\n相关方法\n```java\n    private void applyHorizontalSizeRules(LayoutParams childParams, int myWidth, int[] rules) {\n        RelativeLayout.LayoutParams anchorParams;\n        childParams.mLeft = VALUE_NOT_SET;\n        childParams.mRight = VALUE_NOT_SET;\n        //得到当前子View的layout_toLeftOf属性对应的View\n        anchorParams = getRelatedViewParams(rules, LEFT_OF);\n        if (anchorParams != null) {\n          //如果这个属性存在 则当前子View的右坐标是layout_toLeftOf对应的view的左坐标减去对应view的marginLeft的值和自身marginRight的值\n            childParams.mRight = anchorParams.mLeft - (anchorParams.leftMargin +\n                    childParams.rightMargin);\n        //如果alignWithParent为true alignWithParent取alignWithParentIfMissing\n        //如果layout_toLeftOf的view为空 或者gone 则将RelativeLayout当做被依赖的对象\n        } else if (childParams.alignWithParent && rules[LEFT_OF] != 0) {\n            //如果父容器RelativeLayout的宽度大于0\n            //则子View的右坐标为 父RelativeLayout的宽度减去 mPaddingRight 和自身的marginRight\n            if (myWidth >= 0) {\n                childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;\n            }\n        }\n\n        //类似的方法 得到左坐标(通过参数RIGHT_OF)\n        anchorParams = getRelatedViewParams(rules, RIGHT_OF);\n        if (anchorParams != null) {\n            childParams.mLeft = anchorParams.mRight + (anchorParams.rightMargin +\n                    childParams.leftMargin);\n        } else if (childParams.alignWithParent && rules[RIGHT_OF] != 0) {\n            childParams.mLeft = mPaddingLeft + childParams.leftMargin;\n        }\n        //类似的方法 得到左坐标 (通过参数ALIGN_LEFT)\n        anchorParams = getRelatedViewParams(rules, ALIGN_LEFT);\n        if (anchorParams != null) {\n            childParams.mLeft = anchorParams.mLeft + childParams.leftMargin;\n        } else if (childParams.alignWithParent && rules[ALIGN_LEFT] != 0) {\n            childParams.mLeft = mPaddingLeft + childParams.leftMargin;\n        }\n        //类似的方法 得到右坐标 (通过参数ALIGN_RIGHT)\n        anchorParams = getRelatedViewParams(rules, ALIGN_RIGHT);\n        if (anchorParams != null) {\n            childParams.mRight = anchorParams.mRight - childParams.rightMargin;\n        } else if (childParams.alignWithParent && rules[ALIGN_RIGHT] != 0) {\n            if (myWidth >= 0) {\n                childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;\n            }\n        }\n        //根据ALIGN_PARENT_LEFT 将自己放到父RelativeLayout的左边\n        if (0 != rules[ALIGN_PARENT_LEFT]) {\n            childParams.mLeft = mPaddingLeft + childParams.leftMargin;\n        }\n        //根据ALIGN_PARENT_RIGHT 将自己放到父RelativeLayout的右边\n        if (0 != rules[ALIGN_PARENT_RIGHT]) {\n            if (myWidth >= 0) {\n                childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;\n            }\n        }\n    }\n```\n```java\nprivate void measureChildHorizontal(View child, LayoutParams params, int myWidth, int myHeight) {\n  //获得child的宽度MeasureSpec\n    final int childWidthMeasureSpec = getChildMeasureSpec(params.mLeft, params.mRight,\n            params.width, params.leftMargin, params.rightMargin, mPaddingLeft, mPaddingRight,\n            myWidth);\n\n    final int childHeightMeasureSpec;\n    //在低于4.2的时候 mAllowBrokenMeasureSpecs为true\n    //当myHeight < 0 时 则根据父RelativeLayout设置其MeasureSpec模式\n    if (myHeight < 0 && !mAllowBrokenMeasureSpecs) {\n        //如果父RelativeLayout的height大于0  则 设置子view的MeasureSpec模式为EXACTLY\n        if (params.height >= 0) {\n            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(\n                    params.height, MeasureSpec.EXACTLY);\n        } else {\n            //反之 如果其小于0  则设置子View的MeasureSpec为UNSPECIFIED\n            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED);\n        }\n    } else {\n      //当当前myHeight >= 0\n      //判断当前高度是否与父RelativeLayout高度相同 设置heightMode\n      //根据maxHeight 和heightMode设置子View的MeasureSpec模式\n        final int maxHeight;\n        if (mMeasureVerticalWithPaddingMargin) {\n            maxHeight = Math.max(0, myHeight - mPaddingTop - mPaddingBottom\n                    - params.topMargin - params.bottomMargin);\n        } else {\n            maxHeight = Math.max(0, myHeight);\n        }\n        final int heightMode;\n        if (params.height == LayoutParams.MATCH_PARENT) {\n            heightMode = MeasureSpec.EXACTLY;\n        } else {\n            heightMode = MeasureSpec.AT_MOST;\n        }\n        childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(maxHeight, heightMode);\n    }\n    //获得了子View的WidthMeasureSpec和HeightMeasureSpec\n    //子View可以通过measure方法获取自身的size\n    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n}\n```\n```java\n/**\n    * Get a measure spec that accounts for all of the constraints on this view.\n    * This includes size constraints imposed by the RelativeLayout as well as\n    * the View's desired dimension.\n    *\n    * @param childStart The left or top field of the child's layout params\n    * @param childEnd The right or bottom field of the child's layout params\n    * @param childSize The child's desired size (the width or height field of\n    *        the child's layout params)\n    * @param startMargin The left or top margin\n    * @param endMargin The right or bottom margin\n    * @param startPadding mPaddingLeft or mPaddingTop\n    * @param endPadding mPaddingRight or mPaddingBottom\n    * @param mySize The width or height of this view (the RelativeLayout)\n    * @return MeasureSpec for the child\n    */\n   private int getChildMeasureSpec(int childStart, int childEnd,\n           int childSize, int startMargin, int endMargin, int startPadding,\n           int endPadding, int mySize) {\n       int childSpecMode = 0;\n       int childSpecSize = 0;\n\n       final boolean isUnspecified = mySize < 0;\n       //如果父RelativeLayout宽度小于0 版本号不小于4.2\n       if (isUnspecified && !mAllowBrokenMeasureSpecs) {\n            //如果子View的左边距和右边距都不为VALUE_NOT_SET\n            //且右边距坐标大于左边距坐标 则将其差当做宽度赋予View 设置模式为EXACTLY\n            //VALUE_NOT_SET = Integer.MIN_VALUE\n            /**\n             * Constant for the minimum {@code int} value, -2<sup>31</sup>.\n             */\n            //public static final int MIN_VALUE = 0x80000000;\n           if (childStart != VALUE_NOT_SET && childEnd != VALUE_NOT_SET) {\n               childSpecSize = Math.max(0, childEnd - childStart);\n               childSpecMode = MeasureSpec.EXACTLY;\n           } else if (childSize >= 0) {\n               // 如果childSpecSize >= 0 则赋值于childSpecSize\n               //同样设置模式为EXACTLY\n               childSpecSize = childSize;\n               childSpecMode = MeasureSpec.EXACTLY;\n           } else {\n               // 都不满足则设置模式为UNSPECIFIED\n               childSpecSize = 0;\n               childSpecMode = MeasureSpec.UNSPECIFIED;\n           }\n\n           return MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);\n       }\n\n       // 计算 开始和结束相关\n       int tempStart = childStart;\n       int tempEnd = childEnd;\n\n       //如果没有指定start值 则默认赋予 padding和merage的值\n       if (tempStart == VALUE_NOT_SET) {\n           tempStart = startPadding + startMargin;\n       }\n       //同上\n       if (tempEnd == VALUE_NOT_SET) {\n           tempEnd = mySize - endPadding - endMargin;\n       }\n\n       //指定最大可提供的大小\n       final int maxAvailable = tempEnd - tempStart;\n\n       if (childStart != VALUE_NOT_SET && childEnd != VALUE_NOT_SET) {\n           //如果Start和End都是有效值 根据isUnspecified设置specMode为UNSPECIFIED或EXACTLY\n           //并将设置对应的size\n           childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;\n           childSpecSize = Math.max(0, maxAvailable);\n       } else {\n          //反之 判断childSize的相关值\n           if (childSize >= 0) {\n               //设置模式为EXACTLY\n               //判断maxAvailable和childSize情况 取较大值设置为childSpecSize\n               childSpecMode = MeasureSpec.EXACTLY;\n\n               if (maxAvailable >= 0) {\n                   // We have a maximum size in this dimension.\n                   childSpecSize = Math.min(maxAvailable, childSize);\n               } else {\n                   // We can grow in this dimension.\n                   childSpecSize = childSize;\n               }\n           } else if (childSize == LayoutParams.MATCH_PARENT) {\n               //如果子View是match模式 参照isUnspecified设置相关\n               childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;\n               childSpecSize = Math.max(0, maxAvailable);\n           } else if (childSize == LayoutParams.WRAP_CONTENT) {\n               //在wrap进行设置\n               if (maxAvailable >= 0) {\n                   // We have a maximum size in this dimension.\n                   childSpecMode = MeasureSpec.AT_MOST;\n                   childSpecSize = maxAvailable;\n               } else {\n                   // We can grow in this dimension. Child can be as big as it\n                   // wants.\n                   childSpecMode = MeasureSpec.UNSPECIFIED;\n                   childSpecSize = 0;\n               }\n           }\n       }\n\n       return MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);\n   }\n```\n以上 完成了View的第一次测量  确定了View的大小 然后根据大小觉得把子view放在父RelativeLayout中的位置\n\n```java\nprivate boolean positionChildHorizontal(View child, LayoutParams params, int myWidth,\n        boolean wrapContent) {\n    //获取RelativeLayout的布局方向\n    final int layoutDirection = getLayoutDirection();\n    int[] rules = params.getRules(layoutDirection);\n\n    if (params.mLeft == VALUE_NOT_SET && params.mRight != VALUE_NOT_SET) {\n        // 如果右边界有效 左边界无效 根据右边界计算出左边界\n        params.mLeft = params.mRight - child.getMeasuredWidth();\n    } else if (params.mLeft != VALUE_NOT_SET && params.mRight == VALUE_NOT_SET) {\n        // 同上反之\n        params.mRight = params.mLeft + child.getMeasuredWidth();\n    } else if (params.mLeft == VALUE_NOT_SET && params.mRight == VALUE_NOT_SET) {\n        //都无效的时候\n\n        if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_HORIZONTAL] != 0) {\n          //设置了CENTER_IN_PARENT或者 CENTER_HORIZONTAL的情况下\n            if (!wrapContent) {\n              //非wrap情况下\n              //把子View水平中心固定在RelativeLayout的中心\n                centerHorizontal(child, params, myWidth);\n            } else {\n               //左边距为padding+margin\n               //右边距为左边距加上测量宽度\n                params.mLeft = mPaddingLeft + params.leftMargin;\n                params.mRight = params.mLeft + child.getMeasuredWidth();\n            }\n            return true;\n        } else {\n            //RTL右到左 布局方向\n            //LTR\u0010左到右 布局方向\n            if (isLayoutRtl()) {\n                params.mRight = myWidth - mPaddingRight- params.rightMargin;\n                params.mLeft = params.mRight - child.getMeasuredWidth();\n            } else {\n                params.mLeft = mPaddingLeft + params.leftMargin;\n                params.mRight = params.mLeft + child.getMeasuredWidth();\n            }\n        }\n    }\n    return rules[ALIGN_PARENT_END] != 0;\n    //当为CENTER_IN_PARENT  CENTER_HORIZONTAL ALIGN_PARENT_END三种情况之一时返回True\n}\n```\n\n#### 4 遍历竖直关系的View\n```java\n...\n  for (int i = 0; i < count; i++) {\n           final View child = views[i];\n           if (child.getVisibility() != GONE) {\n               final LayoutParams params = (LayoutParams) child.getLayoutParams();\n              //将竖直方向规则转换为坐标\n               applyVerticalSizeRules(params, myHeight, child.getBaseline());\n               //测量子View\n               measureChild(child, params, myWidth, myHeight);\n               //确定竖直方向子View的位置\n               if (positionChildVertical(child, params, myHeight, isWrapContentHeight)) {\n                   offsetVerticalAxis = true;\n               }\n              //首先判断是否为wrap模式\n               if (isWrapContentWidth) {\n                 //根据RTL或者LTR和版本进行区分\n                 //Build.VERSION_CODES.KITKAT = 19\n                 //主要对margin进行处理\n                   if (isLayoutRtl()) {\n                       if (targetSdkVersion < Build.VERSION_CODES.KITKAT) {\n                           width = Math.max(width, myWidth - params.mLeft);\n                       } else {\n                           width = Math.max(width, myWidth - params.mLeft - params.leftMargin);\n                       }\n                   } else {\n                       if (targetSdkVersion < Build.VERSION_CODES.KITKAT) {\n                           width = Math.max(width, params.mRight);\n                       } else {\n                           width = Math.max(width, params.mRight + params.rightMargin);\n                       }\n                   }\n               }\n               if (isWrapContentHeight) {\n                   if (targetSdkVersion < Build.VERSION_CODES.KITKAT) {\n                       height = Math.max(height, params.mBottom);\n                   } else {\n                       height = Math.max(height, params.mBottom + params.bottomMargin);\n                   }\n               }\n\n               if (child != ignore || verticalGravity) {\n                   left = Math.min(left, params.mLeft - params.leftMargin);\n                   top = Math.min(top, params.mTop - params.topMargin);\n               }\n\n               if (child != ignore || horizontalGravity) {\n                   right = Math.max(right, params.mRight + params.rightMargin);\n                   bottom = Math.max(bottom, params.mBottom + params.bottomMargin);\n               }\n           }\n       }\n...\n```\n\n#### 5 baseline计算\n```java\n// Use the top-start-most laid out view as the baseline. RTL offsets are\n// applied later, so we can use the left-most edge as the starting edge.\n    View baselineView = null;\n    LayoutParams baselineParams = null;\n    for (int i = 0; i < count; i++) {\n        final View child = views[i];\n        if (child.getVisibility() != GONE) {\n            final LayoutParams childParams = (LayoutParams) child.getLayoutParams();\n            if (baselineView == null || baselineParams == null\n                    || compareLayoutPosition(childParams, baselineParams) < 0) {\n                baselineView = child;\n                baselineParams = childParams;\n            }\n        }\n    }\n    mBaselineView = baselineView;\n```\n\n#### 6 宽度和高度修正\n```java\n    //如何是wrap模式\n    if (isWrapContentWidth) {\n            width += mPaddingRight;\n\n            if (mLayoutParams != null && mLayoutParams.width >= 0) {\n                width = Math.max(width, mLayoutParams.width);\n            }\n\n            width = Math.max(width, getSuggestedMinimumWidth());\n            width = resolveSize(width, widthMeasureSpec);\n\n            //在得到最后的width之后 对依赖RelativeLayout的子View添上偏移量\n            if (offsetHorizontalAxis) {\n                for (int i = 0; i < count; i++) {\n                    final View child = views[i];\n                    if (child.getVisibility() != GONE) {\n                        final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                        final int[] rules = params.getRules(layoutDirection);\n                        //对CENTER_IN_PARENT或者CENTER_HORIZONTAL的子View重测\n                        if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_HORIZONTAL] != 0) {\n                            centerHorizontal(child, params, width);\n                        //对ALIGN_PARENT_RIGHT重测\n                        } else if (rules[ALIGN_PARENT_RIGHT] != 0) {\n                            final int childWidth = child.getMeasuredWidth();\n                            params.mLeft = width - mPaddingRight - childWidth;\n                            params.mRight = params.mLeft + childWidth;\n                        }\n                    }\n                }\n            }\n        }\n        //同上\n        if (isWrapContentHeight) {\n            height += mPaddingBottom;\n\n            if (mLayoutParams != null && mLayoutParams.height >= 0) {\n                height = Math.max(height, mLayoutParams.height);\n            }\n\n            height = Math.max(height, getSuggestedMinimumHeight());\n            height = resolveSize(height, heightMeasureSpec);\n\n            if (offsetVerticalAxis) {\n                for (int i = 0; i < count; i++) {\n                    final View child = views[i];\n                    if (child.getVisibility() != GONE) {\n                        final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                        final int[] rules = params.getRules(layoutDirection);\n                        if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_VERTICAL] != 0) {\n                            centerVertical(child, params, height);\n                        } else if (rules[ALIGN_PARENT_BOTTOM] != 0) {\n                            final int childHeight = child.getMeasuredHeight();\n                            params.mTop = height - mPaddingBottom - childHeight;\n                            params.mBottom = params.mTop + childHeight;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        //根据gravity再次修正\n        if (horizontalGravity || verticalGravity) {\n            final Rect selfBounds = mSelfBounds;\n            selfBounds.set(mPaddingLeft, mPaddingTop, width - mPaddingRight,\n                    height - mPaddingBottom);\n\n            final Rect contentBounds = mContentBounds;\n            Gravity.apply(mGravity, right - left, bottom - top, selfBounds, contentBounds,\n                    layoutDirection);\n\n            final int horizontalOffset = contentBounds.left - left;\n            final int verticalOffset = contentBounds.top - top;\n            if (horizontalOffset != 0 || verticalOffset != 0) {\n                for (int i = 0; i < count; i++) {\n                    final View child = views[i];\n                    if (child.getVisibility() != GONE && child != ignore) {\n                        final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                        if (horizontalGravity) {\n                            params.mLeft += horizontalOffset;\n                            params.mRight += horizontalOffset;\n                        }\n                        if (verticalGravity) {\n                            params.mTop += verticalOffset;\n                            params.mBottom += verticalOffset;\n                        }\n                    }\n                }\n            }\n        }\n\n        //如果是RTL(右到左显示)则再次修改\n        if (isLayoutRtl()) {\n            final int offsetWidth = myWidth - width;\n            for (int i = 0; i < count; i++) {\n                final View child = views[i];\n                if (child.getVisibility() != GONE) {\n                    final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                    params.mLeft -= offsetWidth;\n                    params.mRight -= offsetWidth;\n                }\n            }\n        }\n```\n#### 简单总结\nRelativeLayout更加关注子View的left right top bottom值 并且优先级高于width和height\n\n\n\n### RelativeLayout的layout过程\n对于RelativeLayout来的 layout过程更多的根据子View的left right top bottom值来设定位置\n```java\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        //  The layout has actually already been performed and the positions\n        //  cached.  Apply the cached values to the children.\n        final int count = getChildCount();\n\n        for (int i = 0; i < count; i++) {\n            View child = getChildAt(i);\n            if (child.getVisibility() != GONE) {\n                RelativeLayout.LayoutParams st =\n                        (RelativeLayout.LayoutParams) child.getLayoutParams();\n                child.layout(st.mLeft, st.mTop, st.mRight, st.mBottom);\n            }\n        }\n    }\n```\n\n### RelativeLayout的draw过程\nRelativeLayout作为ViewGroup的子类 因为其性质原因  没有对draw过程进行修改\n\n\n以上\n","source":"_posts/RelativeLayout 源码分析.md","raw":"---\ntitle: Android View 相关源码分析之五 RelativeLayout 源码分析\ndate: 2017-02-03 17:59:16\ntags: [\"android\" , \"view\" , \"源码\"]\ncategories: \"android\"\n---\n## RelativeLayout  源码分析\n> 继承自ViewGroup 没有重载onDraw方法 内部子View又是相对 只要计算出View的坐标 layout过程同样简单\n\n### measure过程\n#### 主要过程\n1. 将内部View根据纵向关系和横向关系排序\n2. 初始化相关变量\n3. 遍历水平关系的View\n4. 遍历竖直关系的View\n5. baseline计算\n6. 宽度和高度修正\n\n  <!-- more -->\n\n\n\n#### 1 将内部View根据纵向关系和横向关系排序\n>layout_toRightOf 为横向关系  layout_below为纵向关系\n\n```java\n    //首先会根据mDirtyHierarchy的值判断是否需要将子View重新排序\n    if (mDirtyHierarchy) {\n        mDirtyHierarchy = false;\n        sortChildren();\n    }\n```\n相关调用方法\n```java\n    //mDirtyHierarchy的值只有在requestLayout方法下被更新\n    public void requestLayout() {\n        super.requestLayout();\n        mDirtyHierarchy = true;\n    }\n\n    //sortChildren()方法对横向纵向关系的view的数组进行非空判断 用DependencyGraph进行判断\n    private void sortChildren() {\n        final int count = getChildCount();\n        if (mSortedVerticalChildren == null || mSortedVerticalChildren.length != count) {\n            mSortedVerticalChildren = new View[count];\n        }\n\n        if (mSortedHorizontalChildren == null || mSortedHorizontalChildren.length != count) {\n            mSortedHorizontalChildren = new View[count];\n        }\n\n        final DependencyGraph graph = mGraph;\n        graph.clear();\n\n        for (int i = 0; i < count; i++) {\n            graph.add(getChildAt(i));\n        }\n\n        graph.getSortedViews(mSortedVerticalChildren, RULES_VERTICAL);\n        graph.getSortedViews(mSortedHorizontalChildren, RULES_HORIZONTAL);\n    }\n```\n**DependencyGraph的相关方法**\n```java\n    private static class DependencyGraph {\n        ...\n        /**\n         * Adds a view to the graph.\n         *\n         * @param view The view to be added as a node to the graph.\n         */\n        void add(View view) {\n            //因为是图 根据view生成一个节点\n            final int id = view.getId();\n            final Node node = Node.acquire(view);\n            //如果是有效的id 则将该节点添加到List中\n            if (id != View.NO_ID) {\n                mKeyNodes.put(id, node);\n            }\n\n            mNodes.add(node);\n        }     \n\n          /**\n           * Builds a sorted list of views. The sorting order depends on the dependencies\n           * between the view. For instance, if view C needs view A to be processed first\n           * and view A needs view B to be processed first, the dependency graph\n           * is: B -> A -> C. The sorted array will contain views B, A and C in this order.\n           *\n           * @param sorted The sorted list of views. The length of this array must\n           *        be equal to getChildCount().\n           * @param rules The list of rules to take into account.\n           */\n          void getSortedViews(View[] sorted, int... rules) {\n            //当前View找不到其它的可依赖的View时  作为root节点\n              final ArrayDeque<Node> roots = findRoots(rules);\n              int index = 0;\n\n              Node node;\n              //读取root的下一个node\n              while ((node = roots.pollLast()) != null) {\n                  final View view = node.view;\n                  final int key = view.getId();\n\n              //将符合规则的View加到 sorted中\n\n                  sorted[index++] = view;\n\n                  final ArrayMap<Node, DependencyGraph> dependents = node.dependents;\n                  //dependents 依赖该node的node  (A C依赖B 则B的dependents中存A C)\n                  final int count = dependents.size();\n                  //遍历所有依赖自己的node\n                  for (int i = 0; i < count; i++) {\n                      final Node dependent = dependents.keyAt(i);\n                      //dependencies 是被依赖的的node的规则和node(A 依赖 B D 则dependencies存有B D )\n                      final SparseArray<Node> dependencies = dependent.dependencies;\n\n                      //移除当前node和dependencies的依赖关系\n                      dependencies.remove(key);\n                      //如果解除依赖后没有其它依赖 则将该node也视为rootNode\n                      if (dependencies.size() == 0) {\n                          roots.add(dependent);\n                      }\n                  }\n              }\n\n              if (index < sorted.length) {\n                  throw new IllegalStateException(\"Circular dependencies cannot exist in RelativeLayout\");\n              }\n          }\n  ...\n}\n```\neg: A依赖B B依赖C 首先存入C 因为不依赖任何其它的\n\n```java\n\n        /**\n         * Finds the roots of the graph. A root is a node with no dependency and\n         * with [0..n] dependents.\n         *\n         * @param rulesFilter The list of rules to consider when building the\n         *        dependencies\n         *\n         * @return A list of node, each being a root of the graph\n         */\n        private ArrayDeque<Node> findRoots(int[] rulesFilter) {\n          //keyNodes为nodelist\n            final SparseArray<Node> keyNodes = mKeyNodes;\n            final ArrayList<Node> nodes = mNodes;\n            final int count = nodes.size();\n\n          //初始化依赖该node的node和该node依赖的node相关参数\n            for (int i = 0; i < count; i++) {\n                final Node node = nodes.get(i);\n                node.dependents.clear();\n                node.dependencies.clear();\n            }\n\n\n            //遍历所有node  存入当前view和他所依赖的关系\n            for (int i = 0; i < count; i++) {\n                final Node node = nodes.get(i);\n\n                final LayoutParams layoutParams = (LayoutParams) node.view.getLayoutParams();\n                //取出当前View所有的依赖关系\n                final int[] rules = layoutParams.mRules;\n                final int rulesCount = rulesFilter.length;\n\n                //遍历当前View所有的\n                for (int j = 0; j < rulesCount; j++) {\n                  //rule对应被依赖view的id\n                    final int rule = rules[rulesFilter[j]];\n                    if (rule > 0) {\n                        //找到被依赖的node\n                        final Node dependency = keyNodes.get(rule);\n                        //跳过空view和本身\n                        if (dependency == null || dependency == node) {\n                            continue;\n                        }\n                        //添加依赖被依赖的node\n                        dependency.dependents.put(node, this);\n                        node.dependencies.put(rule, dependency);\n                    }\n                }\n            }\n\n            final ArrayDeque<Node> roots = mRoots;\n            roots.clear();\n\n            // 再次遍历  如果该node的依赖关系为0 即该view不依赖任何view 则视为rootView\n            for (int i = 0; i < count; i++) {\n                final Node node = nodes.get(i);\n                if (node.dependencies.size() == 0) roots.addLast(node);\n            }\n\n            return roots;\n        }\n```\n\n#### 2 初始化相关变量\n```java\n  int myWidth = -1;\n  int myHeight = -1;\n\n  int width = 0;\n  int height = 0;\n\n  final int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n  final int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n  final int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n  final int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n\n  // 如果不是UNSPECIFIED模式 则将widthSize赋值于myWidth\n  if (widthMode != MeasureSpec.UNSPECIFIED) {\n      myWidth = widthSize;\n  }\n  // 如果不是UNSPECIFIED模式 则将heightSize赋值于myHeight\n  if (heightMode != MeasureSpec.UNSPECIFIED) {\n      myHeight = heightSize;\n  }\n  //如果是EXACTLY模式 则将myWidth和myHeight记录\n  if (widthMode == MeasureSpec.EXACTLY) {\n      width = myWidth;\n  }\n\n  if (heightMode == MeasureSpec.EXACTLY) {\n      height = myHeight;\n  }\n\n  View ignore = null;\n  //判断是否为Start 和  top 确定左上角坐标\n  int gravity = mGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;\n  final boolean horizontalGravity = gravity != Gravity.START && gravity != 0;\n  gravity = mGravity & Gravity.VERTICAL_GRAVITY_MASK;\n  final boolean verticalGravity = gravity != Gravity.TOP && gravity != 0;\n\n  int left = Integer.MAX_VALUE;\n  int top = Integer.MAX_VALUE;\n  int right = Integer.MIN_VALUE;\n  int bottom = Integer.MIN_VALUE;\n\n  boolean offsetHorizontalAxis = false;\n  boolean offsetVerticalAxis = false;\n  // 记录ignore的view\n  if ((horizontalGravity || verticalGravity) && mIgnoreGravity != View.NO_ID) {\n      ignore = findViewById(mIgnoreGravity);\n  }\n  //宽度个高度是否为warp模式\n  final boolean isWrapContentWidth = widthMode != MeasureSpec.EXACTLY;\n  final boolean isWrapContentHeight = heightMode != MeasureSpec.EXACTLY;\n\n  //在计算和分配的子View的坐标的时候 需要用到父VIew的尺寸 但是暂时无法拿到准确值(待完成下面操作)\n  //先使用默认值代替 在计算后 用偏移量更新真是坐标\n  final int layoutDirection = getLayoutDirection();\n  if (isLayoutRtl() && myWidth == -1) {\n      myWidth = DEFAULT_WIDTH;\n  }\n```\n\n#### 3  遍历水平关系的View\n```java\n    View[] views = mSortedHorizontalChildren;\n    int count = views.length;\n\n    for (int i = 0; i < count; i++) {\n        View child = views[i];\n        if (child.getVisibility() != GONE) {\n            LayoutParams params = (LayoutParams) child.getLayoutParams();\n            //根据方向获得子View中设置的规则\n            int[] rules = params.getRules(layoutDirection);\n            //将左右方向规则转换为左右的坐标\n            applyHorizontalSizeRules(params, myWidth, rules);\n            //测算水平方向的子View的尺寸\n            measureChildHorizontal(child, params, myWidth, myHeight);\n            //确定水平方向子View的位置\n            if (positionChildHorizontal(child, params, myWidth, isWrapContentWidth)) {\n                offsetHorizontalAxis = true;\n            }\n        }\n    }\n\n```\n相关方法\n```java\n    private void applyHorizontalSizeRules(LayoutParams childParams, int myWidth, int[] rules) {\n        RelativeLayout.LayoutParams anchorParams;\n        childParams.mLeft = VALUE_NOT_SET;\n        childParams.mRight = VALUE_NOT_SET;\n        //得到当前子View的layout_toLeftOf属性对应的View\n        anchorParams = getRelatedViewParams(rules, LEFT_OF);\n        if (anchorParams != null) {\n          //如果这个属性存在 则当前子View的右坐标是layout_toLeftOf对应的view的左坐标减去对应view的marginLeft的值和自身marginRight的值\n            childParams.mRight = anchorParams.mLeft - (anchorParams.leftMargin +\n                    childParams.rightMargin);\n        //如果alignWithParent为true alignWithParent取alignWithParentIfMissing\n        //如果layout_toLeftOf的view为空 或者gone 则将RelativeLayout当做被依赖的对象\n        } else if (childParams.alignWithParent && rules[LEFT_OF] != 0) {\n            //如果父容器RelativeLayout的宽度大于0\n            //则子View的右坐标为 父RelativeLayout的宽度减去 mPaddingRight 和自身的marginRight\n            if (myWidth >= 0) {\n                childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;\n            }\n        }\n\n        //类似的方法 得到左坐标(通过参数RIGHT_OF)\n        anchorParams = getRelatedViewParams(rules, RIGHT_OF);\n        if (anchorParams != null) {\n            childParams.mLeft = anchorParams.mRight + (anchorParams.rightMargin +\n                    childParams.leftMargin);\n        } else if (childParams.alignWithParent && rules[RIGHT_OF] != 0) {\n            childParams.mLeft = mPaddingLeft + childParams.leftMargin;\n        }\n        //类似的方法 得到左坐标 (通过参数ALIGN_LEFT)\n        anchorParams = getRelatedViewParams(rules, ALIGN_LEFT);\n        if (anchorParams != null) {\n            childParams.mLeft = anchorParams.mLeft + childParams.leftMargin;\n        } else if (childParams.alignWithParent && rules[ALIGN_LEFT] != 0) {\n            childParams.mLeft = mPaddingLeft + childParams.leftMargin;\n        }\n        //类似的方法 得到右坐标 (通过参数ALIGN_RIGHT)\n        anchorParams = getRelatedViewParams(rules, ALIGN_RIGHT);\n        if (anchorParams != null) {\n            childParams.mRight = anchorParams.mRight - childParams.rightMargin;\n        } else if (childParams.alignWithParent && rules[ALIGN_RIGHT] != 0) {\n            if (myWidth >= 0) {\n                childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;\n            }\n        }\n        //根据ALIGN_PARENT_LEFT 将自己放到父RelativeLayout的左边\n        if (0 != rules[ALIGN_PARENT_LEFT]) {\n            childParams.mLeft = mPaddingLeft + childParams.leftMargin;\n        }\n        //根据ALIGN_PARENT_RIGHT 将自己放到父RelativeLayout的右边\n        if (0 != rules[ALIGN_PARENT_RIGHT]) {\n            if (myWidth >= 0) {\n                childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;\n            }\n        }\n    }\n```\n```java\nprivate void measureChildHorizontal(View child, LayoutParams params, int myWidth, int myHeight) {\n  //获得child的宽度MeasureSpec\n    final int childWidthMeasureSpec = getChildMeasureSpec(params.mLeft, params.mRight,\n            params.width, params.leftMargin, params.rightMargin, mPaddingLeft, mPaddingRight,\n            myWidth);\n\n    final int childHeightMeasureSpec;\n    //在低于4.2的时候 mAllowBrokenMeasureSpecs为true\n    //当myHeight < 0 时 则根据父RelativeLayout设置其MeasureSpec模式\n    if (myHeight < 0 && !mAllowBrokenMeasureSpecs) {\n        //如果父RelativeLayout的height大于0  则 设置子view的MeasureSpec模式为EXACTLY\n        if (params.height >= 0) {\n            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(\n                    params.height, MeasureSpec.EXACTLY);\n        } else {\n            //反之 如果其小于0  则设置子View的MeasureSpec为UNSPECIFIED\n            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED);\n        }\n    } else {\n      //当当前myHeight >= 0\n      //判断当前高度是否与父RelativeLayout高度相同 设置heightMode\n      //根据maxHeight 和heightMode设置子View的MeasureSpec模式\n        final int maxHeight;\n        if (mMeasureVerticalWithPaddingMargin) {\n            maxHeight = Math.max(0, myHeight - mPaddingTop - mPaddingBottom\n                    - params.topMargin - params.bottomMargin);\n        } else {\n            maxHeight = Math.max(0, myHeight);\n        }\n        final int heightMode;\n        if (params.height == LayoutParams.MATCH_PARENT) {\n            heightMode = MeasureSpec.EXACTLY;\n        } else {\n            heightMode = MeasureSpec.AT_MOST;\n        }\n        childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(maxHeight, heightMode);\n    }\n    //获得了子View的WidthMeasureSpec和HeightMeasureSpec\n    //子View可以通过measure方法获取自身的size\n    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n}\n```\n```java\n/**\n    * Get a measure spec that accounts for all of the constraints on this view.\n    * This includes size constraints imposed by the RelativeLayout as well as\n    * the View's desired dimension.\n    *\n    * @param childStart The left or top field of the child's layout params\n    * @param childEnd The right or bottom field of the child's layout params\n    * @param childSize The child's desired size (the width or height field of\n    *        the child's layout params)\n    * @param startMargin The left or top margin\n    * @param endMargin The right or bottom margin\n    * @param startPadding mPaddingLeft or mPaddingTop\n    * @param endPadding mPaddingRight or mPaddingBottom\n    * @param mySize The width or height of this view (the RelativeLayout)\n    * @return MeasureSpec for the child\n    */\n   private int getChildMeasureSpec(int childStart, int childEnd,\n           int childSize, int startMargin, int endMargin, int startPadding,\n           int endPadding, int mySize) {\n       int childSpecMode = 0;\n       int childSpecSize = 0;\n\n       final boolean isUnspecified = mySize < 0;\n       //如果父RelativeLayout宽度小于0 版本号不小于4.2\n       if (isUnspecified && !mAllowBrokenMeasureSpecs) {\n            //如果子View的左边距和右边距都不为VALUE_NOT_SET\n            //且右边距坐标大于左边距坐标 则将其差当做宽度赋予View 设置模式为EXACTLY\n            //VALUE_NOT_SET = Integer.MIN_VALUE\n            /**\n             * Constant for the minimum {@code int} value, -2<sup>31</sup>.\n             */\n            //public static final int MIN_VALUE = 0x80000000;\n           if (childStart != VALUE_NOT_SET && childEnd != VALUE_NOT_SET) {\n               childSpecSize = Math.max(0, childEnd - childStart);\n               childSpecMode = MeasureSpec.EXACTLY;\n           } else if (childSize >= 0) {\n               // 如果childSpecSize >= 0 则赋值于childSpecSize\n               //同样设置模式为EXACTLY\n               childSpecSize = childSize;\n               childSpecMode = MeasureSpec.EXACTLY;\n           } else {\n               // 都不满足则设置模式为UNSPECIFIED\n               childSpecSize = 0;\n               childSpecMode = MeasureSpec.UNSPECIFIED;\n           }\n\n           return MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);\n       }\n\n       // 计算 开始和结束相关\n       int tempStart = childStart;\n       int tempEnd = childEnd;\n\n       //如果没有指定start值 则默认赋予 padding和merage的值\n       if (tempStart == VALUE_NOT_SET) {\n           tempStart = startPadding + startMargin;\n       }\n       //同上\n       if (tempEnd == VALUE_NOT_SET) {\n           tempEnd = mySize - endPadding - endMargin;\n       }\n\n       //指定最大可提供的大小\n       final int maxAvailable = tempEnd - tempStart;\n\n       if (childStart != VALUE_NOT_SET && childEnd != VALUE_NOT_SET) {\n           //如果Start和End都是有效值 根据isUnspecified设置specMode为UNSPECIFIED或EXACTLY\n           //并将设置对应的size\n           childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;\n           childSpecSize = Math.max(0, maxAvailable);\n       } else {\n          //反之 判断childSize的相关值\n           if (childSize >= 0) {\n               //设置模式为EXACTLY\n               //判断maxAvailable和childSize情况 取较大值设置为childSpecSize\n               childSpecMode = MeasureSpec.EXACTLY;\n\n               if (maxAvailable >= 0) {\n                   // We have a maximum size in this dimension.\n                   childSpecSize = Math.min(maxAvailable, childSize);\n               } else {\n                   // We can grow in this dimension.\n                   childSpecSize = childSize;\n               }\n           } else if (childSize == LayoutParams.MATCH_PARENT) {\n               //如果子View是match模式 参照isUnspecified设置相关\n               childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;\n               childSpecSize = Math.max(0, maxAvailable);\n           } else if (childSize == LayoutParams.WRAP_CONTENT) {\n               //在wrap进行设置\n               if (maxAvailable >= 0) {\n                   // We have a maximum size in this dimension.\n                   childSpecMode = MeasureSpec.AT_MOST;\n                   childSpecSize = maxAvailable;\n               } else {\n                   // We can grow in this dimension. Child can be as big as it\n                   // wants.\n                   childSpecMode = MeasureSpec.UNSPECIFIED;\n                   childSpecSize = 0;\n               }\n           }\n       }\n\n       return MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);\n   }\n```\n以上 完成了View的第一次测量  确定了View的大小 然后根据大小觉得把子view放在父RelativeLayout中的位置\n\n```java\nprivate boolean positionChildHorizontal(View child, LayoutParams params, int myWidth,\n        boolean wrapContent) {\n    //获取RelativeLayout的布局方向\n    final int layoutDirection = getLayoutDirection();\n    int[] rules = params.getRules(layoutDirection);\n\n    if (params.mLeft == VALUE_NOT_SET && params.mRight != VALUE_NOT_SET) {\n        // 如果右边界有效 左边界无效 根据右边界计算出左边界\n        params.mLeft = params.mRight - child.getMeasuredWidth();\n    } else if (params.mLeft != VALUE_NOT_SET && params.mRight == VALUE_NOT_SET) {\n        // 同上反之\n        params.mRight = params.mLeft + child.getMeasuredWidth();\n    } else if (params.mLeft == VALUE_NOT_SET && params.mRight == VALUE_NOT_SET) {\n        //都无效的时候\n\n        if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_HORIZONTAL] != 0) {\n          //设置了CENTER_IN_PARENT或者 CENTER_HORIZONTAL的情况下\n            if (!wrapContent) {\n              //非wrap情况下\n              //把子View水平中心固定在RelativeLayout的中心\n                centerHorizontal(child, params, myWidth);\n            } else {\n               //左边距为padding+margin\n               //右边距为左边距加上测量宽度\n                params.mLeft = mPaddingLeft + params.leftMargin;\n                params.mRight = params.mLeft + child.getMeasuredWidth();\n            }\n            return true;\n        } else {\n            //RTL右到左 布局方向\n            //LTR\u0010左到右 布局方向\n            if (isLayoutRtl()) {\n                params.mRight = myWidth - mPaddingRight- params.rightMargin;\n                params.mLeft = params.mRight - child.getMeasuredWidth();\n            } else {\n                params.mLeft = mPaddingLeft + params.leftMargin;\n                params.mRight = params.mLeft + child.getMeasuredWidth();\n            }\n        }\n    }\n    return rules[ALIGN_PARENT_END] != 0;\n    //当为CENTER_IN_PARENT  CENTER_HORIZONTAL ALIGN_PARENT_END三种情况之一时返回True\n}\n```\n\n#### 4 遍历竖直关系的View\n```java\n...\n  for (int i = 0; i < count; i++) {\n           final View child = views[i];\n           if (child.getVisibility() != GONE) {\n               final LayoutParams params = (LayoutParams) child.getLayoutParams();\n              //将竖直方向规则转换为坐标\n               applyVerticalSizeRules(params, myHeight, child.getBaseline());\n               //测量子View\n               measureChild(child, params, myWidth, myHeight);\n               //确定竖直方向子View的位置\n               if (positionChildVertical(child, params, myHeight, isWrapContentHeight)) {\n                   offsetVerticalAxis = true;\n               }\n              //首先判断是否为wrap模式\n               if (isWrapContentWidth) {\n                 //根据RTL或者LTR和版本进行区分\n                 //Build.VERSION_CODES.KITKAT = 19\n                 //主要对margin进行处理\n                   if (isLayoutRtl()) {\n                       if (targetSdkVersion < Build.VERSION_CODES.KITKAT) {\n                           width = Math.max(width, myWidth - params.mLeft);\n                       } else {\n                           width = Math.max(width, myWidth - params.mLeft - params.leftMargin);\n                       }\n                   } else {\n                       if (targetSdkVersion < Build.VERSION_CODES.KITKAT) {\n                           width = Math.max(width, params.mRight);\n                       } else {\n                           width = Math.max(width, params.mRight + params.rightMargin);\n                       }\n                   }\n               }\n               if (isWrapContentHeight) {\n                   if (targetSdkVersion < Build.VERSION_CODES.KITKAT) {\n                       height = Math.max(height, params.mBottom);\n                   } else {\n                       height = Math.max(height, params.mBottom + params.bottomMargin);\n                   }\n               }\n\n               if (child != ignore || verticalGravity) {\n                   left = Math.min(left, params.mLeft - params.leftMargin);\n                   top = Math.min(top, params.mTop - params.topMargin);\n               }\n\n               if (child != ignore || horizontalGravity) {\n                   right = Math.max(right, params.mRight + params.rightMargin);\n                   bottom = Math.max(bottom, params.mBottom + params.bottomMargin);\n               }\n           }\n       }\n...\n```\n\n#### 5 baseline计算\n```java\n// Use the top-start-most laid out view as the baseline. RTL offsets are\n// applied later, so we can use the left-most edge as the starting edge.\n    View baselineView = null;\n    LayoutParams baselineParams = null;\n    for (int i = 0; i < count; i++) {\n        final View child = views[i];\n        if (child.getVisibility() != GONE) {\n            final LayoutParams childParams = (LayoutParams) child.getLayoutParams();\n            if (baselineView == null || baselineParams == null\n                    || compareLayoutPosition(childParams, baselineParams) < 0) {\n                baselineView = child;\n                baselineParams = childParams;\n            }\n        }\n    }\n    mBaselineView = baselineView;\n```\n\n#### 6 宽度和高度修正\n```java\n    //如何是wrap模式\n    if (isWrapContentWidth) {\n            width += mPaddingRight;\n\n            if (mLayoutParams != null && mLayoutParams.width >= 0) {\n                width = Math.max(width, mLayoutParams.width);\n            }\n\n            width = Math.max(width, getSuggestedMinimumWidth());\n            width = resolveSize(width, widthMeasureSpec);\n\n            //在得到最后的width之后 对依赖RelativeLayout的子View添上偏移量\n            if (offsetHorizontalAxis) {\n                for (int i = 0; i < count; i++) {\n                    final View child = views[i];\n                    if (child.getVisibility() != GONE) {\n                        final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                        final int[] rules = params.getRules(layoutDirection);\n                        //对CENTER_IN_PARENT或者CENTER_HORIZONTAL的子View重测\n                        if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_HORIZONTAL] != 0) {\n                            centerHorizontal(child, params, width);\n                        //对ALIGN_PARENT_RIGHT重测\n                        } else if (rules[ALIGN_PARENT_RIGHT] != 0) {\n                            final int childWidth = child.getMeasuredWidth();\n                            params.mLeft = width - mPaddingRight - childWidth;\n                            params.mRight = params.mLeft + childWidth;\n                        }\n                    }\n                }\n            }\n        }\n        //同上\n        if (isWrapContentHeight) {\n            height += mPaddingBottom;\n\n            if (mLayoutParams != null && mLayoutParams.height >= 0) {\n                height = Math.max(height, mLayoutParams.height);\n            }\n\n            height = Math.max(height, getSuggestedMinimumHeight());\n            height = resolveSize(height, heightMeasureSpec);\n\n            if (offsetVerticalAxis) {\n                for (int i = 0; i < count; i++) {\n                    final View child = views[i];\n                    if (child.getVisibility() != GONE) {\n                        final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                        final int[] rules = params.getRules(layoutDirection);\n                        if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_VERTICAL] != 0) {\n                            centerVertical(child, params, height);\n                        } else if (rules[ALIGN_PARENT_BOTTOM] != 0) {\n                            final int childHeight = child.getMeasuredHeight();\n                            params.mTop = height - mPaddingBottom - childHeight;\n                            params.mBottom = params.mTop + childHeight;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        //根据gravity再次修正\n        if (horizontalGravity || verticalGravity) {\n            final Rect selfBounds = mSelfBounds;\n            selfBounds.set(mPaddingLeft, mPaddingTop, width - mPaddingRight,\n                    height - mPaddingBottom);\n\n            final Rect contentBounds = mContentBounds;\n            Gravity.apply(mGravity, right - left, bottom - top, selfBounds, contentBounds,\n                    layoutDirection);\n\n            final int horizontalOffset = contentBounds.left - left;\n            final int verticalOffset = contentBounds.top - top;\n            if (horizontalOffset != 0 || verticalOffset != 0) {\n                for (int i = 0; i < count; i++) {\n                    final View child = views[i];\n                    if (child.getVisibility() != GONE && child != ignore) {\n                        final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                        if (horizontalGravity) {\n                            params.mLeft += horizontalOffset;\n                            params.mRight += horizontalOffset;\n                        }\n                        if (verticalGravity) {\n                            params.mTop += verticalOffset;\n                            params.mBottom += verticalOffset;\n                        }\n                    }\n                }\n            }\n        }\n\n        //如果是RTL(右到左显示)则再次修改\n        if (isLayoutRtl()) {\n            final int offsetWidth = myWidth - width;\n            for (int i = 0; i < count; i++) {\n                final View child = views[i];\n                if (child.getVisibility() != GONE) {\n                    final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                    params.mLeft -= offsetWidth;\n                    params.mRight -= offsetWidth;\n                }\n            }\n        }\n```\n#### 简单总结\nRelativeLayout更加关注子View的left right top bottom值 并且优先级高于width和height\n\n\n\n### RelativeLayout的layout过程\n对于RelativeLayout来的 layout过程更多的根据子View的left right top bottom值来设定位置\n```java\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        //  The layout has actually already been performed and the positions\n        //  cached.  Apply the cached values to the children.\n        final int count = getChildCount();\n\n        for (int i = 0; i < count; i++) {\n            View child = getChildAt(i);\n            if (child.getVisibility() != GONE) {\n                RelativeLayout.LayoutParams st =\n                        (RelativeLayout.LayoutParams) child.getLayoutParams();\n                child.layout(st.mLeft, st.mTop, st.mRight, st.mBottom);\n            }\n        }\n    }\n```\n\n### RelativeLayout的draw过程\nRelativeLayout作为ViewGroup的子类 因为其性质原因  没有对draw过程进行修改\n\n\n以上\n","slug":"RelativeLayout 源码分析","published":1,"updated":"2017-02-06T14:56:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8cwyb5o000ao3xwr22ed86c","content":"<h2 id=\"RelativeLayout-源码分析\"><a href=\"#RelativeLayout-源码分析\" class=\"headerlink\" title=\"RelativeLayout  源码分析\"></a>RelativeLayout  源码分析</h2><blockquote>\n<p>继承自ViewGroup 没有重载onDraw方法 内部子View又是相对 只要计算出View的坐标 layout过程同样简单</p>\n</blockquote>\n<h3 id=\"measure过程\"><a href=\"#measure过程\" class=\"headerlink\" title=\"measure过程\"></a>measure过程</h3><h4 id=\"主要过程\"><a href=\"#主要过程\" class=\"headerlink\" title=\"主要过程\"></a>主要过程</h4><ol>\n<li>将内部View根据纵向关系和横向关系排序</li>\n<li>初始化相关变量</li>\n<li>遍历水平关系的View</li>\n<li>遍历竖直关系的View</li>\n<li>baseline计算</li>\n<li><p>宽度和高度修正</p>\n<a id=\"more\"></a>\n</li>\n</ol>\n<h4 id=\"1-将内部View根据纵向关系和横向关系排序\"><a href=\"#1-将内部View根据纵向关系和横向关系排序\" class=\"headerlink\" title=\"1 将内部View根据纵向关系和横向关系排序\"></a>1 将内部View根据纵向关系和横向关系排序</h4><blockquote>\n<p>layout_toRightOf 为横向关系  layout_below为纵向关系</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//首先会根据mDirtyHierarchy的值判断是否需要将子View重新排序</span></div><div class=\"line\"><span class=\"keyword\">if</span> (mDirtyHierarchy) &#123;</div><div class=\"line\">    mDirtyHierarchy = <span class=\"keyword\">false</span>;</div><div class=\"line\">    sortChildren();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>相关调用方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//mDirtyHierarchy的值只有在requestLayout方法下被更新</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">requestLayout</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.requestLayout();</div><div class=\"line\">    mDirtyHierarchy = <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//sortChildren()方法对横向纵向关系的view的数组进行非空判断 用DependencyGraph进行判断</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sortChildren</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getChildCount();</div><div class=\"line\">    <span class=\"keyword\">if</span> (mSortedVerticalChildren == <span class=\"keyword\">null</span> || mSortedVerticalChildren.length != count) &#123;</div><div class=\"line\">        mSortedVerticalChildren = <span class=\"keyword\">new</span> View[count];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (mSortedHorizontalChildren == <span class=\"keyword\">null</span> || mSortedHorizontalChildren.length != count) &#123;</div><div class=\"line\">        mSortedHorizontalChildren = <span class=\"keyword\">new</span> View[count];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> DependencyGraph graph = mGraph;</div><div class=\"line\">    graph.clear();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        graph.add(getChildAt(i));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    graph.getSortedViews(mSortedVerticalChildren, RULES_VERTICAL);</div><div class=\"line\">    graph.getSortedViews(mSortedHorizontalChildren, RULES_HORIZONTAL);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>DependencyGraph的相关方法</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DependencyGraph</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * Adds a view to the graph.</div><div class=\"line\">         *</div><div class=\"line\">         * <span class=\"doctag\">@param</span> view The view to be added as a node to the graph.</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//因为是图 根据view生成一个节点</span></div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id = view.getId();</div><div class=\"line\">            <span class=\"keyword\">final</span> Node node = Node.acquire(view);</div><div class=\"line\">            <span class=\"comment\">//如果是有效的id 则将该节点添加到List中</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (id != View.NO_ID) &#123;</div><div class=\"line\">                mKeyNodes.put(id, node);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            mNodes.add(node);</div><div class=\"line\">        &#125;     </div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">/**</span></div><div class=\"line\">           * Builds a sorted list of views. The sorting order depends on the dependencies</div><div class=\"line\">           * between the view. For instance, if view C needs view A to be processed first</div><div class=\"line\">           * and view A needs view B to be processed first, the dependency graph</div><div class=\"line\">           * is: B -&gt; A -&gt; C. The sorted array will contain views B, A and C in this order.</div><div class=\"line\">           *</div><div class=\"line\">           * <span class=\"doctag\">@param</span> sorted The sorted list of views. The length of this array must</div><div class=\"line\">           *        be equal to getChildCount().</div><div class=\"line\">           * <span class=\"doctag\">@param</span> rules The list of rules to take into account.</div><div class=\"line\">           */</div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getSortedViews</span><span class=\"params\">(View[] sorted, <span class=\"keyword\">int</span>... rules)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//当前View找不到其它的可依赖的View时  作为root节点</span></div><div class=\"line\">              <span class=\"keyword\">final</span> ArrayDeque&lt;Node&gt; roots = findRoots(rules);</div><div class=\"line\">              <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">              Node node;</div><div class=\"line\">              <span class=\"comment\">//读取root的下一个node</span></div><div class=\"line\">              <span class=\"keyword\">while</span> ((node = roots.pollLast()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  <span class=\"keyword\">final</span> View view = node.view;</div><div class=\"line\">                  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> key = view.getId();</div><div class=\"line\"></div><div class=\"line\">              <span class=\"comment\">//将符合规则的View加到 sorted中</span></div><div class=\"line\"></div><div class=\"line\">                  sorted[index++] = view;</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"keyword\">final</span> ArrayMap&lt;Node, DependencyGraph&gt; dependents = node.dependents;</div><div class=\"line\">                  <span class=\"comment\">//dependents 依赖该node的node  (A C依赖B 则B的dependents中存A C)</span></div><div class=\"line\">                  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = dependents.size();</div><div class=\"line\">                  <span class=\"comment\">//遍历所有依赖自己的node</span></div><div class=\"line\">                  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">                      <span class=\"keyword\">final</span> Node dependent = dependents.keyAt(i);</div><div class=\"line\">                      <span class=\"comment\">//dependencies 是被依赖的的node的规则和node(A 依赖 B D 则dependencies存有B D )</span></div><div class=\"line\">                      <span class=\"keyword\">final</span> SparseArray&lt;Node&gt; dependencies = dependent.dependencies;</div><div class=\"line\"></div><div class=\"line\">                      <span class=\"comment\">//移除当前node和dependencies的依赖关系</span></div><div class=\"line\">                      dependencies.remove(key);</div><div class=\"line\">                      <span class=\"comment\">//如果解除依赖后没有其它依赖 则将该node也视为rootNode</span></div><div class=\"line\">                      <span class=\"keyword\">if</span> (dependencies.size() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                          roots.add(dependent);</div><div class=\"line\">                      &#125;</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (index &lt; sorted.length) &#123;</div><div class=\"line\">                  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Circular dependencies cannot exist in RelativeLayout\"</span>);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>eg: A依赖B B依赖C 首先存入C 因为不依赖任何其它的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Finds the roots of the graph. A root is a node with no dependency and</div><div class=\"line\"> * with [0..n] dependents.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> rulesFilter The list of rules to consider when building the</div><div class=\"line\"> *        dependencies</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@return</span> A list of node, each being a root of the graph</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ArrayDeque&lt;Node&gt; <span class=\"title\">findRoots</span><span class=\"params\">(<span class=\"keyword\">int</span>[] rulesFilter)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//keyNodes为nodelist</span></div><div class=\"line\">    <span class=\"keyword\">final</span> SparseArray&lt;Node&gt; keyNodes = mKeyNodes;</div><div class=\"line\">    <span class=\"keyword\">final</span> ArrayList&lt;Node&gt; nodes = mNodes;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = nodes.size();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//初始化依赖该node的node和该node依赖的node相关参数</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node node = nodes.get(i);</div><div class=\"line\">        node.dependents.clear();</div><div class=\"line\">        node.dependencies.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//遍历所有node  存入当前view和他所依赖的关系</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node node = nodes.get(i);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> LayoutParams layoutParams = (LayoutParams) node.view.getLayoutParams();</div><div class=\"line\">        <span class=\"comment\">//取出当前View所有的依赖关系</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] rules = layoutParams.mRules;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> rulesCount = rulesFilter.length;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//遍历当前View所有的</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; rulesCount; j++) &#123;</div><div class=\"line\">          <span class=\"comment\">//rule对应被依赖view的id</span></div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> rule = rules[rulesFilter[j]];</div><div class=\"line\">            <span class=\"keyword\">if</span> (rule &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">//找到被依赖的node</span></div><div class=\"line\">                <span class=\"keyword\">final</span> Node dependency = keyNodes.get(rule);</div><div class=\"line\">                <span class=\"comment\">//跳过空view和本身</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (dependency == <span class=\"keyword\">null</span> || dependency == node) &#123;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//添加依赖被依赖的node</span></div><div class=\"line\">                dependency.dependents.put(node, <span class=\"keyword\">this</span>);</div><div class=\"line\">                node.dependencies.put(rule, dependency);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> ArrayDeque&lt;Node&gt; roots = mRoots;</div><div class=\"line\">    roots.clear();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 再次遍历  如果该node的依赖关系为0 即该view不依赖任何view 则视为rootView</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node node = nodes.get(i);</div><div class=\"line\">        <span class=\"keyword\">if</span> (node.dependencies.size() == <span class=\"number\">0</span>) roots.addLast(node);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> roots;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-初始化相关变量\"><a href=\"#2-初始化相关变量\" class=\"headerlink\" title=\"2 初始化相关变量\"></a>2 初始化相关变量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> myWidth = -<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> myHeight = -<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> width = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> height = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果不是UNSPECIFIED模式 则将widthSize赋值于myWidth</span></div><div class=\"line\"><span class=\"keyword\">if</span> (widthMode != MeasureSpec.UNSPECIFIED) &#123;</div><div class=\"line\">    myWidth = widthSize;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 如果不是UNSPECIFIED模式 则将heightSize赋值于myHeight</span></div><div class=\"line\"><span class=\"keyword\">if</span> (heightMode != MeasureSpec.UNSPECIFIED) &#123;</div><div class=\"line\">    myHeight = heightSize;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//如果是EXACTLY模式 则将myWidth和myHeight记录</span></div><div class=\"line\"><span class=\"keyword\">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">    width = myWidth;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (heightMode == MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">    height = myHeight;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">View ignore = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"comment\">//判断是否为Start 和  top 确定左上角坐标</span></div><div class=\"line\"><span class=\"keyword\">int</span> gravity = mGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> horizontalGravity = gravity != Gravity.START &amp;&amp; gravity != <span class=\"number\">0</span>;</div><div class=\"line\">gravity = mGravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> verticalGravity = gravity != Gravity.TOP &amp;&amp; gravity != <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> left = Integer.MAX_VALUE;</div><div class=\"line\"><span class=\"keyword\">int</span> top = Integer.MAX_VALUE;</div><div class=\"line\"><span class=\"keyword\">int</span> right = Integer.MIN_VALUE;</div><div class=\"line\"><span class=\"keyword\">int</span> bottom = Integer.MIN_VALUE;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">boolean</span> offsetHorizontalAxis = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"keyword\">boolean</span> offsetVerticalAxis = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"comment\">// 记录ignore的view</span></div><div class=\"line\"><span class=\"keyword\">if</span> ((horizontalGravity || verticalGravity) &amp;&amp; mIgnoreGravity != View.NO_ID) &#123;</div><div class=\"line\">    ignore = findViewById(mIgnoreGravity);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//宽度个高度是否为warp模式</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isWrapContentWidth = widthMode != MeasureSpec.EXACTLY;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isWrapContentHeight = heightMode != MeasureSpec.EXACTLY;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//在计算和分配的子View的坐标的时候 需要用到父VIew的尺寸 但是暂时无法拿到准确值(待完成下面操作)</span></div><div class=\"line\"><span class=\"comment\">//先使用默认值代替 在计算后 用偏移量更新真是坐标</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</div><div class=\"line\"><span class=\"keyword\">if</span> (isLayoutRtl() &amp;&amp; myWidth == -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">    myWidth = DEFAULT_WIDTH;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-遍历水平关系的View\"><a href=\"#3-遍历水平关系的View\" class=\"headerlink\" title=\"3  遍历水平关系的View\"></a>3  遍历水平关系的View</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">View[] views = mSortedHorizontalChildren;</div><div class=\"line\"><span class=\"keyword\">int</span> count = views.length;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">    View child = views[i];</div><div class=\"line\">    <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">        LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">        <span class=\"comment\">//根据方向获得子View中设置的规则</span></div><div class=\"line\">        <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</div><div class=\"line\">        <span class=\"comment\">//将左右方向规则转换为左右的坐标</span></div><div class=\"line\">        applyHorizontalSizeRules(params, myWidth, rules);</div><div class=\"line\">        <span class=\"comment\">//测算水平方向的子View的尺寸</span></div><div class=\"line\">        measureChildHorizontal(child, params, myWidth, myHeight);</div><div class=\"line\">        <span class=\"comment\">//确定水平方向子View的位置</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (positionChildHorizontal(child, params, myWidth, isWrapContentWidth)) &#123;</div><div class=\"line\">            offsetHorizontalAxis = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>相关方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">applyHorizontalSizeRules</span><span class=\"params\">(LayoutParams childParams, <span class=\"keyword\">int</span> myWidth, <span class=\"keyword\">int</span>[] rules)</span> </span>&#123;</div><div class=\"line\">    RelativeLayout.LayoutParams anchorParams;</div><div class=\"line\">    childParams.mLeft = VALUE_NOT_SET;</div><div class=\"line\">    childParams.mRight = VALUE_NOT_SET;</div><div class=\"line\">    <span class=\"comment\">//得到当前子View的layout_toLeftOf属性对应的View</span></div><div class=\"line\">    anchorParams = getRelatedViewParams(rules, LEFT_OF);</div><div class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">//如果这个属性存在 则当前子View的右坐标是layout_toLeftOf对应的view的左坐标减去对应view的marginLeft的值和自身marginRight的值</span></div><div class=\"line\">        childParams.mRight = anchorParams.mLeft - (anchorParams.leftMargin +</div><div class=\"line\">                childParams.rightMargin);</div><div class=\"line\">    <span class=\"comment\">//如果alignWithParent为true alignWithParent取alignWithParentIfMissing</span></div><div class=\"line\">    <span class=\"comment\">//如果layout_toLeftOf的view为空 或者gone 则将RelativeLayout当做被依赖的对象</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[LEFT_OF] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//如果父容器RelativeLayout的宽度大于0</span></div><div class=\"line\">        <span class=\"comment\">//则子View的右坐标为 父RelativeLayout的宽度减去 mPaddingRight 和自身的marginRight</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (myWidth &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//类似的方法 得到左坐标(通过参数RIGHT_OF)</span></div><div class=\"line\">    anchorParams = getRelatedViewParams(rules, RIGHT_OF);</div><div class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        childParams.mLeft = anchorParams.mRight + (anchorParams.rightMargin +</div><div class=\"line\">                childParams.leftMargin);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[RIGHT_OF] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        childParams.mLeft = mPaddingLeft + childParams.leftMargin;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//类似的方法 得到左坐标 (通过参数ALIGN_LEFT)</span></div><div class=\"line\">    anchorParams = getRelatedViewParams(rules, ALIGN_LEFT);</div><div class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        childParams.mLeft = anchorParams.mLeft + childParams.leftMargin;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[ALIGN_LEFT] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        childParams.mLeft = mPaddingLeft + childParams.leftMargin;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//类似的方法 得到右坐标 (通过参数ALIGN_RIGHT)</span></div><div class=\"line\">    anchorParams = getRelatedViewParams(rules, ALIGN_RIGHT);</div><div class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        childParams.mRight = anchorParams.mRight - childParams.rightMargin;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[ALIGN_RIGHT] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (myWidth &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//根据ALIGN_PARENT_LEFT 将自己放到父RelativeLayout的左边</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> != rules[ALIGN_PARENT_LEFT]) &#123;</div><div class=\"line\">        childParams.mLeft = mPaddingLeft + childParams.leftMargin;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//根据ALIGN_PARENT_RIGHT 将自己放到父RelativeLayout的右边</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> != rules[ALIGN_PARENT_RIGHT]) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (myWidth &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildHorizontal</span><span class=\"params\">(View child, LayoutParams params, <span class=\"keyword\">int</span> myWidth, <span class=\"keyword\">int</span> myHeight)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//获得child的宽度MeasureSpec</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(params.mLeft, params.mRight,</div><div class=\"line\">            params.width, params.leftMargin, params.rightMargin, mPaddingLeft, mPaddingRight,</div><div class=\"line\">            myWidth);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec;</div><div class=\"line\">    <span class=\"comment\">//在低于4.2的时候 mAllowBrokenMeasureSpecs为true</span></div><div class=\"line\">    <span class=\"comment\">//当myHeight &lt; 0 时 则根据父RelativeLayout设置其MeasureSpec模式</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (myHeight &lt; <span class=\"number\">0</span> &amp;&amp; !mAllowBrokenMeasureSpecs) &#123;</div><div class=\"line\">        <span class=\"comment\">//如果父RelativeLayout的height大于0  则 设置子view的MeasureSpec模式为EXACTLY</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (params.height &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(</div><div class=\"line\">                    params.height, MeasureSpec.EXACTLY);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//反之 如果其小于0  则设置子View的MeasureSpec为UNSPECIFIED</span></div><div class=\"line\">            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(<span class=\"number\">0</span>, MeasureSpec.UNSPECIFIED);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//当当前myHeight &gt;= 0</span></div><div class=\"line\">      <span class=\"comment\">//判断当前高度是否与父RelativeLayout高度相同 设置heightMode</span></div><div class=\"line\">      <span class=\"comment\">//根据maxHeight 和heightMode设置子View的MeasureSpec模式</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maxHeight;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mMeasureVerticalWithPaddingMargin) &#123;</div><div class=\"line\">            maxHeight = Math.max(<span class=\"number\">0</span>, myHeight - mPaddingTop - mPaddingBottom</div><div class=\"line\">                    - params.topMargin - params.bottomMargin);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            maxHeight = Math.max(<span class=\"number\">0</span>, myHeight);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode;</div><div class=\"line\">        <span class=\"keyword\">if</span> (params.height == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">            heightMode = MeasureSpec.EXACTLY;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            heightMode = MeasureSpec.AT_MOST;</div><div class=\"line\">        &#125;</div><div class=\"line\">        childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(maxHeight, heightMode);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//获得了子View的WidthMeasureSpec和HeightMeasureSpec</span></div><div class=\"line\">    <span class=\"comment\">//子View可以通过measure方法获取自身的size</span></div><div class=\"line\">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * Get a measure spec that accounts for all of the constraints on this view.</div><div class=\"line\">    * This includes size constraints imposed by the RelativeLayout as well as</div><div class=\"line\">    * the View's desired dimension.</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> childStart The left or top field of the child's layout params</div><div class=\"line\">    * <span class=\"doctag\">@param</span> childEnd The right or bottom field of the child's layout params</div><div class=\"line\">    * <span class=\"doctag\">@param</span> childSize The child's desired size (the width or height field of</div><div class=\"line\">    *        the child's layout params)</div><div class=\"line\">    * <span class=\"doctag\">@param</span> startMargin The left or top margin</div><div class=\"line\">    * <span class=\"doctag\">@param</span> endMargin The right or bottom margin</div><div class=\"line\">    * <span class=\"doctag\">@param</span> startPadding mPaddingLeft or mPaddingTop</div><div class=\"line\">    * <span class=\"doctag\">@param</span> endPadding mPaddingRight or mPaddingBottom</div><div class=\"line\">    * <span class=\"doctag\">@param</span> mySize The width or height of this view (the RelativeLayout)</div><div class=\"line\">    * <span class=\"doctag\">@return</span> MeasureSpec for the child</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> childStart, <span class=\"keyword\">int</span> childEnd,</span></span></div><div class=\"line\">           <span class=\"keyword\">int</span> childSize, <span class=\"keyword\">int</span> startMargin, <span class=\"keyword\">int</span> endMargin, <span class=\"keyword\">int</span> startPadding,</div><div class=\"line\">           <span class=\"keyword\">int</span> endPadding, <span class=\"keyword\">int</span> mySize) &#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> childSpecMode = <span class=\"number\">0</span>;</div><div class=\"line\">       <span class=\"keyword\">int</span> childSpecSize = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isUnspecified = mySize &lt; <span class=\"number\">0</span>;</div><div class=\"line\">       <span class=\"comment\">//如果父RelativeLayout宽度小于0 版本号不小于4.2</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (isUnspecified &amp;&amp; !mAllowBrokenMeasureSpecs) &#123;</div><div class=\"line\">            <span class=\"comment\">//如果子View的左边距和右边距都不为VALUE_NOT_SET</span></div><div class=\"line\">            <span class=\"comment\">//且右边距坐标大于左边距坐标 则将其差当做宽度赋予View 设置模式为EXACTLY</span></div><div class=\"line\">            <span class=\"comment\">//VALUE_NOT_SET = Integer.MIN_VALUE</span></div><div class=\"line\">            <span class=\"comment\">/**</span></div><div class=\"line\">             * Constant for the minimum &#123;<span class=\"doctag\">@code</span> int&#125; value, -2&lt;sup&gt;31&lt;/sup&gt;.</div><div class=\"line\">             */</div><div class=\"line\">            <span class=\"comment\">//public static final int MIN_VALUE = 0x80000000;</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (childStart != VALUE_NOT_SET &amp;&amp; childEnd != VALUE_NOT_SET) &#123;</div><div class=\"line\">               childSpecSize = Math.max(<span class=\"number\">0</span>, childEnd - childStart);</div><div class=\"line\">               childSpecMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childSize &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               <span class=\"comment\">// 如果childSpecSize &gt;= 0 则赋值于childSpecSize</span></div><div class=\"line\">               <span class=\"comment\">//同样设置模式为EXACTLY</span></div><div class=\"line\">               childSpecSize = childSize;</div><div class=\"line\">               childSpecMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               <span class=\"comment\">// 都不满足则设置模式为UNSPECIFIED</span></div><div class=\"line\">               childSpecSize = <span class=\"number\">0</span>;</div><div class=\"line\">               childSpecMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 计算 开始和结束相关</span></div><div class=\"line\">       <span class=\"keyword\">int</span> tempStart = childStart;</div><div class=\"line\">       <span class=\"keyword\">int</span> tempEnd = childEnd;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//如果没有指定start值 则默认赋予 padding和merage的值</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (tempStart == VALUE_NOT_SET) &#123;</div><div class=\"line\">           tempStart = startPadding + startMargin;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"comment\">//同上</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (tempEnd == VALUE_NOT_SET) &#123;</div><div class=\"line\">           tempEnd = mySize - endPadding - endMargin;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//指定最大可提供的大小</span></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maxAvailable = tempEnd - tempStart;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (childStart != VALUE_NOT_SET &amp;&amp; childEnd != VALUE_NOT_SET) &#123;</div><div class=\"line\">           <span class=\"comment\">//如果Start和End都是有效值 根据isUnspecified设置specMode为UNSPECIFIED或EXACTLY</span></div><div class=\"line\">           <span class=\"comment\">//并将设置对应的size</span></div><div class=\"line\">           childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;</div><div class=\"line\">           childSpecSize = Math.max(<span class=\"number\">0</span>, maxAvailable);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"comment\">//反之 判断childSize的相关值</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (childSize &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               <span class=\"comment\">//设置模式为EXACTLY</span></div><div class=\"line\">               <span class=\"comment\">//判断maxAvailable和childSize情况 取较大值设置为childSpecSize</span></div><div class=\"line\">               childSpecMode = MeasureSpec.EXACTLY;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">if</span> (maxAvailable &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                   <span class=\"comment\">// We have a maximum size in this dimension.</span></div><div class=\"line\">                   childSpecSize = Math.min(maxAvailable, childSize);</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   <span class=\"comment\">// We can grow in this dimension.</span></div><div class=\"line\">                   childSpecSize = childSize;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childSize == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">               <span class=\"comment\">//如果子View是match模式 参照isUnspecified设置相关</span></div><div class=\"line\">               childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;</div><div class=\"line\">               childSpecSize = Math.max(<span class=\"number\">0</span>, maxAvailable);</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childSize == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">               <span class=\"comment\">//在wrap进行设置</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (maxAvailable &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                   <span class=\"comment\">// We have a maximum size in this dimension.</span></div><div class=\"line\">                   childSpecMode = MeasureSpec.AT_MOST;</div><div class=\"line\">                   childSpecSize = maxAvailable;</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   <span class=\"comment\">// We can grow in this dimension. Child can be as big as it</span></div><div class=\"line\">                   <span class=\"comment\">// wants.</span></div><div class=\"line\">                   childSpecMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">                   childSpecSize = <span class=\"number\">0</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>以上 完成了View的第一次测量  确定了View的大小 然后根据大小觉得把子view放在父RelativeLayout中的位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">positionChildHorizontal</span><span class=\"params\">(View child, LayoutParams params, <span class=\"keyword\">int</span> myWidth,</span></span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> wrapContent) &#123;</div><div class=\"line\">    <span class=\"comment\">//获取RelativeLayout的布局方向</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</div><div class=\"line\">    <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (params.mLeft == VALUE_NOT_SET &amp;&amp; params.mRight != VALUE_NOT_SET) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果右边界有效 左边界无效 根据右边界计算出左边界</span></div><div class=\"line\">        params.mLeft = params.mRight - child.getMeasuredWidth();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params.mLeft != VALUE_NOT_SET &amp;&amp; params.mRight == VALUE_NOT_SET) &#123;</div><div class=\"line\">        <span class=\"comment\">// 同上反之</span></div><div class=\"line\">        params.mRight = params.mLeft + child.getMeasuredWidth();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params.mLeft == VALUE_NOT_SET &amp;&amp; params.mRight == VALUE_NOT_SET) &#123;</div><div class=\"line\">        <span class=\"comment\">//都无效的时候</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (rules[CENTER_IN_PARENT] != <span class=\"number\">0</span> || rules[CENTER_HORIZONTAL] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          <span class=\"comment\">//设置了CENTER_IN_PARENT或者 CENTER_HORIZONTAL的情况下</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!wrapContent) &#123;</div><div class=\"line\">              <span class=\"comment\">//非wrap情况下</span></div><div class=\"line\">              <span class=\"comment\">//把子View水平中心固定在RelativeLayout的中心</span></div><div class=\"line\">                centerHorizontal(child, params, myWidth);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               <span class=\"comment\">//左边距为padding+margin</span></div><div class=\"line\">               <span class=\"comment\">//右边距为左边距加上测量宽度</span></div><div class=\"line\">                params.mLeft = mPaddingLeft + params.leftMargin;</div><div class=\"line\">                params.mRight = params.mLeft + child.getMeasuredWidth();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//RTL右到左 布局方向</span></div><div class=\"line\">            <span class=\"comment\">//LTR\u0010左到右 布局方向</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (isLayoutRtl()) &#123;</div><div class=\"line\">                params.mRight = myWidth - mPaddingRight- params.rightMargin;</div><div class=\"line\">                params.mLeft = params.mRight - child.getMeasuredWidth();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                params.mLeft = mPaddingLeft + params.leftMargin;</div><div class=\"line\">                params.mRight = params.mLeft + child.getMeasuredWidth();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> rules[ALIGN_PARENT_END] != <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">//当为CENTER_IN_PARENT  CENTER_HORIZONTAL ALIGN_PARENT_END三种情况之一时返回True</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-遍历竖直关系的View\"><a href=\"#4-遍历竖直关系的View\" class=\"headerlink\" title=\"4 遍历竖直关系的View\"></a>4 遍历竖直关系的View</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">           <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">               <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">              <span class=\"comment\">//将竖直方向规则转换为坐标</span></div><div class=\"line\">               applyVerticalSizeRules(params, myHeight, child.getBaseline());</div><div class=\"line\">               <span class=\"comment\">//测量子View</span></div><div class=\"line\">               measureChild(child, params, myWidth, myHeight);</div><div class=\"line\">               <span class=\"comment\">//确定竖直方向子View的位置</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (positionChildVertical(child, params, myHeight, isWrapContentHeight)) &#123;</div><div class=\"line\">                   offsetVerticalAxis = <span class=\"keyword\">true</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">              <span class=\"comment\">//首先判断是否为wrap模式</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (isWrapContentWidth) &#123;</div><div class=\"line\">                 <span class=\"comment\">//根据RTL或者LTR和版本进行区分</span></div><div class=\"line\">                 <span class=\"comment\">//Build.VERSION_CODES.KITKAT = 19</span></div><div class=\"line\">                 <span class=\"comment\">//主要对margin进行处理</span></div><div class=\"line\">                   <span class=\"keyword\">if</span> (isLayoutRtl()) &#123;</div><div class=\"line\">                       <span class=\"keyword\">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">                           width = Math.max(width, myWidth - params.mLeft);</div><div class=\"line\">                       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                           width = Math.max(width, myWidth - params.mLeft - params.leftMargin);</div><div class=\"line\">                       &#125;</div><div class=\"line\">                   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                       <span class=\"keyword\">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">                           width = Math.max(width, params.mRight);</div><div class=\"line\">                       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                           width = Math.max(width, params.mRight + params.rightMargin);</div><div class=\"line\">                       &#125;</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">if</span> (isWrapContentHeight) &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">                       height = Math.max(height, params.mBottom);</div><div class=\"line\">                   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                       height = Math.max(height, params.mBottom + params.bottomMargin);</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">if</span> (child != ignore || verticalGravity) &#123;</div><div class=\"line\">                   left = Math.min(left, params.mLeft - params.leftMargin);</div><div class=\"line\">                   top = Math.min(top, params.mTop - params.topMargin);</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">if</span> (child != ignore || horizontalGravity) &#123;</div><div class=\"line\">                   right = Math.max(right, params.mRight + params.rightMargin);</div><div class=\"line\">                   bottom = Math.max(bottom, params.mBottom + params.bottomMargin);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h4 id=\"5-baseline计算\"><a href=\"#5-baseline计算\" class=\"headerlink\" title=\"5 baseline计算\"></a>5 baseline计算</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Use the top-start-most laid out view as the baseline. RTL offsets are</span></div><div class=\"line\"><span class=\"comment\">// applied later, so we can use the left-most edge as the starting edge.</span></div><div class=\"line\">    View baselineView = <span class=\"keyword\">null</span>;</div><div class=\"line\">    LayoutParams baselineParams = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> LayoutParams childParams = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">            <span class=\"keyword\">if</span> (baselineView == <span class=\"keyword\">null</span> || baselineParams == <span class=\"keyword\">null</span></div><div class=\"line\">                    || compareLayoutPosition(childParams, baselineParams) &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                baselineView = child;</div><div class=\"line\">                baselineParams = childParams;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    mBaselineView = baselineView;</div></pre></td></tr></table></figure>\n<h4 id=\"6-宽度和高度修正\"><a href=\"#6-宽度和高度修正\" class=\"headerlink\" title=\"6 宽度和高度修正\"></a>6 宽度和高度修正</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//如何是wrap模式</span></div><div class=\"line\"><span class=\"keyword\">if</span> (isWrapContentWidth) &#123;</div><div class=\"line\">        width += mPaddingRight;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (mLayoutParams != <span class=\"keyword\">null</span> &amp;&amp; mLayoutParams.width &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            width = Math.max(width, mLayoutParams.width);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        width = Math.max(width, getSuggestedMinimumWidth());</div><div class=\"line\">        width = resolveSize(width, widthMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//在得到最后的width之后 对依赖RelativeLayout的子View添上偏移量</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (offsetHorizontalAxis) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">                <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">                    <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</div><div class=\"line\">                    <span class=\"comment\">//对CENTER_IN_PARENT或者CENTER_HORIZONTAL的子View重测</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (rules[CENTER_IN_PARENT] != <span class=\"number\">0</span> || rules[CENTER_HORIZONTAL] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        centerHorizontal(child, params, width);</div><div class=\"line\">                    <span class=\"comment\">//对ALIGN_PARENT_RIGHT重测</span></div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rules[ALIGN_PARENT_RIGHT] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = child.getMeasuredWidth();</div><div class=\"line\">                        params.mLeft = width - mPaddingRight - childWidth;</div><div class=\"line\">                        params.mRight = params.mLeft + childWidth;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//同上</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (isWrapContentHeight) &#123;</div><div class=\"line\">        height += mPaddingBottom;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (mLayoutParams != <span class=\"keyword\">null</span> &amp;&amp; mLayoutParams.height &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            height = Math.max(height, mLayoutParams.height);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        height = Math.max(height, getSuggestedMinimumHeight());</div><div class=\"line\">        height = resolveSize(height, heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (offsetVerticalAxis) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">                <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">                    <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (rules[CENTER_IN_PARENT] != <span class=\"number\">0</span> || rules[CENTER_VERTICAL] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        centerVertical(child, params, height);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rules[ALIGN_PARENT_BOTTOM] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</div><div class=\"line\">                        params.mTop = height - mPaddingBottom - childHeight;</div><div class=\"line\">                        params.mBottom = params.mTop + childHeight;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//根据gravity再次修正</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (horizontalGravity || verticalGravity) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Rect selfBounds = mSelfBounds;</div><div class=\"line\">        selfBounds.set(mPaddingLeft, mPaddingTop, width - mPaddingRight,</div><div class=\"line\">                height - mPaddingBottom);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> Rect contentBounds = mContentBounds;</div><div class=\"line\">        Gravity.apply(mGravity, right - left, bottom - top, selfBounds, contentBounds,</div><div class=\"line\">                layoutDirection);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> horizontalOffset = contentBounds.left - left;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> verticalOffset = contentBounds.top - top;</div><div class=\"line\">        <span class=\"keyword\">if</span> (horizontalOffset != <span class=\"number\">0</span> || verticalOffset != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">                <span class=\"keyword\">if</span> (child.getVisibility() != GONE &amp;&amp; child != ignore) &#123;</div><div class=\"line\">                    <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">                    <span class=\"keyword\">if</span> (horizontalGravity) &#123;</div><div class=\"line\">                        params.mLeft += horizontalOffset;</div><div class=\"line\">                        params.mRight += horizontalOffset;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (verticalGravity) &#123;</div><div class=\"line\">                        params.mTop += verticalOffset;</div><div class=\"line\">                        params.mBottom += verticalOffset;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//如果是RTL(右到左显示)则再次修改</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (isLayoutRtl()) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> offsetWidth = myWidth - width;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">            <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">                params.mLeft -= offsetWidth;</div><div class=\"line\">                params.mRight -= offsetWidth;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"简单总结\"><a href=\"#简单总结\" class=\"headerlink\" title=\"简单总结\"></a>简单总结</h4><p>RelativeLayout更加关注子View的left right top bottom值 并且优先级高于width和height</p>\n<h3 id=\"RelativeLayout的layout过程\"><a href=\"#RelativeLayout的layout过程\" class=\"headerlink\" title=\"RelativeLayout的layout过程\"></a>RelativeLayout的layout过程</h3><p>对于RelativeLayout来的 layout过程更多的根据子View的left right top bottom值来设定位置<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//  The layout has actually already been performed and the positions</span></div><div class=\"line\">    <span class=\"comment\">//  cached.  Apply the cached values to the children.</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getChildCount();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        View child = getChildAt(i);</div><div class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">            RelativeLayout.LayoutParams st =</div><div class=\"line\">                    (RelativeLayout.LayoutParams) child.getLayoutParams();</div><div class=\"line\">            child.layout(st.mLeft, st.mTop, st.mRight, st.mBottom);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"RelativeLayout的draw过程\"><a href=\"#RelativeLayout的draw过程\" class=\"headerlink\" title=\"RelativeLayout的draw过程\"></a>RelativeLayout的draw过程</h3><p>RelativeLayout作为ViewGroup的子类 因为其性质原因  没有对draw过程进行修改</p>\n<p>以上</p>\n","excerpt":"<h2 id=\"RelativeLayout-源码分析\"><a href=\"#RelativeLayout-源码分析\" class=\"headerlink\" title=\"RelativeLayout  源码分析\"></a>RelativeLayout  源码分析</h2><blockquote>\n<p>继承自ViewGroup 没有重载onDraw方法 内部子View又是相对 只要计算出View的坐标 layout过程同样简单</p>\n</blockquote>\n<h3 id=\"measure过程\"><a href=\"#measure过程\" class=\"headerlink\" title=\"measure过程\"></a>measure过程</h3><h4 id=\"主要过程\"><a href=\"#主要过程\" class=\"headerlink\" title=\"主要过程\"></a>主要过程</h4><ol>\n<li>将内部View根据纵向关系和横向关系排序</li>\n<li>初始化相关变量</li>\n<li>遍历水平关系的View</li>\n<li>遍历竖直关系的View</li>\n<li>baseline计算</li>\n<li><p>宽度和高度修正</p>","more":"</li>\n</ol>\n<h4 id=\"1-将内部View根据纵向关系和横向关系排序\"><a href=\"#1-将内部View根据纵向关系和横向关系排序\" class=\"headerlink\" title=\"1 将内部View根据纵向关系和横向关系排序\"></a>1 将内部View根据纵向关系和横向关系排序</h4><blockquote>\n<p>layout_toRightOf 为横向关系  layout_below为纵向关系</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//首先会根据mDirtyHierarchy的值判断是否需要将子View重新排序</span></div><div class=\"line\"><span class=\"keyword\">if</span> (mDirtyHierarchy) &#123;</div><div class=\"line\">    mDirtyHierarchy = <span class=\"keyword\">false</span>;</div><div class=\"line\">    sortChildren();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>相关调用方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//mDirtyHierarchy的值只有在requestLayout方法下被更新</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">requestLayout</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.requestLayout();</div><div class=\"line\">    mDirtyHierarchy = <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//sortChildren()方法对横向纵向关系的view的数组进行非空判断 用DependencyGraph进行判断</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sortChildren</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getChildCount();</div><div class=\"line\">    <span class=\"keyword\">if</span> (mSortedVerticalChildren == <span class=\"keyword\">null</span> || mSortedVerticalChildren.length != count) &#123;</div><div class=\"line\">        mSortedVerticalChildren = <span class=\"keyword\">new</span> View[count];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (mSortedHorizontalChildren == <span class=\"keyword\">null</span> || mSortedHorizontalChildren.length != count) &#123;</div><div class=\"line\">        mSortedHorizontalChildren = <span class=\"keyword\">new</span> View[count];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> DependencyGraph graph = mGraph;</div><div class=\"line\">    graph.clear();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        graph.add(getChildAt(i));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    graph.getSortedViews(mSortedVerticalChildren, RULES_VERTICAL);</div><div class=\"line\">    graph.getSortedViews(mSortedHorizontalChildren, RULES_HORIZONTAL);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>DependencyGraph的相关方法</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DependencyGraph</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * Adds a view to the graph.</div><div class=\"line\">         *</div><div class=\"line\">         * <span class=\"doctag\">@param</span> view The view to be added as a node to the graph.</div><div class=\"line\">         */</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//因为是图 根据view生成一个节点</span></div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id = view.getId();</div><div class=\"line\">            <span class=\"keyword\">final</span> Node node = Node.acquire(view);</div><div class=\"line\">            <span class=\"comment\">//如果是有效的id 则将该节点添加到List中</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (id != View.NO_ID) &#123;</div><div class=\"line\">                mKeyNodes.put(id, node);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            mNodes.add(node);</div><div class=\"line\">        &#125;     </div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">/**</div><div class=\"line\">           * Builds a sorted list of views. The sorting order depends on the dependencies</div><div class=\"line\">           * between the view. For instance, if view C needs view A to be processed first</div><div class=\"line\">           * and view A needs view B to be processed first, the dependency graph</div><div class=\"line\">           * is: B -&gt; A -&gt; C. The sorted array will contain views B, A and C in this order.</div><div class=\"line\">           *</div><div class=\"line\">           * <span class=\"doctag\">@param</span> sorted The sorted list of views. The length of this array must</div><div class=\"line\">           *        be equal to getChildCount().</div><div class=\"line\">           * <span class=\"doctag\">@param</span> rules The list of rules to take into account.</div><div class=\"line\">           */</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getSortedViews</span><span class=\"params\">(View[] sorted, <span class=\"keyword\">int</span>... rules)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//当前View找不到其它的可依赖的View时  作为root节点</span></div><div class=\"line\">              <span class=\"keyword\">final</span> ArrayDeque&lt;Node&gt; roots = findRoots(rules);</div><div class=\"line\">              <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">              Node node;</div><div class=\"line\">              <span class=\"comment\">//读取root的下一个node</span></div><div class=\"line\">              <span class=\"keyword\">while</span> ((node = roots.pollLast()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  <span class=\"keyword\">final</span> View view = node.view;</div><div class=\"line\">                  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> key = view.getId();</div><div class=\"line\"></div><div class=\"line\">              <span class=\"comment\">//将符合规则的View加到 sorted中</span></div><div class=\"line\"></div><div class=\"line\">                  sorted[index++] = view;</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"keyword\">final</span> ArrayMap&lt;Node, DependencyGraph&gt; dependents = node.dependents;</div><div class=\"line\">                  <span class=\"comment\">//dependents 依赖该node的node  (A C依赖B 则B的dependents中存A C)</span></div><div class=\"line\">                  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = dependents.size();</div><div class=\"line\">                  <span class=\"comment\">//遍历所有依赖自己的node</span></div><div class=\"line\">                  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">                      <span class=\"keyword\">final</span> Node dependent = dependents.keyAt(i);</div><div class=\"line\">                      <span class=\"comment\">//dependencies 是被依赖的的node的规则和node(A 依赖 B D 则dependencies存有B D )</span></div><div class=\"line\">                      <span class=\"keyword\">final</span> SparseArray&lt;Node&gt; dependencies = dependent.dependencies;</div><div class=\"line\"></div><div class=\"line\">                      <span class=\"comment\">//移除当前node和dependencies的依赖关系</span></div><div class=\"line\">                      dependencies.remove(key);</div><div class=\"line\">                      <span class=\"comment\">//如果解除依赖后没有其它依赖 则将该node也视为rootNode</span></div><div class=\"line\">                      <span class=\"keyword\">if</span> (dependencies.size() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                          roots.add(dependent);</div><div class=\"line\">                      &#125;</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (index &lt; sorted.length) &#123;</div><div class=\"line\">                  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Circular dependencies cannot exist in RelativeLayout\"</span>);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>eg: A依赖B B依赖C 首先存入C 因为不依赖任何其它的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Finds the roots of the graph. A root is a node with no dependency and</div><div class=\"line\"> * with [0..n] dependents.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> rulesFilter The list of rules to consider when building the</div><div class=\"line\"> *        dependencies</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@return</span> A list of node, each being a root of the graph</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ArrayDeque&lt;Node&gt; <span class=\"title\">findRoots</span><span class=\"params\">(<span class=\"keyword\">int</span>[] rulesFilter)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//keyNodes为nodelist</span></div><div class=\"line\">    <span class=\"keyword\">final</span> SparseArray&lt;Node&gt; keyNodes = mKeyNodes;</div><div class=\"line\">    <span class=\"keyword\">final</span> ArrayList&lt;Node&gt; nodes = mNodes;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = nodes.size();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//初始化依赖该node的node和该node依赖的node相关参数</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node node = nodes.get(i);</div><div class=\"line\">        node.dependents.clear();</div><div class=\"line\">        node.dependencies.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//遍历所有node  存入当前view和他所依赖的关系</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node node = nodes.get(i);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> LayoutParams layoutParams = (LayoutParams) node.view.getLayoutParams();</div><div class=\"line\">        <span class=\"comment\">//取出当前View所有的依赖关系</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] rules = layoutParams.mRules;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> rulesCount = rulesFilter.length;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//遍历当前View所有的</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; rulesCount; j++) &#123;</div><div class=\"line\">          <span class=\"comment\">//rule对应被依赖view的id</span></div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> rule = rules[rulesFilter[j]];</div><div class=\"line\">            <span class=\"keyword\">if</span> (rule &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">//找到被依赖的node</span></div><div class=\"line\">                <span class=\"keyword\">final</span> Node dependency = keyNodes.get(rule);</div><div class=\"line\">                <span class=\"comment\">//跳过空view和本身</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (dependency == <span class=\"keyword\">null</span> || dependency == node) &#123;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//添加依赖被依赖的node</span></div><div class=\"line\">                dependency.dependents.put(node, <span class=\"keyword\">this</span>);</div><div class=\"line\">                node.dependencies.put(rule, dependency);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> ArrayDeque&lt;Node&gt; roots = mRoots;</div><div class=\"line\">    roots.clear();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 再次遍历  如果该node的依赖关系为0 即该view不依赖任何view 则视为rootView</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node node = nodes.get(i);</div><div class=\"line\">        <span class=\"keyword\">if</span> (node.dependencies.size() == <span class=\"number\">0</span>) roots.addLast(node);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> roots;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-初始化相关变量\"><a href=\"#2-初始化相关变量\" class=\"headerlink\" title=\"2 初始化相关变量\"></a>2 初始化相关变量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> myWidth = -<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> myHeight = -<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> width = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> height = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果不是UNSPECIFIED模式 则将widthSize赋值于myWidth</span></div><div class=\"line\"><span class=\"keyword\">if</span> (widthMode != MeasureSpec.UNSPECIFIED) &#123;</div><div class=\"line\">    myWidth = widthSize;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 如果不是UNSPECIFIED模式 则将heightSize赋值于myHeight</span></div><div class=\"line\"><span class=\"keyword\">if</span> (heightMode != MeasureSpec.UNSPECIFIED) &#123;</div><div class=\"line\">    myHeight = heightSize;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//如果是EXACTLY模式 则将myWidth和myHeight记录</span></div><div class=\"line\"><span class=\"keyword\">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">    width = myWidth;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (heightMode == MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">    height = myHeight;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">View ignore = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"comment\">//判断是否为Start 和  top 确定左上角坐标</span></div><div class=\"line\"><span class=\"keyword\">int</span> gravity = mGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> horizontalGravity = gravity != Gravity.START &amp;&amp; gravity != <span class=\"number\">0</span>;</div><div class=\"line\">gravity = mGravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> verticalGravity = gravity != Gravity.TOP &amp;&amp; gravity != <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> left = Integer.MAX_VALUE;</div><div class=\"line\"><span class=\"keyword\">int</span> top = Integer.MAX_VALUE;</div><div class=\"line\"><span class=\"keyword\">int</span> right = Integer.MIN_VALUE;</div><div class=\"line\"><span class=\"keyword\">int</span> bottom = Integer.MIN_VALUE;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">boolean</span> offsetHorizontalAxis = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"keyword\">boolean</span> offsetVerticalAxis = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"comment\">// 记录ignore的view</span></div><div class=\"line\"><span class=\"keyword\">if</span> ((horizontalGravity || verticalGravity) &amp;&amp; mIgnoreGravity != View.NO_ID) &#123;</div><div class=\"line\">    ignore = findViewById(mIgnoreGravity);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//宽度个高度是否为warp模式</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isWrapContentWidth = widthMode != MeasureSpec.EXACTLY;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isWrapContentHeight = heightMode != MeasureSpec.EXACTLY;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//在计算和分配的子View的坐标的时候 需要用到父VIew的尺寸 但是暂时无法拿到准确值(待完成下面操作)</span></div><div class=\"line\"><span class=\"comment\">//先使用默认值代替 在计算后 用偏移量更新真是坐标</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</div><div class=\"line\"><span class=\"keyword\">if</span> (isLayoutRtl() &amp;&amp; myWidth == -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">    myWidth = DEFAULT_WIDTH;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-遍历水平关系的View\"><a href=\"#3-遍历水平关系的View\" class=\"headerlink\" title=\"3  遍历水平关系的View\"></a>3  遍历水平关系的View</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">View[] views = mSortedHorizontalChildren;</div><div class=\"line\"><span class=\"keyword\">int</span> count = views.length;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">    View child = views[i];</div><div class=\"line\">    <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">        LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">        <span class=\"comment\">//根据方向获得子View中设置的规则</span></div><div class=\"line\">        <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</div><div class=\"line\">        <span class=\"comment\">//将左右方向规则转换为左右的坐标</span></div><div class=\"line\">        applyHorizontalSizeRules(params, myWidth, rules);</div><div class=\"line\">        <span class=\"comment\">//测算水平方向的子View的尺寸</span></div><div class=\"line\">        measureChildHorizontal(child, params, myWidth, myHeight);</div><div class=\"line\">        <span class=\"comment\">//确定水平方向子View的位置</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (positionChildHorizontal(child, params, myWidth, isWrapContentWidth)) &#123;</div><div class=\"line\">            offsetHorizontalAxis = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>相关方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">applyHorizontalSizeRules</span><span class=\"params\">(LayoutParams childParams, <span class=\"keyword\">int</span> myWidth, <span class=\"keyword\">int</span>[] rules)</span> </span>&#123;</div><div class=\"line\">    RelativeLayout.LayoutParams anchorParams;</div><div class=\"line\">    childParams.mLeft = VALUE_NOT_SET;</div><div class=\"line\">    childParams.mRight = VALUE_NOT_SET;</div><div class=\"line\">    <span class=\"comment\">//得到当前子View的layout_toLeftOf属性对应的View</span></div><div class=\"line\">    anchorParams = getRelatedViewParams(rules, LEFT_OF);</div><div class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">//如果这个属性存在 则当前子View的右坐标是layout_toLeftOf对应的view的左坐标减去对应view的marginLeft的值和自身marginRight的值</span></div><div class=\"line\">        childParams.mRight = anchorParams.mLeft - (anchorParams.leftMargin +</div><div class=\"line\">                childParams.rightMargin);</div><div class=\"line\">    <span class=\"comment\">//如果alignWithParent为true alignWithParent取alignWithParentIfMissing</span></div><div class=\"line\">    <span class=\"comment\">//如果layout_toLeftOf的view为空 或者gone 则将RelativeLayout当做被依赖的对象</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[LEFT_OF] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//如果父容器RelativeLayout的宽度大于0</span></div><div class=\"line\">        <span class=\"comment\">//则子View的右坐标为 父RelativeLayout的宽度减去 mPaddingRight 和自身的marginRight</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (myWidth &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//类似的方法 得到左坐标(通过参数RIGHT_OF)</span></div><div class=\"line\">    anchorParams = getRelatedViewParams(rules, RIGHT_OF);</div><div class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        childParams.mLeft = anchorParams.mRight + (anchorParams.rightMargin +</div><div class=\"line\">                childParams.leftMargin);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[RIGHT_OF] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        childParams.mLeft = mPaddingLeft + childParams.leftMargin;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//类似的方法 得到左坐标 (通过参数ALIGN_LEFT)</span></div><div class=\"line\">    anchorParams = getRelatedViewParams(rules, ALIGN_LEFT);</div><div class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        childParams.mLeft = anchorParams.mLeft + childParams.leftMargin;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[ALIGN_LEFT] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        childParams.mLeft = mPaddingLeft + childParams.leftMargin;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//类似的方法 得到右坐标 (通过参数ALIGN_RIGHT)</span></div><div class=\"line\">    anchorParams = getRelatedViewParams(rules, ALIGN_RIGHT);</div><div class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        childParams.mRight = anchorParams.mRight - childParams.rightMargin;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[ALIGN_RIGHT] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (myWidth &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//根据ALIGN_PARENT_LEFT 将自己放到父RelativeLayout的左边</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> != rules[ALIGN_PARENT_LEFT]) &#123;</div><div class=\"line\">        childParams.mLeft = mPaddingLeft + childParams.leftMargin;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//根据ALIGN_PARENT_RIGHT 将自己放到父RelativeLayout的右边</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> != rules[ALIGN_PARENT_RIGHT]) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (myWidth &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildHorizontal</span><span class=\"params\">(View child, LayoutParams params, <span class=\"keyword\">int</span> myWidth, <span class=\"keyword\">int</span> myHeight)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//获得child的宽度MeasureSpec</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(params.mLeft, params.mRight,</div><div class=\"line\">            params.width, params.leftMargin, params.rightMargin, mPaddingLeft, mPaddingRight,</div><div class=\"line\">            myWidth);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec;</div><div class=\"line\">    <span class=\"comment\">//在低于4.2的时候 mAllowBrokenMeasureSpecs为true</span></div><div class=\"line\">    <span class=\"comment\">//当myHeight &lt; 0 时 则根据父RelativeLayout设置其MeasureSpec模式</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (myHeight &lt; <span class=\"number\">0</span> &amp;&amp; !mAllowBrokenMeasureSpecs) &#123;</div><div class=\"line\">        <span class=\"comment\">//如果父RelativeLayout的height大于0  则 设置子view的MeasureSpec模式为EXACTLY</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (params.height &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(</div><div class=\"line\">                    params.height, MeasureSpec.EXACTLY);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//反之 如果其小于0  则设置子View的MeasureSpec为UNSPECIFIED</span></div><div class=\"line\">            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(<span class=\"number\">0</span>, MeasureSpec.UNSPECIFIED);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//当当前myHeight &gt;= 0</span></div><div class=\"line\">      <span class=\"comment\">//判断当前高度是否与父RelativeLayout高度相同 设置heightMode</span></div><div class=\"line\">      <span class=\"comment\">//根据maxHeight 和heightMode设置子View的MeasureSpec模式</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maxHeight;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mMeasureVerticalWithPaddingMargin) &#123;</div><div class=\"line\">            maxHeight = Math.max(<span class=\"number\">0</span>, myHeight - mPaddingTop - mPaddingBottom</div><div class=\"line\">                    - params.topMargin - params.bottomMargin);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            maxHeight = Math.max(<span class=\"number\">0</span>, myHeight);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode;</div><div class=\"line\">        <span class=\"keyword\">if</span> (params.height == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">            heightMode = MeasureSpec.EXACTLY;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            heightMode = MeasureSpec.AT_MOST;</div><div class=\"line\">        &#125;</div><div class=\"line\">        childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(maxHeight, heightMode);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//获得了子View的WidthMeasureSpec和HeightMeasureSpec</span></div><div class=\"line\">    <span class=\"comment\">//子View可以通过measure方法获取自身的size</span></div><div class=\"line\">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * Get a measure spec that accounts for all of the constraints on this view.</div><div class=\"line\">    * This includes size constraints imposed by the RelativeLayout as well as</div><div class=\"line\">    * the View's desired dimension.</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> childStart The left or top field of the child's layout params</div><div class=\"line\">    * <span class=\"doctag\">@param</span> childEnd The right or bottom field of the child's layout params</div><div class=\"line\">    * <span class=\"doctag\">@param</span> childSize The child's desired size (the width or height field of</div><div class=\"line\">    *        the child's layout params)</div><div class=\"line\">    * <span class=\"doctag\">@param</span> startMargin The left or top margin</div><div class=\"line\">    * <span class=\"doctag\">@param</span> endMargin The right or bottom margin</div><div class=\"line\">    * <span class=\"doctag\">@param</span> startPadding mPaddingLeft or mPaddingTop</div><div class=\"line\">    * <span class=\"doctag\">@param</span> endPadding mPaddingRight or mPaddingBottom</div><div class=\"line\">    * <span class=\"doctag\">@param</span> mySize The width or height of this view (the RelativeLayout)</div><div class=\"line\">    * <span class=\"doctag\">@return</span> MeasureSpec for the child</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> childStart, <span class=\"keyword\">int</span> childEnd,</div><div class=\"line\">           <span class=\"keyword\">int</span> childSize, <span class=\"keyword\">int</span> startMargin, <span class=\"keyword\">int</span> endMargin, <span class=\"keyword\">int</span> startPadding,</div><div class=\"line\">           <span class=\"keyword\">int</span> endPadding, <span class=\"keyword\">int</span> mySize)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> childSpecMode = <span class=\"number\">0</span>;</div><div class=\"line\">       <span class=\"keyword\">int</span> childSpecSize = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isUnspecified = mySize &lt; <span class=\"number\">0</span>;</div><div class=\"line\">       <span class=\"comment\">//如果父RelativeLayout宽度小于0 版本号不小于4.2</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (isUnspecified &amp;&amp; !mAllowBrokenMeasureSpecs) &#123;</div><div class=\"line\">            <span class=\"comment\">//如果子View的左边距和右边距都不为VALUE_NOT_SET</span></div><div class=\"line\">            <span class=\"comment\">//且右边距坐标大于左边距坐标 则将其差当做宽度赋予View 设置模式为EXACTLY</span></div><div class=\"line\">            <span class=\"comment\">//VALUE_NOT_SET = Integer.MIN_VALUE</span></div><div class=\"line\">            <span class=\"comment\">/**</div><div class=\"line\">             * Constant for the minimum &#123;<span class=\"doctag\">@code</span> int&#125; value, -2&lt;sup&gt;31&lt;/sup&gt;.</div><div class=\"line\">             */</span></div><div class=\"line\">            <span class=\"comment\">//public static final int MIN_VALUE = 0x80000000;</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (childStart != VALUE_NOT_SET &amp;&amp; childEnd != VALUE_NOT_SET) &#123;</div><div class=\"line\">               childSpecSize = Math.max(<span class=\"number\">0</span>, childEnd - childStart);</div><div class=\"line\">               childSpecMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childSize &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               <span class=\"comment\">// 如果childSpecSize &gt;= 0 则赋值于childSpecSize</span></div><div class=\"line\">               <span class=\"comment\">//同样设置模式为EXACTLY</span></div><div class=\"line\">               childSpecSize = childSize;</div><div class=\"line\">               childSpecMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               <span class=\"comment\">// 都不满足则设置模式为UNSPECIFIED</span></div><div class=\"line\">               childSpecSize = <span class=\"number\">0</span>;</div><div class=\"line\">               childSpecMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 计算 开始和结束相关</span></div><div class=\"line\">       <span class=\"keyword\">int</span> tempStart = childStart;</div><div class=\"line\">       <span class=\"keyword\">int</span> tempEnd = childEnd;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//如果没有指定start值 则默认赋予 padding和merage的值</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (tempStart == VALUE_NOT_SET) &#123;</div><div class=\"line\">           tempStart = startPadding + startMargin;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"comment\">//同上</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (tempEnd == VALUE_NOT_SET) &#123;</div><div class=\"line\">           tempEnd = mySize - endPadding - endMargin;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//指定最大可提供的大小</span></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maxAvailable = tempEnd - tempStart;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (childStart != VALUE_NOT_SET &amp;&amp; childEnd != VALUE_NOT_SET) &#123;</div><div class=\"line\">           <span class=\"comment\">//如果Start和End都是有效值 根据isUnspecified设置specMode为UNSPECIFIED或EXACTLY</span></div><div class=\"line\">           <span class=\"comment\">//并将设置对应的size</span></div><div class=\"line\">           childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;</div><div class=\"line\">           childSpecSize = Math.max(<span class=\"number\">0</span>, maxAvailable);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"comment\">//反之 判断childSize的相关值</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (childSize &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               <span class=\"comment\">//设置模式为EXACTLY</span></div><div class=\"line\">               <span class=\"comment\">//判断maxAvailable和childSize情况 取较大值设置为childSpecSize</span></div><div class=\"line\">               childSpecMode = MeasureSpec.EXACTLY;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">if</span> (maxAvailable &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                   <span class=\"comment\">// We have a maximum size in this dimension.</span></div><div class=\"line\">                   childSpecSize = Math.min(maxAvailable, childSize);</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   <span class=\"comment\">// We can grow in this dimension.</span></div><div class=\"line\">                   childSpecSize = childSize;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childSize == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">               <span class=\"comment\">//如果子View是match模式 参照isUnspecified设置相关</span></div><div class=\"line\">               childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;</div><div class=\"line\">               childSpecSize = Math.max(<span class=\"number\">0</span>, maxAvailable);</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childSize == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">               <span class=\"comment\">//在wrap进行设置</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (maxAvailable &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                   <span class=\"comment\">// We have a maximum size in this dimension.</span></div><div class=\"line\">                   childSpecMode = MeasureSpec.AT_MOST;</div><div class=\"line\">                   childSpecSize = maxAvailable;</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   <span class=\"comment\">// We can grow in this dimension. Child can be as big as it</span></div><div class=\"line\">                   <span class=\"comment\">// wants.</span></div><div class=\"line\">                   childSpecMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">                   childSpecSize = <span class=\"number\">0</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>以上 完成了View的第一次测量  确定了View的大小 然后根据大小觉得把子view放在父RelativeLayout中的位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">positionChildHorizontal</span><span class=\"params\">(View child, LayoutParams params, <span class=\"keyword\">int</span> myWidth,</div><div class=\"line\">        <span class=\"keyword\">boolean</span> wrapContent)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//获取RelativeLayout的布局方向</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</div><div class=\"line\">    <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (params.mLeft == VALUE_NOT_SET &amp;&amp; params.mRight != VALUE_NOT_SET) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果右边界有效 左边界无效 根据右边界计算出左边界</span></div><div class=\"line\">        params.mLeft = params.mRight - child.getMeasuredWidth();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params.mLeft != VALUE_NOT_SET &amp;&amp; params.mRight == VALUE_NOT_SET) &#123;</div><div class=\"line\">        <span class=\"comment\">// 同上反之</span></div><div class=\"line\">        params.mRight = params.mLeft + child.getMeasuredWidth();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params.mLeft == VALUE_NOT_SET &amp;&amp; params.mRight == VALUE_NOT_SET) &#123;</div><div class=\"line\">        <span class=\"comment\">//都无效的时候</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (rules[CENTER_IN_PARENT] != <span class=\"number\">0</span> || rules[CENTER_HORIZONTAL] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          <span class=\"comment\">//设置了CENTER_IN_PARENT或者 CENTER_HORIZONTAL的情况下</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!wrapContent) &#123;</div><div class=\"line\">              <span class=\"comment\">//非wrap情况下</span></div><div class=\"line\">              <span class=\"comment\">//把子View水平中心固定在RelativeLayout的中心</span></div><div class=\"line\">                centerHorizontal(child, params, myWidth);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               <span class=\"comment\">//左边距为padding+margin</span></div><div class=\"line\">               <span class=\"comment\">//右边距为左边距加上测量宽度</span></div><div class=\"line\">                params.mLeft = mPaddingLeft + params.leftMargin;</div><div class=\"line\">                params.mRight = params.mLeft + child.getMeasuredWidth();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//RTL右到左 布局方向</span></div><div class=\"line\">            <span class=\"comment\">//LTR\u0010左到右 布局方向</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (isLayoutRtl()) &#123;</div><div class=\"line\">                params.mRight = myWidth - mPaddingRight- params.rightMargin;</div><div class=\"line\">                params.mLeft = params.mRight - child.getMeasuredWidth();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                params.mLeft = mPaddingLeft + params.leftMargin;</div><div class=\"line\">                params.mRight = params.mLeft + child.getMeasuredWidth();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> rules[ALIGN_PARENT_END] != <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">//当为CENTER_IN_PARENT  CENTER_HORIZONTAL ALIGN_PARENT_END三种情况之一时返回True</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-遍历竖直关系的View\"><a href=\"#4-遍历竖直关系的View\" class=\"headerlink\" title=\"4 遍历竖直关系的View\"></a>4 遍历竖直关系的View</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">           <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">               <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">              <span class=\"comment\">//将竖直方向规则转换为坐标</span></div><div class=\"line\">               applyVerticalSizeRules(params, myHeight, child.getBaseline());</div><div class=\"line\">               <span class=\"comment\">//测量子View</span></div><div class=\"line\">               measureChild(child, params, myWidth, myHeight);</div><div class=\"line\">               <span class=\"comment\">//确定竖直方向子View的位置</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (positionChildVertical(child, params, myHeight, isWrapContentHeight)) &#123;</div><div class=\"line\">                   offsetVerticalAxis = <span class=\"keyword\">true</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">              <span class=\"comment\">//首先判断是否为wrap模式</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (isWrapContentWidth) &#123;</div><div class=\"line\">                 <span class=\"comment\">//根据RTL或者LTR和版本进行区分</span></div><div class=\"line\">                 <span class=\"comment\">//Build.VERSION_CODES.KITKAT = 19</span></div><div class=\"line\">                 <span class=\"comment\">//主要对margin进行处理</span></div><div class=\"line\">                   <span class=\"keyword\">if</span> (isLayoutRtl()) &#123;</div><div class=\"line\">                       <span class=\"keyword\">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">                           width = Math.max(width, myWidth - params.mLeft);</div><div class=\"line\">                       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                           width = Math.max(width, myWidth - params.mLeft - params.leftMargin);</div><div class=\"line\">                       &#125;</div><div class=\"line\">                   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                       <span class=\"keyword\">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">                           width = Math.max(width, params.mRight);</div><div class=\"line\">                       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                           width = Math.max(width, params.mRight + params.rightMargin);</div><div class=\"line\">                       &#125;</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">if</span> (isWrapContentHeight) &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">                       height = Math.max(height, params.mBottom);</div><div class=\"line\">                   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                       height = Math.max(height, params.mBottom + params.bottomMargin);</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">if</span> (child != ignore || verticalGravity) &#123;</div><div class=\"line\">                   left = Math.min(left, params.mLeft - params.leftMargin);</div><div class=\"line\">                   top = Math.min(top, params.mTop - params.topMargin);</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">if</span> (child != ignore || horizontalGravity) &#123;</div><div class=\"line\">                   right = Math.max(right, params.mRight + params.rightMargin);</div><div class=\"line\">                   bottom = Math.max(bottom, params.mBottom + params.bottomMargin);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h4 id=\"5-baseline计算\"><a href=\"#5-baseline计算\" class=\"headerlink\" title=\"5 baseline计算\"></a>5 baseline计算</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Use the top-start-most laid out view as the baseline. RTL offsets are</span></div><div class=\"line\"><span class=\"comment\">// applied later, so we can use the left-most edge as the starting edge.</span></div><div class=\"line\">    View baselineView = <span class=\"keyword\">null</span>;</div><div class=\"line\">    LayoutParams baselineParams = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> LayoutParams childParams = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">            <span class=\"keyword\">if</span> (baselineView == <span class=\"keyword\">null</span> || baselineParams == <span class=\"keyword\">null</span></div><div class=\"line\">                    || compareLayoutPosition(childParams, baselineParams) &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                baselineView = child;</div><div class=\"line\">                baselineParams = childParams;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    mBaselineView = baselineView;</div></pre></td></tr></table></figure>\n<h4 id=\"6-宽度和高度修正\"><a href=\"#6-宽度和高度修正\" class=\"headerlink\" title=\"6 宽度和高度修正\"></a>6 宽度和高度修正</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//如何是wrap模式</span></div><div class=\"line\"><span class=\"keyword\">if</span> (isWrapContentWidth) &#123;</div><div class=\"line\">        width += mPaddingRight;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (mLayoutParams != <span class=\"keyword\">null</span> &amp;&amp; mLayoutParams.width &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            width = Math.max(width, mLayoutParams.width);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        width = Math.max(width, getSuggestedMinimumWidth());</div><div class=\"line\">        width = resolveSize(width, widthMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//在得到最后的width之后 对依赖RelativeLayout的子View添上偏移量</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (offsetHorizontalAxis) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">                <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">                    <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</div><div class=\"line\">                    <span class=\"comment\">//对CENTER_IN_PARENT或者CENTER_HORIZONTAL的子View重测</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (rules[CENTER_IN_PARENT] != <span class=\"number\">0</span> || rules[CENTER_HORIZONTAL] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        centerHorizontal(child, params, width);</div><div class=\"line\">                    <span class=\"comment\">//对ALIGN_PARENT_RIGHT重测</span></div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rules[ALIGN_PARENT_RIGHT] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = child.getMeasuredWidth();</div><div class=\"line\">                        params.mLeft = width - mPaddingRight - childWidth;</div><div class=\"line\">                        params.mRight = params.mLeft + childWidth;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//同上</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (isWrapContentHeight) &#123;</div><div class=\"line\">        height += mPaddingBottom;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (mLayoutParams != <span class=\"keyword\">null</span> &amp;&amp; mLayoutParams.height &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            height = Math.max(height, mLayoutParams.height);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        height = Math.max(height, getSuggestedMinimumHeight());</div><div class=\"line\">        height = resolveSize(height, heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (offsetVerticalAxis) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">                <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">                    <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (rules[CENTER_IN_PARENT] != <span class=\"number\">0</span> || rules[CENTER_VERTICAL] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        centerVertical(child, params, height);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rules[ALIGN_PARENT_BOTTOM] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</div><div class=\"line\">                        params.mTop = height - mPaddingBottom - childHeight;</div><div class=\"line\">                        params.mBottom = params.mTop + childHeight;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//根据gravity再次修正</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (horizontalGravity || verticalGravity) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Rect selfBounds = mSelfBounds;</div><div class=\"line\">        selfBounds.set(mPaddingLeft, mPaddingTop, width - mPaddingRight,</div><div class=\"line\">                height - mPaddingBottom);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> Rect contentBounds = mContentBounds;</div><div class=\"line\">        Gravity.apply(mGravity, right - left, bottom - top, selfBounds, contentBounds,</div><div class=\"line\">                layoutDirection);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> horizontalOffset = contentBounds.left - left;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> verticalOffset = contentBounds.top - top;</div><div class=\"line\">        <span class=\"keyword\">if</span> (horizontalOffset != <span class=\"number\">0</span> || verticalOffset != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">                <span class=\"keyword\">if</span> (child.getVisibility() != GONE &amp;&amp; child != ignore) &#123;</div><div class=\"line\">                    <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">                    <span class=\"keyword\">if</span> (horizontalGravity) &#123;</div><div class=\"line\">                        params.mLeft += horizontalOffset;</div><div class=\"line\">                        params.mRight += horizontalOffset;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (verticalGravity) &#123;</div><div class=\"line\">                        params.mTop += verticalOffset;</div><div class=\"line\">                        params.mBottom += verticalOffset;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//如果是RTL(右到左显示)则再次修改</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (isLayoutRtl()) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> offsetWidth = myWidth - width;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">            <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">                params.mLeft -= offsetWidth;</div><div class=\"line\">                params.mRight -= offsetWidth;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"简单总结\"><a href=\"#简单总结\" class=\"headerlink\" title=\"简单总结\"></a>简单总结</h4><p>RelativeLayout更加关注子View的left right top bottom值 并且优先级高于width和height</p>\n<h3 id=\"RelativeLayout的layout过程\"><a href=\"#RelativeLayout的layout过程\" class=\"headerlink\" title=\"RelativeLayout的layout过程\"></a>RelativeLayout的layout过程</h3><p>对于RelativeLayout来的 layout过程更多的根据子View的left right top bottom值来设定位置<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//  The layout has actually already been performed and the positions</span></div><div class=\"line\">    <span class=\"comment\">//  cached.  Apply the cached values to the children.</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getChildCount();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        View child = getChildAt(i);</div><div class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">            RelativeLayout.LayoutParams st =</div><div class=\"line\">                    (RelativeLayout.LayoutParams) child.getLayoutParams();</div><div class=\"line\">            child.layout(st.mLeft, st.mTop, st.mRight, st.mBottom);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"RelativeLayout的draw过程\"><a href=\"#RelativeLayout的draw过程\" class=\"headerlink\" title=\"RelativeLayout的draw过程\"></a>RelativeLayout的draw过程</h3><p>RelativeLayout作为ViewGroup的子类 因为其性质原因  没有对draw过程进行修改</p>\n<p>以上</p>"},{"title":"RpgMaker入门教程1","date":"2017-04-24T03:23:46.000Z","_content":"\n>RPG Maker是一个十分优秀的rpg游戏制作引擎 恩 一个被定义为游戏的游戏引擎 可以用来十分便捷的制作rpg游戏 有兴趣的可以尝试一下 满足自己想做游戏的愿望\n\n本文主要根据[官方文档](http://tkool.jp/products/rpgvx/lecture)相关进行翻译并添加了部分个人的理解和帮助 部分文意和理解可能所有差异 欢迎讨论 翻译的主体的的是RpgMaker的VX版本 我使用的是RpgMaker的Mv版本 部分ui界面可能有所不同 基本功能都是一样的 MV版本的[官方初级教程](http://tkool.jp/mv/guide/index.html)可以参考这里 关于RogMaker的相关版本说明可以[参考这里](http://tkool.jp/sp/valueplus/index) 至于学习的建议 版本来说MV的版本扩展性更强 也可以适用于更多的平台 但是本教程的内容对这两个版本都是通用的\n\n<!-- more -->\n\n**转载请注明出处**\n\n# 第一回 决定你的RPG形象\n\n(再次原谅我的野生翻译)\n\n在这个教程中 我们将介绍如何使用\"RPGMakerVX\"(原文使用的版本)来制作一个简单的RPG. 原则上,我们将使用\"RPGMakerVX\"的正式版本，但使用\"RPGMakerVX\"的试用版也可以完成这些.\n\n## Step1 决定你的RPG形象\n\n在开始制作之前,你要要构建你的Rpg游戏,就像是建筑的蓝图图,需要好好斟酌一下.\n\n![index1_1](http://i1.piimg.com/567571/73d18b45702e2850.png)\n\n直接做一个十分宏大的游戏是比较困难的,所以我们要开始尝试做一个小游戏来熟悉整个流程.这里我们的主题是\"英雄打败魔王\",希望能为你们带来灵感\n\n**写出你的想法**\n\n让我们总结一下英雄打败魔王的流程\n\n我们需要将你脑中的想法记录下来,比如记在笔记本电脑中,在之后的开发中你可能会想到更多的灵感,不过这个时候记录下游戏的主干就好\n\n例) 英雄打败魔王的流程\n\n![原文件](http://tkool.jp/assets/files/products_rpgvx_lecture_point1_1.jpg)\n\n![野生翻译的我](http://i4.buimg.com/567571/07237a5675b3175e.png)\n\n\n主要的流程大概是这样,现在,我们要决定英雄是如何打败魔王的\n\n有的人会说 \"我已经将所有的形象都记在脑中了\" 但是当你开始做事的时候 这些事情往往都被你忘记了. 可能在开发的过程中就想到了一个新的想法.再忘记这些想法之前要将这些想法记录下来是十分重要的.\n***\n\n在考虑游戏的流程的时候,你可能也会考虑到角色的名称或者主角的个性,除此之外还要考虑物品的名称特征和魔法,怪物.这些都有助于游戏的形象更加的完事,即使是那些当前游戏有没直接相关的想法,也可能为以后的开发有所帮助.\n\n第一回就到这里了 在这之后,你讲直接参与到实际的开发过程中\n***\n","source":"_posts/RpgMaker入门教程1.md","raw":"---\ntitle: RpgMaker入门教程1\ndate: 2017-04-24 11:23:46\ntags: [\"Rpg Maker\" ]\ncategories : \"RpgMaker 教程\"\n---\n\n>RPG Maker是一个十分优秀的rpg游戏制作引擎 恩 一个被定义为游戏的游戏引擎 可以用来十分便捷的制作rpg游戏 有兴趣的可以尝试一下 满足自己想做游戏的愿望\n\n本文主要根据[官方文档](http://tkool.jp/products/rpgvx/lecture)相关进行翻译并添加了部分个人的理解和帮助 部分文意和理解可能所有差异 欢迎讨论 翻译的主体的的是RpgMaker的VX版本 我使用的是RpgMaker的Mv版本 部分ui界面可能有所不同 基本功能都是一样的 MV版本的[官方初级教程](http://tkool.jp/mv/guide/index.html)可以参考这里 关于RogMaker的相关版本说明可以[参考这里](http://tkool.jp/sp/valueplus/index) 至于学习的建议 版本来说MV的版本扩展性更强 也可以适用于更多的平台 但是本教程的内容对这两个版本都是通用的\n\n<!-- more -->\n\n**转载请注明出处**\n\n# 第一回 决定你的RPG形象\n\n(再次原谅我的野生翻译)\n\n在这个教程中 我们将介绍如何使用\"RPGMakerVX\"(原文使用的版本)来制作一个简单的RPG. 原则上,我们将使用\"RPGMakerVX\"的正式版本，但使用\"RPGMakerVX\"的试用版也可以完成这些.\n\n## Step1 决定你的RPG形象\n\n在开始制作之前,你要要构建你的Rpg游戏,就像是建筑的蓝图图,需要好好斟酌一下.\n\n![index1_1](http://i1.piimg.com/567571/73d18b45702e2850.png)\n\n直接做一个十分宏大的游戏是比较困难的,所以我们要开始尝试做一个小游戏来熟悉整个流程.这里我们的主题是\"英雄打败魔王\",希望能为你们带来灵感\n\n**写出你的想法**\n\n让我们总结一下英雄打败魔王的流程\n\n我们需要将你脑中的想法记录下来,比如记在笔记本电脑中,在之后的开发中你可能会想到更多的灵感,不过这个时候记录下游戏的主干就好\n\n例) 英雄打败魔王的流程\n\n![原文件](http://tkool.jp/assets/files/products_rpgvx_lecture_point1_1.jpg)\n\n![野生翻译的我](http://i4.buimg.com/567571/07237a5675b3175e.png)\n\n\n主要的流程大概是这样,现在,我们要决定英雄是如何打败魔王的\n\n有的人会说 \"我已经将所有的形象都记在脑中了\" 但是当你开始做事的时候 这些事情往往都被你忘记了. 可能在开发的过程中就想到了一个新的想法.再忘记这些想法之前要将这些想法记录下来是十分重要的.\n***\n\n在考虑游戏的流程的时候,你可能也会考虑到角色的名称或者主角的个性,除此之外还要考虑物品的名称特征和魔法,怪物.这些都有助于游戏的形象更加的完事,即使是那些当前游戏有没直接相关的想法,也可能为以后的开发有所帮助.\n\n第一回就到这里了 在这之后,你讲直接参与到实际的开发过程中\n***\n","slug":"RpgMaker入门教程1","published":1,"updated":"2017-04-25T06:20:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8cwyb5s000do3xwh9cz7par","content":"<blockquote>\n<p>RPG Maker是一个十分优秀的rpg游戏制作引擎 恩 一个被定义为游戏的游戏引擎 可以用来十分便捷的制作rpg游戏 有兴趣的可以尝试一下 满足自己想做游戏的愿望</p>\n</blockquote>\n<p>本文主要根据<a href=\"http://tkool.jp/products/rpgvx/lecture\" target=\"_blank\" rel=\"external\">官方文档</a>相关进行翻译并添加了部分个人的理解和帮助 部分文意和理解可能所有差异 欢迎讨论 翻译的主体的的是RpgMaker的VX版本 我使用的是RpgMaker的Mv版本 部分ui界面可能有所不同 基本功能都是一样的 MV版本的<a href=\"http://tkool.jp/mv/guide/index.html\" target=\"_blank\" rel=\"external\">官方初级教程</a>可以参考这里 关于RogMaker的相关版本说明可以<a href=\"http://tkool.jp/sp/valueplus/index\" target=\"_blank\" rel=\"external\">参考这里</a> 至于学习的建议 版本来说MV的版本扩展性更强 也可以适用于更多的平台 但是本教程的内容对这两个版本都是通用的</p>\n<a id=\"more\"></a>\n<p><strong>转载请注明出处</strong></p>\n<h1 id=\"第一回-决定你的RPG形象\"><a href=\"#第一回-决定你的RPG形象\" class=\"headerlink\" title=\"第一回 决定你的RPG形象\"></a>第一回 决定你的RPG形象</h1><p>(再次原谅我的野生翻译)</p>\n<p>在这个教程中 我们将介绍如何使用”RPGMakerVX”(原文使用的版本)来制作一个简单的RPG. 原则上,我们将使用”RPGMakerVX”的正式版本，但使用”RPGMakerVX”的试用版也可以完成这些.</p>\n<h2 id=\"Step1-决定你的RPG形象\"><a href=\"#Step1-决定你的RPG形象\" class=\"headerlink\" title=\"Step1 决定你的RPG形象\"></a>Step1 决定你的RPG形象</h2><p>在开始制作之前,你要要构建你的Rpg游戏,就像是建筑的蓝图图,需要好好斟酌一下.</p>\n<p><img src=\"http://i1.piimg.com/567571/73d18b45702e2850.png\" alt=\"index1_1\"></p>\n<p>直接做一个十分宏大的游戏是比较困难的,所以我们要开始尝试做一个小游戏来熟悉整个流程.这里我们的主题是”英雄打败魔王”,希望能为你们带来灵感</p>\n<p><strong>写出你的想法</strong></p>\n<p>让我们总结一下英雄打败魔王的流程</p>\n<p>我们需要将你脑中的想法记录下来,比如记在笔记本电脑中,在之后的开发中你可能会想到更多的灵感,不过这个时候记录下游戏的主干就好</p>\n<p>例) 英雄打败魔王的流程</p>\n<p><img src=\"http://tkool.jp/assets/files/products_rpgvx_lecture_point1_1.jpg\" alt=\"原文件\"></p>\n<p><img src=\"http://i4.buimg.com/567571/07237a5675b3175e.png\" alt=\"野生翻译的我\"></p>\n<p>主要的流程大概是这样,现在,我们要决定英雄是如何打败魔王的</p>\n<p>有的人会说 “我已经将所有的形象都记在脑中了” 但是当你开始做事的时候 这些事情往往都被你忘记了. 可能在开发的过程中就想到了一个新的想法.再忘记这些想法之前要将这些想法记录下来是十分重要的.</p>\n<hr>\n<p>在考虑游戏的流程的时候,你可能也会考虑到角色的名称或者主角的个性,除此之外还要考虑物品的名称特征和魔法,怪物.这些都有助于游戏的形象更加的完事,即使是那些当前游戏有没直接相关的想法,也可能为以后的开发有所帮助.</p>\n<p>第一回就到这里了 在这之后,你讲直接参与到实际的开发过程中</p>\n<hr>\n","excerpt":"<blockquote>\n<p>RPG Maker是一个十分优秀的rpg游戏制作引擎 恩 一个被定义为游戏的游戏引擎 可以用来十分便捷的制作rpg游戏 有兴趣的可以尝试一下 满足自己想做游戏的愿望</p>\n</blockquote>\n<p>本文主要根据<a href=\"http://tkool.jp/products/rpgvx/lecture\">官方文档</a>相关进行翻译并添加了部分个人的理解和帮助 部分文意和理解可能所有差异 欢迎讨论 翻译的主体的的是RpgMaker的VX版本 我使用的是RpgMaker的Mv版本 部分ui界面可能有所不同 基本功能都是一样的 MV版本的<a href=\"http://tkool.jp/mv/guide/index.html\">官方初级教程</a>可以参考这里 关于RogMaker的相关版本说明可以<a href=\"http://tkool.jp/sp/valueplus/index\">参考这里</a> 至于学习的建议 版本来说MV的版本扩展性更强 也可以适用于更多的平台 但是本教程的内容对这两个版本都是通用的</p>","more":"<p><strong>转载请注明出处</strong></p>\n<h1 id=\"第一回-决定你的RPG形象\"><a href=\"#第一回-决定你的RPG形象\" class=\"headerlink\" title=\"第一回 决定你的RPG形象\"></a>第一回 决定你的RPG形象</h1><p>(再次原谅我的野生翻译)</p>\n<p>在这个教程中 我们将介绍如何使用”RPGMakerVX”(原文使用的版本)来制作一个简单的RPG. 原则上,我们将使用”RPGMakerVX”的正式版本，但使用”RPGMakerVX”的试用版也可以完成这些.</p>\n<h2 id=\"Step1-决定你的RPG形象\"><a href=\"#Step1-决定你的RPG形象\" class=\"headerlink\" title=\"Step1 决定你的RPG形象\"></a>Step1 决定你的RPG形象</h2><p>在开始制作之前,你要要构建你的Rpg游戏,就像是建筑的蓝图图,需要好好斟酌一下.</p>\n<p><img src=\"http://i1.piimg.com/567571/73d18b45702e2850.png\" alt=\"index1_1\"></p>\n<p>直接做一个十分宏大的游戏是比较困难的,所以我们要开始尝试做一个小游戏来熟悉整个流程.这里我们的主题是”英雄打败魔王”,希望能为你们带来灵感</p>\n<p><strong>写出你的想法</strong></p>\n<p>让我们总结一下英雄打败魔王的流程</p>\n<p>我们需要将你脑中的想法记录下来,比如记在笔记本电脑中,在之后的开发中你可能会想到更多的灵感,不过这个时候记录下游戏的主干就好</p>\n<p>例) 英雄打败魔王的流程</p>\n<p><img src=\"http://tkool.jp/assets/files/products_rpgvx_lecture_point1_1.jpg\" alt=\"原文件\"></p>\n<p><img src=\"http://i4.buimg.com/567571/07237a5675b3175e.png\" alt=\"野生翻译的我\"></p>\n<p>主要的流程大概是这样,现在,我们要决定英雄是如何打败魔王的</p>\n<p>有的人会说 “我已经将所有的形象都记在脑中了” 但是当你开始做事的时候 这些事情往往都被你忘记了. 可能在开发的过程中就想到了一个新的想法.再忘记这些想法之前要将这些想法记录下来是十分重要的.</p>\n<hr>\n<p>在考虑游戏的流程的时候,你可能也会考虑到角色的名称或者主角的个性,除此之外还要考虑物品的名称特征和魔法,怪物.这些都有助于游戏的形象更加的完事,即使是那些当前游戏有没直接相关的想法,也可能为以后的开发有所帮助.</p>\n<p>第一回就到这里了 在这之后,你讲直接参与到实际的开发过程中</p>\n<hr>"},{"title":"RpgMaker教程3","date":"2017-10-04T09:05:26.000Z","_content":"\n> 开始填坑的我\n\n# RpgMaker入门教程3\n\n## 第三回 让我们开始制作城堡\n在第二回中我们创建了一个新的项目 并制作了世界地图\n\n![第二回创建的世界地图](http://ooymoxvz4.bkt.clouddn.com/17-10-4/53054520.jpg)\n\n下一个阶段 我们将创建对应标识(城镇及地下城)的内容\n\n### Step6 开始制作城堡的地图\n#### 创建一个新的地图\n在编辑器左下角的\"世界地图\"标签中右键 选择新建地图 来创建一个新的地图\n\n![冒险开始的城堡地图](http://ooymoxvz4.bkt.clouddn.com/17-10-4/41194854.jpg)\n\n根据上面图片对新的地图属性进行设置,将地图名称更改为“冒险开始的城堡地图” ,地图大小设置为默认宽度17和高度13,它是一个只有一个屏幕的大小的地图,别忘了设置BGM.\n\n#### 绘制城堡地图\n我们要绘制一张地图,我们想象一下国王在城堡中生活的场景\n\n![城堡内国王生活的地方](http://ooymoxvz4.bkt.clouddn.com/17-10-4/76035004.jpg)\n\n通过瓷砖 柱子 还有进行装饰,并将国王放在地图的中间,并在下部设置一个出人口.\n\n### Step7 创建一个简单的\"场所移动\"时间\n\n刚刚创建的地图之间是互相独立的,我们要通过\"事件\"来将不同的地图相互联系起来.\n\n下面我来简单介绍一下什么是 \"事件\"\n\n在RPG Maker中,我们常常使用\"事件\",这是游戏中发生的事件的统称.比如城镇中的提示,宝箱和宝物,地图之间的连接,现在开始你可以显示交流和使用物品,任何游戏中发生的事情都是使用的事件.\n\n#### 将世界地图和城堡的地图连接\n\n在RPG Maker中,我们使用\"事件\"功能很方便,可以很方便的创建一个\"事件\",只需要在菜单中选择事件模式.\n\n![选择事件模式](http://ooymoxvz4.bkt.clouddn.com/17-10-4/20019323.jpg)\n\n![快速创建事件](http://ooymoxvz4.bkt.clouddn.com/17-10-4/69495280.jpg)\n\n<center>快速创建一个\"事件\"</center>\n\n将鼠标移动到城堡的出口位置,右键选择 快速创建事件->场所移动 的事件\n\n![场所移动事件的对话框](http://ooymoxvz4.bkt.clouddn.com/17-10-4/46059419.jpg)\n\n<center>场所移动事件的对话框</center>\n\n选择后会显示一个用于创建 场所移动 事件的对话框\n\n\n![目的地地图](http://ooymoxvz4.bkt.clouddn.com/17-10-4/97806613.jpg)\n\n<center>目的地地图</center>\n\n在目的地地图中,选择\"世界地图\",双击指定目标坐标.关于\"方向\"是目标移动后指向的位置.如果没有特殊要求,可以直接使用默认的设置.\n\n选择\"确认\"后\"开始城堡\"->\"世界地图\"的场所移动事件就完成了\n\n现在你可以从\"城堡地图\"移动到世界地图,但是还不能从\"世界地图\"移动到\"开始城堡\".通过同样的方式,我们创建一个\"世界地图\"到\"城堡地图\"的场景事件.\n\n![快速创建事件](http://ooymoxvz4.bkt.clouddn.com/17-10-4/35890321.jpg)\n<center>快速创建事件</center>\n\n将光标移动到指定位置 创建一个\"场景移动\"事件.\n\n![指定目的地及坐标](http://ooymoxvz4.bkt.clouddn.com/17-10-4/52224203.jpg)\n<center>指定目的地及坐标</center>\n\n像之前一样 将目的地设置为城堡地图的入口位置,这样我们就能在\"世界地图\"和\"城堡地图\"之间移动了.\n\n只有从一个位置移动到另一个位置的\"场景移动\"世界是失败的.这样会让我们的游戏只能单向运动.最后我们别忘了测试一下两个场景能否正常的连接.\n","source":"_posts/RpgMaker教程3.md","raw":"---\ntitle: RpgMaker教程3\ndate: 2017-10-04 17:05:26\ntags: [\"Rpg Maker\" ]\ncategories : \"RpgMaker 教程\"\n---\n\n> 开始填坑的我\n\n# RpgMaker入门教程3\n\n## 第三回 让我们开始制作城堡\n在第二回中我们创建了一个新的项目 并制作了世界地图\n\n![第二回创建的世界地图](http://ooymoxvz4.bkt.clouddn.com/17-10-4/53054520.jpg)\n\n下一个阶段 我们将创建对应标识(城镇及地下城)的内容\n\n### Step6 开始制作城堡的地图\n#### 创建一个新的地图\n在编辑器左下角的\"世界地图\"标签中右键 选择新建地图 来创建一个新的地图\n\n![冒险开始的城堡地图](http://ooymoxvz4.bkt.clouddn.com/17-10-4/41194854.jpg)\n\n根据上面图片对新的地图属性进行设置,将地图名称更改为“冒险开始的城堡地图” ,地图大小设置为默认宽度17和高度13,它是一个只有一个屏幕的大小的地图,别忘了设置BGM.\n\n#### 绘制城堡地图\n我们要绘制一张地图,我们想象一下国王在城堡中生活的场景\n\n![城堡内国王生活的地方](http://ooymoxvz4.bkt.clouddn.com/17-10-4/76035004.jpg)\n\n通过瓷砖 柱子 还有进行装饰,并将国王放在地图的中间,并在下部设置一个出人口.\n\n### Step7 创建一个简单的\"场所移动\"时间\n\n刚刚创建的地图之间是互相独立的,我们要通过\"事件\"来将不同的地图相互联系起来.\n\n下面我来简单介绍一下什么是 \"事件\"\n\n在RPG Maker中,我们常常使用\"事件\",这是游戏中发生的事件的统称.比如城镇中的提示,宝箱和宝物,地图之间的连接,现在开始你可以显示交流和使用物品,任何游戏中发生的事情都是使用的事件.\n\n#### 将世界地图和城堡的地图连接\n\n在RPG Maker中,我们使用\"事件\"功能很方便,可以很方便的创建一个\"事件\",只需要在菜单中选择事件模式.\n\n![选择事件模式](http://ooymoxvz4.bkt.clouddn.com/17-10-4/20019323.jpg)\n\n![快速创建事件](http://ooymoxvz4.bkt.clouddn.com/17-10-4/69495280.jpg)\n\n<center>快速创建一个\"事件\"</center>\n\n将鼠标移动到城堡的出口位置,右键选择 快速创建事件->场所移动 的事件\n\n![场所移动事件的对话框](http://ooymoxvz4.bkt.clouddn.com/17-10-4/46059419.jpg)\n\n<center>场所移动事件的对话框</center>\n\n选择后会显示一个用于创建 场所移动 事件的对话框\n\n\n![目的地地图](http://ooymoxvz4.bkt.clouddn.com/17-10-4/97806613.jpg)\n\n<center>目的地地图</center>\n\n在目的地地图中,选择\"世界地图\",双击指定目标坐标.关于\"方向\"是目标移动后指向的位置.如果没有特殊要求,可以直接使用默认的设置.\n\n选择\"确认\"后\"开始城堡\"->\"世界地图\"的场所移动事件就完成了\n\n现在你可以从\"城堡地图\"移动到世界地图,但是还不能从\"世界地图\"移动到\"开始城堡\".通过同样的方式,我们创建一个\"世界地图\"到\"城堡地图\"的场景事件.\n\n![快速创建事件](http://ooymoxvz4.bkt.clouddn.com/17-10-4/35890321.jpg)\n<center>快速创建事件</center>\n\n将光标移动到指定位置 创建一个\"场景移动\"事件.\n\n![指定目的地及坐标](http://ooymoxvz4.bkt.clouddn.com/17-10-4/52224203.jpg)\n<center>指定目的地及坐标</center>\n\n像之前一样 将目的地设置为城堡地图的入口位置,这样我们就能在\"世界地图\"和\"城堡地图\"之间移动了.\n\n只有从一个位置移动到另一个位置的\"场景移动\"世界是失败的.这样会让我们的游戏只能单向运动.最后我们别忘了测试一下两个场景能否正常的连接.\n","slug":"RpgMaker教程3","published":1,"updated":"2017-10-04T10:46:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8cwyb5u000fo3xwoz0zbl91","content":"<blockquote>\n<p>开始填坑的我</p>\n</blockquote>\n<h1 id=\"RpgMaker入门教程3\"><a href=\"#RpgMaker入门教程3\" class=\"headerlink\" title=\"RpgMaker入门教程3\"></a>RpgMaker入门教程3</h1><h2 id=\"第三回-让我们开始制作城堡\"><a href=\"#第三回-让我们开始制作城堡\" class=\"headerlink\" title=\"第三回 让我们开始制作城堡\"></a>第三回 让我们开始制作城堡</h2><p>在第二回中我们创建了一个新的项目 并制作了世界地图</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-10-4/53054520.jpg\" alt=\"第二回创建的世界地图\"></p>\n<p>下一个阶段 我们将创建对应标识(城镇及地下城)的内容</p>\n<h3 id=\"Step6-开始制作城堡的地图\"><a href=\"#Step6-开始制作城堡的地图\" class=\"headerlink\" title=\"Step6 开始制作城堡的地图\"></a>Step6 开始制作城堡的地图</h3><h4 id=\"创建一个新的地图\"><a href=\"#创建一个新的地图\" class=\"headerlink\" title=\"创建一个新的地图\"></a>创建一个新的地图</h4><p>在编辑器左下角的”世界地图”标签中右键 选择新建地图 来创建一个新的地图</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-10-4/41194854.jpg\" alt=\"冒险开始的城堡地图\"></p>\n<p>根据上面图片对新的地图属性进行设置,将地图名称更改为“冒险开始的城堡地图” ,地图大小设置为默认宽度17和高度13,它是一个只有一个屏幕的大小的地图,别忘了设置BGM.</p>\n<h4 id=\"绘制城堡地图\"><a href=\"#绘制城堡地图\" class=\"headerlink\" title=\"绘制城堡地图\"></a>绘制城堡地图</h4><p>我们要绘制一张地图,我们想象一下国王在城堡中生活的场景</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-10-4/76035004.jpg\" alt=\"城堡内国王生活的地方\"></p>\n<p>通过瓷砖 柱子 还有进行装饰,并将国王放在地图的中间,并在下部设置一个出人口.</p>\n<h3 id=\"Step7-创建一个简单的”场所移动”时间\"><a href=\"#Step7-创建一个简单的”场所移动”时间\" class=\"headerlink\" title=\"Step7 创建一个简单的”场所移动”时间\"></a>Step7 创建一个简单的”场所移动”时间</h3><p>刚刚创建的地图之间是互相独立的,我们要通过”事件”来将不同的地图相互联系起来.</p>\n<p>下面我来简单介绍一下什么是 “事件”</p>\n<p>在RPG Maker中,我们常常使用”事件”,这是游戏中发生的事件的统称.比如城镇中的提示,宝箱和宝物,地图之间的连接,现在开始你可以显示交流和使用物品,任何游戏中发生的事情都是使用的事件.</p>\n<h4 id=\"将世界地图和城堡的地图连接\"><a href=\"#将世界地图和城堡的地图连接\" class=\"headerlink\" title=\"将世界地图和城堡的地图连接\"></a>将世界地图和城堡的地图连接</h4><p>在RPG Maker中,我们使用”事件”功能很方便,可以很方便的创建一个”事件”,只需要在菜单中选择事件模式.</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-10-4/20019323.jpg\" alt=\"选择事件模式\"></p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-10-4/69495280.jpg\" alt=\"快速创建事件\"></p>\n<center>快速创建一个”事件”</center>\n\n<p>将鼠标移动到城堡的出口位置,右键选择 快速创建事件-&gt;场所移动 的事件</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-10-4/46059419.jpg\" alt=\"场所移动事件的对话框\"></p>\n<center>场所移动事件的对话框</center>\n\n<p>选择后会显示一个用于创建 场所移动 事件的对话框</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-10-4/97806613.jpg\" alt=\"目的地地图\"></p>\n<center>目的地地图</center>\n\n<p>在目的地地图中,选择”世界地图”,双击指定目标坐标.关于”方向”是目标移动后指向的位置.如果没有特殊要求,可以直接使用默认的设置.</p>\n<p>选择”确认”后”开始城堡”-&gt;”世界地图”的场所移动事件就完成了</p>\n<p>现在你可以从”城堡地图”移动到世界地图,但是还不能从”世界地图”移动到”开始城堡”.通过同样的方式,我们创建一个”世界地图”到”城堡地图”的场景事件.</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-10-4/35890321.jpg\" alt=\"快速创建事件\"></p>\n<center>快速创建事件</center>\n\n<p>将光标移动到指定位置 创建一个”场景移动”事件.</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-10-4/52224203.jpg\" alt=\"指定目的地及坐标\"></p>\n<center>指定目的地及坐标</center>\n\n<p>像之前一样 将目的地设置为城堡地图的入口位置,这样我们就能在”世界地图”和”城堡地图”之间移动了.</p>\n<p>只有从一个位置移动到另一个位置的”场景移动”世界是失败的.这样会让我们的游戏只能单向运动.最后我们别忘了测试一下两个场景能否正常的连接.</p>\n","excerpt":"","more":"<blockquote>\n<p>开始填坑的我</p>\n</blockquote>\n<h1 id=\"RpgMaker入门教程3\"><a href=\"#RpgMaker入门教程3\" class=\"headerlink\" title=\"RpgMaker入门教程3\"></a>RpgMaker入门教程3</h1><h2 id=\"第三回-让我们开始制作城堡\"><a href=\"#第三回-让我们开始制作城堡\" class=\"headerlink\" title=\"第三回 让我们开始制作城堡\"></a>第三回 让我们开始制作城堡</h2><p>在第二回中我们创建了一个新的项目 并制作了世界地图</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-10-4/53054520.jpg\" alt=\"第二回创建的世界地图\"></p>\n<p>下一个阶段 我们将创建对应标识(城镇及地下城)的内容</p>\n<h3 id=\"Step6-开始制作城堡的地图\"><a href=\"#Step6-开始制作城堡的地图\" class=\"headerlink\" title=\"Step6 开始制作城堡的地图\"></a>Step6 开始制作城堡的地图</h3><h4 id=\"创建一个新的地图\"><a href=\"#创建一个新的地图\" class=\"headerlink\" title=\"创建一个新的地图\"></a>创建一个新的地图</h4><p>在编辑器左下角的”世界地图”标签中右键 选择新建地图 来创建一个新的地图</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-10-4/41194854.jpg\" alt=\"冒险开始的城堡地图\"></p>\n<p>根据上面图片对新的地图属性进行设置,将地图名称更改为“冒险开始的城堡地图” ,地图大小设置为默认宽度17和高度13,它是一个只有一个屏幕的大小的地图,别忘了设置BGM.</p>\n<h4 id=\"绘制城堡地图\"><a href=\"#绘制城堡地图\" class=\"headerlink\" title=\"绘制城堡地图\"></a>绘制城堡地图</h4><p>我们要绘制一张地图,我们想象一下国王在城堡中生活的场景</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-10-4/76035004.jpg\" alt=\"城堡内国王生活的地方\"></p>\n<p>通过瓷砖 柱子 还有进行装饰,并将国王放在地图的中间,并在下部设置一个出人口.</p>\n<h3 id=\"Step7-创建一个简单的”场所移动”时间\"><a href=\"#Step7-创建一个简单的”场所移动”时间\" class=\"headerlink\" title=\"Step7 创建一个简单的”场所移动”时间\"></a>Step7 创建一个简单的”场所移动”时间</h3><p>刚刚创建的地图之间是互相独立的,我们要通过”事件”来将不同的地图相互联系起来.</p>\n<p>下面我来简单介绍一下什么是 “事件”</p>\n<p>在RPG Maker中,我们常常使用”事件”,这是游戏中发生的事件的统称.比如城镇中的提示,宝箱和宝物,地图之间的连接,现在开始你可以显示交流和使用物品,任何游戏中发生的事情都是使用的事件.</p>\n<h4 id=\"将世界地图和城堡的地图连接\"><a href=\"#将世界地图和城堡的地图连接\" class=\"headerlink\" title=\"将世界地图和城堡的地图连接\"></a>将世界地图和城堡的地图连接</h4><p>在RPG Maker中,我们使用”事件”功能很方便,可以很方便的创建一个”事件”,只需要在菜单中选择事件模式.</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-10-4/20019323.jpg\" alt=\"选择事件模式\"></p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-10-4/69495280.jpg\" alt=\"快速创建事件\"></p>\n<center>快速创建一个”事件”</center>\n\n<p>将鼠标移动到城堡的出口位置,右键选择 快速创建事件-&gt;场所移动 的事件</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-10-4/46059419.jpg\" alt=\"场所移动事件的对话框\"></p>\n<center>场所移动事件的对话框</center>\n\n<p>选择后会显示一个用于创建 场所移动 事件的对话框</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-10-4/97806613.jpg\" alt=\"目的地地图\"></p>\n<center>目的地地图</center>\n\n<p>在目的地地图中,选择”世界地图”,双击指定目标坐标.关于”方向”是目标移动后指向的位置.如果没有特殊要求,可以直接使用默认的设置.</p>\n<p>选择”确认”后”开始城堡”-&gt;”世界地图”的场所移动事件就完成了</p>\n<p>现在你可以从”城堡地图”移动到世界地图,但是还不能从”世界地图”移动到”开始城堡”.通过同样的方式,我们创建一个”世界地图”到”城堡地图”的场景事件.</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-10-4/35890321.jpg\" alt=\"快速创建事件\"></p>\n<center>快速创建事件</center>\n\n<p>将光标移动到指定位置 创建一个”场景移动”事件.</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-10-4/52224203.jpg\" alt=\"指定目的地及坐标\"></p>\n<center>指定目的地及坐标</center>\n\n<p>像之前一样 将目的地设置为城堡地图的入口位置,这样我们就能在”世界地图”和”城堡地图”之间移动了.</p>\n<p>只有从一个位置移动到另一个位置的”场景移动”世界是失败的.这样会让我们的游戏只能单向运动.最后我们别忘了测试一下两个场景能否正常的连接.</p>\n"},{"title":"RpgMaker入门教程2","_content":"\n>上一回的翻译过后发现好多迷之翻译 这里开始决定不再完全依靠原文 部分文本有所删减并增加大量个人经验\n\n# 第二回 游戏的蓝图\n\n这里第二回的初学者教程\n\n在第一回中我们设计了整体的流程图\n\n<!-- more -->\n\n![野生翻译的我](http://i4.buimg.com/567571/07237a5675b3175e.png)\n\n这一回中我们将继续做游戏的开发工作\n\n  试用版本可能不包含部分图片资源\n\n## Step2 创建一个新的项目\n\n现在,我们要创建一个新项目,让我们启动程序,在菜单 文件-新建项目中\n\n![新建项目的画面](http://i2.muimg.com/567571/d60e27718edbb8bf.png)\n\n文件名游戏名什么的 应该不需要解释了\n\n## Step3  制作地图前的准备\n\n让我们绘制一个野外的地图来做作为冒险的舞台,最初的世界地图的宽和高都是100(Vx版本),因为他需要展示很多的信息,初次之外我们还会制作很多30*30的详细地图\n\n在MAO001的对象中右键选择地图设置,设定地图的参数\n\n![地图设置](http://ooyk47nhk.bkt.clouddn.com/17-4-25/28050585-file_1493112311376_c429.png)\n\n![地图设置详情](http://ooymoxvz4.bkt.clouddn.com/17-5-1/52613111-file_1493638260381_5383.png)\n\n除了有地图的大小还可以设置BGM和遇敌详情\n\n**改变地图的大小**\n将地图的宽和高通过地图属性的宽度和高度设置为30\n\n**更改选择的BGM**\n通过改变BGM的设定来变更当前地图的BGN音效,选择自动切换BGM,点击下方的 … 按钮显来选择音效在这里选择Filed1的BGM音效, 在后面的章节中我会介绍出现敌人的选项\n\n![更改地图的BGM](http://ooymoxvz4.bkt.clouddn.com/17-5-1/32630686-file_1493638217096_7a85.png)\n\n## Step4 绘制地图\n\n如果你准备好了 那么让我开始绘制地图\n\n![选择地图编辑模式](https://tkool.jp/assets/files/products_rpgvx_lecture_icon_map.jpg)\n\n选择地图编辑模式\n\n![在Vx版本中是这个图标](http://ooymoxvz4.bkt.clouddn.com/17-4-26/71169897-file_1493213165192_16ef4.png)\n\n选择草原来填充地图\n\n![草原填充的岛屿](http://ooymoxvz4.bkt.clouddn.com/17-5-1/36027520-file_1493638702937_14efd.png)\n\n草原填充的岛屿\n\n*在Mv的版本中最初应该是有个已经填充好的岛屿 其余的部分都没有任何素材 可以先通过将所有元素都用水来填充再使用草原来建造岛屿*\n\n最开始设计的时候可能不需要考虑十分详细的细节,下面让我们完成世界地图的图像\n\n![填充了地形的地图](http://ooymoxvz4.bkt.clouddn.com/17-5-1/77053165-file_1493638505309_17ac8.png)\n\n*官方文档的地图设计 因为素材原因等 可能不是完全的符合 用心体会就好*\n\n关于上面那几个按钮的作用 没买中文版本的简单接介绍一下 (其实就是官方的提示)\n\n![地形绘制工具](http://ooymoxvz4.bkt.clouddn.com/17-4-26/82249656-file_1493214362168_4f75.png)\n\n左起第一个是画笔 手绘画块 就是一次绘制一个所选的素材\n\n第二个是长方形(?这么随意的名字么) 绘制一个长方形的所选素材块\n\n第三个是椭圆 画个椭圆的素材快\n\n第四个泛滥填充 将素材在选中的闭合区域下填满所有\n\n最后一个是阴影笔 用于绘制阴影效果\n\n到了这个时候  我们可以看一看之前做的流程图,因为大陆是被分成了一个岛屿,所以我们要用到船或飞艇.在这个基础上我们根绝不同岛屿的定位对岛屿的细节进行下处理\n\n![优化过细节的地图](http://ooymoxvz4.bkt.clouddn.com/17-5-1/40941914-file_1493639072500_153b8.png)\n\n其实这里大概的地图分布做到了就好 不需要完全一致\n\n![将地点信息加入的地图](http://ooymoxvz4.bkt.clouddn.com/17-5-1/67713814-file_1493639307993_d908.png)\n\n## Step5 确定初始地点\n\n现在我们将世界地图绘制完成了 在运行测试一下游戏之前 我们要确定初始出现的位置\n\n![选择时间模式](http://ooymoxvz4.bkt.clouddn.com/17-4-28/60240045-file_1493385729977_a1f9.png)\n\n在工具栏中选择事件模式\n\n![确定人物的初始位置事件](http://ooymoxvz4.bkt.clouddn.com/17-5-1/20021705-file_1493639376264_c109.png)\n\n在该位置右键选择 设置初始位置 玩家\n\n![设置玩家的初始位置](http://ooymoxvz4.bkt.clouddn.com/17-5-1/87143828-file_1493639524953_5ce8.png)\n\n可以看到人物的初始位置被设置到这里了  我们可以运行一下游戏 在世界中走走  这里还没涉及到城堡和城镇的交互 在后面我们将做这些处理\n","source":"_posts/RpgMaker教程2.md","raw":"---\ntitle: RpgMaker入门教程2\ntags: [\"Rpg Maker\" ]\ncategories : \"RpgMaker 教程\"\n---\n\n>上一回的翻译过后发现好多迷之翻译 这里开始决定不再完全依靠原文 部分文本有所删减并增加大量个人经验\n\n# 第二回 游戏的蓝图\n\n这里第二回的初学者教程\n\n在第一回中我们设计了整体的流程图\n\n<!-- more -->\n\n![野生翻译的我](http://i4.buimg.com/567571/07237a5675b3175e.png)\n\n这一回中我们将继续做游戏的开发工作\n\n  试用版本可能不包含部分图片资源\n\n## Step2 创建一个新的项目\n\n现在,我们要创建一个新项目,让我们启动程序,在菜单 文件-新建项目中\n\n![新建项目的画面](http://i2.muimg.com/567571/d60e27718edbb8bf.png)\n\n文件名游戏名什么的 应该不需要解释了\n\n## Step3  制作地图前的准备\n\n让我们绘制一个野外的地图来做作为冒险的舞台,最初的世界地图的宽和高都是100(Vx版本),因为他需要展示很多的信息,初次之外我们还会制作很多30*30的详细地图\n\n在MAO001的对象中右键选择地图设置,设定地图的参数\n\n![地图设置](http://ooyk47nhk.bkt.clouddn.com/17-4-25/28050585-file_1493112311376_c429.png)\n\n![地图设置详情](http://ooymoxvz4.bkt.clouddn.com/17-5-1/52613111-file_1493638260381_5383.png)\n\n除了有地图的大小还可以设置BGM和遇敌详情\n\n**改变地图的大小**\n将地图的宽和高通过地图属性的宽度和高度设置为30\n\n**更改选择的BGM**\n通过改变BGM的设定来变更当前地图的BGN音效,选择自动切换BGM,点击下方的 … 按钮显来选择音效在这里选择Filed1的BGM音效, 在后面的章节中我会介绍出现敌人的选项\n\n![更改地图的BGM](http://ooymoxvz4.bkt.clouddn.com/17-5-1/32630686-file_1493638217096_7a85.png)\n\n## Step4 绘制地图\n\n如果你准备好了 那么让我开始绘制地图\n\n![选择地图编辑模式](https://tkool.jp/assets/files/products_rpgvx_lecture_icon_map.jpg)\n\n选择地图编辑模式\n\n![在Vx版本中是这个图标](http://ooymoxvz4.bkt.clouddn.com/17-4-26/71169897-file_1493213165192_16ef4.png)\n\n选择草原来填充地图\n\n![草原填充的岛屿](http://ooymoxvz4.bkt.clouddn.com/17-5-1/36027520-file_1493638702937_14efd.png)\n\n草原填充的岛屿\n\n*在Mv的版本中最初应该是有个已经填充好的岛屿 其余的部分都没有任何素材 可以先通过将所有元素都用水来填充再使用草原来建造岛屿*\n\n最开始设计的时候可能不需要考虑十分详细的细节,下面让我们完成世界地图的图像\n\n![填充了地形的地图](http://ooymoxvz4.bkt.clouddn.com/17-5-1/77053165-file_1493638505309_17ac8.png)\n\n*官方文档的地图设计 因为素材原因等 可能不是完全的符合 用心体会就好*\n\n关于上面那几个按钮的作用 没买中文版本的简单接介绍一下 (其实就是官方的提示)\n\n![地形绘制工具](http://ooymoxvz4.bkt.clouddn.com/17-4-26/82249656-file_1493214362168_4f75.png)\n\n左起第一个是画笔 手绘画块 就是一次绘制一个所选的素材\n\n第二个是长方形(?这么随意的名字么) 绘制一个长方形的所选素材块\n\n第三个是椭圆 画个椭圆的素材快\n\n第四个泛滥填充 将素材在选中的闭合区域下填满所有\n\n最后一个是阴影笔 用于绘制阴影效果\n\n到了这个时候  我们可以看一看之前做的流程图,因为大陆是被分成了一个岛屿,所以我们要用到船或飞艇.在这个基础上我们根绝不同岛屿的定位对岛屿的细节进行下处理\n\n![优化过细节的地图](http://ooymoxvz4.bkt.clouddn.com/17-5-1/40941914-file_1493639072500_153b8.png)\n\n其实这里大概的地图分布做到了就好 不需要完全一致\n\n![将地点信息加入的地图](http://ooymoxvz4.bkt.clouddn.com/17-5-1/67713814-file_1493639307993_d908.png)\n\n## Step5 确定初始地点\n\n现在我们将世界地图绘制完成了 在运行测试一下游戏之前 我们要确定初始出现的位置\n\n![选择时间模式](http://ooymoxvz4.bkt.clouddn.com/17-4-28/60240045-file_1493385729977_a1f9.png)\n\n在工具栏中选择事件模式\n\n![确定人物的初始位置事件](http://ooymoxvz4.bkt.clouddn.com/17-5-1/20021705-file_1493639376264_c109.png)\n\n在该位置右键选择 设置初始位置 玩家\n\n![设置玩家的初始位置](http://ooymoxvz4.bkt.clouddn.com/17-5-1/87143828-file_1493639524953_5ce8.png)\n\n可以看到人物的初始位置被设置到这里了  我们可以运行一下游戏 在世界中走走  这里还没涉及到城堡和城镇的交互 在后面我们将做这些处理\n","slug":"RpgMaker教程2","published":1,"date":"2017-04-25T06:24:28.000Z","updated":"2017-05-01T11:54:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8cwyb5x000io3xwfq39penb","content":"<blockquote>\n<p>上一回的翻译过后发现好多迷之翻译 这里开始决定不再完全依靠原文 部分文本有所删减并增加大量个人经验</p>\n</blockquote>\n<h1 id=\"第二回-游戏的蓝图\"><a href=\"#第二回-游戏的蓝图\" class=\"headerlink\" title=\"第二回 游戏的蓝图\"></a>第二回 游戏的蓝图</h1><p>这里第二回的初学者教程</p>\n<p>在第一回中我们设计了整体的流程图</p>\n<a id=\"more\"></a>\n<p><img src=\"http://i4.buimg.com/567571/07237a5675b3175e.png\" alt=\"野生翻译的我\"></p>\n<p>这一回中我们将继续做游戏的开发工作</p>\n<p>  试用版本可能不包含部分图片资源</p>\n<h2 id=\"Step2-创建一个新的项目\"><a href=\"#Step2-创建一个新的项目\" class=\"headerlink\" title=\"Step2 创建一个新的项目\"></a>Step2 创建一个新的项目</h2><p>现在,我们要创建一个新项目,让我们启动程序,在菜单 文件-新建项目中</p>\n<p><img src=\"http://i2.muimg.com/567571/d60e27718edbb8bf.png\" alt=\"新建项目的画面\"></p>\n<p>文件名游戏名什么的 应该不需要解释了</p>\n<h2 id=\"Step3-制作地图前的准备\"><a href=\"#Step3-制作地图前的准备\" class=\"headerlink\" title=\"Step3  制作地图前的准备\"></a>Step3  制作地图前的准备</h2><p>让我们绘制一个野外的地图来做作为冒险的舞台,最初的世界地图的宽和高都是100(Vx版本),因为他需要展示很多的信息,初次之外我们还会制作很多30*30的详细地图</p>\n<p>在MAO001的对象中右键选择地图设置,设定地图的参数</p>\n<p><img src=\"http://ooyk47nhk.bkt.clouddn.com/17-4-25/28050585-file_1493112311376_c429.png\" alt=\"地图设置\"></p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/52613111-file_1493638260381_5383.png\" alt=\"地图设置详情\"></p>\n<p>除了有地图的大小还可以设置BGM和遇敌详情</p>\n<p><strong>改变地图的大小</strong><br>将地图的宽和高通过地图属性的宽度和高度设置为30</p>\n<p><strong>更改选择的BGM</strong><br>通过改变BGM的设定来变更当前地图的BGN音效,选择自动切换BGM,点击下方的 … 按钮显来选择音效在这里选择Filed1的BGM音效, 在后面的章节中我会介绍出现敌人的选项</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/32630686-file_1493638217096_7a85.png\" alt=\"更改地图的BGM\"></p>\n<h2 id=\"Step4-绘制地图\"><a href=\"#Step4-绘制地图\" class=\"headerlink\" title=\"Step4 绘制地图\"></a>Step4 绘制地图</h2><p>如果你准备好了 那么让我开始绘制地图</p>\n<p><img src=\"https://tkool.jp/assets/files/products_rpgvx_lecture_icon_map.jpg\" alt=\"选择地图编辑模式\"></p>\n<p>选择地图编辑模式</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-4-26/71169897-file_1493213165192_16ef4.png\" alt=\"在Vx版本中是这个图标\"></p>\n<p>选择草原来填充地图</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/36027520-file_1493638702937_14efd.png\" alt=\"草原填充的岛屿\"></p>\n<p>草原填充的岛屿</p>\n<p><em>在Mv的版本中最初应该是有个已经填充好的岛屿 其余的部分都没有任何素材 可以先通过将所有元素都用水来填充再使用草原来建造岛屿</em></p>\n<p>最开始设计的时候可能不需要考虑十分详细的细节,下面让我们完成世界地图的图像</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/77053165-file_1493638505309_17ac8.png\" alt=\"填充了地形的地图\"></p>\n<p><em>官方文档的地图设计 因为素材原因等 可能不是完全的符合 用心体会就好</em></p>\n<p>关于上面那几个按钮的作用 没买中文版本的简单接介绍一下 (其实就是官方的提示)</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-4-26/82249656-file_1493214362168_4f75.png\" alt=\"地形绘制工具\"></p>\n<p>左起第一个是画笔 手绘画块 就是一次绘制一个所选的素材</p>\n<p>第二个是长方形(?这么随意的名字么) 绘制一个长方形的所选素材块</p>\n<p>第三个是椭圆 画个椭圆的素材快</p>\n<p>第四个泛滥填充 将素材在选中的闭合区域下填满所有</p>\n<p>最后一个是阴影笔 用于绘制阴影效果</p>\n<p>到了这个时候  我们可以看一看之前做的流程图,因为大陆是被分成了一个岛屿,所以我们要用到船或飞艇.在这个基础上我们根绝不同岛屿的定位对岛屿的细节进行下处理</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/40941914-file_1493639072500_153b8.png\" alt=\"优化过细节的地图\"></p>\n<p>其实这里大概的地图分布做到了就好 不需要完全一致</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/67713814-file_1493639307993_d908.png\" alt=\"将地点信息加入的地图\"></p>\n<h2 id=\"Step5-确定初始地点\"><a href=\"#Step5-确定初始地点\" class=\"headerlink\" title=\"Step5 确定初始地点\"></a>Step5 确定初始地点</h2><p>现在我们将世界地图绘制完成了 在运行测试一下游戏之前 我们要确定初始出现的位置</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-4-28/60240045-file_1493385729977_a1f9.png\" alt=\"选择时间模式\"></p>\n<p>在工具栏中选择事件模式</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/20021705-file_1493639376264_c109.png\" alt=\"确定人物的初始位置事件\"></p>\n<p>在该位置右键选择 设置初始位置 玩家</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/87143828-file_1493639524953_5ce8.png\" alt=\"设置玩家的初始位置\"></p>\n<p>可以看到人物的初始位置被设置到这里了  我们可以运行一下游戏 在世界中走走  这里还没涉及到城堡和城镇的交互 在后面我们将做这些处理</p>\n","excerpt":"<blockquote>\n<p>上一回的翻译过后发现好多迷之翻译 这里开始决定不再完全依靠原文 部分文本有所删减并增加大量个人经验</p>\n</blockquote>\n<h1 id=\"第二回-游戏的蓝图\"><a href=\"#第二回-游戏的蓝图\" class=\"headerlink\" title=\"第二回 游戏的蓝图\"></a>第二回 游戏的蓝图</h1><p>这里第二回的初学者教程</p>\n<p>在第一回中我们设计了整体的流程图</p>","more":"<p><img src=\"http://i4.buimg.com/567571/07237a5675b3175e.png\" alt=\"野生翻译的我\"></p>\n<p>这一回中我们将继续做游戏的开发工作</p>\n<p>  试用版本可能不包含部分图片资源</p>\n<h2 id=\"Step2-创建一个新的项目\"><a href=\"#Step2-创建一个新的项目\" class=\"headerlink\" title=\"Step2 创建一个新的项目\"></a>Step2 创建一个新的项目</h2><p>现在,我们要创建一个新项目,让我们启动程序,在菜单 文件-新建项目中</p>\n<p><img src=\"http://i2.muimg.com/567571/d60e27718edbb8bf.png\" alt=\"新建项目的画面\"></p>\n<p>文件名游戏名什么的 应该不需要解释了</p>\n<h2 id=\"Step3-制作地图前的准备\"><a href=\"#Step3-制作地图前的准备\" class=\"headerlink\" title=\"Step3  制作地图前的准备\"></a>Step3  制作地图前的准备</h2><p>让我们绘制一个野外的地图来做作为冒险的舞台,最初的世界地图的宽和高都是100(Vx版本),因为他需要展示很多的信息,初次之外我们还会制作很多30*30的详细地图</p>\n<p>在MAO001的对象中右键选择地图设置,设定地图的参数</p>\n<p><img src=\"http://ooyk47nhk.bkt.clouddn.com/17-4-25/28050585-file_1493112311376_c429.png\" alt=\"地图设置\"></p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/52613111-file_1493638260381_5383.png\" alt=\"地图设置详情\"></p>\n<p>除了有地图的大小还可以设置BGM和遇敌详情</p>\n<p><strong>改变地图的大小</strong><br>将地图的宽和高通过地图属性的宽度和高度设置为30</p>\n<p><strong>更改选择的BGM</strong><br>通过改变BGM的设定来变更当前地图的BGN音效,选择自动切换BGM,点击下方的 … 按钮显来选择音效在这里选择Filed1的BGM音效, 在后面的章节中我会介绍出现敌人的选项</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/32630686-file_1493638217096_7a85.png\" alt=\"更改地图的BGM\"></p>\n<h2 id=\"Step4-绘制地图\"><a href=\"#Step4-绘制地图\" class=\"headerlink\" title=\"Step4 绘制地图\"></a>Step4 绘制地图</h2><p>如果你准备好了 那么让我开始绘制地图</p>\n<p><img src=\"https://tkool.jp/assets/files/products_rpgvx_lecture_icon_map.jpg\" alt=\"选择地图编辑模式\"></p>\n<p>选择地图编辑模式</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-4-26/71169897-file_1493213165192_16ef4.png\" alt=\"在Vx版本中是这个图标\"></p>\n<p>选择草原来填充地图</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/36027520-file_1493638702937_14efd.png\" alt=\"草原填充的岛屿\"></p>\n<p>草原填充的岛屿</p>\n<p><em>在Mv的版本中最初应该是有个已经填充好的岛屿 其余的部分都没有任何素材 可以先通过将所有元素都用水来填充再使用草原来建造岛屿</em></p>\n<p>最开始设计的时候可能不需要考虑十分详细的细节,下面让我们完成世界地图的图像</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/77053165-file_1493638505309_17ac8.png\" alt=\"填充了地形的地图\"></p>\n<p><em>官方文档的地图设计 因为素材原因等 可能不是完全的符合 用心体会就好</em></p>\n<p>关于上面那几个按钮的作用 没买中文版本的简单接介绍一下 (其实就是官方的提示)</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-4-26/82249656-file_1493214362168_4f75.png\" alt=\"地形绘制工具\"></p>\n<p>左起第一个是画笔 手绘画块 就是一次绘制一个所选的素材</p>\n<p>第二个是长方形(?这么随意的名字么) 绘制一个长方形的所选素材块</p>\n<p>第三个是椭圆 画个椭圆的素材快</p>\n<p>第四个泛滥填充 将素材在选中的闭合区域下填满所有</p>\n<p>最后一个是阴影笔 用于绘制阴影效果</p>\n<p>到了这个时候  我们可以看一看之前做的流程图,因为大陆是被分成了一个岛屿,所以我们要用到船或飞艇.在这个基础上我们根绝不同岛屿的定位对岛屿的细节进行下处理</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/40941914-file_1493639072500_153b8.png\" alt=\"优化过细节的地图\"></p>\n<p>其实这里大概的地图分布做到了就好 不需要完全一致</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/67713814-file_1493639307993_d908.png\" alt=\"将地点信息加入的地图\"></p>\n<h2 id=\"Step5-确定初始地点\"><a href=\"#Step5-确定初始地点\" class=\"headerlink\" title=\"Step5 确定初始地点\"></a>Step5 确定初始地点</h2><p>现在我们将世界地图绘制完成了 在运行测试一下游戏之前 我们要确定初始出现的位置</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-4-28/60240045-file_1493385729977_a1f9.png\" alt=\"选择时间模式\"></p>\n<p>在工具栏中选择事件模式</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/20021705-file_1493639376264_c109.png\" alt=\"确定人物的初始位置事件\"></p>\n<p>在该位置右键选择 设置初始位置 玩家</p>\n<p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-1/87143828-file_1493639524953_5ce8.png\" alt=\"设置玩家的初始位置\"></p>\n<p>可以看到人物的初始位置被设置到这里了  我们可以运行一下游戏 在世界中走走  这里还没涉及到城堡和城镇的交互 在后面我们将做这些处理</p>"},{"title":"Android自定义View之仪表盘","date":"2017-08-10T14:33:13.000Z","_content":"\n# Android自定义View之仪表盘\n\n>又是新系列（坑） 感觉都很零碎，能积累一些是一些了\n\n## 背景\n随着项目开发 越来越多的需求被摆在面前 其中不免涉及到定制的功能\n其中仪表盘也是一个很常用的功能\n<!-- more -->\n\n## 效果图\n![效果图](http://ooymoxvz4.bkt.clouddn.com/17-8-20/25082465.jpg)\n\n## 设计过程\n### 外侧渐变圆环\n![外侧圆环效果](http://ooymoxvz4.bkt.clouddn.com/17-8-20/78850293.jpg)\n### 外侧刻度盘及文字显示\n![外侧刻度盘及文字显示](http://ooymoxvz4.bkt.clouddn.com/17-8-20/30532330.jpg)\n### 指针显示\n![指针显示](http://ooymoxvz4.bkt.clouddn.com/17-8-20/72116334.jpg)\n### 内部圆环及文字展示\n![内部圆环及文字展示](http://ooymoxvz4.bkt.clouddn.com/17-8-20/81417498.jpg)\n\n## 代码实现\n### 自定义组件显示优化\n\n设置自定义组件的时候要优化组件的高度\n\n```java\n  protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n      int width = MeasureSpec.getSize(widthMeasureSpec);\n      int heitht = width / 2 / 4 * 5;\n      initIndex(width / 2);\n      //优化组件高度\n      setMeasuredDimension(width, heitht);\n  }\n```\n\n### onDraw()过程\n\n```java\n  protected void onDraw(Canvas canvas) {\n      //禁用硬件加速\n      setLayerType(LAYER_TYPE_SOFTWARE, null);\n      //外侧颜色指示圆环\n      initRing(canvas);\n      //刻度文字\n      initScale(canvas);\n      //指针\n      initPointer(canvas);\n      //提示内容\n      initText(canvas);\n  }\n```\n\n主要还是这个四个绘制的过程\n\n## 外侧颜色指示圆环\n1. 首先绘制的前一部分的红黄渐变圆环\n这个圆环并不是一个180度的圆环 而是一个两百度的圆环 下侧再实现水平的效果\n2. 绘制后一部分的绿色渐变圆环\n3. 修正底部的效果 修改成水平的效果\n4. 绘制内部半圆 遮盖住渐变的半圆\n\n```java\nprivate void initRing(Canvas canvas) {\n    paint.setAntiAlias(true);\n    paint.setStrokeWidth(2);\n    canvas.save();\n    //canvas中心移动到中间\n    canvas.translate(canvas.getWidth()/2, r);\n\n\n    //前100红黄渐变圆环\n    paint.setStyle(Paint.Style.FILL);\n    //设置渐变的颜色范围\n    int[] colors = {Color.parseColor(\"#F95A37\"), Color.parseColor(\"#f9cf45\")};\n    //设置的渐变起止位置\n    float[] positions = {0.5f - 10f/180f * 0.5f, 0.5f + 0.5f * 5f / 6f};\n    //设置渐变的蒙版\n    SweepGradient sweepGradient = new SweepGradient(0, 0, colors, positions);\n    paint.setShader(sweepGradient);\n    rect = new RectF( -length, -length, length, length);\n    //绘制圆环\n    canvas.drawArc(rect, 170, 10f + 180f / 6f * 5f, true, paint);\n\n\n\n    //100之后绿色渐变圆环\n    paint.setStyle(Paint.Style.FILL);\n    canvas.rotate(10,0f,0f);\n    int[] colors2 = {Color.parseColor(\"#79D062\"),  Color.parseColor(\"#3FBF55\")};\n    float[] positions2 = {0.5f + 0.5f * ( 144f / 180f), 1.0f};\n    sweepGradient = new SweepGradient(0, 0, colors2, positions2);\n    paint.setShader(sweepGradient);\n    rect = new RectF( -length, -length, length, length);\n    canvas.drawArc(rect, 180f + 180f * (140f / 180f), 180f / 6 + 10, true, paint);\n\n\n\n    canvas.restore();\n    canvas.save();\n    canvas.translate(canvas.getWidth()/2, r);\n\n    //绘制描边效果的画笔\n    strokePain = new Paint(paint);\n    strokePain.setColor(0x3f979797);\n    strokePain.setStrokeWidth(10);\n    strokePain.setShader(null);\n    strokePain.setStyle(Paint.Style.STROKE);\n    canvas.drawArc(rect, 170, 200, true, strokePain);\n\n\n\n    canvas.restore();\n    canvas.save();\n    canvas.translate(canvas.getWidth()/2, r);\n\n    //底边水平\n    paint.setShader(null);\n    paint.setColor(backGroundColor);\n    paint.setStyle(Paint.Style.FILL);\n    canvas.drawRect(-length  , (float) (Math.sin(Math.toRadians(10) ) * length /3f * 2f), length  ,  (float) (Math.sin(Math.toRadians(10)) * length  + 100) , paint);\n    canvas.drawRect(-length  , (float) (Math.sin(Math.toRadians(10) ) * length /3f * 2f), length  ,  (float) (Math.sin(Math.toRadians(10) ) * length /3f * 2f) , strokePain);\n\n\n    //内部背景色填充\n    paint.setColor(backGroundColor);\n    paint.setShader(null);\n    rect = new RectF( - (length - length / 3f  - 2), -(length / 3f * 2f - 2), length - length / 3f -2 , length / 3f * 2f - 2);\n    canvas.drawArc(rect, 170, 200, true, strokePain);\n    canvas.drawArc(rect, 0, 360, true, paint);\n\n\n\n}\n```\n\n## 外侧刻度盘及文字显示\n旋转画布绘制对应角度的显示及刻度\n\n```java\n  private void initScale(Canvas canvas) {\n      canvas.restore();\n      canvas.save();\n      canvas.translate(canvas.getWidth()/2, r);\n      paint.setColor(Color.parseColor(\"#999999\"));\n\n      tmpPaint = new Paint(paint); //刻度画笔对象\n      tmpPaint.setStrokeWidth(1);\n      tmpPaint.setTextSize(35);\n      tmpPaint.setTextAlign(Paint.Align.CENTER);\n\n      canvas.rotate(-90,0f,0f);\n\n      float  y = length;\n      y = - y;\n      int count = 12; //总刻度数\n      paint.setColor(backGroundColor);\n\n      float tempRou = 180 / 12f;\n      //每次旋转的角度\n      paint.setColor(Color.WHITE);\n      paint.setStrokeWidth(5);\n\n      //绘制刻度和百分比\n      for (int i = 0 ; i <= count ; i++){\n          if (i % 2 == 0 ) {\n              canvas.drawText(String.valueOf((i) * 10), 0, y - 20f, tmpPaint);\n          }\n          canvas.drawLine(0f, y , 0, y + length / 15, paint);\n          canvas.rotate(tempRou,0f,0f);\n      }\n\n  }\n```\n\n## 指针显示\n\n指针显示的比较简单也是唯二需要变化的之一\n\n指针的绘制比较简单 根据传入的角度(百分比)旋转对应的角度 填充绘制一个三角形\n\n```java\n  private void initPointer(Canvas canvas) {\n      paint.setColor(Color.BLACK);\n\n\n      canvas.restore();\n      canvas.save();\n      canvas.translate(canvas.getWidth()/2, r);\n      float change;\n\n      if (perPoint < 1 ){\n          change = perPoint * 180;\n      }else {\n          change = 180;\n      }\n\n      //根据参数得到旋转角度\n      canvas.rotate(-90 + change,0f,0f);\n\n      //绘制三角形形成指针\n      Path path = new Path();\n      path.moveTo(0 , pointLength);\n      path.lineTo(-10 , 0);\n      path.lineTo(10,0);\n      path.lineTo(0 , pointLength);\n      path.close();\n\n      canvas.drawPath(path, paint);\n\n  }\n```\n\n## 内部圆环及文字展示\n\n先绘制一个带阴影的圆环 再居中绘制提示的文本信息\n\n```java\n  private void initText(Canvas canvas) {\n      //抗锯齿\n      canvas.setDrawFilter(new PaintFlagsDrawFilter(0, Paint.ANTI_ALIAS_FLAG|Paint.FILTER_BITMAP_FLAG));\n      canvas.restore();\n      canvas.save();\n      canvas.translate(canvas.getWidth()/2, r);\n\n      float rIndex = length ;\n\n      //设置文字展示的圆环\n      paint.setColor(Color.parseColor(\"#eeeeee\"));\n      paint.setShader(null);\n      paint.setShadowLayer(5, 0, 0, 0x54000000);\n      rect = new RectF( - (rIndex/ 3 ), - (rIndex / 3), rIndex / 3, rIndex / 3);\n      canvas.drawArc(rect, 0, 360, true, paint);\n\n      paint.clearShadowLayer();\n\n      canvas.restore();\n      canvas.save();\n      canvas.translate(canvas.getWidth()/2f , r);\n\n\n      textPaint.setStrokeWidth(1);\n      textPaint.setAntiAlias(true);\n\n      textPaint.setTextSize(60);\n      textPaint.setColor(Color.parseColor(\"#fc6555\"));\n      textPaint.setTextAlign(Paint.Align.RIGHT);\n\n\n      //判断指数变化及颜色设定\n      int _per = (int) (per * 120);\n\n      if (_per < 60){\n          textPaint.setColor(Color.parseColor(\"#ff6450\"));\n      }else if (_per < 100) {\n          textPaint.setColor(Color.parseColor(\"#f5a623\"));\n      }else {\n          textPaint.setColor(Color.parseColor(\"#79d062\"));\n      }\n\n      float swidth = textPaint.measureText(String.valueOf(_per));\n      //计算偏移量 是的数字和百分号整体居中显示\n      swidth =   (swidth - (swidth + 22) / 2);\n\n\n      canvas.translate( swidth , 0);\n      canvas.drawText(\"\" + _per, 0, 0, textPaint);\n\n      textPaint.setTextSize(30);\n      textPaint.setTextAlign(Paint.Align.LEFT);\n\n      canvas.drawText(\"%\" , 0, 0, textPaint);\n      textPaint.setTextAlign(Paint.Align.CENTER);\n      textPaint.setColor(Color.parseColor(\"#999999\"));\n\n\n      canvas.restore();\n      canvas.save();\n      canvas.translate(canvas.getWidth()/2  , r + length / 3 /2 );\n      canvas.drawText(\"完成率\" , 0, 0, textPaint);\n\n  }\n```\n\n## 更新动画\n使用ValueAnimator实现指针的转动动画效果\n\n```java\n  public void cgangePer(float per ){\n      this.perOld = this.per;\n      this.per = per;\n      ValueAnimator va =  ValueAnimator.ofFloat(perOld,per);\n      va.setDuration(1000);\n      va.setInterpolator(new OvershootInterpolator());\n      va.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n          @Override\n          public void onAnimationUpdate(ValueAnimator animation) {\n              perPoint = (float) animation.getAnimatedValue();\n              invalidate();\n          }\n      });\n      va.start();\n\n  }\n```\n\n这个仪表盘的实现就完成了  具体的代码可以查看[我的github](https://github.com/clwater/AndroidDashBoard.git)\n","source":"_posts/android自定义View之仪表盘.md","raw":"---\ntitle: Android自定义View之仪表盘\ndate: 2017-08-10 22:33:13\ntags: [\"android\" , \"view\" , \"自定义\"]\ncategories : \"Android自定义View\"\n---\n\n# Android自定义View之仪表盘\n\n>又是新系列（坑） 感觉都很零碎，能积累一些是一些了\n\n## 背景\n随着项目开发 越来越多的需求被摆在面前 其中不免涉及到定制的功能\n其中仪表盘也是一个很常用的功能\n<!-- more -->\n\n## 效果图\n![效果图](http://ooymoxvz4.bkt.clouddn.com/17-8-20/25082465.jpg)\n\n## 设计过程\n### 外侧渐变圆环\n![外侧圆环效果](http://ooymoxvz4.bkt.clouddn.com/17-8-20/78850293.jpg)\n### 外侧刻度盘及文字显示\n![外侧刻度盘及文字显示](http://ooymoxvz4.bkt.clouddn.com/17-8-20/30532330.jpg)\n### 指针显示\n![指针显示](http://ooymoxvz4.bkt.clouddn.com/17-8-20/72116334.jpg)\n### 内部圆环及文字展示\n![内部圆环及文字展示](http://ooymoxvz4.bkt.clouddn.com/17-8-20/81417498.jpg)\n\n## 代码实现\n### 自定义组件显示优化\n\n设置自定义组件的时候要优化组件的高度\n\n```java\n  protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n      int width = MeasureSpec.getSize(widthMeasureSpec);\n      int heitht = width / 2 / 4 * 5;\n      initIndex(width / 2);\n      //优化组件高度\n      setMeasuredDimension(width, heitht);\n  }\n```\n\n### onDraw()过程\n\n```java\n  protected void onDraw(Canvas canvas) {\n      //禁用硬件加速\n      setLayerType(LAYER_TYPE_SOFTWARE, null);\n      //外侧颜色指示圆环\n      initRing(canvas);\n      //刻度文字\n      initScale(canvas);\n      //指针\n      initPointer(canvas);\n      //提示内容\n      initText(canvas);\n  }\n```\n\n主要还是这个四个绘制的过程\n\n## 外侧颜色指示圆环\n1. 首先绘制的前一部分的红黄渐变圆环\n这个圆环并不是一个180度的圆环 而是一个两百度的圆环 下侧再实现水平的效果\n2. 绘制后一部分的绿色渐变圆环\n3. 修正底部的效果 修改成水平的效果\n4. 绘制内部半圆 遮盖住渐变的半圆\n\n```java\nprivate void initRing(Canvas canvas) {\n    paint.setAntiAlias(true);\n    paint.setStrokeWidth(2);\n    canvas.save();\n    //canvas中心移动到中间\n    canvas.translate(canvas.getWidth()/2, r);\n\n\n    //前100红黄渐变圆环\n    paint.setStyle(Paint.Style.FILL);\n    //设置渐变的颜色范围\n    int[] colors = {Color.parseColor(\"#F95A37\"), Color.parseColor(\"#f9cf45\")};\n    //设置的渐变起止位置\n    float[] positions = {0.5f - 10f/180f * 0.5f, 0.5f + 0.5f * 5f / 6f};\n    //设置渐变的蒙版\n    SweepGradient sweepGradient = new SweepGradient(0, 0, colors, positions);\n    paint.setShader(sweepGradient);\n    rect = new RectF( -length, -length, length, length);\n    //绘制圆环\n    canvas.drawArc(rect, 170, 10f + 180f / 6f * 5f, true, paint);\n\n\n\n    //100之后绿色渐变圆环\n    paint.setStyle(Paint.Style.FILL);\n    canvas.rotate(10,0f,0f);\n    int[] colors2 = {Color.parseColor(\"#79D062\"),  Color.parseColor(\"#3FBF55\")};\n    float[] positions2 = {0.5f + 0.5f * ( 144f / 180f), 1.0f};\n    sweepGradient = new SweepGradient(0, 0, colors2, positions2);\n    paint.setShader(sweepGradient);\n    rect = new RectF( -length, -length, length, length);\n    canvas.drawArc(rect, 180f + 180f * (140f / 180f), 180f / 6 + 10, true, paint);\n\n\n\n    canvas.restore();\n    canvas.save();\n    canvas.translate(canvas.getWidth()/2, r);\n\n    //绘制描边效果的画笔\n    strokePain = new Paint(paint);\n    strokePain.setColor(0x3f979797);\n    strokePain.setStrokeWidth(10);\n    strokePain.setShader(null);\n    strokePain.setStyle(Paint.Style.STROKE);\n    canvas.drawArc(rect, 170, 200, true, strokePain);\n\n\n\n    canvas.restore();\n    canvas.save();\n    canvas.translate(canvas.getWidth()/2, r);\n\n    //底边水平\n    paint.setShader(null);\n    paint.setColor(backGroundColor);\n    paint.setStyle(Paint.Style.FILL);\n    canvas.drawRect(-length  , (float) (Math.sin(Math.toRadians(10) ) * length /3f * 2f), length  ,  (float) (Math.sin(Math.toRadians(10)) * length  + 100) , paint);\n    canvas.drawRect(-length  , (float) (Math.sin(Math.toRadians(10) ) * length /3f * 2f), length  ,  (float) (Math.sin(Math.toRadians(10) ) * length /3f * 2f) , strokePain);\n\n\n    //内部背景色填充\n    paint.setColor(backGroundColor);\n    paint.setShader(null);\n    rect = new RectF( - (length - length / 3f  - 2), -(length / 3f * 2f - 2), length - length / 3f -2 , length / 3f * 2f - 2);\n    canvas.drawArc(rect, 170, 200, true, strokePain);\n    canvas.drawArc(rect, 0, 360, true, paint);\n\n\n\n}\n```\n\n## 外侧刻度盘及文字显示\n旋转画布绘制对应角度的显示及刻度\n\n```java\n  private void initScale(Canvas canvas) {\n      canvas.restore();\n      canvas.save();\n      canvas.translate(canvas.getWidth()/2, r);\n      paint.setColor(Color.parseColor(\"#999999\"));\n\n      tmpPaint = new Paint(paint); //刻度画笔对象\n      tmpPaint.setStrokeWidth(1);\n      tmpPaint.setTextSize(35);\n      tmpPaint.setTextAlign(Paint.Align.CENTER);\n\n      canvas.rotate(-90,0f,0f);\n\n      float  y = length;\n      y = - y;\n      int count = 12; //总刻度数\n      paint.setColor(backGroundColor);\n\n      float tempRou = 180 / 12f;\n      //每次旋转的角度\n      paint.setColor(Color.WHITE);\n      paint.setStrokeWidth(5);\n\n      //绘制刻度和百分比\n      for (int i = 0 ; i <= count ; i++){\n          if (i % 2 == 0 ) {\n              canvas.drawText(String.valueOf((i) * 10), 0, y - 20f, tmpPaint);\n          }\n          canvas.drawLine(0f, y , 0, y + length / 15, paint);\n          canvas.rotate(tempRou,0f,0f);\n      }\n\n  }\n```\n\n## 指针显示\n\n指针显示的比较简单也是唯二需要变化的之一\n\n指针的绘制比较简单 根据传入的角度(百分比)旋转对应的角度 填充绘制一个三角形\n\n```java\n  private void initPointer(Canvas canvas) {\n      paint.setColor(Color.BLACK);\n\n\n      canvas.restore();\n      canvas.save();\n      canvas.translate(canvas.getWidth()/2, r);\n      float change;\n\n      if (perPoint < 1 ){\n          change = perPoint * 180;\n      }else {\n          change = 180;\n      }\n\n      //根据参数得到旋转角度\n      canvas.rotate(-90 + change,0f,0f);\n\n      //绘制三角形形成指针\n      Path path = new Path();\n      path.moveTo(0 , pointLength);\n      path.lineTo(-10 , 0);\n      path.lineTo(10,0);\n      path.lineTo(0 , pointLength);\n      path.close();\n\n      canvas.drawPath(path, paint);\n\n  }\n```\n\n## 内部圆环及文字展示\n\n先绘制一个带阴影的圆环 再居中绘制提示的文本信息\n\n```java\n  private void initText(Canvas canvas) {\n      //抗锯齿\n      canvas.setDrawFilter(new PaintFlagsDrawFilter(0, Paint.ANTI_ALIAS_FLAG|Paint.FILTER_BITMAP_FLAG));\n      canvas.restore();\n      canvas.save();\n      canvas.translate(canvas.getWidth()/2, r);\n\n      float rIndex = length ;\n\n      //设置文字展示的圆环\n      paint.setColor(Color.parseColor(\"#eeeeee\"));\n      paint.setShader(null);\n      paint.setShadowLayer(5, 0, 0, 0x54000000);\n      rect = new RectF( - (rIndex/ 3 ), - (rIndex / 3), rIndex / 3, rIndex / 3);\n      canvas.drawArc(rect, 0, 360, true, paint);\n\n      paint.clearShadowLayer();\n\n      canvas.restore();\n      canvas.save();\n      canvas.translate(canvas.getWidth()/2f , r);\n\n\n      textPaint.setStrokeWidth(1);\n      textPaint.setAntiAlias(true);\n\n      textPaint.setTextSize(60);\n      textPaint.setColor(Color.parseColor(\"#fc6555\"));\n      textPaint.setTextAlign(Paint.Align.RIGHT);\n\n\n      //判断指数变化及颜色设定\n      int _per = (int) (per * 120);\n\n      if (_per < 60){\n          textPaint.setColor(Color.parseColor(\"#ff6450\"));\n      }else if (_per < 100) {\n          textPaint.setColor(Color.parseColor(\"#f5a623\"));\n      }else {\n          textPaint.setColor(Color.parseColor(\"#79d062\"));\n      }\n\n      float swidth = textPaint.measureText(String.valueOf(_per));\n      //计算偏移量 是的数字和百分号整体居中显示\n      swidth =   (swidth - (swidth + 22) / 2);\n\n\n      canvas.translate( swidth , 0);\n      canvas.drawText(\"\" + _per, 0, 0, textPaint);\n\n      textPaint.setTextSize(30);\n      textPaint.setTextAlign(Paint.Align.LEFT);\n\n      canvas.drawText(\"%\" , 0, 0, textPaint);\n      textPaint.setTextAlign(Paint.Align.CENTER);\n      textPaint.setColor(Color.parseColor(\"#999999\"));\n\n\n      canvas.restore();\n      canvas.save();\n      canvas.translate(canvas.getWidth()/2  , r + length / 3 /2 );\n      canvas.drawText(\"完成率\" , 0, 0, textPaint);\n\n  }\n```\n\n## 更新动画\n使用ValueAnimator实现指针的转动动画效果\n\n```java\n  public void cgangePer(float per ){\n      this.perOld = this.per;\n      this.per = per;\n      ValueAnimator va =  ValueAnimator.ofFloat(perOld,per);\n      va.setDuration(1000);\n      va.setInterpolator(new OvershootInterpolator());\n      va.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n          @Override\n          public void onAnimationUpdate(ValueAnimator animation) {\n              perPoint = (float) animation.getAnimatedValue();\n              invalidate();\n          }\n      });\n      va.start();\n\n  }\n```\n\n这个仪表盘的实现就完成了  具体的代码可以查看[我的github](https://github.com/clwater/AndroidDashBoard.git)\n","slug":"android自定义View之仪表盘","published":1,"updated":"2017-08-31T15:00:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8cwyb5z000ko3xw1gjexriz","content":"<h1 id=\"Android自定义View之仪表盘\"><a href=\"#Android自定义View之仪表盘\" class=\"headerlink\" title=\"Android自定义View之仪表盘\"></a>Android自定义View之仪表盘</h1><blockquote>\n<p>又是新系列（坑） 感觉都很零碎，能积累一些是一些了</p>\n</blockquote>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>随着项目开发 越来越多的需求被摆在面前 其中不免涉及到定制的功能<br>其中仪表盘也是一个很常用的功能<br><a id=\"more\"></a></p>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-8-20/25082465.jpg\" alt=\"效果图\"></p>\n<h2 id=\"设计过程\"><a href=\"#设计过程\" class=\"headerlink\" title=\"设计过程\"></a>设计过程</h2><h3 id=\"外侧渐变圆环\"><a href=\"#外侧渐变圆环\" class=\"headerlink\" title=\"外侧渐变圆环\"></a>外侧渐变圆环</h3><p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-8-20/78850293.jpg\" alt=\"外侧圆环效果\"></p>\n<h3 id=\"外侧刻度盘及文字显示\"><a href=\"#外侧刻度盘及文字显示\" class=\"headerlink\" title=\"外侧刻度盘及文字显示\"></a>外侧刻度盘及文字显示</h3><p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-8-20/30532330.jpg\" alt=\"外侧刻度盘及文字显示\"></p>\n<h3 id=\"指针显示\"><a href=\"#指针显示\" class=\"headerlink\" title=\"指针显示\"></a>指针显示</h3><p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-8-20/72116334.jpg\" alt=\"指针显示\"></p>\n<h3 id=\"内部圆环及文字展示\"><a href=\"#内部圆环及文字展示\" class=\"headerlink\" title=\"内部圆环及文字展示\"></a>内部圆环及文字展示</h3><p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-8-20/81417498.jpg\" alt=\"内部圆环及文字展示\"></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"自定义组件显示优化\"><a href=\"#自定义组件显示优化\" class=\"headerlink\" title=\"自定义组件显示优化\"></a>自定义组件显示优化</h3><p>设置自定义组件的时候要优化组件的高度</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> width = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heitht = width / <span class=\"number\">2</span> / <span class=\"number\">4</span> * <span class=\"number\">5</span>;</div><div class=\"line\">    initIndex(width / <span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"comment\">//优化组件高度</span></div><div class=\"line\">    setMeasuredDimension(width, heitht);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"onDraw-过程\"><a href=\"#onDraw-过程\" class=\"headerlink\" title=\"onDraw()过程\"></a>onDraw()过程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//禁用硬件加速</span></div><div class=\"line\">    setLayerType(LAYER_TYPE_SOFTWARE, <span class=\"keyword\">null</span>);</div><div class=\"line\">    <span class=\"comment\">//外侧颜色指示圆环</span></div><div class=\"line\">    initRing(canvas);</div><div class=\"line\">    <span class=\"comment\">//刻度文字</span></div><div class=\"line\">    initScale(canvas);</div><div class=\"line\">    <span class=\"comment\">//指针</span></div><div class=\"line\">    initPointer(canvas);</div><div class=\"line\">    <span class=\"comment\">//提示内容</span></div><div class=\"line\">    initText(canvas);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主要还是这个四个绘制的过程</p>\n<h2 id=\"外侧颜色指示圆环\"><a href=\"#外侧颜色指示圆环\" class=\"headerlink\" title=\"外侧颜色指示圆环\"></a>外侧颜色指示圆环</h2><ol>\n<li>首先绘制的前一部分的红黄渐变圆环<br>这个圆环并不是一个180度的圆环 而是一个两百度的圆环 下侧再实现水平的效果</li>\n<li>绘制后一部分的绿色渐变圆环</li>\n<li>修正底部的效果 修改成水平的效果</li>\n<li>绘制内部半圆 遮盖住渐变的半圆</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initRing</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    paint.setAntiAlias(<span class=\"keyword\">true</span>);</div><div class=\"line\">    paint.setStrokeWidth(<span class=\"number\">2</span>);</div><div class=\"line\">    canvas.save();</div><div class=\"line\">    <span class=\"comment\">//canvas中心移动到中间</span></div><div class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//前100红黄渐变圆环</span></div><div class=\"line\">    paint.setStyle(Paint.Style.FILL);</div><div class=\"line\">    <span class=\"comment\">//设置渐变的颜色范围</span></div><div class=\"line\">    <span class=\"keyword\">int</span>[] colors = &#123;Color.parseColor(<span class=\"string\">\"#F95A37\"</span>), Color.parseColor(<span class=\"string\">\"#f9cf45\"</span>)&#125;;</div><div class=\"line\">    <span class=\"comment\">//设置的渐变起止位置</span></div><div class=\"line\">    <span class=\"keyword\">float</span>[] positions = &#123;<span class=\"number\">0.5f</span> - <span class=\"number\">10f</span>/<span class=\"number\">180f</span> * <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span> + <span class=\"number\">0.5f</span> * <span class=\"number\">5f</span> / <span class=\"number\">6f</span>&#125;;</div><div class=\"line\">    <span class=\"comment\">//设置渐变的蒙版</span></div><div class=\"line\">    SweepGradient sweepGradient = <span class=\"keyword\">new</span> SweepGradient(<span class=\"number\">0</span>, <span class=\"number\">0</span>, colors, positions);</div><div class=\"line\">    paint.setShader(sweepGradient);</div><div class=\"line\">    rect = <span class=\"keyword\">new</span> RectF( -length, -length, length, length);</div><div class=\"line\">    <span class=\"comment\">//绘制圆环</span></div><div class=\"line\">    canvas.drawArc(rect, <span class=\"number\">170</span>, <span class=\"number\">10f</span> + <span class=\"number\">180f</span> / <span class=\"number\">6f</span> * <span class=\"number\">5f</span>, <span class=\"keyword\">true</span>, paint);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//100之后绿色渐变圆环</span></div><div class=\"line\">    paint.setStyle(Paint.Style.FILL);</div><div class=\"line\">    canvas.rotate(<span class=\"number\">10</span>,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span>[] colors2 = &#123;Color.parseColor(<span class=\"string\">\"#79D062\"</span>),  Color.parseColor(<span class=\"string\">\"#3FBF55\"</span>)&#125;;</div><div class=\"line\">    <span class=\"keyword\">float</span>[] positions2 = &#123;<span class=\"number\">0.5f</span> + <span class=\"number\">0.5f</span> * ( <span class=\"number\">144f</span> / <span class=\"number\">180f</span>), <span class=\"number\">1.0f</span>&#125;;</div><div class=\"line\">    sweepGradient = <span class=\"keyword\">new</span> SweepGradient(<span class=\"number\">0</span>, <span class=\"number\">0</span>, colors2, positions2);</div><div class=\"line\">    paint.setShader(sweepGradient);</div><div class=\"line\">    rect = <span class=\"keyword\">new</span> RectF( -length, -length, length, length);</div><div class=\"line\">    canvas.drawArc(rect, <span class=\"number\">180f</span> + <span class=\"number\">180f</span> * (<span class=\"number\">140f</span> / <span class=\"number\">180f</span>), <span class=\"number\">180f</span> / <span class=\"number\">6</span> + <span class=\"number\">10</span>, <span class=\"keyword\">true</span>, paint);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    canvas.restore();</div><div class=\"line\">    canvas.save();</div><div class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//绘制描边效果的画笔</span></div><div class=\"line\">    strokePain = <span class=\"keyword\">new</span> Paint(paint);</div><div class=\"line\">    strokePain.setColor(<span class=\"number\">0x3f979797</span>);</div><div class=\"line\">    strokePain.setStrokeWidth(<span class=\"number\">10</span>);</div><div class=\"line\">    strokePain.setShader(<span class=\"keyword\">null</span>);</div><div class=\"line\">    strokePain.setStyle(Paint.Style.STROKE);</div><div class=\"line\">    canvas.drawArc(rect, <span class=\"number\">170</span>, <span class=\"number\">200</span>, <span class=\"keyword\">true</span>, strokePain);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    canvas.restore();</div><div class=\"line\">    canvas.save();</div><div class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//底边水平</span></div><div class=\"line\">    paint.setShader(<span class=\"keyword\">null</span>);</div><div class=\"line\">    paint.setColor(backGroundColor);</div><div class=\"line\">    paint.setStyle(Paint.Style.FILL);</div><div class=\"line\">    canvas.drawRect(-length  , (<span class=\"keyword\">float</span>) (Math.sin(Math.toRadians(<span class=\"number\">10</span>) ) * length /<span class=\"number\">3f</span> * <span class=\"number\">2f</span>), length  ,  (<span class=\"keyword\">float</span>) (Math.sin(Math.toRadians(<span class=\"number\">10</span>)) * length  + <span class=\"number\">100</span>) , paint);</div><div class=\"line\">    canvas.drawRect(-length  , (<span class=\"keyword\">float</span>) (Math.sin(Math.toRadians(<span class=\"number\">10</span>) ) * length /<span class=\"number\">3f</span> * <span class=\"number\">2f</span>), length  ,  (<span class=\"keyword\">float</span>) (Math.sin(Math.toRadians(<span class=\"number\">10</span>) ) * length /<span class=\"number\">3f</span> * <span class=\"number\">2f</span>) , strokePain);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//内部背景色填充</span></div><div class=\"line\">    paint.setColor(backGroundColor);</div><div class=\"line\">    paint.setShader(<span class=\"keyword\">null</span>);</div><div class=\"line\">    rect = <span class=\"keyword\">new</span> RectF( - (length - length / <span class=\"number\">3f</span>  - <span class=\"number\">2</span>), -(length / <span class=\"number\">3f</span> * <span class=\"number\">2f</span> - <span class=\"number\">2</span>), length - length / <span class=\"number\">3f</span> -<span class=\"number\">2</span> , length / <span class=\"number\">3f</span> * <span class=\"number\">2f</span> - <span class=\"number\">2</span>);</div><div class=\"line\">    canvas.drawArc(rect, <span class=\"number\">170</span>, <span class=\"number\">200</span>, <span class=\"keyword\">true</span>, strokePain);</div><div class=\"line\">    canvas.drawArc(rect, <span class=\"number\">0</span>, <span class=\"number\">360</span>, <span class=\"keyword\">true</span>, paint);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"外侧刻度盘及文字显示-1\"><a href=\"#外侧刻度盘及文字显示-1\" class=\"headerlink\" title=\"外侧刻度盘及文字显示\"></a>外侧刻度盘及文字显示</h2><p>旋转画布绘制对应角度的显示及刻度</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initScale</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    canvas.restore();</div><div class=\"line\">    canvas.save();</div><div class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</div><div class=\"line\">    paint.setColor(Color.parseColor(<span class=\"string\">\"#999999\"</span>));</div><div class=\"line\"></div><div class=\"line\">    tmpPaint = <span class=\"keyword\">new</span> Paint(paint); <span class=\"comment\">//刻度画笔对象</span></div><div class=\"line\">    tmpPaint.setStrokeWidth(<span class=\"number\">1</span>);</div><div class=\"line\">    tmpPaint.setTextSize(<span class=\"number\">35</span>);</div><div class=\"line\">    tmpPaint.setTextAlign(Paint.Align.CENTER);</div><div class=\"line\"></div><div class=\"line\">    canvas.rotate(-<span class=\"number\">90</span>,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span>  y = length;</div><div class=\"line\">    y = - y;</div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">12</span>; <span class=\"comment\">//总刻度数</span></div><div class=\"line\">    paint.setColor(backGroundColor);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> tempRou = <span class=\"number\">180</span> / <span class=\"number\">12f</span>;</div><div class=\"line\">    <span class=\"comment\">//每次旋转的角度</span></div><div class=\"line\">    paint.setColor(Color.WHITE);</div><div class=\"line\">    paint.setStrokeWidth(<span class=\"number\">5</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//绘制刻度和百分比</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt;= count ; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            canvas.drawText(String.valueOf((i) * <span class=\"number\">10</span>), <span class=\"number\">0</span>, y - <span class=\"number\">20f</span>, tmpPaint);</div><div class=\"line\">        &#125;</div><div class=\"line\">        canvas.drawLine(<span class=\"number\">0f</span>, y , <span class=\"number\">0</span>, y + length / <span class=\"number\">15</span>, paint);</div><div class=\"line\">        canvas.rotate(tempRou,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"指针显示-1\"><a href=\"#指针显示-1\" class=\"headerlink\" title=\"指针显示\"></a>指针显示</h2><p>指针显示的比较简单也是唯二需要变化的之一</p>\n<p>指针的绘制比较简单 根据传入的角度(百分比)旋转对应的角度 填充绘制一个三角形</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initPointer</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    paint.setColor(Color.BLACK);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    canvas.restore();</div><div class=\"line\">    canvas.save();</div><div class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</div><div class=\"line\">    <span class=\"keyword\">float</span> change;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (perPoint &lt; <span class=\"number\">1</span> )&#123;</div><div class=\"line\">        change = perPoint * <span class=\"number\">180</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        change = <span class=\"number\">180</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//根据参数得到旋转角度</span></div><div class=\"line\">    canvas.rotate(-<span class=\"number\">90</span> + change,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//绘制三角形形成指针</span></div><div class=\"line\">    Path path = <span class=\"keyword\">new</span> Path();</div><div class=\"line\">    path.moveTo(<span class=\"number\">0</span> , pointLength);</div><div class=\"line\">    path.lineTo(-<span class=\"number\">10</span> , <span class=\"number\">0</span>);</div><div class=\"line\">    path.lineTo(<span class=\"number\">10</span>,<span class=\"number\">0</span>);</div><div class=\"line\">    path.lineTo(<span class=\"number\">0</span> , pointLength);</div><div class=\"line\">    path.close();</div><div class=\"line\"></div><div class=\"line\">    canvas.drawPath(path, paint);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"内部圆环及文字展示-1\"><a href=\"#内部圆环及文字展示-1\" class=\"headerlink\" title=\"内部圆环及文字展示\"></a>内部圆环及文字展示</h2><p>先绘制一个带阴影的圆环 再居中绘制提示的文本信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initText</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//抗锯齿</span></div><div class=\"line\">    canvas.setDrawFilter(<span class=\"keyword\">new</span> PaintFlagsDrawFilter(<span class=\"number\">0</span>, Paint.ANTI_ALIAS_FLAG|Paint.FILTER_BITMAP_FLAG));</div><div class=\"line\">    canvas.restore();</div><div class=\"line\">    canvas.save();</div><div class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> rIndex = length ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//设置文字展示的圆环</span></div><div class=\"line\">    paint.setColor(Color.parseColor(<span class=\"string\">\"#eeeeee\"</span>));</div><div class=\"line\">    paint.setShader(<span class=\"keyword\">null</span>);</div><div class=\"line\">    paint.setShadowLayer(<span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0x54000000</span>);</div><div class=\"line\">    rect = <span class=\"keyword\">new</span> RectF( - (rIndex/ <span class=\"number\">3</span> ), - (rIndex / <span class=\"number\">3</span>), rIndex / <span class=\"number\">3</span>, rIndex / <span class=\"number\">3</span>);</div><div class=\"line\">    canvas.drawArc(rect, <span class=\"number\">0</span>, <span class=\"number\">360</span>, <span class=\"keyword\">true</span>, paint);</div><div class=\"line\"></div><div class=\"line\">    paint.clearShadowLayer();</div><div class=\"line\"></div><div class=\"line\">    canvas.restore();</div><div class=\"line\">    canvas.save();</div><div class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2f</span> , r);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    textPaint.setStrokeWidth(<span class=\"number\">1</span>);</div><div class=\"line\">    textPaint.setAntiAlias(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">    textPaint.setTextSize(<span class=\"number\">60</span>);</div><div class=\"line\">    textPaint.setColor(Color.parseColor(<span class=\"string\">\"#fc6555\"</span>));</div><div class=\"line\">    textPaint.setTextAlign(Paint.Align.RIGHT);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//判断指数变化及颜色设定</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _per = (<span class=\"keyword\">int</span>) (per * <span class=\"number\">120</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (_per &lt; <span class=\"number\">60</span>)&#123;</div><div class=\"line\">        textPaint.setColor(Color.parseColor(<span class=\"string\">\"#ff6450\"</span>));</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_per &lt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">        textPaint.setColor(Color.parseColor(<span class=\"string\">\"#f5a623\"</span>));</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        textPaint.setColor(Color.parseColor(<span class=\"string\">\"#79d062\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> swidth = textPaint.measureText(String.valueOf(_per));</div><div class=\"line\">    <span class=\"comment\">//计算偏移量 是的数字和百分号整体居中显示</span></div><div class=\"line\">    swidth =   (swidth - (swidth + <span class=\"number\">22</span>) / <span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    canvas.translate( swidth , <span class=\"number\">0</span>);</div><div class=\"line\">    canvas.drawText(<span class=\"string\">\"\"</span> + _per, <span class=\"number\">0</span>, <span class=\"number\">0</span>, textPaint);</div><div class=\"line\"></div><div class=\"line\">    textPaint.setTextSize(<span class=\"number\">30</span>);</div><div class=\"line\">    textPaint.setTextAlign(Paint.Align.LEFT);</div><div class=\"line\"></div><div class=\"line\">    canvas.drawText(<span class=\"string\">\"%\"</span> , <span class=\"number\">0</span>, <span class=\"number\">0</span>, textPaint);</div><div class=\"line\">    textPaint.setTextAlign(Paint.Align.CENTER);</div><div class=\"line\">    textPaint.setColor(Color.parseColor(<span class=\"string\">\"#999999\"</span>));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    canvas.restore();</div><div class=\"line\">    canvas.save();</div><div class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>  , r + length / <span class=\"number\">3</span> /<span class=\"number\">2</span> );</div><div class=\"line\">    canvas.drawText(<span class=\"string\">\"完成率\"</span> , <span class=\"number\">0</span>, <span class=\"number\">0</span>, textPaint);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"更新动画\"><a href=\"#更新动画\" class=\"headerlink\" title=\"更新动画\"></a>更新动画</h2><p>使用ValueAnimator实现指针的转动动画效果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cgangePer</span><span class=\"params\">(<span class=\"keyword\">float</span> per )</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.perOld = <span class=\"keyword\">this</span>.per;</div><div class=\"line\">    <span class=\"keyword\">this</span>.per = per;</div><div class=\"line\">    ValueAnimator va =  ValueAnimator.ofFloat(perOld,per);</div><div class=\"line\">    va.setDuration(<span class=\"number\">1000</span>);</div><div class=\"line\">    va.setInterpolator(<span class=\"keyword\">new</span> OvershootInterpolator());</div><div class=\"line\">    va.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator animation)</span> </span>&#123;</div><div class=\"line\">            perPoint = (<span class=\"keyword\">float</span>) animation.getAnimatedValue();</div><div class=\"line\">            invalidate();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    va.start();</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个仪表盘的实现就完成了  具体的代码可以查看<a href=\"https://github.com/clwater/AndroidDashBoard.git\" target=\"_blank\" rel=\"external\">我的github</a></p>\n","excerpt":"<h1 id=\"Android自定义View之仪表盘\"><a href=\"#Android自定义View之仪表盘\" class=\"headerlink\" title=\"Android自定义View之仪表盘\"></a>Android自定义View之仪表盘</h1><blockquote>\n<p>又是新系列（坑） 感觉都很零碎，能积累一些是一些了</p>\n</blockquote>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>随着项目开发 越来越多的需求被摆在面前 其中不免涉及到定制的功能<br>其中仪表盘也是一个很常用的功能<br>","more":"</p>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-8-20/25082465.jpg\" alt=\"效果图\"></p>\n<h2 id=\"设计过程\"><a href=\"#设计过程\" class=\"headerlink\" title=\"设计过程\"></a>设计过程</h2><h3 id=\"外侧渐变圆环\"><a href=\"#外侧渐变圆环\" class=\"headerlink\" title=\"外侧渐变圆环\"></a>外侧渐变圆环</h3><p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-8-20/78850293.jpg\" alt=\"外侧圆环效果\"></p>\n<h3 id=\"外侧刻度盘及文字显示\"><a href=\"#外侧刻度盘及文字显示\" class=\"headerlink\" title=\"外侧刻度盘及文字显示\"></a>外侧刻度盘及文字显示</h3><p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-8-20/30532330.jpg\" alt=\"外侧刻度盘及文字显示\"></p>\n<h3 id=\"指针显示\"><a href=\"#指针显示\" class=\"headerlink\" title=\"指针显示\"></a>指针显示</h3><p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-8-20/72116334.jpg\" alt=\"指针显示\"></p>\n<h3 id=\"内部圆环及文字展示\"><a href=\"#内部圆环及文字展示\" class=\"headerlink\" title=\"内部圆环及文字展示\"></a>内部圆环及文字展示</h3><p><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-8-20/81417498.jpg\" alt=\"内部圆环及文字展示\"></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"自定义组件显示优化\"><a href=\"#自定义组件显示优化\" class=\"headerlink\" title=\"自定义组件显示优化\"></a>自定义组件显示优化</h3><p>设置自定义组件的时候要优化组件的高度</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> width = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heitht = width / <span class=\"number\">2</span> / <span class=\"number\">4</span> * <span class=\"number\">5</span>;</div><div class=\"line\">    initIndex(width / <span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"comment\">//优化组件高度</span></div><div class=\"line\">    setMeasuredDimension(width, heitht);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"onDraw-过程\"><a href=\"#onDraw-过程\" class=\"headerlink\" title=\"onDraw()过程\"></a>onDraw()过程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//禁用硬件加速</span></div><div class=\"line\">    setLayerType(LAYER_TYPE_SOFTWARE, <span class=\"keyword\">null</span>);</div><div class=\"line\">    <span class=\"comment\">//外侧颜色指示圆环</span></div><div class=\"line\">    initRing(canvas);</div><div class=\"line\">    <span class=\"comment\">//刻度文字</span></div><div class=\"line\">    initScale(canvas);</div><div class=\"line\">    <span class=\"comment\">//指针</span></div><div class=\"line\">    initPointer(canvas);</div><div class=\"line\">    <span class=\"comment\">//提示内容</span></div><div class=\"line\">    initText(canvas);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主要还是这个四个绘制的过程</p>\n<h2 id=\"外侧颜色指示圆环\"><a href=\"#外侧颜色指示圆环\" class=\"headerlink\" title=\"外侧颜色指示圆环\"></a>外侧颜色指示圆环</h2><ol>\n<li>首先绘制的前一部分的红黄渐变圆环<br>这个圆环并不是一个180度的圆环 而是一个两百度的圆环 下侧再实现水平的效果</li>\n<li>绘制后一部分的绿色渐变圆环</li>\n<li>修正底部的效果 修改成水平的效果</li>\n<li>绘制内部半圆 遮盖住渐变的半圆</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initRing</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    paint.setAntiAlias(<span class=\"keyword\">true</span>);</div><div class=\"line\">    paint.setStrokeWidth(<span class=\"number\">2</span>);</div><div class=\"line\">    canvas.save();</div><div class=\"line\">    <span class=\"comment\">//canvas中心移动到中间</span></div><div class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//前100红黄渐变圆环</span></div><div class=\"line\">    paint.setStyle(Paint.Style.FILL);</div><div class=\"line\">    <span class=\"comment\">//设置渐变的颜色范围</span></div><div class=\"line\">    <span class=\"keyword\">int</span>[] colors = &#123;Color.parseColor(<span class=\"string\">\"#F95A37\"</span>), Color.parseColor(<span class=\"string\">\"#f9cf45\"</span>)&#125;;</div><div class=\"line\">    <span class=\"comment\">//设置的渐变起止位置</span></div><div class=\"line\">    <span class=\"keyword\">float</span>[] positions = &#123;<span class=\"number\">0.5f</span> - <span class=\"number\">10f</span>/<span class=\"number\">180f</span> * <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span> + <span class=\"number\">0.5f</span> * <span class=\"number\">5f</span> / <span class=\"number\">6f</span>&#125;;</div><div class=\"line\">    <span class=\"comment\">//设置渐变的蒙版</span></div><div class=\"line\">    SweepGradient sweepGradient = <span class=\"keyword\">new</span> SweepGradient(<span class=\"number\">0</span>, <span class=\"number\">0</span>, colors, positions);</div><div class=\"line\">    paint.setShader(sweepGradient);</div><div class=\"line\">    rect = <span class=\"keyword\">new</span> RectF( -length, -length, length, length);</div><div class=\"line\">    <span class=\"comment\">//绘制圆环</span></div><div class=\"line\">    canvas.drawArc(rect, <span class=\"number\">170</span>, <span class=\"number\">10f</span> + <span class=\"number\">180f</span> / <span class=\"number\">6f</span> * <span class=\"number\">5f</span>, <span class=\"keyword\">true</span>, paint);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//100之后绿色渐变圆环</span></div><div class=\"line\">    paint.setStyle(Paint.Style.FILL);</div><div class=\"line\">    canvas.rotate(<span class=\"number\">10</span>,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span>[] colors2 = &#123;Color.parseColor(<span class=\"string\">\"#79D062\"</span>),  Color.parseColor(<span class=\"string\">\"#3FBF55\"</span>)&#125;;</div><div class=\"line\">    <span class=\"keyword\">float</span>[] positions2 = &#123;<span class=\"number\">0.5f</span> + <span class=\"number\">0.5f</span> * ( <span class=\"number\">144f</span> / <span class=\"number\">180f</span>), <span class=\"number\">1.0f</span>&#125;;</div><div class=\"line\">    sweepGradient = <span class=\"keyword\">new</span> SweepGradient(<span class=\"number\">0</span>, <span class=\"number\">0</span>, colors2, positions2);</div><div class=\"line\">    paint.setShader(sweepGradient);</div><div class=\"line\">    rect = <span class=\"keyword\">new</span> RectF( -length, -length, length, length);</div><div class=\"line\">    canvas.drawArc(rect, <span class=\"number\">180f</span> + <span class=\"number\">180f</span> * (<span class=\"number\">140f</span> / <span class=\"number\">180f</span>), <span class=\"number\">180f</span> / <span class=\"number\">6</span> + <span class=\"number\">10</span>, <span class=\"keyword\">true</span>, paint);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    canvas.restore();</div><div class=\"line\">    canvas.save();</div><div class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//绘制描边效果的画笔</span></div><div class=\"line\">    strokePain = <span class=\"keyword\">new</span> Paint(paint);</div><div class=\"line\">    strokePain.setColor(<span class=\"number\">0x3f979797</span>);</div><div class=\"line\">    strokePain.setStrokeWidth(<span class=\"number\">10</span>);</div><div class=\"line\">    strokePain.setShader(<span class=\"keyword\">null</span>);</div><div class=\"line\">    strokePain.setStyle(Paint.Style.STROKE);</div><div class=\"line\">    canvas.drawArc(rect, <span class=\"number\">170</span>, <span class=\"number\">200</span>, <span class=\"keyword\">true</span>, strokePain);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    canvas.restore();</div><div class=\"line\">    canvas.save();</div><div class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//底边水平</span></div><div class=\"line\">    paint.setShader(<span class=\"keyword\">null</span>);</div><div class=\"line\">    paint.setColor(backGroundColor);</div><div class=\"line\">    paint.setStyle(Paint.Style.FILL);</div><div class=\"line\">    canvas.drawRect(-length  , (<span class=\"keyword\">float</span>) (Math.sin(Math.toRadians(<span class=\"number\">10</span>) ) * length /<span class=\"number\">3f</span> * <span class=\"number\">2f</span>), length  ,  (<span class=\"keyword\">float</span>) (Math.sin(Math.toRadians(<span class=\"number\">10</span>)) * length  + <span class=\"number\">100</span>) , paint);</div><div class=\"line\">    canvas.drawRect(-length  , (<span class=\"keyword\">float</span>) (Math.sin(Math.toRadians(<span class=\"number\">10</span>) ) * length /<span class=\"number\">3f</span> * <span class=\"number\">2f</span>), length  ,  (<span class=\"keyword\">float</span>) (Math.sin(Math.toRadians(<span class=\"number\">10</span>) ) * length /<span class=\"number\">3f</span> * <span class=\"number\">2f</span>) , strokePain);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//内部背景色填充</span></div><div class=\"line\">    paint.setColor(backGroundColor);</div><div class=\"line\">    paint.setShader(<span class=\"keyword\">null</span>);</div><div class=\"line\">    rect = <span class=\"keyword\">new</span> RectF( - (length - length / <span class=\"number\">3f</span>  - <span class=\"number\">2</span>), -(length / <span class=\"number\">3f</span> * <span class=\"number\">2f</span> - <span class=\"number\">2</span>), length - length / <span class=\"number\">3f</span> -<span class=\"number\">2</span> , length / <span class=\"number\">3f</span> * <span class=\"number\">2f</span> - <span class=\"number\">2</span>);</div><div class=\"line\">    canvas.drawArc(rect, <span class=\"number\">170</span>, <span class=\"number\">200</span>, <span class=\"keyword\">true</span>, strokePain);</div><div class=\"line\">    canvas.drawArc(rect, <span class=\"number\">0</span>, <span class=\"number\">360</span>, <span class=\"keyword\">true</span>, paint);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"外侧刻度盘及文字显示-1\"><a href=\"#外侧刻度盘及文字显示-1\" class=\"headerlink\" title=\"外侧刻度盘及文字显示\"></a>外侧刻度盘及文字显示</h2><p>旋转画布绘制对应角度的显示及刻度</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initScale</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    canvas.restore();</div><div class=\"line\">    canvas.save();</div><div class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</div><div class=\"line\">    paint.setColor(Color.parseColor(<span class=\"string\">\"#999999\"</span>));</div><div class=\"line\"></div><div class=\"line\">    tmpPaint = <span class=\"keyword\">new</span> Paint(paint); <span class=\"comment\">//刻度画笔对象</span></div><div class=\"line\">    tmpPaint.setStrokeWidth(<span class=\"number\">1</span>);</div><div class=\"line\">    tmpPaint.setTextSize(<span class=\"number\">35</span>);</div><div class=\"line\">    tmpPaint.setTextAlign(Paint.Align.CENTER);</div><div class=\"line\"></div><div class=\"line\">    canvas.rotate(-<span class=\"number\">90</span>,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span>  y = length;</div><div class=\"line\">    y = - y;</div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">12</span>; <span class=\"comment\">//总刻度数</span></div><div class=\"line\">    paint.setColor(backGroundColor);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> tempRou = <span class=\"number\">180</span> / <span class=\"number\">12f</span>;</div><div class=\"line\">    <span class=\"comment\">//每次旋转的角度</span></div><div class=\"line\">    paint.setColor(Color.WHITE);</div><div class=\"line\">    paint.setStrokeWidth(<span class=\"number\">5</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//绘制刻度和百分比</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt;= count ; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            canvas.drawText(String.valueOf((i) * <span class=\"number\">10</span>), <span class=\"number\">0</span>, y - <span class=\"number\">20f</span>, tmpPaint);</div><div class=\"line\">        &#125;</div><div class=\"line\">        canvas.drawLine(<span class=\"number\">0f</span>, y , <span class=\"number\">0</span>, y + length / <span class=\"number\">15</span>, paint);</div><div class=\"line\">        canvas.rotate(tempRou,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"指针显示-1\"><a href=\"#指针显示-1\" class=\"headerlink\" title=\"指针显示\"></a>指针显示</h2><p>指针显示的比较简单也是唯二需要变化的之一</p>\n<p>指针的绘制比较简单 根据传入的角度(百分比)旋转对应的角度 填充绘制一个三角形</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initPointer</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    paint.setColor(Color.BLACK);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    canvas.restore();</div><div class=\"line\">    canvas.save();</div><div class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</div><div class=\"line\">    <span class=\"keyword\">float</span> change;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (perPoint &lt; <span class=\"number\">1</span> )&#123;</div><div class=\"line\">        change = perPoint * <span class=\"number\">180</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        change = <span class=\"number\">180</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//根据参数得到旋转角度</span></div><div class=\"line\">    canvas.rotate(-<span class=\"number\">90</span> + change,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//绘制三角形形成指针</span></div><div class=\"line\">    Path path = <span class=\"keyword\">new</span> Path();</div><div class=\"line\">    path.moveTo(<span class=\"number\">0</span> , pointLength);</div><div class=\"line\">    path.lineTo(-<span class=\"number\">10</span> , <span class=\"number\">0</span>);</div><div class=\"line\">    path.lineTo(<span class=\"number\">10</span>,<span class=\"number\">0</span>);</div><div class=\"line\">    path.lineTo(<span class=\"number\">0</span> , pointLength);</div><div class=\"line\">    path.close();</div><div class=\"line\"></div><div class=\"line\">    canvas.drawPath(path, paint);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"内部圆环及文字展示-1\"><a href=\"#内部圆环及文字展示-1\" class=\"headerlink\" title=\"内部圆环及文字展示\"></a>内部圆环及文字展示</h2><p>先绘制一个带阴影的圆环 再居中绘制提示的文本信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initText</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//抗锯齿</span></div><div class=\"line\">    canvas.setDrawFilter(<span class=\"keyword\">new</span> PaintFlagsDrawFilter(<span class=\"number\">0</span>, Paint.ANTI_ALIAS_FLAG|Paint.FILTER_BITMAP_FLAG));</div><div class=\"line\">    canvas.restore();</div><div class=\"line\">    canvas.save();</div><div class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>, r);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> rIndex = length ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//设置文字展示的圆环</span></div><div class=\"line\">    paint.setColor(Color.parseColor(<span class=\"string\">\"#eeeeee\"</span>));</div><div class=\"line\">    paint.setShader(<span class=\"keyword\">null</span>);</div><div class=\"line\">    paint.setShadowLayer(<span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0x54000000</span>);</div><div class=\"line\">    rect = <span class=\"keyword\">new</span> RectF( - (rIndex/ <span class=\"number\">3</span> ), - (rIndex / <span class=\"number\">3</span>), rIndex / <span class=\"number\">3</span>, rIndex / <span class=\"number\">3</span>);</div><div class=\"line\">    canvas.drawArc(rect, <span class=\"number\">0</span>, <span class=\"number\">360</span>, <span class=\"keyword\">true</span>, paint);</div><div class=\"line\"></div><div class=\"line\">    paint.clearShadowLayer();</div><div class=\"line\"></div><div class=\"line\">    canvas.restore();</div><div class=\"line\">    canvas.save();</div><div class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2f</span> , r);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    textPaint.setStrokeWidth(<span class=\"number\">1</span>);</div><div class=\"line\">    textPaint.setAntiAlias(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">    textPaint.setTextSize(<span class=\"number\">60</span>);</div><div class=\"line\">    textPaint.setColor(Color.parseColor(<span class=\"string\">\"#fc6555\"</span>));</div><div class=\"line\">    textPaint.setTextAlign(Paint.Align.RIGHT);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//判断指数变化及颜色设定</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _per = (<span class=\"keyword\">int</span>) (per * <span class=\"number\">120</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (_per &lt; <span class=\"number\">60</span>)&#123;</div><div class=\"line\">        textPaint.setColor(Color.parseColor(<span class=\"string\">\"#ff6450\"</span>));</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_per &lt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">        textPaint.setColor(Color.parseColor(<span class=\"string\">\"#f5a623\"</span>));</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        textPaint.setColor(Color.parseColor(<span class=\"string\">\"#79d062\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> swidth = textPaint.measureText(String.valueOf(_per));</div><div class=\"line\">    <span class=\"comment\">//计算偏移量 是的数字和百分号整体居中显示</span></div><div class=\"line\">    swidth =   (swidth - (swidth + <span class=\"number\">22</span>) / <span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    canvas.translate( swidth , <span class=\"number\">0</span>);</div><div class=\"line\">    canvas.drawText(<span class=\"string\">\"\"</span> + _per, <span class=\"number\">0</span>, <span class=\"number\">0</span>, textPaint);</div><div class=\"line\"></div><div class=\"line\">    textPaint.setTextSize(<span class=\"number\">30</span>);</div><div class=\"line\">    textPaint.setTextAlign(Paint.Align.LEFT);</div><div class=\"line\"></div><div class=\"line\">    canvas.drawText(<span class=\"string\">\"%\"</span> , <span class=\"number\">0</span>, <span class=\"number\">0</span>, textPaint);</div><div class=\"line\">    textPaint.setTextAlign(Paint.Align.CENTER);</div><div class=\"line\">    textPaint.setColor(Color.parseColor(<span class=\"string\">\"#999999\"</span>));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    canvas.restore();</div><div class=\"line\">    canvas.save();</div><div class=\"line\">    canvas.translate(canvas.getWidth()/<span class=\"number\">2</span>  , r + length / <span class=\"number\">3</span> /<span class=\"number\">2</span> );</div><div class=\"line\">    canvas.drawText(<span class=\"string\">\"完成率\"</span> , <span class=\"number\">0</span>, <span class=\"number\">0</span>, textPaint);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"更新动画\"><a href=\"#更新动画\" class=\"headerlink\" title=\"更新动画\"></a>更新动画</h2><p>使用ValueAnimator实现指针的转动动画效果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cgangePer</span><span class=\"params\">(<span class=\"keyword\">float</span> per )</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.perOld = <span class=\"keyword\">this</span>.per;</div><div class=\"line\">    <span class=\"keyword\">this</span>.per = per;</div><div class=\"line\">    ValueAnimator va =  ValueAnimator.ofFloat(perOld,per);</div><div class=\"line\">    va.setDuration(<span class=\"number\">1000</span>);</div><div class=\"line\">    va.setInterpolator(<span class=\"keyword\">new</span> OvershootInterpolator());</div><div class=\"line\">    va.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator animation)</span> </span>&#123;</div><div class=\"line\">            perPoint = (<span class=\"keyword\">float</span>) animation.getAnimatedValue();</div><div class=\"line\">            invalidate();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    va.start();</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个仪表盘的实现就完成了  具体的代码可以查看<a href=\"https://github.com/clwater/AndroidDashBoard.git\">我的github</a></p>"},{"title":"写代码时适合听的网站和歌单","date":"2017-02-06T05:44:34.000Z","_content":"\n> 适合在写代码的时候听的音乐的歌单和网站推荐(持续收录)\n\n## 网站\n[musicforprogramming.net](http://musicforprogramming.net) 一个看起来就十分有代码风格的网站\n\n[defonic.com](http://defonic.com/) 一个白噪音生成网站\n\n[www.noisli.com](https://www.noisli.com/) 同样是一个白噪音生成的网站\n\n<!-- more -->\n\n## 歌单\n\n[金玟岐作品集](http://music.163.com/#/album?id=2767540)\n\n[程序员工作专用](http://music.163.com/#/playlist?id=83848216)\n","source":"_posts/musicOfCoding.md","raw":"---\ntitle: 写代码时适合听的网站和歌单\ndate: 2017-02-06 13:44:34\ntags: [\"音乐\" , \"music\" , \"代码\" , \"coding\"]\ncategories: \"音乐\"\n---\n\n> 适合在写代码的时候听的音乐的歌单和网站推荐(持续收录)\n\n## 网站\n[musicforprogramming.net](http://musicforprogramming.net) 一个看起来就十分有代码风格的网站\n\n[defonic.com](http://defonic.com/) 一个白噪音生成网站\n\n[www.noisli.com](https://www.noisli.com/) 同样是一个白噪音生成的网站\n\n<!-- more -->\n\n## 歌单\n\n[金玟岐作品集](http://music.163.com/#/album?id=2767540)\n\n[程序员工作专用](http://music.163.com/#/playlist?id=83848216)\n","slug":"musicOfCoding","published":1,"updated":"2017-02-06T14:56:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8cwyb62000po3xwq8383qan","content":"<blockquote>\n<p>适合在写代码的时候听的音乐的歌单和网站推荐(持续收录)</p>\n</blockquote>\n<h2 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h2><p><a href=\"http://musicforprogramming.net\" target=\"_blank\" rel=\"external\">musicforprogramming.net</a> 一个看起来就十分有代码风格的网站</p>\n<p><a href=\"http://defonic.com/\" target=\"_blank\" rel=\"external\">defonic.com</a> 一个白噪音生成网站</p>\n<p><a href=\"https://www.noisli.com/\" target=\"_blank\" rel=\"external\">www.noisli.com</a> 同样是一个白噪音生成的网站</p>\n<a id=\"more\"></a>\n<h2 id=\"歌单\"><a href=\"#歌单\" class=\"headerlink\" title=\"歌单\"></a>歌单</h2><p><a href=\"http://music.163.com/#/album?id=2767540\" target=\"_blank\" rel=\"external\">金玟岐作品集</a></p>\n<p><a href=\"http://music.163.com/#/playlist?id=83848216\" target=\"_blank\" rel=\"external\">程序员工作专用</a></p>\n","excerpt":"<blockquote>\n<p>适合在写代码的时候听的音乐的歌单和网站推荐(持续收录)</p>\n</blockquote>\n<h2 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h2><p><a href=\"http://musicforprogramming.net\">musicforprogramming.net</a> 一个看起来就十分有代码风格的网站</p>\n<p><a href=\"http://defonic.com/\">defonic.com</a> 一个白噪音生成网站</p>\n<p><a href=\"https://www.noisli.com/\">www.noisli.com</a> 同样是一个白噪音生成的网站</p>","more":"<h2 id=\"歌单\"><a href=\"#歌单\" class=\"headerlink\" title=\"歌单\"></a>歌单</h2><p><a href=\"http://music.163.com/#/album?id=2767540\">金玟岐作品集</a></p>\n<p><a href=\"http://music.163.com/#/playlist?id=83848216\">程序员工作专用</a></p>"},{"title":"Android View 相关源码分析之三 View的绘制过程","date":"2017-02-03T09:48:05.000Z","_content":"\n# Android View\n>Android View框架相关  View的测量 布局 绘制过程\nLinearLayout RelativeLayout实现源码分析\n\n\n\n## View的测量 布局 绘制过程\n\n### 测量之前的事情\nView的整个绘制流程是开始于ViewRootImpl类的performTraversals方法(1k行)  根据相关设置来觉得十分要重新执行相关功能\n```java\n  private void performTraversals() {\n    // cache mView since it is used so much below...\n    final View host = mView;\n    ...\n    int childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);\n    int childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);\n    ...\n    //measure\n    mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n    ...\n    //layout\n    mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());\n    ...\n    //draw\n    mView.draw(canvas);\n    ...\n  }\n  ```\n  <!-- more -->\n  \n  ```java\n  private static int getRootMeasureSpec(int windowSize, int rootDimension) {\n        int measureSpec;\n        switch (rootDimension) {\n\n        case ViewGroup.LayoutParams.MATCH_PARENT:\n            // Window can't resize. Force root view to be windowSize.\n            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);\n            break;\n        ...\n        }\n        return measureSpec;\n    }\n  ```\nView 绘制整体流程图如下\n\n![View绘制整体流程图](http://p1.bqimg.com/567571/a5aa47e56fd6434a.png)\n\n### measure源码分析\n\n结论:\n* measure的过程就是父View向子View递归调用view.measure方法 (measure中回调onMeasure方法)的过程\n\n* measure方法是 final的 只能重载onMeasure方法\n\n* 最顶层的DocerView的MeasureSpec由ViewRootImpl的getRootMeasureSpec方法提供 LayoutParams的参数为MATCH_PARENT specMode是EXACTLY，specSize为物理屏幕大小\n\n* 只要是ViewGroup的子类就必须要求LayoutParams继承子MarginLayoutParams 否则无法使用layout_margin参数\n\n* View的getMeasuredWidth()和getMeasuredHeight()方法来获取View测量的宽高，要必须保证这两个方法在onMeasure流程之后被调用才能返回有效值。\n\n\n\n![View measure过程](/View measure过程.png)\n\n```java\n/**\n * <p>\n * This is called to find out how big a view should be. The parent supplies constraint information in the width and height parameters.\n * </p>\n *\n * <p>\n * The actual measurement work of a view is performed in\n * {@link #onMeasure(int, int)}, called by this method. Therefore, only\n * {@link #onMeasure(int, int)} can and must be overridden by subclasses.\n * </p>\n *\n *\n * @param widthMeasureSpec Horizontal space requirements as imposed by the\n *        parent\n * @param heightMeasureSpec Vertical space requirements as imposed by the\n *        parent\n *\n * @see #onMeasure(int, int)\n */\n //没舍得删这些注释  感觉重要的事情都说了   为了计算整个View树的实际大小 设置实际的高和宽 每个子View都是根据父视图和自身决定实际宽高的 在onMeasure()方法中进行实际测量.传入widthMeasureSpec和heightMeasureSpec参数来表示了父View的规格 不但传入了模式 还传入了size 而对于DecorView来说 传入的模式一般为EXACTLY模式 size对应屏幕的宽高. 所以说子View的大小是父子View共同决定的\npublic final void measure(int widthMeasureSpec, int heightMeasureSpec) {\n\n               // measure ourselves, this should set the measured dimension flag back\n               onMeasure(widthMeasureSpec, heightMeasureSpec);\n   }\n```\n\nMeasureSpec内部类\n\nMeasureSpec是View的内部类 int型，由高2位规格模式specMode和低30位具体尺寸specSize组成 其中specMode只有三种\n* MeasureSpec.EXACTLY //确定模式，父View希望子View的大小是确定的，由specSize决定；\n* MeasureSpec.AT_MOST //最多模式，父View希望子View的大小最多是specSize指定的值；\n* MeasureSpec.UNSPECIFIED //未指定模式，父View完全依据子View的设计值来决定；\n\nonMeasure()方法\n\n```java\n    /**\n     * <p>\n     * Measure the view and its content to determine the measured width and the\n     * measured height. This method is invoked by {@link #measure(int, int)} and\n     * should be overridden by subclasses to provide accurate and efficient\n     * measurement of their contents.\n     * </p>\n     *\n     * <p>\n     * <strong>CONTRACT:</strong> When overriding this method, you\n     * <em>must</em> call {@link #setMeasuredDimension(int, int)} to store the\n     * measured width and height of this view. Failure to do so will trigger an\n     * <code>IllegalStateException</code>, thrown by\n     * {@link #measure(int, int)}. Calling the superclass'\n     * {@link #onMeasure(int, int)} is a valid use.\n     * </p>\n     *\n     * <p>\n     * The base class implementation of measure defaults to the background size,\n     * unless a larger size is allowed by the MeasureSpec. Subclasses should\n     * override {@link #onMeasure(int, int)} to provide better measurements of\n     * their content.\n     * </p>\n     *\n     * <p>\n     * If this method is overridden, it is the subclass's responsibility to make\n     * sure the measured height and width are at least the view's minimum height\n     * and width ({@link #getSuggestedMinimumHeight()} and\n     * {@link #getSuggestedMinimumWidth()}).\n     * </p>\n     *\n     * @param widthMeasureSpec horizontal space requirements as imposed by the parent.\n     *                         The requirements are encoded with\n     *                         {@link android.view.View.MeasureSpec}.\n     * @param heightMeasureSpec vertical space requirements as imposed by the parent.\n     *                         The requirements are encoded with\n     *                         {@link android.view.View.MeasureSpec}.\n     *\n     * @see #getMeasuredWidth()\n     * @see #getMeasuredHeight()\n     * @see #setMeasuredDimension(int, int)\n     * @see #getSuggestedMinimumHeight()\n     * @see #getSuggestedMinimumWidth()\n     * @see android.view.View.MeasureSpec#getMode(int)\n     * @see android.view.View.MeasureSpec#getSize(int)\n     */\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n    }\n```\ngetDefaultSize方法相关\n```java\n  public static int getDefaultSize(int size, int measureSpec) {\n    int result = size;\n    //通过measureSpec得到mode和size\n    int specMode = MeasureSpec.getMode(measureSpec);\n    int specSize = MeasureSpec.getSize(measureSpec);\n\n    switch (specMode) {\n    case MeasureSpec.UNSPECIFIED:\n        result = size;\n        break;\n    case MeasureSpec.AT_MOST:\n    case MeasureSpec.EXACTLY:\n        result = specSize;\n        break;\n    }\n    return result;\n  }\n\n  //最小宽度和高度由View的Background尺寸和View的minXXX共同决定\n  protected int getSuggestedMinimumHeight() {\n      return (mBackground == null) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());\n\n  }\n  protected int getSuggestedMinimumWidth() {\n      return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());\n  }\n```\nsetMeasuredDimension方法 对View的成员变量measuredWidth和measuredHeight变量赋值 也就是说该方法最终决定了View的大小\n```java\n  protected final void setMeasuredDimension(int measuredWidth, int measuredHeight) {\n      boolean optical = isLayoutModeOptical(this);\n      if (optical != isLayoutModeOptical(mParent)) {\n          Insets insets = getOpticalInsets();\n          int opticalWidth  = insets.left + insets.right;\n          int opticalHeight = insets.top  + insets.bottom;\n\n          measuredWidth  += optical ? opticalWidth  : -opticalWidth;\n          measuredHeight += optical ? opticalHeight : -opticalHeight;\n      }\n      setMeasuredDimensionRaw(measuredWidth, measuredHeight);\n  }\n\n  public boolean isLayoutRequested() {\n    return (mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT;\n  }\n\n  private void setMeasuredDimensionRaw(int measuredWidth, int measuredHeight) {\n    mMeasuredWidth = measuredWidth;\n    mMeasuredHeight = measuredHeight;\n\n    mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;\n  }\n```\n\n至此一次最基础的View的measure过程就完成了  但是由于View可以嵌套  所以measure是递归传递的所以ViewGroup中需要对其子类进行measure过程 measureChildren方法实质为循环调用measureChild方法\n\n而measureChild和measureChildWithMargins的区别是后者将margin和padding也作为了子视图的大小\n\n一下分析measureChildWithMargins方法\n```java\n  protected void measureChildWithMargins(View child,\n          int parentWidthMeasureSpec, int widthUsed,\n          int parentHeightMeasureSpec, int heightUsed) {\n      //获取当前子视图的LayoutParams\n      final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();\n      //设定子View的测量规格\n      final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\n              mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin\n                      + widthUsed, lp.width);\n      final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\n              mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin\n                      + heightUsed, lp.height);\n      //子view的继续调用\n      child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n  }\n\n  //在getChildMeasureSpec中通过父View和本身的模式共同决定当前View的size\n  public static int getChildMeasureSpec(int spec, int padding, int childDimension) {\n        //获取当前父View的mode和size\n        int specMode = MeasureSpec.getMode(spec);\n        int specSize = MeasureSpec.getSize(spec);\n        //获取父View的的剩余大小\n        int size = Math.max(0, specSize - padding);\n        //定义结果变量\n        int resultSize = 0;\n        int resultMode = 0;\n        //根据对应的mode做处理\n        //通过父View和本身的模式共同决定当前View的size\n        switch (specMode) {\n        // Parent has imposed an exact size on us\n        case MeasureSpec.EXACTLY:\n            if (childDimension >= 0) {\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size. So be it.\n                resultSize = size;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent has imposed a maximum size on us\n        case MeasureSpec.AT_MOST:\n            if (childDimension >= 0) {\n                // Child wants a specific size... so be it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size, but our size is not fixed.\n                // Constrain child to not be bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent asked to see how big we want to be\n        case MeasureSpec.UNSPECIFIED:\n            if (childDimension >= 0) {\n                // Child wants a specific size... let him have it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size... find out how big it should\n                // be\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size.... find out how\n                // big it should be\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            }\n            break;\n        }\n        //将size和mode整合为MeasureSpec模式后返回\n        return MeasureSpec.makeMeasureSpec(resultSize, resultMode);\n    }\n\n```\n\n### layout源码分析\nView layout整体流程与measure过程基本一样\n\n结论:\n* 需要根据ViewGroup本身的情况讨论 LinearLayout下会更看重子View的height和width 来安排对应位置 而RelativeLayout则更加关注子View的left right top bottom值 并且优先级高于width和height 甚至在部分自定义ViewGroup中 measure可能是无用的   直接使用layout方法来设置子View的位置也可以\n* ViewGroup需要实现自己的layout逻辑\n* layout_XXX中的各个熟悉都是针对子View的父ViewGroup的\n* 同样使用View的getWidth()和getHeight()方法来获取View测量的宽高 必须保证这两个方法在onLayout流程之后被调用才能返回有效值\n\n```java\n  /**\n     * Assign a size and position to a view and all of its\n     * descendants\n     *\n     * <p>This is the second phase of the layout mechanism.\n     * (The first is measuring). In this phase, each parent calls\n     * layout on all of its children to position them.\n     * This is typically done using the child measurements\n     * that were stored in the measure pass().</p>\n     *\n     * <p>Derived classes should not override this method.\n     * Derived classes with children should override\n     * onLayout. In that method, they should\n     * call layout on each of their children.</p>\n     *\n     * @param l Left position, relative to parent\n     * @param t Top position, relative to parent\n     * @param r Right position, relative to parent\n     * @param b Bottom position, relative to parent\n     */\n\n     //同样注解写的很好了  分派给他和他的所有的子视图大小和位置\n    @SuppressWarnings({\"unchecked\"})\n    public void layout(int l, int t, int r, int b) {\n        if ((mPrivateFlags3 & PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != 0) {\n            onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);\n            mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n        }\n         //调用setFrame方法把参数分别赋值于\n        int oldL = mLeft;\n        int oldT = mTop;\n        int oldB = mBottom;\n        int oldR = mRight;\n        //判断view的位置是否发生过变化 , 确定是否对当前view重新layout\n        boolean changed = isLayoutModeOptical(mParent) ?\n                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);\n\n\n        if (changed || (mPrivateFlags & PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) {\n            //调用onLayout\n            onLayout(changed, l, t, r, b);\n            mPrivateFlags &= ~PFLAG_LAYOUT_REQUIRED;\n            ListenerInfo li = mListenerInfo;\n            if (li != null && li.mOnLayoutChangeListeners != null) {\n                ArrayList<OnLayoutChangeListener> listenersCopy =\n                        (ArrayList<OnLayoutChangeListener>)li.mOnLayoutChangeListeners.clone();\n                int numListeners = listenersCopy.size();\n                for (int i = 0; i < numListeners; ++i) {\n                    listenersCopy.get(i).onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB);\n                }\n            }\n        }\n\n        mPrivateFlags &= ~PFLAG_FORCE_LAYOUT;\n        mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;\n    }\n```\n\nonLyayout方法\n```java\n  View中\n  protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n  }\n  ViewGroup中\n  protected abstract void onLayout(boolean changed,\n        int l, int t, int r, int b);\n```\n\n均是空方法  后面会就LinearLayout和RelativeLayout源码进行分析\n\n### draw源码分析\n\nView的draw流程图如下\n\n![Viewdraw](http://p1.bpimg.com/567571/e7b2c1005fdb70b2.png)\n\n结论:\n* View需要在子类中实现onDraw的过程\n* 在ViewGroup中 会调用其子View的方法 顺序与子view的添加顺序一致\n\n\ndraw的源码也很长 但是官方也给出给出了draw的过程\n```java\n  public void draw(Canvas canvas) {\n     ...\n     /*\n      * Draw traversal performs several drawing steps which must be executed\n      * in the appropriate order:\n      *\n      *      1. Draw the background\n      *      2. If necessary, save the canvas' layers to prepare for fading\n      *      3. Draw view's content\n      *      4. Draw children\n      *      5. If necessary, draw the fading edges and restore layers\n      *      6. Draw decorations (scrollbars for instance)\n      */\n\n     // Step 1, draw the background, if needed\n     ...\n     if (!dirtyOpaque) {\n         drawBackground(canvas);\n     }\n\n     // skip step 2 & 5 if possible (common case)\n     ...\n\n     // Step 2, save the canvas' layers\n     ...\n         if (drawTop) {\n             canvas.saveLayer(left, top, right, top + length, null, flags);\n         }\n     ...\n\n     // Step 3, draw the content\n     if (!dirtyOpaque) onDraw(canvas);\n\n     // Step 4, draw the children\n     dispatchDraw(canvas);\n\n     // Step 5, draw the fade effect and restore layers\n     ...\n     if (drawTop) {\n         matrix.setScale(1, fadeHeight * topFadeStrength);\n         matrix.postTranslate(left, top);\n         fade.setLocalMatrix(matrix);\n         p.setShader(fade);\n         canvas.drawRect(left, top, right, top + length, p);\n     }\n     ...\n\n     // Step 6, draw decorations (scrollbars)\n     onDrawScrollBars(canvas);\n     ...\n }\n```\n\n#### Step 1, draw the background, if needed\n```java\n  // Step 1, draw the background, if needed\n  //如果需要的话绘制背景\n\n  if (!dirtyOpaque) {\n      drawBackground(canvas);\n  }\n```\n\n```java\n  private void drawBackground(Canvas canvas) {\n\n    \t//通过xml中属性background或者代码中setBackGroundColor\\setBackgroundResource等方法赋值的背景drawable\n        final Drawable background = mBackground;\n        if (background == null) {\n            return;\n        }\n\n        //根据layout中确定的view位置来设置背景的绘制区域\n        setBackgroundBounds();\n\n\n        // 如果需要的话使用显示列表\n        //canvas.isHardwareAccelerated() 硬件加速判定\n        //硬件加速时会将图层缓存到GPU上 而不是重绘View的每一层\n        if (canvas.isHardwareAccelerated() && mAttachInfo != null\n                && mAttachInfo.mHardwareRenderer != null) {\n            mBackgroundRenderNode = getDrawableRenderNode(background, mBackgroundRenderNode);\n\n            final RenderNode renderNode = mBackgroundRenderNode;\n            if (renderNode != null && renderNode.isValid()) {\n                setBackgroundRenderNodeProperties(renderNode);\n                ((DisplayListCanvas) canvas).drawRenderNode(renderNode);\n                return;\n            }\n        }\n\n        final int scrollX = mScrollX;\n        final int scrollY = mScrollY;\n        //调用Drawable的draw方法来完成背景的绘制工作\n        if ((scrollX | scrollY) == 0) {\n            background.draw(canvas);\n        } else {\n            canvas.translate(scrollX, scrollY);\n            background.draw(canvas);\n            canvas.translate(-scrollX, -scrollY);\n        }\n    }\n\n\n    void setBackgroundBounds() {\n    if (mBackgroundSizeChanged && mBackground != null) {\n        mBackground.setBounds(0, 0,  mRight - mLeft, mBottom - mTop);\n        mBackgroundSizeChanged = false;\n        rebuildOutline();\n    }\n  }\n```\n\n\n#### Step 2, save the canvas' layers\n```java\n  // Step 2, save the canvas' layers\n  //保存绘制图层\n\n         if (drawTop) {\n             canvas.saveLayer(left, top, right, top + length, null, flags);\n         }\n\n```\n\n#### Step 3, draw the content\n```java\n  // Step 3, draw the content\n  //对View的内容进行绘制\n  if (!dirtyOpaque) onDraw(canvas);\n```\n```java\n  /**\n  * Implement this to do your drawing.\n  *\n  * @param canvas the canvas on which the background will be drawn\n  */\n  //onDraw也是空方法需要子类根据自身去实现相应的\n  protected void onDraw(Canvas canvas) {\n  }\n\n```\n\n#### Step 4, draw the children\n```java\n  // Step 4, draw the children\n  //绘制其子View\n  dispatchDraw(canvas);\n```\n\n```java\n  /**\n   * Called by draw to draw the child views. This may be overridden\n   * by derived classes to gain control just before its children are drawn\n   * (but after its own view has been drawn).\n   * @param canvas the canvas on which to draw the view\n   */\n  protected void dispatchDraw(Canvas canvas) {\n  //dispatchDraw同样空方法 与onDraw不同的是dispatchDraw在ViewGroup中被重写\n  }\n```\n\nViewGroup\n```java\n  //dispatchDraw方法中根据子View的不同情况 包括但不只包括该View是否显示 是否有进入或消失动画等进行了部分的调整\n  protected void dispatchDraw(Canvas canvas) {\n      ...\n        more |= drawChild(canvas, transientChild, drawingTime);\n      ...    \n  }\n\n  protected boolean drawChild(Canvas canvas, View child, long drawingTime) {\n    return child.draw(canvas, this, drawingTime);\n  }\n```\n#### Step 5, draw the fade effect and restore layers\n\n```java\n  // Step 5, draw the fade effect and restore layers\n  //绘制过度效果和恢复图层\n  if (drawTop) {\n      matrix.setScale(1, fadeHeight * topFadeStrength);\n      matrix.postTranslate(left, top);\n      fade.setLocalMatrix(matrix);\n      p.setShader(fade);\n      canvas.drawRect(left, top, right, top + length, p);\n  }\n```\n\n####  Step 6, draw decorations (scrollbars)\n```java\n  // Step 6, draw decorations (scrollbars)\n  //对滚动条进行绘制\n  onDrawScrollBars(canvas);\n```\n","source":"_posts/View 绘制源码分析.md","raw":"---\ntitle: Android View 相关源码分析之三 View的绘制过程\ndate: 2017-02-03 17:48:05\ntags: [\"android\" , \"view\" , \"源码\"]\ncategories: \"android\"\n---\n\n# Android View\n>Android View框架相关  View的测量 布局 绘制过程\nLinearLayout RelativeLayout实现源码分析\n\n\n\n## View的测量 布局 绘制过程\n\n### 测量之前的事情\nView的整个绘制流程是开始于ViewRootImpl类的performTraversals方法(1k行)  根据相关设置来觉得十分要重新执行相关功能\n```java\n  private void performTraversals() {\n    // cache mView since it is used so much below...\n    final View host = mView;\n    ...\n    int childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);\n    int childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);\n    ...\n    //measure\n    mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n    ...\n    //layout\n    mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());\n    ...\n    //draw\n    mView.draw(canvas);\n    ...\n  }\n  ```\n  <!-- more -->\n  \n  ```java\n  private static int getRootMeasureSpec(int windowSize, int rootDimension) {\n        int measureSpec;\n        switch (rootDimension) {\n\n        case ViewGroup.LayoutParams.MATCH_PARENT:\n            // Window can't resize. Force root view to be windowSize.\n            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);\n            break;\n        ...\n        }\n        return measureSpec;\n    }\n  ```\nView 绘制整体流程图如下\n\n![View绘制整体流程图](http://p1.bqimg.com/567571/a5aa47e56fd6434a.png)\n\n### measure源码分析\n\n结论:\n* measure的过程就是父View向子View递归调用view.measure方法 (measure中回调onMeasure方法)的过程\n\n* measure方法是 final的 只能重载onMeasure方法\n\n* 最顶层的DocerView的MeasureSpec由ViewRootImpl的getRootMeasureSpec方法提供 LayoutParams的参数为MATCH_PARENT specMode是EXACTLY，specSize为物理屏幕大小\n\n* 只要是ViewGroup的子类就必须要求LayoutParams继承子MarginLayoutParams 否则无法使用layout_margin参数\n\n* View的getMeasuredWidth()和getMeasuredHeight()方法来获取View测量的宽高，要必须保证这两个方法在onMeasure流程之后被调用才能返回有效值。\n\n\n\n![View measure过程](/View measure过程.png)\n\n```java\n/**\n * <p>\n * This is called to find out how big a view should be. The parent supplies constraint information in the width and height parameters.\n * </p>\n *\n * <p>\n * The actual measurement work of a view is performed in\n * {@link #onMeasure(int, int)}, called by this method. Therefore, only\n * {@link #onMeasure(int, int)} can and must be overridden by subclasses.\n * </p>\n *\n *\n * @param widthMeasureSpec Horizontal space requirements as imposed by the\n *        parent\n * @param heightMeasureSpec Vertical space requirements as imposed by the\n *        parent\n *\n * @see #onMeasure(int, int)\n */\n //没舍得删这些注释  感觉重要的事情都说了   为了计算整个View树的实际大小 设置实际的高和宽 每个子View都是根据父视图和自身决定实际宽高的 在onMeasure()方法中进行实际测量.传入widthMeasureSpec和heightMeasureSpec参数来表示了父View的规格 不但传入了模式 还传入了size 而对于DecorView来说 传入的模式一般为EXACTLY模式 size对应屏幕的宽高. 所以说子View的大小是父子View共同决定的\npublic final void measure(int widthMeasureSpec, int heightMeasureSpec) {\n\n               // measure ourselves, this should set the measured dimension flag back\n               onMeasure(widthMeasureSpec, heightMeasureSpec);\n   }\n```\n\nMeasureSpec内部类\n\nMeasureSpec是View的内部类 int型，由高2位规格模式specMode和低30位具体尺寸specSize组成 其中specMode只有三种\n* MeasureSpec.EXACTLY //确定模式，父View希望子View的大小是确定的，由specSize决定；\n* MeasureSpec.AT_MOST //最多模式，父View希望子View的大小最多是specSize指定的值；\n* MeasureSpec.UNSPECIFIED //未指定模式，父View完全依据子View的设计值来决定；\n\nonMeasure()方法\n\n```java\n    /**\n     * <p>\n     * Measure the view and its content to determine the measured width and the\n     * measured height. This method is invoked by {@link #measure(int, int)} and\n     * should be overridden by subclasses to provide accurate and efficient\n     * measurement of their contents.\n     * </p>\n     *\n     * <p>\n     * <strong>CONTRACT:</strong> When overriding this method, you\n     * <em>must</em> call {@link #setMeasuredDimension(int, int)} to store the\n     * measured width and height of this view. Failure to do so will trigger an\n     * <code>IllegalStateException</code>, thrown by\n     * {@link #measure(int, int)}. Calling the superclass'\n     * {@link #onMeasure(int, int)} is a valid use.\n     * </p>\n     *\n     * <p>\n     * The base class implementation of measure defaults to the background size,\n     * unless a larger size is allowed by the MeasureSpec. Subclasses should\n     * override {@link #onMeasure(int, int)} to provide better measurements of\n     * their content.\n     * </p>\n     *\n     * <p>\n     * If this method is overridden, it is the subclass's responsibility to make\n     * sure the measured height and width are at least the view's minimum height\n     * and width ({@link #getSuggestedMinimumHeight()} and\n     * {@link #getSuggestedMinimumWidth()}).\n     * </p>\n     *\n     * @param widthMeasureSpec horizontal space requirements as imposed by the parent.\n     *                         The requirements are encoded with\n     *                         {@link android.view.View.MeasureSpec}.\n     * @param heightMeasureSpec vertical space requirements as imposed by the parent.\n     *                         The requirements are encoded with\n     *                         {@link android.view.View.MeasureSpec}.\n     *\n     * @see #getMeasuredWidth()\n     * @see #getMeasuredHeight()\n     * @see #setMeasuredDimension(int, int)\n     * @see #getSuggestedMinimumHeight()\n     * @see #getSuggestedMinimumWidth()\n     * @see android.view.View.MeasureSpec#getMode(int)\n     * @see android.view.View.MeasureSpec#getSize(int)\n     */\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n    }\n```\ngetDefaultSize方法相关\n```java\n  public static int getDefaultSize(int size, int measureSpec) {\n    int result = size;\n    //通过measureSpec得到mode和size\n    int specMode = MeasureSpec.getMode(measureSpec);\n    int specSize = MeasureSpec.getSize(measureSpec);\n\n    switch (specMode) {\n    case MeasureSpec.UNSPECIFIED:\n        result = size;\n        break;\n    case MeasureSpec.AT_MOST:\n    case MeasureSpec.EXACTLY:\n        result = specSize;\n        break;\n    }\n    return result;\n  }\n\n  //最小宽度和高度由View的Background尺寸和View的minXXX共同决定\n  protected int getSuggestedMinimumHeight() {\n      return (mBackground == null) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());\n\n  }\n  protected int getSuggestedMinimumWidth() {\n      return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());\n  }\n```\nsetMeasuredDimension方法 对View的成员变量measuredWidth和measuredHeight变量赋值 也就是说该方法最终决定了View的大小\n```java\n  protected final void setMeasuredDimension(int measuredWidth, int measuredHeight) {\n      boolean optical = isLayoutModeOptical(this);\n      if (optical != isLayoutModeOptical(mParent)) {\n          Insets insets = getOpticalInsets();\n          int opticalWidth  = insets.left + insets.right;\n          int opticalHeight = insets.top  + insets.bottom;\n\n          measuredWidth  += optical ? opticalWidth  : -opticalWidth;\n          measuredHeight += optical ? opticalHeight : -opticalHeight;\n      }\n      setMeasuredDimensionRaw(measuredWidth, measuredHeight);\n  }\n\n  public boolean isLayoutRequested() {\n    return (mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT;\n  }\n\n  private void setMeasuredDimensionRaw(int measuredWidth, int measuredHeight) {\n    mMeasuredWidth = measuredWidth;\n    mMeasuredHeight = measuredHeight;\n\n    mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;\n  }\n```\n\n至此一次最基础的View的measure过程就完成了  但是由于View可以嵌套  所以measure是递归传递的所以ViewGroup中需要对其子类进行measure过程 measureChildren方法实质为循环调用measureChild方法\n\n而measureChild和measureChildWithMargins的区别是后者将margin和padding也作为了子视图的大小\n\n一下分析measureChildWithMargins方法\n```java\n  protected void measureChildWithMargins(View child,\n          int parentWidthMeasureSpec, int widthUsed,\n          int parentHeightMeasureSpec, int heightUsed) {\n      //获取当前子视图的LayoutParams\n      final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();\n      //设定子View的测量规格\n      final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\n              mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin\n                      + widthUsed, lp.width);\n      final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\n              mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin\n                      + heightUsed, lp.height);\n      //子view的继续调用\n      child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n  }\n\n  //在getChildMeasureSpec中通过父View和本身的模式共同决定当前View的size\n  public static int getChildMeasureSpec(int spec, int padding, int childDimension) {\n        //获取当前父View的mode和size\n        int specMode = MeasureSpec.getMode(spec);\n        int specSize = MeasureSpec.getSize(spec);\n        //获取父View的的剩余大小\n        int size = Math.max(0, specSize - padding);\n        //定义结果变量\n        int resultSize = 0;\n        int resultMode = 0;\n        //根据对应的mode做处理\n        //通过父View和本身的模式共同决定当前View的size\n        switch (specMode) {\n        // Parent has imposed an exact size on us\n        case MeasureSpec.EXACTLY:\n            if (childDimension >= 0) {\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size. So be it.\n                resultSize = size;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent has imposed a maximum size on us\n        case MeasureSpec.AT_MOST:\n            if (childDimension >= 0) {\n                // Child wants a specific size... so be it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size, but our size is not fixed.\n                // Constrain child to not be bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent asked to see how big we want to be\n        case MeasureSpec.UNSPECIFIED:\n            if (childDimension >= 0) {\n                // Child wants a specific size... let him have it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size... find out how big it should\n                // be\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size.... find out how\n                // big it should be\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            }\n            break;\n        }\n        //将size和mode整合为MeasureSpec模式后返回\n        return MeasureSpec.makeMeasureSpec(resultSize, resultMode);\n    }\n\n```\n\n### layout源码分析\nView layout整体流程与measure过程基本一样\n\n结论:\n* 需要根据ViewGroup本身的情况讨论 LinearLayout下会更看重子View的height和width 来安排对应位置 而RelativeLayout则更加关注子View的left right top bottom值 并且优先级高于width和height 甚至在部分自定义ViewGroup中 measure可能是无用的   直接使用layout方法来设置子View的位置也可以\n* ViewGroup需要实现自己的layout逻辑\n* layout_XXX中的各个熟悉都是针对子View的父ViewGroup的\n* 同样使用View的getWidth()和getHeight()方法来获取View测量的宽高 必须保证这两个方法在onLayout流程之后被调用才能返回有效值\n\n```java\n  /**\n     * Assign a size and position to a view and all of its\n     * descendants\n     *\n     * <p>This is the second phase of the layout mechanism.\n     * (The first is measuring). In this phase, each parent calls\n     * layout on all of its children to position them.\n     * This is typically done using the child measurements\n     * that were stored in the measure pass().</p>\n     *\n     * <p>Derived classes should not override this method.\n     * Derived classes with children should override\n     * onLayout. In that method, they should\n     * call layout on each of their children.</p>\n     *\n     * @param l Left position, relative to parent\n     * @param t Top position, relative to parent\n     * @param r Right position, relative to parent\n     * @param b Bottom position, relative to parent\n     */\n\n     //同样注解写的很好了  分派给他和他的所有的子视图大小和位置\n    @SuppressWarnings({\"unchecked\"})\n    public void layout(int l, int t, int r, int b) {\n        if ((mPrivateFlags3 & PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != 0) {\n            onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);\n            mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n        }\n         //调用setFrame方法把参数分别赋值于\n        int oldL = mLeft;\n        int oldT = mTop;\n        int oldB = mBottom;\n        int oldR = mRight;\n        //判断view的位置是否发生过变化 , 确定是否对当前view重新layout\n        boolean changed = isLayoutModeOptical(mParent) ?\n                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);\n\n\n        if (changed || (mPrivateFlags & PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) {\n            //调用onLayout\n            onLayout(changed, l, t, r, b);\n            mPrivateFlags &= ~PFLAG_LAYOUT_REQUIRED;\n            ListenerInfo li = mListenerInfo;\n            if (li != null && li.mOnLayoutChangeListeners != null) {\n                ArrayList<OnLayoutChangeListener> listenersCopy =\n                        (ArrayList<OnLayoutChangeListener>)li.mOnLayoutChangeListeners.clone();\n                int numListeners = listenersCopy.size();\n                for (int i = 0; i < numListeners; ++i) {\n                    listenersCopy.get(i).onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB);\n                }\n            }\n        }\n\n        mPrivateFlags &= ~PFLAG_FORCE_LAYOUT;\n        mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;\n    }\n```\n\nonLyayout方法\n```java\n  View中\n  protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n  }\n  ViewGroup中\n  protected abstract void onLayout(boolean changed,\n        int l, int t, int r, int b);\n```\n\n均是空方法  后面会就LinearLayout和RelativeLayout源码进行分析\n\n### draw源码分析\n\nView的draw流程图如下\n\n![Viewdraw](http://p1.bpimg.com/567571/e7b2c1005fdb70b2.png)\n\n结论:\n* View需要在子类中实现onDraw的过程\n* 在ViewGroup中 会调用其子View的方法 顺序与子view的添加顺序一致\n\n\ndraw的源码也很长 但是官方也给出给出了draw的过程\n```java\n  public void draw(Canvas canvas) {\n     ...\n     /*\n      * Draw traversal performs several drawing steps which must be executed\n      * in the appropriate order:\n      *\n      *      1. Draw the background\n      *      2. If necessary, save the canvas' layers to prepare for fading\n      *      3. Draw view's content\n      *      4. Draw children\n      *      5. If necessary, draw the fading edges and restore layers\n      *      6. Draw decorations (scrollbars for instance)\n      */\n\n     // Step 1, draw the background, if needed\n     ...\n     if (!dirtyOpaque) {\n         drawBackground(canvas);\n     }\n\n     // skip step 2 & 5 if possible (common case)\n     ...\n\n     // Step 2, save the canvas' layers\n     ...\n         if (drawTop) {\n             canvas.saveLayer(left, top, right, top + length, null, flags);\n         }\n     ...\n\n     // Step 3, draw the content\n     if (!dirtyOpaque) onDraw(canvas);\n\n     // Step 4, draw the children\n     dispatchDraw(canvas);\n\n     // Step 5, draw the fade effect and restore layers\n     ...\n     if (drawTop) {\n         matrix.setScale(1, fadeHeight * topFadeStrength);\n         matrix.postTranslate(left, top);\n         fade.setLocalMatrix(matrix);\n         p.setShader(fade);\n         canvas.drawRect(left, top, right, top + length, p);\n     }\n     ...\n\n     // Step 6, draw decorations (scrollbars)\n     onDrawScrollBars(canvas);\n     ...\n }\n```\n\n#### Step 1, draw the background, if needed\n```java\n  // Step 1, draw the background, if needed\n  //如果需要的话绘制背景\n\n  if (!dirtyOpaque) {\n      drawBackground(canvas);\n  }\n```\n\n```java\n  private void drawBackground(Canvas canvas) {\n\n    \t//通过xml中属性background或者代码中setBackGroundColor\\setBackgroundResource等方法赋值的背景drawable\n        final Drawable background = mBackground;\n        if (background == null) {\n            return;\n        }\n\n        //根据layout中确定的view位置来设置背景的绘制区域\n        setBackgroundBounds();\n\n\n        // 如果需要的话使用显示列表\n        //canvas.isHardwareAccelerated() 硬件加速判定\n        //硬件加速时会将图层缓存到GPU上 而不是重绘View的每一层\n        if (canvas.isHardwareAccelerated() && mAttachInfo != null\n                && mAttachInfo.mHardwareRenderer != null) {\n            mBackgroundRenderNode = getDrawableRenderNode(background, mBackgroundRenderNode);\n\n            final RenderNode renderNode = mBackgroundRenderNode;\n            if (renderNode != null && renderNode.isValid()) {\n                setBackgroundRenderNodeProperties(renderNode);\n                ((DisplayListCanvas) canvas).drawRenderNode(renderNode);\n                return;\n            }\n        }\n\n        final int scrollX = mScrollX;\n        final int scrollY = mScrollY;\n        //调用Drawable的draw方法来完成背景的绘制工作\n        if ((scrollX | scrollY) == 0) {\n            background.draw(canvas);\n        } else {\n            canvas.translate(scrollX, scrollY);\n            background.draw(canvas);\n            canvas.translate(-scrollX, -scrollY);\n        }\n    }\n\n\n    void setBackgroundBounds() {\n    if (mBackgroundSizeChanged && mBackground != null) {\n        mBackground.setBounds(0, 0,  mRight - mLeft, mBottom - mTop);\n        mBackgroundSizeChanged = false;\n        rebuildOutline();\n    }\n  }\n```\n\n\n#### Step 2, save the canvas' layers\n```java\n  // Step 2, save the canvas' layers\n  //保存绘制图层\n\n         if (drawTop) {\n             canvas.saveLayer(left, top, right, top + length, null, flags);\n         }\n\n```\n\n#### Step 3, draw the content\n```java\n  // Step 3, draw the content\n  //对View的内容进行绘制\n  if (!dirtyOpaque) onDraw(canvas);\n```\n```java\n  /**\n  * Implement this to do your drawing.\n  *\n  * @param canvas the canvas on which the background will be drawn\n  */\n  //onDraw也是空方法需要子类根据自身去实现相应的\n  protected void onDraw(Canvas canvas) {\n  }\n\n```\n\n#### Step 4, draw the children\n```java\n  // Step 4, draw the children\n  //绘制其子View\n  dispatchDraw(canvas);\n```\n\n```java\n  /**\n   * Called by draw to draw the child views. This may be overridden\n   * by derived classes to gain control just before its children are drawn\n   * (but after its own view has been drawn).\n   * @param canvas the canvas on which to draw the view\n   */\n  protected void dispatchDraw(Canvas canvas) {\n  //dispatchDraw同样空方法 与onDraw不同的是dispatchDraw在ViewGroup中被重写\n  }\n```\n\nViewGroup\n```java\n  //dispatchDraw方法中根据子View的不同情况 包括但不只包括该View是否显示 是否有进入或消失动画等进行了部分的调整\n  protected void dispatchDraw(Canvas canvas) {\n      ...\n        more |= drawChild(canvas, transientChild, drawingTime);\n      ...    \n  }\n\n  protected boolean drawChild(Canvas canvas, View child, long drawingTime) {\n    return child.draw(canvas, this, drawingTime);\n  }\n```\n#### Step 5, draw the fade effect and restore layers\n\n```java\n  // Step 5, draw the fade effect and restore layers\n  //绘制过度效果和恢复图层\n  if (drawTop) {\n      matrix.setScale(1, fadeHeight * topFadeStrength);\n      matrix.postTranslate(left, top);\n      fade.setLocalMatrix(matrix);\n      p.setShader(fade);\n      canvas.drawRect(left, top, right, top + length, p);\n  }\n```\n\n####  Step 6, draw decorations (scrollbars)\n```java\n  // Step 6, draw decorations (scrollbars)\n  //对滚动条进行绘制\n  onDrawScrollBars(canvas);\n```\n","slug":"View 绘制源码分析","published":1,"updated":"2017-02-06T14:56:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8cwyb63000qo3xwigs2brlt","content":"<h1 id=\"Android-View\"><a href=\"#Android-View\" class=\"headerlink\" title=\"Android View\"></a>Android View</h1><blockquote>\n<p>Android View框架相关  View的测量 布局 绘制过程<br>LinearLayout RelativeLayout实现源码分析</p>\n</blockquote>\n<h2 id=\"View的测量-布局-绘制过程\"><a href=\"#View的测量-布局-绘制过程\" class=\"headerlink\" title=\"View的测量 布局 绘制过程\"></a>View的测量 布局 绘制过程</h2><h3 id=\"测量之前的事情\"><a href=\"#测量之前的事情\" class=\"headerlink\" title=\"测量之前的事情\"></a>测量之前的事情</h3><p>View的整个绘制流程是开始于ViewRootImpl类的performTraversals方法(1k行)  根据相关设置来觉得十分要重新执行相关功能<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performTraversals</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// cache mView since it is used so much below...</span></div><div class=\"line\">  <span class=\"keyword\">final</span> View host = mView;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"keyword\">int</span> childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);</div><div class=\"line\">  <span class=\"keyword\">int</span> childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">//measure</span></div><div class=\"line\">  mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">//layout</span></div><div class=\"line\">  mView.layout(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mView.getMeasuredWidth(), mView.getMeasuredHeight());</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">//draw</span></div><div class=\"line\">  mView.draw(canvas);</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n  <a id=\"more\"></a>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getRootMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> windowSize, <span class=\"keyword\">int</span> rootDimension)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> measureSpec;</div><div class=\"line\">      <span class=\"keyword\">switch</span> (rootDimension) &#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> ViewGroup.LayoutParams.MATCH_PARENT:</div><div class=\"line\">          <span class=\"comment\">// Window can't resize. Force root view to be windowSize.</span></div><div class=\"line\">          measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">      ...</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> measureSpec;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>View 绘制整体流程图如下</p>\n<p><img src=\"http://p1.bqimg.com/567571/a5aa47e56fd6434a.png\" alt=\"View绘制整体流程图\"></p>\n<h3 id=\"measure源码分析\"><a href=\"#measure源码分析\" class=\"headerlink\" title=\"measure源码分析\"></a>measure源码分析</h3><p>结论:</p>\n<ul>\n<li><p>measure的过程就是父View向子View递归调用view.measure方法 (measure中回调onMeasure方法)的过程</p>\n</li>\n<li><p>measure方法是 final的 只能重载onMeasure方法</p>\n</li>\n<li><p>最顶层的DocerView的MeasureSpec由ViewRootImpl的getRootMeasureSpec方法提供 LayoutParams的参数为MATCH_PARENT specMode是EXACTLY，specSize为物理屏幕大小</p>\n</li>\n<li><p>只要是ViewGroup的子类就必须要求LayoutParams继承子MarginLayoutParams 否则无法使用layout_margin参数</p>\n</li>\n<li><p>View的getMeasuredWidth()和getMeasuredHeight()方法来获取View测量的宽高，要必须保证这两个方法在onMeasure流程之后被调用才能返回有效值。</p>\n</li>\n</ul>\n<p><img src=\"/View measure过程.png\" alt=\"View measure过程\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * This is called to find out how big a view should be. The parent supplies constraint information in the width and height parameters.</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * The actual measurement work of a view is performed in</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125;, called by this method. Therefore, only</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; can and must be overridden by subclasses.</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> widthMeasureSpec Horizontal space requirements as imposed by the</div><div class=\"line\"> *        parent</div><div class=\"line\"> * <span class=\"doctag\">@param</span> heightMeasureSpec Vertical space requirements as imposed by the</div><div class=\"line\"> *        parent</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #onMeasure(int, int)</div><div class=\"line\"> */</div><div class=\"line\"> <span class=\"comment\">//没舍得删这些注释  感觉重要的事情都说了   为了计算整个View树的实际大小 设置实际的高和宽 每个子View都是根据父视图和自身决定实际宽高的 在onMeasure()方法中进行实际测量.传入widthMeasureSpec和heightMeasureSpec参数来表示了父View的规格 不但传入了模式 还传入了size 而对于DecorView来说 传入的模式一般为EXACTLY模式 size对应屏幕的宽高. 所以说子View的大小是父子View共同决定的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">measure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"comment\">// measure ourselves, this should set the measured dimension flag back</span></div><div class=\"line\">               onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>MeasureSpec内部类</p>\n<p>MeasureSpec是View的内部类 int型，由高2位规格模式specMode和低30位具体尺寸specSize组成 其中specMode只有三种</p>\n<ul>\n<li>MeasureSpec.EXACTLY //确定模式，父View希望子View的大小是确定的，由specSize决定；</li>\n<li>MeasureSpec.AT_MOST //最多模式，父View希望子View的大小最多是specSize指定的值；</li>\n<li>MeasureSpec.UNSPECIFIED //未指定模式，父View完全依据子View的设计值来决定；</li>\n</ul>\n<p>onMeasure()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * Measure the view and its content to determine the measured width and the</div><div class=\"line\"> * measured height. This method is invoked by &#123;<span class=\"doctag\">@link</span> #measure(int, int)&#125; and</div><div class=\"line\"> * should be overridden by subclasses to provide accurate and efficient</div><div class=\"line\"> * measurement of their contents.</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * &lt;strong&gt;CONTRACT:&lt;/strong&gt; When overriding this method, you</div><div class=\"line\"> * &lt;em&gt;must&lt;/em&gt; call &#123;<span class=\"doctag\">@link</span> #setMeasuredDimension(int, int)&#125; to store the</div><div class=\"line\"> * measured width and height of this view. Failure to do so will trigger an</div><div class=\"line\"> * &lt;code&gt;IllegalStateException&lt;/code&gt;, thrown by</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #measure(int, int)&#125;. Calling the superclass'</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; is a valid use.</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * The base class implementation of measure defaults to the background size,</div><div class=\"line\"> * unless a larger size is allowed by the MeasureSpec. Subclasses should</div><div class=\"line\"> * override &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; to provide better measurements of</div><div class=\"line\"> * their content.</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * If this method is overridden, it is the subclass's responsibility to make</div><div class=\"line\"> * sure the measured height and width are at least the view's minimum height</div><div class=\"line\"> * and width (&#123;<span class=\"doctag\">@link</span> #getSuggestedMinimumHeight()&#125; and</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #getSuggestedMinimumWidth()&#125;).</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> widthMeasureSpec horizontal space requirements as imposed by the parent.</div><div class=\"line\"> *                         The requirements are encoded with</div><div class=\"line\"> *                         &#123;<span class=\"doctag\">@link</span> android.view.View.MeasureSpec&#125;.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> heightMeasureSpec vertical space requirements as imposed by the parent.</div><div class=\"line\"> *                         The requirements are encoded with</div><div class=\"line\"> *                         &#123;<span class=\"doctag\">@link</span> android.view.View.MeasureSpec&#125;.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #getMeasuredWidth()</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #getMeasuredHeight()</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #setMeasuredDimension(int, int)</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #getSuggestedMinimumHeight()</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #getSuggestedMinimumWidth()</div><div class=\"line\"> * <span class=\"doctag\">@see</span> android.view.View.MeasureSpec#getMode(int)</div><div class=\"line\"> * <span class=\"doctag\">@see</span> android.view.View.MeasureSpec#getSize(int)</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</div><div class=\"line\">            getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>getDefaultSize方法相关<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> result = size;</div><div class=\"line\">  <span class=\"comment\">//通过measureSpec得到mode和size</span></div><div class=\"line\">  <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class=\"line\">  <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">      result = size;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">  <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">      result = specSize;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//最小宽度和高度由View的Background尺寸和View的minXXX共同决定</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumHeight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumWidth</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>setMeasuredDimension方法 对View的成员变量measuredWidth和measuredHeight变量赋值 也就是说该方法最终决定了View的大小<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasuredDimension</span><span class=\"params\">(<span class=\"keyword\">int</span> measuredWidth, <span class=\"keyword\">int</span> measuredHeight)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> optical = isLayoutModeOptical(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (optical != isLayoutModeOptical(mParent)) &#123;</div><div class=\"line\">        Insets insets = getOpticalInsets();</div><div class=\"line\">        <span class=\"keyword\">int</span> opticalWidth  = insets.left + insets.right;</div><div class=\"line\">        <span class=\"keyword\">int</span> opticalHeight = insets.top  + insets.bottom;</div><div class=\"line\"></div><div class=\"line\">        measuredWidth  += optical ? opticalWidth  : -opticalWidth;</div><div class=\"line\">        measuredHeight += optical ? opticalHeight : -opticalHeight;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setMeasuredDimensionRaw(measuredWidth, measuredHeight);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLayoutRequested</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (mPrivateFlags &amp; PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasuredDimensionRaw</span><span class=\"params\">(<span class=\"keyword\">int</span> measuredWidth, <span class=\"keyword\">int</span> measuredHeight)</span> </span>&#123;</div><div class=\"line\">  mMeasuredWidth = measuredWidth;</div><div class=\"line\">  mMeasuredHeight = measuredHeight;</div><div class=\"line\"></div><div class=\"line\">  mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>至此一次最基础的View的measure过程就完成了  但是由于View可以嵌套  所以measure是递归传递的所以ViewGroup中需要对其子类进行measure过程 measureChildren方法实质为循环调用measureChild方法</p>\n<p>而measureChild和measureChildWithMargins的区别是后者将margin和padding也作为了子视图的大小</p>\n<p>一下分析measureChildWithMargins方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildWithMargins</span><span class=\"params\">(View child,</span></span></div><div class=\"line\">        <span class=\"keyword\">int</span> parentWidthMeasureSpec, <span class=\"keyword\">int</span> widthUsed,</div><div class=\"line\">        <span class=\"keyword\">int</span> parentHeightMeasureSpec, <span class=\"keyword\">int</span> heightUsed) &#123;</div><div class=\"line\">    <span class=\"comment\">//获取当前子视图的LayoutParams</span></div><div class=\"line\">    <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class=\"line\">    <span class=\"comment\">//设定子View的测量规格</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</div><div class=\"line\">            mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin</div><div class=\"line\">                    + widthUsed, lp.width);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</div><div class=\"line\">            mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin</div><div class=\"line\">                    + heightUsed, lp.height);</div><div class=\"line\">    <span class=\"comment\">//子view的继续调用</span></div><div class=\"line\">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//在getChildMeasureSpec中通过父View和本身的模式共同决定当前View的size</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec, <span class=\"keyword\">int</span> padding, <span class=\"keyword\">int</span> childDimension)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//获取当前父View的mode和size</span></div><div class=\"line\">      <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);</div><div class=\"line\">      <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</div><div class=\"line\">      <span class=\"comment\">//获取父View的的剩余大小</span></div><div class=\"line\">      <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>, specSize - padding);</div><div class=\"line\">      <span class=\"comment\">//定义结果变量</span></div><div class=\"line\">      <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"comment\">//根据对应的mode做处理</span></div><div class=\"line\">      <span class=\"comment\">//通过父View和本身的模式共同决定当前View的size</span></div><div class=\"line\">      <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">      <span class=\"comment\">// Parent has imposed an exact size on us</span></div><div class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              resultSize = childDimension;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to be our size. So be it.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to determine its own size. It can't be</span></div><div class=\"line\">              <span class=\"comment\">// bigger than us.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Parent has imposed a maximum size on us</span></div><div class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants a specific size... so be it</span></div><div class=\"line\">              resultSize = childDimension;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to be our size, but our size is not fixed.</span></div><div class=\"line\">              <span class=\"comment\">// Constrain child to not be bigger than us.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to determine its own size. It can't be</span></div><div class=\"line\">              <span class=\"comment\">// bigger than us.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Parent asked to see how big we want to be</span></div><div class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants a specific size... let him have it</span></div><div class=\"line\">              resultSize = childDimension;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to be our size... find out how big it should</span></div><div class=\"line\">              <span class=\"comment\">// be</span></div><div class=\"line\">              resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</div><div class=\"line\">              resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to determine its own size.... find out how</span></div><div class=\"line\">              <span class=\"comment\">// big it should be</span></div><div class=\"line\">              resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</div><div class=\"line\">              resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">//将size和mode整合为MeasureSpec模式后返回</span></div><div class=\"line\">      <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"layout源码分析\"><a href=\"#layout源码分析\" class=\"headerlink\" title=\"layout源码分析\"></a>layout源码分析</h3><p>View layout整体流程与measure过程基本一样</p>\n<p>结论:</p>\n<ul>\n<li>需要根据ViewGroup本身的情况讨论 LinearLayout下会更看重子View的height和width 来安排对应位置 而RelativeLayout则更加关注子View的left right top bottom值 并且优先级高于width和height 甚至在部分自定义ViewGroup中 measure可能是无用的   直接使用layout方法来设置子View的位置也可以</li>\n<li>ViewGroup需要实现自己的layout逻辑</li>\n<li>layout_XXX中的各个熟悉都是针对子View的父ViewGroup的</li>\n<li>同样使用View的getWidth()和getHeight()方法来获取View测量的宽高 必须保证这两个方法在onLayout流程之后被调用才能返回有效值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">   * Assign a size and position to a view and all of its</div><div class=\"line\">   * descendants</div><div class=\"line\">   *</div><div class=\"line\">   * &lt;p&gt;This is the second phase of the layout mechanism.</div><div class=\"line\">   * (The first is measuring). In this phase, each parent calls</div><div class=\"line\">   * layout on all of its children to position them.</div><div class=\"line\">   * This is typically done using the child measurements</div><div class=\"line\">   * that were stored in the measure pass().&lt;/p&gt;</div><div class=\"line\">   *</div><div class=\"line\">   * &lt;p&gt;Derived classes should not override this method.</div><div class=\"line\">   * Derived classes with children should override</div><div class=\"line\">   * onLayout. In that method, they should</div><div class=\"line\">   * call layout on each of their children.&lt;/p&gt;</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> l Left position, relative to parent</div><div class=\"line\">   * <span class=\"doctag\">@param</span> t Top position, relative to parent</div><div class=\"line\">   * <span class=\"doctag\">@param</span> r Right position, relative to parent</div><div class=\"line\">   * <span class=\"doctag\">@param</span> b Bottom position, relative to parent</div><div class=\"line\">   */</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//同样注解写的很好了  分派给他和他的所有的子视图大小和位置</span></div><div class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"unchecked\"</span>&#125;)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</div><div class=\"line\">          mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</div><div class=\"line\">      &#125;</div><div class=\"line\">       <span class=\"comment\">//调用setFrame方法把参数分别赋值于</span></div><div class=\"line\">      <span class=\"keyword\">int</span> oldL = mLeft;</div><div class=\"line\">      <span class=\"keyword\">int</span> oldT = mTop;</div><div class=\"line\">      <span class=\"keyword\">int</span> oldB = mBottom;</div><div class=\"line\">      <span class=\"keyword\">int</span> oldR = mRight;</div><div class=\"line\">      <span class=\"comment\">//判断view的位置是否发生过变化 , 确定是否对当前view重新layout</span></div><div class=\"line\">      <span class=\"keyword\">boolean</span> changed = isLayoutModeOptical(mParent) ?</div><div class=\"line\">              setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</div><div class=\"line\">          <span class=\"comment\">//调用onLayout</span></div><div class=\"line\">          onLayout(changed, l, t, r, b);</div><div class=\"line\">          mPrivateFlags &amp;= ~PFLAG_LAYOUT_REQUIRED;</div><div class=\"line\">          ListenerInfo li = mListenerInfo;</div><div class=\"line\">          <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnLayoutChangeListeners != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =</div><div class=\"line\">                      (ArrayList&lt;OnLayoutChangeListener&gt;)li.mOnLayoutChangeListeners.clone();</div><div class=\"line\">              <span class=\"keyword\">int</span> numListeners = listenersCopy.size();</div><div class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numListeners; ++i) &#123;</div><div class=\"line\">                  listenersCopy.get(i).onLayoutChange(<span class=\"keyword\">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      mPrivateFlags &amp;= ~PFLAG_FORCE_LAYOUT;</div><div class=\"line\">      mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>onLyayout方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">View中</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">ViewGroup中</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed,</span></span></div><div class=\"line\">      <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b);</div></pre></td></tr></table></figure></p>\n<p>均是空方法  后面会就LinearLayout和RelativeLayout源码进行分析</p>\n<h3 id=\"draw源码分析\"><a href=\"#draw源码分析\" class=\"headerlink\" title=\"draw源码分析\"></a>draw源码分析</h3><p>View的draw流程图如下</p>\n<p><img src=\"http://p1.bpimg.com/567571/e7b2c1005fdb70b2.png\" alt=\"Viewdraw\"></p>\n<p>结论:</p>\n<ul>\n<li>View需要在子类中实现onDraw的过程</li>\n<li>在ViewGroup中 会调用其子View的方法 顺序与子view的添加顺序一致</li>\n</ul>\n<p>draw的源码也很长 但是官方也给出给出了draw的过程<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Draw traversal performs several drawing steps which must be executed</div><div class=\"line\">     * in the appropriate order:</div><div class=\"line\">     *</div><div class=\"line\">     *      1. Draw the background</div><div class=\"line\">     *      2. If necessary, save the canvas' layers to prepare for fading</div><div class=\"line\">     *      3. Draw view's content</div><div class=\"line\">     *      4. Draw children</div><div class=\"line\">     *      5. If necessary, draw the fading edges and restore layers</div><div class=\"line\">     *      6. Draw decorations (scrollbars for instance)</div><div class=\"line\">     */</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 1, draw the background, if needed</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> (!dirtyOpaque) &#123;</div><div class=\"line\">        drawBackground(canvas);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// skip step 2 &amp; 5 if possible (common case)</span></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 2, save the canvas' layers</span></div><div class=\"line\">    ...</div><div class=\"line\">        <span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">            canvas.saveLayer(left, top, right, top + length, <span class=\"keyword\">null</span>, flags);</div><div class=\"line\">        &#125;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 3, draw the content</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!dirtyOpaque) onDraw(canvas);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 4, draw the children</span></div><div class=\"line\">    dispatchDraw(canvas);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 5, draw the fade effect and restore layers</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">        matrix.setScale(<span class=\"number\">1</span>, fadeHeight * topFadeStrength);</div><div class=\"line\">        matrix.postTranslate(left, top);</div><div class=\"line\">        fade.setLocalMatrix(matrix);</div><div class=\"line\">        p.setShader(fade);</div><div class=\"line\">        canvas.drawRect(left, top, right, top + length, p);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 6, draw decorations (scrollbars)</span></div><div class=\"line\">    onDrawScrollBars(canvas);</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Step-1-draw-the-background-if-needed\"><a href=\"#Step-1-draw-the-background-if-needed\" class=\"headerlink\" title=\"Step 1, draw the background, if needed\"></a>Step 1, draw the background, if needed</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 1, draw the background, if needed</span></div><div class=\"line\"><span class=\"comment\">//如果需要的话绘制背景</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (!dirtyOpaque) &#123;</div><div class=\"line\">    drawBackground(canvas);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">drawBackground</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  \t<span class=\"comment\">//通过xml中属性background或者代码中setBackGroundColor\\setBackgroundResource等方法赋值的背景drawable</span></div><div class=\"line\">      <span class=\"keyword\">final</span> Drawable background = mBackground;</div><div class=\"line\">      <span class=\"keyword\">if</span> (background == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//根据layout中确定的view位置来设置背景的绘制区域</span></div><div class=\"line\">      setBackgroundBounds();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 如果需要的话使用显示列表</span></div><div class=\"line\">      <span class=\"comment\">//canvas.isHardwareAccelerated() 硬件加速判定</span></div><div class=\"line\">      <span class=\"comment\">//硬件加速时会将图层缓存到GPU上 而不是重绘View的每一层</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (canvas.isHardwareAccelerated() &amp;&amp; mAttachInfo != <span class=\"keyword\">null</span></div><div class=\"line\">              &amp;&amp; mAttachInfo.mHardwareRenderer != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          mBackgroundRenderNode = getDrawableRenderNode(background, mBackgroundRenderNode);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">final</span> RenderNode renderNode = mBackgroundRenderNode;</div><div class=\"line\">          <span class=\"keyword\">if</span> (renderNode != <span class=\"keyword\">null</span> &amp;&amp; renderNode.isValid()) &#123;</div><div class=\"line\">              setBackgroundRenderNodeProperties(renderNode);</div><div class=\"line\">              ((DisplayListCanvas) canvas).drawRenderNode(renderNode);</div><div class=\"line\">              <span class=\"keyword\">return</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrollX = mScrollX;</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrollY = mScrollY;</div><div class=\"line\">      <span class=\"comment\">//调用Drawable的draw方法来完成背景的绘制工作</span></div><div class=\"line\">      <span class=\"keyword\">if</span> ((scrollX | scrollY) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          background.draw(canvas);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          canvas.translate(scrollX, scrollY);</div><div class=\"line\">          background.draw(canvas);</div><div class=\"line\">          canvas.translate(-scrollX, -scrollY);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setBackgroundBounds</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mBackgroundSizeChanged &amp;&amp; mBackground != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      mBackground.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>,  mRight - mLeft, mBottom - mTop);</div><div class=\"line\">      mBackgroundSizeChanged = <span class=\"keyword\">false</span>;</div><div class=\"line\">      rebuildOutline();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Step-2-save-the-canvas’-layers\"><a href=\"#Step-2-save-the-canvas’-layers\" class=\"headerlink\" title=\"Step 2, save the canvas’ layers\"></a>Step 2, save the canvas’ layers</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 2, save the canvas' layers</span></div><div class=\"line\"><span class=\"comment\">//保存绘制图层</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">           canvas.saveLayer(left, top, right, top + length, <span class=\"keyword\">null</span>, flags);</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Step-3-draw-the-content\"><a href=\"#Step-3-draw-the-content\" class=\"headerlink\" title=\"Step 3, draw the content\"></a>Step 3, draw the content</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 3, draw the content</span></div><div class=\"line\"><span class=\"comment\">//对View的内容进行绘制</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!dirtyOpaque) onDraw(canvas);</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* Implement this to do your drawing.</div><div class=\"line\">*</div><div class=\"line\">* <span class=\"doctag\">@param</span> canvas the canvas on which the background will be drawn</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"comment\">//onDraw也是空方法需要子类根据自身去实现相应的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Step-4-draw-the-children\"><a href=\"#Step-4-draw-the-children\" class=\"headerlink\" title=\"Step 4, draw the children\"></a>Step 4, draw the children</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 4, draw the children</span></div><div class=\"line\"><span class=\"comment\">//绘制其子View</span></div><div class=\"line\">dispatchDraw(canvas);</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Called by draw to draw the child views. This may be overridden</div><div class=\"line\"> * by derived classes to gain control just before its children are drawn</div><div class=\"line\"> * (but after its own view has been drawn).</div><div class=\"line\"> * <span class=\"doctag\">@param</span> canvas the canvas on which to draw the view</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//dispatchDraw同样空方法 与onDraw不同的是dispatchDraw在ViewGroup中被重写</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ViewGroup<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//dispatchDraw方法中根据子View的不同情况 包括但不只包括该View是否显示 是否有进入或消失动画等进行了部分的调整</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">      more |= drawChild(canvas, transientChild, drawingTime);</div><div class=\"line\">    ...    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">drawChild</span><span class=\"params\">(Canvas canvas, View child, <span class=\"keyword\">long</span> drawingTime)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> child.draw(canvas, <span class=\"keyword\">this</span>, drawingTime);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Step-5-draw-the-fade-effect-and-restore-layers\"><a href=\"#Step-5-draw-the-fade-effect-and-restore-layers\" class=\"headerlink\" title=\"Step 5, draw the fade effect and restore layers\"></a>Step 5, draw the fade effect and restore layers</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 5, draw the fade effect and restore layers</span></div><div class=\"line\"><span class=\"comment\">//绘制过度效果和恢复图层</span></div><div class=\"line\"><span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">    matrix.setScale(<span class=\"number\">1</span>, fadeHeight * topFadeStrength);</div><div class=\"line\">    matrix.postTranslate(left, top);</div><div class=\"line\">    fade.setLocalMatrix(matrix);</div><div class=\"line\">    p.setShader(fade);</div><div class=\"line\">    canvas.drawRect(left, top, right, top + length, p);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Step-6-draw-decorations-scrollbars\"><a href=\"#Step-6-draw-decorations-scrollbars\" class=\"headerlink\" title=\"Step 6, draw decorations (scrollbars)\"></a>Step 6, draw decorations (scrollbars)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 6, draw decorations (scrollbars)</span></div><div class=\"line\"><span class=\"comment\">//对滚动条进行绘制</span></div><div class=\"line\">onDrawScrollBars(canvas);</div></pre></td></tr></table></figure>\n","excerpt":"<h1 id=\"Android-View\"><a href=\"#Android-View\" class=\"headerlink\" title=\"Android View\"></a>Android View</h1><blockquote>\n<p>Android View框架相关  View的测量 布局 绘制过程<br>LinearLayout RelativeLayout实现源码分析</p>\n</blockquote>\n<h2 id=\"View的测量-布局-绘制过程\"><a href=\"#View的测量-布局-绘制过程\" class=\"headerlink\" title=\"View的测量 布局 绘制过程\"></a>View的测量 布局 绘制过程</h2><h3 id=\"测量之前的事情\"><a href=\"#测量之前的事情\" class=\"headerlink\" title=\"测量之前的事情\"></a>测量之前的事情</h3><p>View的整个绘制流程是开始于ViewRootImpl类的performTraversals方法(1k行)  根据相关设置来觉得十分要重新执行相关功能<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performTraversals</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// cache mView since it is used so much below...</span></div><div class=\"line\">  <span class=\"keyword\">final</span> View host = mView;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"keyword\">int</span> childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);</div><div class=\"line\">  <span class=\"keyword\">int</span> childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">//measure</span></div><div class=\"line\">  mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">//layout</span></div><div class=\"line\">  mView.layout(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mView.getMeasuredWidth(), mView.getMeasuredHeight());</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">//draw</span></div><div class=\"line\">  mView.draw(canvas);</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getRootMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> windowSize, <span class=\"keyword\">int</span> rootDimension)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> measureSpec;</div><div class=\"line\">      <span class=\"keyword\">switch</span> (rootDimension) &#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> ViewGroup.LayoutParams.MATCH_PARENT:</div><div class=\"line\">          <span class=\"comment\">// Window can't resize. Force root view to be windowSize.</span></div><div class=\"line\">          measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">      ...</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> measureSpec;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>View 绘制整体流程图如下</p>\n<p><img src=\"http://p1.bqimg.com/567571/a5aa47e56fd6434a.png\" alt=\"View绘制整体流程图\"></p>\n<h3 id=\"measure源码分析\"><a href=\"#measure源码分析\" class=\"headerlink\" title=\"measure源码分析\"></a>measure源码分析</h3><p>结论:</p>\n<ul>\n<li><p>measure的过程就是父View向子View递归调用view.measure方法 (measure中回调onMeasure方法)的过程</p>\n</li>\n<li><p>measure方法是 final的 只能重载onMeasure方法</p>\n</li>\n<li><p>最顶层的DocerView的MeasureSpec由ViewRootImpl的getRootMeasureSpec方法提供 LayoutParams的参数为MATCH_PARENT specMode是EXACTLY，specSize为物理屏幕大小</p>\n</li>\n<li><p>只要是ViewGroup的子类就必须要求LayoutParams继承子MarginLayoutParams 否则无法使用layout_margin参数</p>\n</li>\n<li><p>View的getMeasuredWidth()和getMeasuredHeight()方法来获取View测量的宽高，要必须保证这两个方法在onMeasure流程之后被调用才能返回有效值。</p>\n</li>\n</ul>\n<p><img src=\"/View measure过程.png\" alt=\"View measure过程\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * This is called to find out how big a view should be. The parent supplies constraint information in the width and height parameters.</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * The actual measurement work of a view is performed in</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125;, called by this method. Therefore, only</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; can and must be overridden by subclasses.</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> widthMeasureSpec Horizontal space requirements as imposed by the</div><div class=\"line\"> *        parent</div><div class=\"line\"> * <span class=\"doctag\">@param</span> heightMeasureSpec Vertical space requirements as imposed by the</div><div class=\"line\"> *        parent</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #onMeasure(int, int)</div><div class=\"line\"> */</span></div><div class=\"line\"> <span class=\"comment\">//没舍得删这些注释  感觉重要的事情都说了   为了计算整个View树的实际大小 设置实际的高和宽 每个子View都是根据父视图和自身决定实际宽高的 在onMeasure()方法中进行实际测量.传入widthMeasureSpec和heightMeasureSpec参数来表示了父View的规格 不但传入了模式 还传入了size 而对于DecorView来说 传入的模式一般为EXACTLY模式 size对应屏幕的宽高. 所以说子View的大小是父子View共同决定的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">measure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"comment\">// measure ourselves, this should set the measured dimension flag back</span></div><div class=\"line\">               onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>MeasureSpec内部类</p>\n<p>MeasureSpec是View的内部类 int型，由高2位规格模式specMode和低30位具体尺寸specSize组成 其中specMode只有三种</p>\n<ul>\n<li>MeasureSpec.EXACTLY //确定模式，父View希望子View的大小是确定的，由specSize决定；</li>\n<li>MeasureSpec.AT_MOST //最多模式，父View希望子View的大小最多是specSize指定的值；</li>\n<li>MeasureSpec.UNSPECIFIED //未指定模式，父View完全依据子View的设计值来决定；</li>\n</ul>\n<p>onMeasure()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * Measure the view and its content to determine the measured width and the</div><div class=\"line\"> * measured height. This method is invoked by &#123;<span class=\"doctag\">@link</span> #measure(int, int)&#125; and</div><div class=\"line\"> * should be overridden by subclasses to provide accurate and efficient</div><div class=\"line\"> * measurement of their contents.</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * &lt;strong&gt;CONTRACT:&lt;/strong&gt; When overriding this method, you</div><div class=\"line\"> * &lt;em&gt;must&lt;/em&gt; call &#123;<span class=\"doctag\">@link</span> #setMeasuredDimension(int, int)&#125; to store the</div><div class=\"line\"> * measured width and height of this view. Failure to do so will trigger an</div><div class=\"line\"> * &lt;code&gt;IllegalStateException&lt;/code&gt;, thrown by</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #measure(int, int)&#125;. Calling the superclass'</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; is a valid use.</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * The base class implementation of measure defaults to the background size,</div><div class=\"line\"> * unless a larger size is allowed by the MeasureSpec. Subclasses should</div><div class=\"line\"> * override &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; to provide better measurements of</div><div class=\"line\"> * their content.</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * If this method is overridden, it is the subclass's responsibility to make</div><div class=\"line\"> * sure the measured height and width are at least the view's minimum height</div><div class=\"line\"> * and width (&#123;<span class=\"doctag\">@link</span> #getSuggestedMinimumHeight()&#125; and</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #getSuggestedMinimumWidth()&#125;).</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> widthMeasureSpec horizontal space requirements as imposed by the parent.</div><div class=\"line\"> *                         The requirements are encoded with</div><div class=\"line\"> *                         &#123;<span class=\"doctag\">@link</span> android.view.View.MeasureSpec&#125;.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> heightMeasureSpec vertical space requirements as imposed by the parent.</div><div class=\"line\"> *                         The requirements are encoded with</div><div class=\"line\"> *                         &#123;<span class=\"doctag\">@link</span> android.view.View.MeasureSpec&#125;.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #getMeasuredWidth()</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #getMeasuredHeight()</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #setMeasuredDimension(int, int)</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #getSuggestedMinimumHeight()</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #getSuggestedMinimumWidth()</div><div class=\"line\"> * <span class=\"doctag\">@see</span> android.view.View.MeasureSpec#getMode(int)</div><div class=\"line\"> * <span class=\"doctag\">@see</span> android.view.View.MeasureSpec#getSize(int)</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</div><div class=\"line\">            getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>getDefaultSize方法相关<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> result = size;</div><div class=\"line\">  <span class=\"comment\">//通过measureSpec得到mode和size</span></div><div class=\"line\">  <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class=\"line\">  <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">      result = size;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">  <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">      result = specSize;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//最小宽度和高度由View的Background尺寸和View的minXXX共同决定</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumHeight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumWidth</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>setMeasuredDimension方法 对View的成员变量measuredWidth和measuredHeight变量赋值 也就是说该方法最终决定了View的大小<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasuredDimension</span><span class=\"params\">(<span class=\"keyword\">int</span> measuredWidth, <span class=\"keyword\">int</span> measuredHeight)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> optical = isLayoutModeOptical(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (optical != isLayoutModeOptical(mParent)) &#123;</div><div class=\"line\">        Insets insets = getOpticalInsets();</div><div class=\"line\">        <span class=\"keyword\">int</span> opticalWidth  = insets.left + insets.right;</div><div class=\"line\">        <span class=\"keyword\">int</span> opticalHeight = insets.top  + insets.bottom;</div><div class=\"line\"></div><div class=\"line\">        measuredWidth  += optical ? opticalWidth  : -opticalWidth;</div><div class=\"line\">        measuredHeight += optical ? opticalHeight : -opticalHeight;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setMeasuredDimensionRaw(measuredWidth, measuredHeight);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLayoutRequested</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (mPrivateFlags &amp; PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasuredDimensionRaw</span><span class=\"params\">(<span class=\"keyword\">int</span> measuredWidth, <span class=\"keyword\">int</span> measuredHeight)</span> </span>&#123;</div><div class=\"line\">  mMeasuredWidth = measuredWidth;</div><div class=\"line\">  mMeasuredHeight = measuredHeight;</div><div class=\"line\"></div><div class=\"line\">  mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>至此一次最基础的View的measure过程就完成了  但是由于View可以嵌套  所以measure是递归传递的所以ViewGroup中需要对其子类进行measure过程 measureChildren方法实质为循环调用measureChild方法</p>\n<p>而measureChild和measureChildWithMargins的区别是后者将margin和padding也作为了子视图的大小</p>\n<p>一下分析measureChildWithMargins方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildWithMargins</span><span class=\"params\">(View child,</div><div class=\"line\">        <span class=\"keyword\">int</span> parentWidthMeasureSpec, <span class=\"keyword\">int</span> widthUsed,</div><div class=\"line\">        <span class=\"keyword\">int</span> parentHeightMeasureSpec, <span class=\"keyword\">int</span> heightUsed)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//获取当前子视图的LayoutParams</span></div><div class=\"line\">    <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class=\"line\">    <span class=\"comment\">//设定子View的测量规格</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</div><div class=\"line\">            mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin</div><div class=\"line\">                    + widthUsed, lp.width);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</div><div class=\"line\">            mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin</div><div class=\"line\">                    + heightUsed, lp.height);</div><div class=\"line\">    <span class=\"comment\">//子view的继续调用</span></div><div class=\"line\">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//在getChildMeasureSpec中通过父View和本身的模式共同决定当前View的size</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec, <span class=\"keyword\">int</span> padding, <span class=\"keyword\">int</span> childDimension)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//获取当前父View的mode和size</span></div><div class=\"line\">      <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);</div><div class=\"line\">      <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</div><div class=\"line\">      <span class=\"comment\">//获取父View的的剩余大小</span></div><div class=\"line\">      <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>, specSize - padding);</div><div class=\"line\">      <span class=\"comment\">//定义结果变量</span></div><div class=\"line\">      <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"comment\">//根据对应的mode做处理</span></div><div class=\"line\">      <span class=\"comment\">//通过父View和本身的模式共同决定当前View的size</span></div><div class=\"line\">      <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">      <span class=\"comment\">// Parent has imposed an exact size on us</span></div><div class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              resultSize = childDimension;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to be our size. So be it.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to determine its own size. It can't be</span></div><div class=\"line\">              <span class=\"comment\">// bigger than us.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Parent has imposed a maximum size on us</span></div><div class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants a specific size... so be it</span></div><div class=\"line\">              resultSize = childDimension;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to be our size, but our size is not fixed.</span></div><div class=\"line\">              <span class=\"comment\">// Constrain child to not be bigger than us.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to determine its own size. It can't be</span></div><div class=\"line\">              <span class=\"comment\">// bigger than us.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Parent asked to see how big we want to be</span></div><div class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants a specific size... let him have it</span></div><div class=\"line\">              resultSize = childDimension;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to be our size... find out how big it should</span></div><div class=\"line\">              <span class=\"comment\">// be</span></div><div class=\"line\">              resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</div><div class=\"line\">              resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to determine its own size.... find out how</span></div><div class=\"line\">              <span class=\"comment\">// big it should be</span></div><div class=\"line\">              resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</div><div class=\"line\">              resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">//将size和mode整合为MeasureSpec模式后返回</span></div><div class=\"line\">      <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"layout源码分析\"><a href=\"#layout源码分析\" class=\"headerlink\" title=\"layout源码分析\"></a>layout源码分析</h3><p>View layout整体流程与measure过程基本一样</p>\n<p>结论:</p>\n<ul>\n<li>需要根据ViewGroup本身的情况讨论 LinearLayout下会更看重子View的height和width 来安排对应位置 而RelativeLayout则更加关注子View的left right top bottom值 并且优先级高于width和height 甚至在部分自定义ViewGroup中 measure可能是无用的   直接使用layout方法来设置子View的位置也可以</li>\n<li>ViewGroup需要实现自己的layout逻辑</li>\n<li>layout_XXX中的各个熟悉都是针对子View的父ViewGroup的</li>\n<li>同样使用View的getWidth()和getHeight()方法来获取View测量的宽高 必须保证这两个方法在onLayout流程之后被调用才能返回有效值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">   * Assign a size and position to a view and all of its</div><div class=\"line\">   * descendants</div><div class=\"line\">   *</div><div class=\"line\">   * &lt;p&gt;This is the second phase of the layout mechanism.</div><div class=\"line\">   * (The first is measuring). In this phase, each parent calls</div><div class=\"line\">   * layout on all of its children to position them.</div><div class=\"line\">   * This is typically done using the child measurements</div><div class=\"line\">   * that were stored in the measure pass().&lt;/p&gt;</div><div class=\"line\">   *</div><div class=\"line\">   * &lt;p&gt;Derived classes should not override this method.</div><div class=\"line\">   * Derived classes with children should override</div><div class=\"line\">   * onLayout. In that method, they should</div><div class=\"line\">   * call layout on each of their children.&lt;/p&gt;</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> l Left position, relative to parent</div><div class=\"line\">   * <span class=\"doctag\">@param</span> t Top position, relative to parent</div><div class=\"line\">   * <span class=\"doctag\">@param</span> r Right position, relative to parent</div><div class=\"line\">   * <span class=\"doctag\">@param</span> b Bottom position, relative to parent</div><div class=\"line\">   */</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//同样注解写的很好了  分派给他和他的所有的子视图大小和位置</span></div><div class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"unchecked\"</span>&#125;)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</div><div class=\"line\">          mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</div><div class=\"line\">      &#125;</div><div class=\"line\">       <span class=\"comment\">//调用setFrame方法把参数分别赋值于</span></div><div class=\"line\">      <span class=\"keyword\">int</span> oldL = mLeft;</div><div class=\"line\">      <span class=\"keyword\">int</span> oldT = mTop;</div><div class=\"line\">      <span class=\"keyword\">int</span> oldB = mBottom;</div><div class=\"line\">      <span class=\"keyword\">int</span> oldR = mRight;</div><div class=\"line\">      <span class=\"comment\">//判断view的位置是否发生过变化 , 确定是否对当前view重新layout</span></div><div class=\"line\">      <span class=\"keyword\">boolean</span> changed = isLayoutModeOptical(mParent) ?</div><div class=\"line\">              setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</div><div class=\"line\">          <span class=\"comment\">//调用onLayout</span></div><div class=\"line\">          onLayout(changed, l, t, r, b);</div><div class=\"line\">          mPrivateFlags &amp;= ~PFLAG_LAYOUT_REQUIRED;</div><div class=\"line\">          ListenerInfo li = mListenerInfo;</div><div class=\"line\">          <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnLayoutChangeListeners != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =</div><div class=\"line\">                      (ArrayList&lt;OnLayoutChangeListener&gt;)li.mOnLayoutChangeListeners.clone();</div><div class=\"line\">              <span class=\"keyword\">int</span> numListeners = listenersCopy.size();</div><div class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numListeners; ++i) &#123;</div><div class=\"line\">                  listenersCopy.get(i).onLayoutChange(<span class=\"keyword\">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      mPrivateFlags &amp;= ~PFLAG_FORCE_LAYOUT;</div><div class=\"line\">      mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>onLyayout方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">View中</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">ViewGroup中</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed,</div><div class=\"line\">      <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span></span>;</div></pre></td></tr></table></figure></p>\n<p>均是空方法  后面会就LinearLayout和RelativeLayout源码进行分析</p>\n<h3 id=\"draw源码分析\"><a href=\"#draw源码分析\" class=\"headerlink\" title=\"draw源码分析\"></a>draw源码分析</h3><p>View的draw流程图如下</p>\n<p><img src=\"http://p1.bpimg.com/567571/e7b2c1005fdb70b2.png\" alt=\"Viewdraw\"></p>\n<p>结论:</p>\n<ul>\n<li>View需要在子类中实现onDraw的过程</li>\n<li>在ViewGroup中 会调用其子View的方法 顺序与子view的添加顺序一致</li>\n</ul>\n<p>draw的源码也很长 但是官方也给出给出了draw的过程<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Draw traversal performs several drawing steps which must be executed</div><div class=\"line\">     * in the appropriate order:</div><div class=\"line\">     *</div><div class=\"line\">     *      1. Draw the background</div><div class=\"line\">     *      2. If necessary, save the canvas' layers to prepare for fading</div><div class=\"line\">     *      3. Draw view's content</div><div class=\"line\">     *      4. Draw children</div><div class=\"line\">     *      5. If necessary, draw the fading edges and restore layers</div><div class=\"line\">     *      6. Draw decorations (scrollbars for instance)</div><div class=\"line\">     */</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 1, draw the background, if needed</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> (!dirtyOpaque) &#123;</div><div class=\"line\">        drawBackground(canvas);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// skip step 2 &amp; 5 if possible (common case)</span></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 2, save the canvas' layers</span></div><div class=\"line\">    ...</div><div class=\"line\">        <span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">            canvas.saveLayer(left, top, right, top + length, <span class=\"keyword\">null</span>, flags);</div><div class=\"line\">        &#125;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 3, draw the content</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!dirtyOpaque) onDraw(canvas);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 4, draw the children</span></div><div class=\"line\">    dispatchDraw(canvas);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 5, draw the fade effect and restore layers</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">        matrix.setScale(<span class=\"number\">1</span>, fadeHeight * topFadeStrength);</div><div class=\"line\">        matrix.postTranslate(left, top);</div><div class=\"line\">        fade.setLocalMatrix(matrix);</div><div class=\"line\">        p.setShader(fade);</div><div class=\"line\">        canvas.drawRect(left, top, right, top + length, p);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 6, draw decorations (scrollbars)</span></div><div class=\"line\">    onDrawScrollBars(canvas);</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Step-1-draw-the-background-if-needed\"><a href=\"#Step-1-draw-the-background-if-needed\" class=\"headerlink\" title=\"Step 1, draw the background, if needed\"></a>Step 1, draw the background, if needed</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 1, draw the background, if needed</span></div><div class=\"line\"><span class=\"comment\">//如果需要的话绘制背景</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (!dirtyOpaque) &#123;</div><div class=\"line\">    drawBackground(canvas);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">drawBackground</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  \t<span class=\"comment\">//通过xml中属性background或者代码中setBackGroundColor\\setBackgroundResource等方法赋值的背景drawable</span></div><div class=\"line\">      <span class=\"keyword\">final</span> Drawable background = mBackground;</div><div class=\"line\">      <span class=\"keyword\">if</span> (background == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//根据layout中确定的view位置来设置背景的绘制区域</span></div><div class=\"line\">      setBackgroundBounds();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 如果需要的话使用显示列表</span></div><div class=\"line\">      <span class=\"comment\">//canvas.isHardwareAccelerated() 硬件加速判定</span></div><div class=\"line\">      <span class=\"comment\">//硬件加速时会将图层缓存到GPU上 而不是重绘View的每一层</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (canvas.isHardwareAccelerated() &amp;&amp; mAttachInfo != <span class=\"keyword\">null</span></div><div class=\"line\">              &amp;&amp; mAttachInfo.mHardwareRenderer != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          mBackgroundRenderNode = getDrawableRenderNode(background, mBackgroundRenderNode);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">final</span> RenderNode renderNode = mBackgroundRenderNode;</div><div class=\"line\">          <span class=\"keyword\">if</span> (renderNode != <span class=\"keyword\">null</span> &amp;&amp; renderNode.isValid()) &#123;</div><div class=\"line\">              setBackgroundRenderNodeProperties(renderNode);</div><div class=\"line\">              ((DisplayListCanvas) canvas).drawRenderNode(renderNode);</div><div class=\"line\">              <span class=\"keyword\">return</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrollX = mScrollX;</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrollY = mScrollY;</div><div class=\"line\">      <span class=\"comment\">//调用Drawable的draw方法来完成背景的绘制工作</span></div><div class=\"line\">      <span class=\"keyword\">if</span> ((scrollX | scrollY) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          background.draw(canvas);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          canvas.translate(scrollX, scrollY);</div><div class=\"line\">          background.draw(canvas);</div><div class=\"line\">          canvas.translate(-scrollX, -scrollY);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setBackgroundBounds</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mBackgroundSizeChanged &amp;&amp; mBackground != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      mBackground.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>,  mRight - mLeft, mBottom - mTop);</div><div class=\"line\">      mBackgroundSizeChanged = <span class=\"keyword\">false</span>;</div><div class=\"line\">      rebuildOutline();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Step-2-save-the-canvas’-layers\"><a href=\"#Step-2-save-the-canvas’-layers\" class=\"headerlink\" title=\"Step 2, save the canvas’ layers\"></a>Step 2, save the canvas’ layers</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 2, save the canvas' layers</span></div><div class=\"line\"><span class=\"comment\">//保存绘制图层</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">           canvas.saveLayer(left, top, right, top + length, <span class=\"keyword\">null</span>, flags);</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Step-3-draw-the-content\"><a href=\"#Step-3-draw-the-content\" class=\"headerlink\" title=\"Step 3, draw the content\"></a>Step 3, draw the content</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 3, draw the content</span></div><div class=\"line\"><span class=\"comment\">//对View的内容进行绘制</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!dirtyOpaque) onDraw(canvas);</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">* Implement this to do your drawing.</div><div class=\"line\">*</div><div class=\"line\">* <span class=\"doctag\">@param</span> canvas the canvas on which the background will be drawn</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"comment\">//onDraw也是空方法需要子类根据自身去实现相应的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Step-4-draw-the-children\"><a href=\"#Step-4-draw-the-children\" class=\"headerlink\" title=\"Step 4, draw the children\"></a>Step 4, draw the children</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 4, draw the children</span></div><div class=\"line\"><span class=\"comment\">//绘制其子View</span></div><div class=\"line\">dispatchDraw(canvas);</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Called by draw to draw the child views. This may be overridden</div><div class=\"line\"> * by derived classes to gain control just before its children are drawn</div><div class=\"line\"> * (but after its own view has been drawn).</div><div class=\"line\"> * <span class=\"doctag\">@param</span> canvas the canvas on which to draw the view</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//dispatchDraw同样空方法 与onDraw不同的是dispatchDraw在ViewGroup中被重写</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ViewGroup<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//dispatchDraw方法中根据子View的不同情况 包括但不只包括该View是否显示 是否有进入或消失动画等进行了部分的调整</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">      more |= drawChild(canvas, transientChild, drawingTime);</div><div class=\"line\">    ...    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">drawChild</span><span class=\"params\">(Canvas canvas, View child, <span class=\"keyword\">long</span> drawingTime)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> child.draw(canvas, <span class=\"keyword\">this</span>, drawingTime);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Step-5-draw-the-fade-effect-and-restore-layers\"><a href=\"#Step-5-draw-the-fade-effect-and-restore-layers\" class=\"headerlink\" title=\"Step 5, draw the fade effect and restore layers\"></a>Step 5, draw the fade effect and restore layers</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 5, draw the fade effect and restore layers</span></div><div class=\"line\"><span class=\"comment\">//绘制过度效果和恢复图层</span></div><div class=\"line\"><span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">    matrix.setScale(<span class=\"number\">1</span>, fadeHeight * topFadeStrength);</div><div class=\"line\">    matrix.postTranslate(left, top);</div><div class=\"line\">    fade.setLocalMatrix(matrix);</div><div class=\"line\">    p.setShader(fade);</div><div class=\"line\">    canvas.drawRect(left, top, right, top + length, p);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Step-6-draw-decorations-scrollbars\"><a href=\"#Step-6-draw-decorations-scrollbars\" class=\"headerlink\" title=\"Step 6, draw decorations (scrollbars)\"></a>Step 6, draw decorations (scrollbars)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 6, draw decorations (scrollbars)</span></div><div class=\"line\"><span class=\"comment\">//对滚动条进行绘制</span></div><div class=\"line\">onDrawScrollBars(canvas);</div></pre></td></tr></table></figure>"},{"title":"中国国家气象局api数据分析","date":"2017-08-31T14:57:44.000Z","_content":"\n# 中国国家气象局api数据分析\n\n>天气预报是程序中很常见的功能 然而现在免费好用的天气api却很难找 不妨仔细的看一下[国家气象局](http://m.weather.com.cn/) 本分就此网站来获取天气\n<!-- more -->\n\n## 地址及页面分析\n\n### 地址分析\n  通过尝试,想要获取某个城市或者地址的天气页面有两种方式,一种是通过经纬度访问[http://m.weather.com.cn/d/town/index?lat=39.915055&lon=116.403982](http://m.weather.com.cn/d/town/index?lat=39.915055&lon=116.403982),另一种是通过城市id访问[http://m.weather.com.cn/mweather/101010100.shtml](http://m.weather.com.cn/mweather/101010100.shtml) 两个地址都能得到北京市的天气情况 不过前一种是经纬度,另一种是城市id.\n\n  关于城市的id可以查看[http://mobile.weather.com.cn/js/citylist.xml](http://mobile.weather.com.cn/js/citylist.xml)可以得到全国2500多个城市县区及全球其他国家6000多个城市的数据 可以直接通过以上的接口获得相关城市的天气数据\n\n### 页面分析\n#### id查询\n  我们先访问以下[http://m.weather.com.cn/mweather/101010100.shtml](http://m.weather.com.cn/mweather/101010100.shtml)页面  看看整个页面都请求了什么\n  ![页面请求信息](http://ooymoxvz4.bkt.clouddn.com/17-9-2/2275119.jpg)\n\n  http://m.weather.com.cn/mweather/101010100.shtml 这个页面并没有返回对应的数据 也是 现在谁家的网页还能都是静态的\n  然后是这个位置的素质五连![数据五连](http://ooymoxvz4.bkt.clouddn.com/17-9-2/67360173.jpg)\n  后面是一个时间戳 模仿了对应的请求格式 但是每次访问的时候都被拒绝应该是页面js代码中有控制 看来直接通过城市id获取不行了\n\n#### 经纬度查询\n  如果直接通过经纬度地址进行访问[http://m.weather.com.cn/d/town/index?lat=39.915055&lon=116.403982](http://m.weather.com.cn/d/town/index?lat=39.915055&lon=116.403982)通过分析可以在直接访问的地址中找到返回这个部分数据\n![请求详情](http://ooymoxvz4.bkt.clouddn.com/17-9-2/10458430.jpg)\n\n## 数据分析\n  ```\n  ([{\"TEMMIN\":19,\"reftime\":\"201709022000\",\"WIND1\":\"04\",\"WINS1\":\"01\",\"WIND2\":\"01\",\"WINS2\":\"00\",\"WEATHER1\":\"02\",\"WEATHER2\":\"02\",\"TEMMAX\":29},{\"TEMMIN\":19,\"reftime\":\"201709032000\",\"WIND1\":\"01\",\"WINS1\":\"00\",\"WIND2\":\"08\",\"WINS2\":\"00\",\"WEATHER1\":\"02\",\"WEATHER2\":\"02\",\"TEMMAX\":27},{\"TEMMIN\":18,\"reftime\":\"201709042000\",\"WIND1\":\"01\",\"WINS1\":\"00\",\"WIND2\":\"01\",\"WINS2\":\"00\",\"WEATHER1\":\"01\",\"WEATHER2\":\"02\",\"TEMMAX\":27},{\"TEMMIN\":19,\"reftime\":\"201709052000\",\"WIND1\":\"01\",\"WINS1\":\"00\",\"WIND2\":\"08\",\"WINS2\":\"00\",\"WEATHER1\":\"07\",\"WEATHER2\":\"02\",\"TEMMAX\":29},{\"TEMMIN\":18,\"reftime\":\"201709062000\",\"WIND1\":\"01\",\"WINS1\":\"00\",\"WIND2\":\"02\",\"WINS2\":\"00\",\"WEATHER1\":\"00\",\"WEATHER2\":\"00\",\"TEMMAX\":30}],[{\"WIND\":\"05\",\"WEA08\":\"02\",\"reftime\":\"201709010800\",\"PRE08\":\"0.0\",\"TMAX\":28,\"TMIN\":21,\"WEA20\":\"02\",\"PRE20\":\"0.0\",\"WINS\":\"01\"}])\n  ```\n\n  这部分的数据可以看出来是个json格式数据 取其中一部分来分析\n  ```\n  {\"TEMMIN\":19,\"reftime\":\"201709022000\",\"WIND1\":\"04\",\"WINS1\":\"01\",\"WIND2\":\"01\",\"WINS2\":\"00\",\"WEATHER1\":\"02\",\"WEATHER2\":\"02\",\"TEMMAX\":29}\n  ```\n  经过整理后发现对应数据如下\n\n  TEMMIN : 最低温度\n  TEMMAX : 最高温度\n  reftime : 时间\n  WEATHER1 : 天气1 (晴转多云 的晴)\n  WEATHER2 : 天气2 (晴转多云 的多云)\n\n  weather的对应如下\n  ```\n  {\"00\":\"晴\",\"01\":\"多云\",\"02\":\"阴\",\"03\":\"阵雨\",\"04\":\"雷阵雨\",\"05\":\"雷阵雨伴有冰雹\",\"06\":\"雨夹雪\",\"07\":\"小雨\",\"08\":\"中雨\",\"09\":\"大雨\",\"10\":\"暴雨\",\"11\":\"大暴雨\",\"12\":\"特大暴雨\",\"13\":\"阵雪\",\"14\":\"小雪\",\"15\":\"中雪\",\"16\":\"大雪\",\"17\":\"暴雪\",\"18\":\"雾\",\"19\":\"冻雨\",\"20\":\"沙尘暴\",\"21\":\"小到中雨\",\"22\":\"中到大雨\",\"23\":\"大到暴雨\",\"24\":\"暴雨到大暴雨\",\"25\":\"大暴雨到特大暴雨\",\"26\":\"小到中雪\",\"27\":\"中到大雪\",\"28\":\"大到暴雪\",\"29\":\"浮尘\",\"30\":\"扬沙\",\"31\":\"强沙尘暴\",\"53\":\"霾\",\"99\":\"\"}\n  ```\n  WIND1 : 风向1\n  WINS1 : 风向1等级\n  WIND2 : 风向2\n  WINS2 : 风向2等级\n\n  WIND对应如下\n  ```\n  {\"0\":\"无持续风向\",\"1\":\"东北风\",\"2\":\"东风\",\"3\":\"东南风\",\"4\":\"南风\",\"5\":\"西南风\",\"6\":\"西风\",\"7\":\"西北风\",\"8\":\"北风\",\"9\":\"旋转风\"}\n  ```\n\n  WINS对应如下:\n  ```\n  {\"0\":\"微风\",\"1\":\"3-4级\",\"2\":\"4-5级\",\"3\":\"5-6级\",\"4\":\"6-7级\",\"5\":\"7-8级\",\"6\":\"8-9级\",\"7\":\"9-10级\",\"8\":\"10-11级\",\"9\":\"11-12级\"};\n  ```\n\n## 获取流程\n  通过经纬度可以直接获取天气信息 而且精度较高可以定位当前位置后再获取天气信息 但是只适用国内的天气信息 可以本地缓存全国所有地区的经纬度或者通过城市id访问天气信息的页面中获取经纬度 看实际使用情况斟酌\n\n  而通过城市id的方法可以获得全球的天气信息\n\n## 最后\n  页面还有很多数据可以发现 \n","source":"_posts/中国国家气象局api数据分析.md","raw":"---\ntitle: 中国国家气象局api数据分析\ndate: 2017-08-31 22:57:44\ntags: [\"python\" , \"api\" , \"爬虫\"]\ncategories : \"数据收集\"\n---\n\n# 中国国家气象局api数据分析\n\n>天气预报是程序中很常见的功能 然而现在免费好用的天气api却很难找 不妨仔细的看一下[国家气象局](http://m.weather.com.cn/) 本分就此网站来获取天气\n<!-- more -->\n\n## 地址及页面分析\n\n### 地址分析\n  通过尝试,想要获取某个城市或者地址的天气页面有两种方式,一种是通过经纬度访问[http://m.weather.com.cn/d/town/index?lat=39.915055&lon=116.403982](http://m.weather.com.cn/d/town/index?lat=39.915055&lon=116.403982),另一种是通过城市id访问[http://m.weather.com.cn/mweather/101010100.shtml](http://m.weather.com.cn/mweather/101010100.shtml) 两个地址都能得到北京市的天气情况 不过前一种是经纬度,另一种是城市id.\n\n  关于城市的id可以查看[http://mobile.weather.com.cn/js/citylist.xml](http://mobile.weather.com.cn/js/citylist.xml)可以得到全国2500多个城市县区及全球其他国家6000多个城市的数据 可以直接通过以上的接口获得相关城市的天气数据\n\n### 页面分析\n#### id查询\n  我们先访问以下[http://m.weather.com.cn/mweather/101010100.shtml](http://m.weather.com.cn/mweather/101010100.shtml)页面  看看整个页面都请求了什么\n  ![页面请求信息](http://ooymoxvz4.bkt.clouddn.com/17-9-2/2275119.jpg)\n\n  http://m.weather.com.cn/mweather/101010100.shtml 这个页面并没有返回对应的数据 也是 现在谁家的网页还能都是静态的\n  然后是这个位置的素质五连![数据五连](http://ooymoxvz4.bkt.clouddn.com/17-9-2/67360173.jpg)\n  后面是一个时间戳 模仿了对应的请求格式 但是每次访问的时候都被拒绝应该是页面js代码中有控制 看来直接通过城市id获取不行了\n\n#### 经纬度查询\n  如果直接通过经纬度地址进行访问[http://m.weather.com.cn/d/town/index?lat=39.915055&lon=116.403982](http://m.weather.com.cn/d/town/index?lat=39.915055&lon=116.403982)通过分析可以在直接访问的地址中找到返回这个部分数据\n![请求详情](http://ooymoxvz4.bkt.clouddn.com/17-9-2/10458430.jpg)\n\n## 数据分析\n  ```\n  ([{\"TEMMIN\":19,\"reftime\":\"201709022000\",\"WIND1\":\"04\",\"WINS1\":\"01\",\"WIND2\":\"01\",\"WINS2\":\"00\",\"WEATHER1\":\"02\",\"WEATHER2\":\"02\",\"TEMMAX\":29},{\"TEMMIN\":19,\"reftime\":\"201709032000\",\"WIND1\":\"01\",\"WINS1\":\"00\",\"WIND2\":\"08\",\"WINS2\":\"00\",\"WEATHER1\":\"02\",\"WEATHER2\":\"02\",\"TEMMAX\":27},{\"TEMMIN\":18,\"reftime\":\"201709042000\",\"WIND1\":\"01\",\"WINS1\":\"00\",\"WIND2\":\"01\",\"WINS2\":\"00\",\"WEATHER1\":\"01\",\"WEATHER2\":\"02\",\"TEMMAX\":27},{\"TEMMIN\":19,\"reftime\":\"201709052000\",\"WIND1\":\"01\",\"WINS1\":\"00\",\"WIND2\":\"08\",\"WINS2\":\"00\",\"WEATHER1\":\"07\",\"WEATHER2\":\"02\",\"TEMMAX\":29},{\"TEMMIN\":18,\"reftime\":\"201709062000\",\"WIND1\":\"01\",\"WINS1\":\"00\",\"WIND2\":\"02\",\"WINS2\":\"00\",\"WEATHER1\":\"00\",\"WEATHER2\":\"00\",\"TEMMAX\":30}],[{\"WIND\":\"05\",\"WEA08\":\"02\",\"reftime\":\"201709010800\",\"PRE08\":\"0.0\",\"TMAX\":28,\"TMIN\":21,\"WEA20\":\"02\",\"PRE20\":\"0.0\",\"WINS\":\"01\"}])\n  ```\n\n  这部分的数据可以看出来是个json格式数据 取其中一部分来分析\n  ```\n  {\"TEMMIN\":19,\"reftime\":\"201709022000\",\"WIND1\":\"04\",\"WINS1\":\"01\",\"WIND2\":\"01\",\"WINS2\":\"00\",\"WEATHER1\":\"02\",\"WEATHER2\":\"02\",\"TEMMAX\":29}\n  ```\n  经过整理后发现对应数据如下\n\n  TEMMIN : 最低温度\n  TEMMAX : 最高温度\n  reftime : 时间\n  WEATHER1 : 天气1 (晴转多云 的晴)\n  WEATHER2 : 天气2 (晴转多云 的多云)\n\n  weather的对应如下\n  ```\n  {\"00\":\"晴\",\"01\":\"多云\",\"02\":\"阴\",\"03\":\"阵雨\",\"04\":\"雷阵雨\",\"05\":\"雷阵雨伴有冰雹\",\"06\":\"雨夹雪\",\"07\":\"小雨\",\"08\":\"中雨\",\"09\":\"大雨\",\"10\":\"暴雨\",\"11\":\"大暴雨\",\"12\":\"特大暴雨\",\"13\":\"阵雪\",\"14\":\"小雪\",\"15\":\"中雪\",\"16\":\"大雪\",\"17\":\"暴雪\",\"18\":\"雾\",\"19\":\"冻雨\",\"20\":\"沙尘暴\",\"21\":\"小到中雨\",\"22\":\"中到大雨\",\"23\":\"大到暴雨\",\"24\":\"暴雨到大暴雨\",\"25\":\"大暴雨到特大暴雨\",\"26\":\"小到中雪\",\"27\":\"中到大雪\",\"28\":\"大到暴雪\",\"29\":\"浮尘\",\"30\":\"扬沙\",\"31\":\"强沙尘暴\",\"53\":\"霾\",\"99\":\"\"}\n  ```\n  WIND1 : 风向1\n  WINS1 : 风向1等级\n  WIND2 : 风向2\n  WINS2 : 风向2等级\n\n  WIND对应如下\n  ```\n  {\"0\":\"无持续风向\",\"1\":\"东北风\",\"2\":\"东风\",\"3\":\"东南风\",\"4\":\"南风\",\"5\":\"西南风\",\"6\":\"西风\",\"7\":\"西北风\",\"8\":\"北风\",\"9\":\"旋转风\"}\n  ```\n\n  WINS对应如下:\n  ```\n  {\"0\":\"微风\",\"1\":\"3-4级\",\"2\":\"4-5级\",\"3\":\"5-6级\",\"4\":\"6-7级\",\"5\":\"7-8级\",\"6\":\"8-9级\",\"7\":\"9-10级\",\"8\":\"10-11级\",\"9\":\"11-12级\"};\n  ```\n\n## 获取流程\n  通过经纬度可以直接获取天气信息 而且精度较高可以定位当前位置后再获取天气信息 但是只适用国内的天气信息 可以本地缓存全国所有地区的经纬度或者通过城市id访问天气信息的页面中获取经纬度 看实际使用情况斟酌\n\n  而通过城市id的方法可以获得全球的天气信息\n\n## 最后\n  页面还有很多数据可以发现 \n","slug":"中国国家气象局api数据分析","published":1,"updated":"2017-09-02T15:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8cwyb6a000uo3xw8bjjdg7s","content":"<h1 id=\"中国国家气象局api数据分析\"><a href=\"#中国国家气象局api数据分析\" class=\"headerlink\" title=\"中国国家气象局api数据分析\"></a>中国国家气象局api数据分析</h1><blockquote>\n<p>天气预报是程序中很常见的功能 然而现在免费好用的天气api却很难找 不妨仔细的看一下<a href=\"http://m.weather.com.cn/\" target=\"_blank\" rel=\"external\">国家气象局</a> 本分就此网站来获取天气<br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"地址及页面分析\"><a href=\"#地址及页面分析\" class=\"headerlink\" title=\"地址及页面分析\"></a>地址及页面分析</h2><h3 id=\"地址分析\"><a href=\"#地址分析\" class=\"headerlink\" title=\"地址分析\"></a>地址分析</h3><p>  通过尝试,想要获取某个城市或者地址的天气页面有两种方式,一种是通过经纬度访问<a href=\"http://m.weather.com.cn/d/town/index?lat=39.915055&amp;lon=116.403982\" target=\"_blank\" rel=\"external\">http://m.weather.com.cn/d/town/index?lat=39.915055&amp;lon=116.403982</a>,另一种是通过城市id访问<a href=\"http://m.weather.com.cn/mweather/101010100.shtml\" target=\"_blank\" rel=\"external\">http://m.weather.com.cn/mweather/101010100.shtml</a> 两个地址都能得到北京市的天气情况 不过前一种是经纬度,另一种是城市id.</p>\n<p>  关于城市的id可以查看<a href=\"http://mobile.weather.com.cn/js/citylist.xml\" target=\"_blank\" rel=\"external\">http://mobile.weather.com.cn/js/citylist.xml</a>可以得到全国2500多个城市县区及全球其他国家6000多个城市的数据 可以直接通过以上的接口获得相关城市的天气数据</p>\n<h3 id=\"页面分析\"><a href=\"#页面分析\" class=\"headerlink\" title=\"页面分析\"></a>页面分析</h3><h4 id=\"id查询\"><a href=\"#id查询\" class=\"headerlink\" title=\"id查询\"></a>id查询</h4><p>  我们先访问以下<a href=\"http://m.weather.com.cn/mweather/101010100.shtml\" target=\"_blank\" rel=\"external\">http://m.weather.com.cn/mweather/101010100.shtml</a>页面  看看整个页面都请求了什么<br>  <img src=\"http://ooymoxvz4.bkt.clouddn.com/17-9-2/2275119.jpg\" alt=\"页面请求信息\"></p>\n<p>  <a href=\"http://m.weather.com.cn/mweather/101010100.shtml\" target=\"_blank\" rel=\"external\">http://m.weather.com.cn/mweather/101010100.shtml</a> 这个页面并没有返回对应的数据 也是 现在谁家的网页还能都是静态的<br>  然后是这个位置的素质五连<img src=\"http://ooymoxvz4.bkt.clouddn.com/17-9-2/67360173.jpg\" alt=\"数据五连\"><br>  后面是一个时间戳 模仿了对应的请求格式 但是每次访问的时候都被拒绝应该是页面js代码中有控制 看来直接通过城市id获取不行了</p>\n<h4 id=\"经纬度查询\"><a href=\"#经纬度查询\" class=\"headerlink\" title=\"经纬度查询\"></a>经纬度查询</h4><p>  如果直接通过经纬度地址进行访问<a href=\"http://m.weather.com.cn/d/town/index?lat=39.915055&amp;lon=116.403982\" target=\"_blank\" rel=\"external\">http://m.weather.com.cn/d/town/index?lat=39.915055&amp;lon=116.403982</a>通过分析可以在直接访问的地址中找到返回这个部分数据<br><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-9-2/10458430.jpg\" alt=\"请求详情\"></p>\n<h2 id=\"数据分析\"><a href=\"#数据分析\" class=\"headerlink\" title=\"数据分析\"></a>数据分析</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">([&#123;&quot;TEMMIN&quot;:19,&quot;reftime&quot;:&quot;201709022000&quot;,&quot;WIND1&quot;:&quot;04&quot;,&quot;WINS1&quot;:&quot;01&quot;,&quot;WIND2&quot;:&quot;01&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;02&quot;,&quot;WEATHER2&quot;:&quot;02&quot;,&quot;TEMMAX&quot;:29&#125;,&#123;&quot;TEMMIN&quot;:19,&quot;reftime&quot;:&quot;201709032000&quot;,&quot;WIND1&quot;:&quot;01&quot;,&quot;WINS1&quot;:&quot;00&quot;,&quot;WIND2&quot;:&quot;08&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;02&quot;,&quot;WEATHER2&quot;:&quot;02&quot;,&quot;TEMMAX&quot;:27&#125;,&#123;&quot;TEMMIN&quot;:18,&quot;reftime&quot;:&quot;201709042000&quot;,&quot;WIND1&quot;:&quot;01&quot;,&quot;WINS1&quot;:&quot;00&quot;,&quot;WIND2&quot;:&quot;01&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;01&quot;,&quot;WEATHER2&quot;:&quot;02&quot;,&quot;TEMMAX&quot;:27&#125;,&#123;&quot;TEMMIN&quot;:19,&quot;reftime&quot;:&quot;201709052000&quot;,&quot;WIND1&quot;:&quot;01&quot;,&quot;WINS1&quot;:&quot;00&quot;,&quot;WIND2&quot;:&quot;08&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;07&quot;,&quot;WEATHER2&quot;:&quot;02&quot;,&quot;TEMMAX&quot;:29&#125;,&#123;&quot;TEMMIN&quot;:18,&quot;reftime&quot;:&quot;201709062000&quot;,&quot;WIND1&quot;:&quot;01&quot;,&quot;WINS1&quot;:&quot;00&quot;,&quot;WIND2&quot;:&quot;02&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;00&quot;,&quot;WEATHER2&quot;:&quot;00&quot;,&quot;TEMMAX&quot;:30&#125;],[&#123;&quot;WIND&quot;:&quot;05&quot;,&quot;WEA08&quot;:&quot;02&quot;,&quot;reftime&quot;:&quot;201709010800&quot;,&quot;PRE08&quot;:&quot;0.0&quot;,&quot;TMAX&quot;:28,&quot;TMIN&quot;:21,&quot;WEA20&quot;:&quot;02&quot;,&quot;PRE20&quot;:&quot;0.0&quot;,&quot;WINS&quot;:&quot;01&quot;&#125;])</div></pre></td></tr></table></figure>\n<p>  这部分的数据可以看出来是个json格式数据 取其中一部分来分析<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&quot;TEMMIN&quot;:19,&quot;reftime&quot;:&quot;201709022000&quot;,&quot;WIND1&quot;:&quot;04&quot;,&quot;WINS1&quot;:&quot;01&quot;,&quot;WIND2&quot;:&quot;01&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;02&quot;,&quot;WEATHER2&quot;:&quot;02&quot;,&quot;TEMMAX&quot;:29&#125;</div></pre></td></tr></table></figure></p>\n<p>  经过整理后发现对应数据如下</p>\n<p>  TEMMIN : 最低温度<br>  TEMMAX : 最高温度<br>  reftime : 时间<br>  WEATHER1 : 天气1 (晴转多云 的晴)<br>  WEATHER2 : 天气2 (晴转多云 的多云)</p>\n<p>  weather的对应如下<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&quot;00&quot;:&quot;晴&quot;,&quot;01&quot;:&quot;多云&quot;,&quot;02&quot;:&quot;阴&quot;,&quot;03&quot;:&quot;阵雨&quot;,&quot;04&quot;:&quot;雷阵雨&quot;,&quot;05&quot;:&quot;雷阵雨伴有冰雹&quot;,&quot;06&quot;:&quot;雨夹雪&quot;,&quot;07&quot;:&quot;小雨&quot;,&quot;08&quot;:&quot;中雨&quot;,&quot;09&quot;:&quot;大雨&quot;,&quot;10&quot;:&quot;暴雨&quot;,&quot;11&quot;:&quot;大暴雨&quot;,&quot;12&quot;:&quot;特大暴雨&quot;,&quot;13&quot;:&quot;阵雪&quot;,&quot;14&quot;:&quot;小雪&quot;,&quot;15&quot;:&quot;中雪&quot;,&quot;16&quot;:&quot;大雪&quot;,&quot;17&quot;:&quot;暴雪&quot;,&quot;18&quot;:&quot;雾&quot;,&quot;19&quot;:&quot;冻雨&quot;,&quot;20&quot;:&quot;沙尘暴&quot;,&quot;21&quot;:&quot;小到中雨&quot;,&quot;22&quot;:&quot;中到大雨&quot;,&quot;23&quot;:&quot;大到暴雨&quot;,&quot;24&quot;:&quot;暴雨到大暴雨&quot;,&quot;25&quot;:&quot;大暴雨到特大暴雨&quot;,&quot;26&quot;:&quot;小到中雪&quot;,&quot;27&quot;:&quot;中到大雪&quot;,&quot;28&quot;:&quot;大到暴雪&quot;,&quot;29&quot;:&quot;浮尘&quot;,&quot;30&quot;:&quot;扬沙&quot;,&quot;31&quot;:&quot;强沙尘暴&quot;,&quot;53&quot;:&quot;霾&quot;,&quot;99&quot;:&quot;&quot;&#125;</div></pre></td></tr></table></figure></p>\n<p>  WIND1 : 风向1<br>  WINS1 : 风向1等级<br>  WIND2 : 风向2<br>  WINS2 : 风向2等级</p>\n<p>  WIND对应如下<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&quot;0&quot;:&quot;无持续风向&quot;,&quot;1&quot;:&quot;东北风&quot;,&quot;2&quot;:&quot;东风&quot;,&quot;3&quot;:&quot;东南风&quot;,&quot;4&quot;:&quot;南风&quot;,&quot;5&quot;:&quot;西南风&quot;,&quot;6&quot;:&quot;西风&quot;,&quot;7&quot;:&quot;西北风&quot;,&quot;8&quot;:&quot;北风&quot;,&quot;9&quot;:&quot;旋转风&quot;&#125;</div></pre></td></tr></table></figure></p>\n<p>  WINS对应如下:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&quot;0&quot;:&quot;微风&quot;,&quot;1&quot;:&quot;3-4级&quot;,&quot;2&quot;:&quot;4-5级&quot;,&quot;3&quot;:&quot;5-6级&quot;,&quot;4&quot;:&quot;6-7级&quot;,&quot;5&quot;:&quot;7-8级&quot;,&quot;6&quot;:&quot;8-9级&quot;,&quot;7&quot;:&quot;9-10级&quot;,&quot;8&quot;:&quot;10-11级&quot;,&quot;9&quot;:&quot;11-12级&quot;&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"获取流程\"><a href=\"#获取流程\" class=\"headerlink\" title=\"获取流程\"></a>获取流程</h2><p>  通过经纬度可以直接获取天气信息 而且精度较高可以定位当前位置后再获取天气信息 但是只适用国内的天气信息 可以本地缓存全国所有地区的经纬度或者通过城市id访问天气信息的页面中获取经纬度 看实际使用情况斟酌</p>\n<p>  而通过城市id的方法可以获得全球的天气信息</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>  页面还有很多数据可以发现 </p>\n","excerpt":"<h1 id=\"中国国家气象局api数据分析\"><a href=\"#中国国家气象局api数据分析\" class=\"headerlink\" title=\"中国国家气象局api数据分析\"></a>中国国家气象局api数据分析</h1><blockquote>\n<p>天气预报是程序中很常见的功能 然而现在免费好用的天气api却很难找 不妨仔细的看一下<a href=\"http://m.weather.com.cn/\">国家气象局</a> 本分就此网站来获取天气<br>","more":"</p>\n</blockquote>\n<h2 id=\"地址及页面分析\"><a href=\"#地址及页面分析\" class=\"headerlink\" title=\"地址及页面分析\"></a>地址及页面分析</h2><h3 id=\"地址分析\"><a href=\"#地址分析\" class=\"headerlink\" title=\"地址分析\"></a>地址分析</h3><p>  通过尝试,想要获取某个城市或者地址的天气页面有两种方式,一种是通过经纬度访问<a href=\"http://m.weather.com.cn/d/town/index?lat=39.915055&amp;lon=116.403982\">http://m.weather.com.cn/d/town/index?lat=39.915055&amp;lon=116.403982</a>,另一种是通过城市id访问<a href=\"http://m.weather.com.cn/mweather/101010100.shtml\">http://m.weather.com.cn/mweather/101010100.shtml</a> 两个地址都能得到北京市的天气情况 不过前一种是经纬度,另一种是城市id.</p>\n<p>  关于城市的id可以查看<a href=\"http://mobile.weather.com.cn/js/citylist.xml\">http://mobile.weather.com.cn/js/citylist.xml</a>可以得到全国2500多个城市县区及全球其他国家6000多个城市的数据 可以直接通过以上的接口获得相关城市的天气数据</p>\n<h3 id=\"页面分析\"><a href=\"#页面分析\" class=\"headerlink\" title=\"页面分析\"></a>页面分析</h3><h4 id=\"id查询\"><a href=\"#id查询\" class=\"headerlink\" title=\"id查询\"></a>id查询</h4><p>  我们先访问以下<a href=\"http://m.weather.com.cn/mweather/101010100.shtml\">http://m.weather.com.cn/mweather/101010100.shtml</a>页面  看看整个页面都请求了什么<br>  <img src=\"http://ooymoxvz4.bkt.clouddn.com/17-9-2/2275119.jpg\" alt=\"页面请求信息\"></p>\n<p>  <a href=\"http://m.weather.com.cn/mweather/101010100.shtml\">http://m.weather.com.cn/mweather/101010100.shtml</a> 这个页面并没有返回对应的数据 也是 现在谁家的网页还能都是静态的<br>  然后是这个位置的素质五连<img src=\"http://ooymoxvz4.bkt.clouddn.com/17-9-2/67360173.jpg\" alt=\"数据五连\"><br>  后面是一个时间戳 模仿了对应的请求格式 但是每次访问的时候都被拒绝应该是页面js代码中有控制 看来直接通过城市id获取不行了</p>\n<h4 id=\"经纬度查询\"><a href=\"#经纬度查询\" class=\"headerlink\" title=\"经纬度查询\"></a>经纬度查询</h4><p>  如果直接通过经纬度地址进行访问<a href=\"http://m.weather.com.cn/d/town/index?lat=39.915055&amp;lon=116.403982\">http://m.weather.com.cn/d/town/index?lat=39.915055&amp;lon=116.403982</a>通过分析可以在直接访问的地址中找到返回这个部分数据<br><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-9-2/10458430.jpg\" alt=\"请求详情\"></p>\n<h2 id=\"数据分析\"><a href=\"#数据分析\" class=\"headerlink\" title=\"数据分析\"></a>数据分析</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">([&#123;&quot;TEMMIN&quot;:19,&quot;reftime&quot;:&quot;201709022000&quot;,&quot;WIND1&quot;:&quot;04&quot;,&quot;WINS1&quot;:&quot;01&quot;,&quot;WIND2&quot;:&quot;01&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;02&quot;,&quot;WEATHER2&quot;:&quot;02&quot;,&quot;TEMMAX&quot;:29&#125;,&#123;&quot;TEMMIN&quot;:19,&quot;reftime&quot;:&quot;201709032000&quot;,&quot;WIND1&quot;:&quot;01&quot;,&quot;WINS1&quot;:&quot;00&quot;,&quot;WIND2&quot;:&quot;08&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;02&quot;,&quot;WEATHER2&quot;:&quot;02&quot;,&quot;TEMMAX&quot;:27&#125;,&#123;&quot;TEMMIN&quot;:18,&quot;reftime&quot;:&quot;201709042000&quot;,&quot;WIND1&quot;:&quot;01&quot;,&quot;WINS1&quot;:&quot;00&quot;,&quot;WIND2&quot;:&quot;01&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;01&quot;,&quot;WEATHER2&quot;:&quot;02&quot;,&quot;TEMMAX&quot;:27&#125;,&#123;&quot;TEMMIN&quot;:19,&quot;reftime&quot;:&quot;201709052000&quot;,&quot;WIND1&quot;:&quot;01&quot;,&quot;WINS1&quot;:&quot;00&quot;,&quot;WIND2&quot;:&quot;08&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;07&quot;,&quot;WEATHER2&quot;:&quot;02&quot;,&quot;TEMMAX&quot;:29&#125;,&#123;&quot;TEMMIN&quot;:18,&quot;reftime&quot;:&quot;201709062000&quot;,&quot;WIND1&quot;:&quot;01&quot;,&quot;WINS1&quot;:&quot;00&quot;,&quot;WIND2&quot;:&quot;02&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;00&quot;,&quot;WEATHER2&quot;:&quot;00&quot;,&quot;TEMMAX&quot;:30&#125;],[&#123;&quot;WIND&quot;:&quot;05&quot;,&quot;WEA08&quot;:&quot;02&quot;,&quot;reftime&quot;:&quot;201709010800&quot;,&quot;PRE08&quot;:&quot;0.0&quot;,&quot;TMAX&quot;:28,&quot;TMIN&quot;:21,&quot;WEA20&quot;:&quot;02&quot;,&quot;PRE20&quot;:&quot;0.0&quot;,&quot;WINS&quot;:&quot;01&quot;&#125;])</div></pre></td></tr></table></figure>\n<p>  这部分的数据可以看出来是个json格式数据 取其中一部分来分析<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&quot;TEMMIN&quot;:19,&quot;reftime&quot;:&quot;201709022000&quot;,&quot;WIND1&quot;:&quot;04&quot;,&quot;WINS1&quot;:&quot;01&quot;,&quot;WIND2&quot;:&quot;01&quot;,&quot;WINS2&quot;:&quot;00&quot;,&quot;WEATHER1&quot;:&quot;02&quot;,&quot;WEATHER2&quot;:&quot;02&quot;,&quot;TEMMAX&quot;:29&#125;</div></pre></td></tr></table></figure></p>\n<p>  经过整理后发现对应数据如下</p>\n<p>  TEMMIN : 最低温度<br>  TEMMAX : 最高温度<br>  reftime : 时间<br>  WEATHER1 : 天气1 (晴转多云 的晴)<br>  WEATHER2 : 天气2 (晴转多云 的多云)</p>\n<p>  weather的对应如下<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&quot;00&quot;:&quot;晴&quot;,&quot;01&quot;:&quot;多云&quot;,&quot;02&quot;:&quot;阴&quot;,&quot;03&quot;:&quot;阵雨&quot;,&quot;04&quot;:&quot;雷阵雨&quot;,&quot;05&quot;:&quot;雷阵雨伴有冰雹&quot;,&quot;06&quot;:&quot;雨夹雪&quot;,&quot;07&quot;:&quot;小雨&quot;,&quot;08&quot;:&quot;中雨&quot;,&quot;09&quot;:&quot;大雨&quot;,&quot;10&quot;:&quot;暴雨&quot;,&quot;11&quot;:&quot;大暴雨&quot;,&quot;12&quot;:&quot;特大暴雨&quot;,&quot;13&quot;:&quot;阵雪&quot;,&quot;14&quot;:&quot;小雪&quot;,&quot;15&quot;:&quot;中雪&quot;,&quot;16&quot;:&quot;大雪&quot;,&quot;17&quot;:&quot;暴雪&quot;,&quot;18&quot;:&quot;雾&quot;,&quot;19&quot;:&quot;冻雨&quot;,&quot;20&quot;:&quot;沙尘暴&quot;,&quot;21&quot;:&quot;小到中雨&quot;,&quot;22&quot;:&quot;中到大雨&quot;,&quot;23&quot;:&quot;大到暴雨&quot;,&quot;24&quot;:&quot;暴雨到大暴雨&quot;,&quot;25&quot;:&quot;大暴雨到特大暴雨&quot;,&quot;26&quot;:&quot;小到中雪&quot;,&quot;27&quot;:&quot;中到大雪&quot;,&quot;28&quot;:&quot;大到暴雪&quot;,&quot;29&quot;:&quot;浮尘&quot;,&quot;30&quot;:&quot;扬沙&quot;,&quot;31&quot;:&quot;强沙尘暴&quot;,&quot;53&quot;:&quot;霾&quot;,&quot;99&quot;:&quot;&quot;&#125;</div></pre></td></tr></table></figure></p>\n<p>  WIND1 : 风向1<br>  WINS1 : 风向1等级<br>  WIND2 : 风向2<br>  WINS2 : 风向2等级</p>\n<p>  WIND对应如下<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&quot;0&quot;:&quot;无持续风向&quot;,&quot;1&quot;:&quot;东北风&quot;,&quot;2&quot;:&quot;东风&quot;,&quot;3&quot;:&quot;东南风&quot;,&quot;4&quot;:&quot;南风&quot;,&quot;5&quot;:&quot;西南风&quot;,&quot;6&quot;:&quot;西风&quot;,&quot;7&quot;:&quot;西北风&quot;,&quot;8&quot;:&quot;北风&quot;,&quot;9&quot;:&quot;旋转风&quot;&#125;</div></pre></td></tr></table></figure></p>\n<p>  WINS对应如下:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&quot;0&quot;:&quot;微风&quot;,&quot;1&quot;:&quot;3-4级&quot;,&quot;2&quot;:&quot;4-5级&quot;,&quot;3&quot;:&quot;5-6级&quot;,&quot;4&quot;:&quot;6-7级&quot;,&quot;5&quot;:&quot;7-8级&quot;,&quot;6&quot;:&quot;8-9级&quot;,&quot;7&quot;:&quot;9-10级&quot;,&quot;8&quot;:&quot;10-11级&quot;,&quot;9&quot;:&quot;11-12级&quot;&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"获取流程\"><a href=\"#获取流程\" class=\"headerlink\" title=\"获取流程\"></a>获取流程</h2><p>  通过经纬度可以直接获取天气信息 而且精度较高可以定位当前位置后再获取天气信息 但是只适用国内的天气信息 可以本地缓存全国所有地区的经纬度或者通过城市id访问天气信息的页面中获取经纬度 看实际使用情况斟酌</p>\n<p>  而通过城市id的方法可以获得全球的天气信息</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>  页面还有很多数据可以发现 </p>"},{"title":"Android View 相关源码分析之一 从setContentView与LayoutInflater说起","date":"2017-02-03T09:29:24.000Z","_content":"\n## 从setContentView与LayoutInflater说起\n### setContentView分析\n#### 相关关系\n\n  ![相关关系图](http://p1.bpimg.com/567571/ad9dd8344a63f0cd.png)  \n  <!-- more -->\n\n  Activity中有Window成员 实例化为PhoneWindow PhoneWindow是抽象Window类的实现类\n\n  Window提供了绘制窗口的通用API PhoneWindow中包含了DecorView对象 是所有窗口(Activity界面)的根View\n\n  具体的构如下\n\n  ![View层级分析](http://i1.piimg.com/567571/b7961c0d826c75e0.png)\n\n  具体的可以通过hierarchyviewer工具分析一下\n\n\n\n#### PhoneWindow的setContentView分析\n>Window类的setContentView方法 而Window的setContentView方法是抽象的  所以查看PhoneWindow的setContentView()\n\n1. setContentView方法\n  ```java\n    // This is the view in which the window contents are placed. It is either\n    // mDecor itself, or a child of mDecor where the contents go.\n    private ViewGroup mContentParent;\n\n    @Override\n    public void setContentView(int layoutResID) {\n        // Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window\n        // decor, when theme attributes and the like are crystalized. Do not check the feature\n        // before this happens.\n        if (mContentParent == null) {\n            //第一次调用\n            //下面会详细分析\n            installDecor();\n        } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            //移除该mContentParent下的所有View\n            //又因为这个的存在  我们可以多次使用setContentView()\n            mContentParent.removeAllViews();\n        }\n        //判断是否使用了Activity的过度动画\n        if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n          //设置动画场景\n            final Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,\n                    getContext());\n            transitionTo(newScene);\n        } else {\n            //将资源文件通过LayoutInflater对象装换为View树\n            //在PhoneWindow的构造函数中 mLayoutInflater = LayoutInflater.from(context);\n            mLayoutInflater.inflate(layoutResID, mContentParent);\n        }\n\n        //View中\n        /**\n         * Ask that a new dispatch of {@link #onApplyWindowInsets(WindowInsets)} be performed.\n         */\n        // public void requestApplyInsets() {\n        //     requestFitSystemWindows();\n        // }\n        mContentParent.requestApplyInsets();\n        final Callback cb = getCallback();\n        if (cb != null && !isDestroyed()) {\n            cb.onContentChanged();\n        }\n    }\n\n    @Override\n    public void setContentView(View view) {\n        setContentView(view, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));\n    }\n\n    @Override\n    public void setContentView(View view, ViewGroup.LayoutParams params) {\n        if (mContentParent == null) {\n            installDecor();\n        } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            mContentParent.removeAllViews();\n        }\n\n        if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            view.setLayoutParams(params);\n            final Scene newScene = new Scene(mContentParent, view);\n            transitionTo(newScene);\n        } else {\n          //已经为View 直接使用View的addView方法追加到当前mContentParent中\n            mContentParent.addView(view, params);\n        }\n        mContentParent.requestApplyInsets();\n        final Callback cb = getCallback();\n        //调用CallBack接口的onContentChange来通知Activity组件视图发生了变化\n        if (cb != null && !isDestroyed()) {\n            cb.onContentChanged();\n        }\n    }\n  ```\n2. installDecor方法\n  ```java\n    //截取部分主要分析代码\n    private void installDecor() {\n        if (mDecor == null) {\n            //如果mDecor为空则创建一个DecorView实例\n            // protected DecorView generateDecor() {\n            //   return new DecorView(getContext(), -1);\n            // }\n            mDecor = generateDecor();  \n            mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);\n            mDecor.setIsRootNamespace(true);\n            if (!mInvalidatePanelMenuPosted && mInvalidatePanelMenuFeatures != 0) {\n                mDecor.postOnAnimation(mInvalidatePanelMenuRunnable);\n            }\n        }\n        if (mContentParent == null) {\n            //根据窗口的风格修饰 选择对应的修饰布局文件 将id为content的FrameLayout赋值于mContentParent\n            mContentParent = generateLayout(mDecor);\n            ...\n          }\n    }\n  ```\n  ```java\n    protected ViewGroup generateLayout(DecorView decor) {\n         // Apply data from current theme.\n         //根据当前style修饰相应样式\n\n         TypedArray a = getWindowStyle();\n\n         ...\n         //一堆if判断\n\n         // 增加窗口修饰\n\n         int layoutResource;\n         int features = getLocalFeatures();\n\n         ...\n         //根据features选择不同的窗帘修饰布局文件得到\n         //把选中的窗口修饰布局文件添加到DecorView中, 指定contentParent的值\n         View in = mLayoutInflater.inflate(layoutResource, null);\n         decor.addView(in, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));\n         mContentRoot = (ViewGroup) in;\n\n         ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);\n         if (contentParent == null) {\n             throw new RuntimeException(\"Window couldn't find content container view\");\n         }\n\n         ...\n         return contentParent;\n     }\n  ```\n  该方法的主要功能为 根据窗口的style为该窗口选择不同的窗口根布局文件 将mDecor作为根视图将窗口布局添加,获取id为content的FrameLayout返回给mContentParent对象  实质为阐释mDecor和mContentParent对象\n3. (扩展)关于设置Activity属性需要在setContentView方法之前调用的问题\n\n  在设置Activity属性的时候 比如requestWindowFeature(Window.FEATURE_NO_TITLE) 需要在setContentView方法之前调用\n  ```java\n    public boolean requestFeature(int featureId) {\n        if (mContentParent != null) {\n            throw new AndroidRuntimeException(\"requestFeature() must be called before adding content\");\n        }\n        ...\n    }\n```\n\n4. onContentChanged方法\n\n  在PhoneWindow中没有重写getCallback相关方法 而在Window类下\n  ```java\n    /**\n     * Return the current Callback interface for this window.\n     */\n    public final Callback getCallback() {\n        return mCallback;\n    }\n  ```\n  mCallback相关的赋值方法\n  ```java\n    /**\n     * Set the Callback interface for this window, used to intercept key\n     * events and other dynamic operations in the window.\n     *\n     * @param callback The desired Callback interface.\n     */\n    public void setCallback(Callback callback) {\n        mCallback = callback;\n    }\n  ```\n  setCallback方法在Activity中被使用\n  ```java\n    final void attach(Context context, ActivityThread aThread,\n              Instrumentation instr, IBinder token, int ident,\n              Application application, Intent intent, ActivityInfo info,\n              CharSequence title, Activity parent, String id,\n              NonConfigurationInstances lastNonConfigurationInstances,\n              Configuration config, String referrer, IVoiceInteractor voiceInteractor) {\n          ...\n          mWindow.setCallback(this);\n          ...\n    }\n  ```\n  说明Activity实现了Window的CallBack接口 然后在Activity中找到onContentChanged方法\n  ```java\n    public void onContentChanged() {\n    }\n  ```\n  对 空方法. 说明在Activity的布局改动时 (setContentView或者addContentView 方法执行完毕后会调用改方法)\n   所以各种View的findViewById方法什么的可以放在这里\n\n5. setContentView源码总结\n  * 创建一个DecorView的对象mDector 该mDector将作为整个应用窗口的根视图\n  *  根据根据Feature等style theme创建不同的窗口修饰布局文件 并且通过findViewById获取Activity布局文件该存放的地方\n  *  将Activity的布局文件添加至id为content的FrameLayout内\n  *  执行到当前页面还没有显示出来\n\n6. Activity页面显示\n\n  我们都知道Activity的实际开始于ActivityThread的main方法 当该方法调运完之后会调用该类的performLaunchActivity方法来创建要启动的Activity组件 这个过程中还会为该Activity组件创建窗口对象和视图对象 当组件创建完成后用过调用该类的handleResumeActivity方法将其激活\n\n  ```java\n    final void handleResumeActivity(IBinder token,\n               boolean clearHide, boolean isForward, boolean reallyResume) {\n                 ...\n               if (!r.activity.mFinished && willBeVisible\n                       && r.activity.mDecor != null && !r.hideForNow) {\n                   ...\n                   if (r.activity.mVisibleFromClient) {\n                       r.activity.makeVisible();\n                       //这里这里 通过调用Activity的makeVisible方法来显示我们通过setContentView创建的mDecor\n                   }\n                   ...\n               }\n           } else {\n             ...\n           }\n       }\n  ```\n  ```java\n    //Activity的makeVisible方法\n    void makeVisible() {\n         if (!mWindowAdded) {\n             ViewManager wm = getWindowManager();\n             wm.addView(mDecor, getWindow().getAttributes());\n             mWindowAdded = true;\n         }\n         mDecor.setVisibility(View.VISIBLE);\n     }\n  ```\n  至此通过setContentView方法设置的页面才最后显示出来\n\n### LayoutInflater源码分析\n1. 与setContentView相关\n\n  在PhoneWindow的generateLayout中调用了     \n  ```java\n    View in = mLayoutInflater.inflate(layoutResource, null);\n  ```\n\n2. LayoutInflater中获取实例化方法\n  ```java\n    /**\n     * Obtains the LayoutInflater from the given context.\n     */\n    public static LayoutInflater from(Context context) {\n        LayoutInflater LayoutInflater =\n                (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        if (LayoutInflater == null) {\n            throw new AssertionError(\"LayoutInflater not found.\");\n        }\n        return LayoutInflater;\n    }\n  ```\n\n3. inflate方法相关\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root) {\n        return inflate(resource, root, root != null);\n    }\n\n    public View inflate(XmlPullParser parser, @Nullable ViewGroup root) {\n      return inflate(parser, root, root != null);\n    }\n  ```\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\n        final Resources res = getContext().getResources();\n        if (DEBUG) {\n            Log.d(TAG, \"INFLATING from resource: \\\"\" + res.getResourceName(resource) + \"\\\" (\"\n                    + Integer.toHexString(resource) + \")\");\n        }\n\n        final XmlResourceParser parser = res.getLayout(resource);\n        try {\n            return inflate(parser, root, attachToRoot);\n        } finally {\n            parser.close();\n        }\n    }\n  ```\n  最后发现都需要调用\n\n  ```java\n  public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n          synchronized (mConstructorArgs) {\n              Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n\n              final Context inflaterContext = mContext;\n              final AttributeSet attrs = Xml.asAttributeSet(parser);\n              Context lastContext = (Context) mConstructorArgs[0];\n              mConstructorArgs[0] = inflaterContext;\n              //定义返回值 初始化传入形参 root\n              View result = root;\n\n              try {\n                  // 找到根节点\n                  int type;\n                  while ((type = parser.next()) != XmlPullParser.START_TAG &&\n                          type != XmlPullParser.END_DOCUMENT) {\n                  }\n\n                  //验证type是否为Start_Tag  保证xml文件正确\n                  if (type != XmlPullParser.START_TAG) {\n                      throw new InflateException(parser.getPositionDescription()\n                              + \": No start tag found!\");\n                  }\n\n                  //type为 root node\n                  final String name = parser.getName();\n\n                  if (DEBUG) {\n                      System.out.println(\"**************************\");\n                      System.out.println(\"Creating root view: \"\n                              + name);\n                      System.out.println(\"**************************\");\n                  }\n\n                  if (TAG_MERGE.equals(name)) {\n                      //处理 merge相关\n                      //root需要非空 且attachToRoot为空\n                      if (root == null || !attachToRoot) {\n                          throw new InflateException(\"<merge /> can be used only with a valid \"\n                                  + \"ViewGroup root and attachToRoot=true\");\n                      }\n                      //递归inflate 方法调用\n                      rInflate(parser, root, inflaterContext, attrs, false);\n                  } else {\n                      //根据tag节点创建view对象\n                      final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                      ViewGroup.LayoutParams params = null;\n\n                      if (root != null) {\n                          if (DEBUG) {\n                              System.out.println(\"Creating params from root: \" +\n                                      root);\n                          }\n                          //根据root生成LayoutParams\n                          params = root.generateLayoutParams(attrs);\n                          if (!attachToRoot) {\n                              //如果attachToRoot为flase 则调用setLayoutParams\n                              temp.setLayoutParams(params);\n                          }\n                      }\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> start inflating children\");\n                      }\n                      //递归inflate剩下的children\n                      rInflateChildren(parser, temp, attrs, true);\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> done inflating children\");\n                      }\n\n                      // We are supposed to attach all the views we found (int temp)\n                      // to root. Do that now.\n                      if (root != null && attachToRoot) {\n                          //root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里\n                          root.addView(temp, params);\n                      }\n\n                      // Decide whether to return the root that was passed in or the\n                      // top view found in xml.\n                      if (root == null || !attachToRoot) {\n                          //返回xml里解析的root view\n                          result = temp;\n                      }\n                  }\n\n              } catch (XmlPullParserException e) {\n                  InflateException ex = new InflateException(e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } catch (Exception e) {\n                  InflateException ex = new InflateException(\n                          parser.getPositionDescription()\n                                  + \": \" + e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } finally {\n                  // Don't retain static reference on context.\n                  mConstructorArgs[0] = lastContext;\n                  mConstructorArgs[1] = null;\n              }\n\n              Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n              //返回参数root或xml文件里的root view\n              return result;\n          }\n      }\n\n  ```\n  相关inflate参数的结果\n  ![inflate参数.png](/inflate参数.png)\n\n4. 相关方法解析\n  在Inflate中多次被调用的rInflate\n\n  ```java\n     void rInflate(XmlPullParser parser, View parent, Context context,\n             AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException {\n\n         final int depth = parser.getDepth();\n         int type;\n         //XmlPullParser解析器的标准解析模式\n         while (((type = parser.next()) != XmlPullParser.END_TAG ||\n                 parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {\n             //找到start_tag节点\n             if (type != XmlPullParser.START_TAG) {\n                 continue;\n             }\n             //获取Name标记\n             final String name = parser.getName();\n\n             //private static final String TAG_REQUEST_FOCUS = \"requestFocus\";\n             //处理requestFocus\n             if (TAG_REQUEST_FOCUS.equals(name)) {\n                 parseRequestFocus(parser, parent);\n             // private static final String TAG_TAG = \"tag\";\n             //处理tag\n             } else if (TAG_TAG.equals(name)) {\n                 parseViewTag(parser, parent, attrs);\n             //private static final String TAG_INCLUDE = \"include\";\n             //处理include\n             } else if (TAG_INCLUDE.equals(name)) {\n                 //如果是根节点则抛出异常\n                 if (parser.getDepth() == 0) {\n                     throw new InflateException(\"<include /> cannot be the root element\");\n                 }\n                 parseInclude(parser, context, parent, attrs);\n             //private static final String TAG_MERGE = \"merge\";\n             //处理merge merge需要是xml中的根节点\n             } else if (TAG_MERGE.equals(name)) {\n                 throw new InflateException(\"<merge /> must be the root element\");\n             } else {\n                 final View view = createViewFromTag(parent, name, context, attrs);\n                 final ViewGroup viewGroup = (ViewGroup) parent;\n                 final ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);\n                 rInflateChildren(parser, view, attrs, true);\n                 viewGroup.addView(view, params);\n             }\n         }\n\n          //parent的所有子节点都处理完毕的时候回onFinishInflate方法\n         if (finishInflate) {\n             parent.onFinishInflate();\n         }\n     }\n     //可以添加自定义逻辑\n      protected void onFinishInflate() {\n      }\n```\n","source":"_posts/从setContentView说起.md","raw":"---\ntitle: Android View 相关源码分析之一 从setContentView与LayoutInflater说起\ndate: 2017-02-03 17:29:24\ntags: [\"android\" , \"view\" , \"源码\"]\ncategories: \"android\"\n---\n\n## 从setContentView与LayoutInflater说起\n### setContentView分析\n#### 相关关系\n\n  ![相关关系图](http://p1.bpimg.com/567571/ad9dd8344a63f0cd.png)  \n  <!-- more -->\n\n  Activity中有Window成员 实例化为PhoneWindow PhoneWindow是抽象Window类的实现类\n\n  Window提供了绘制窗口的通用API PhoneWindow中包含了DecorView对象 是所有窗口(Activity界面)的根View\n\n  具体的构如下\n\n  ![View层级分析](http://i1.piimg.com/567571/b7961c0d826c75e0.png)\n\n  具体的可以通过hierarchyviewer工具分析一下\n\n\n\n#### PhoneWindow的setContentView分析\n>Window类的setContentView方法 而Window的setContentView方法是抽象的  所以查看PhoneWindow的setContentView()\n\n1. setContentView方法\n  ```java\n    // This is the view in which the window contents are placed. It is either\n    // mDecor itself, or a child of mDecor where the contents go.\n    private ViewGroup mContentParent;\n\n    @Override\n    public void setContentView(int layoutResID) {\n        // Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window\n        // decor, when theme attributes and the like are crystalized. Do not check the feature\n        // before this happens.\n        if (mContentParent == null) {\n            //第一次调用\n            //下面会详细分析\n            installDecor();\n        } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            //移除该mContentParent下的所有View\n            //又因为这个的存在  我们可以多次使用setContentView()\n            mContentParent.removeAllViews();\n        }\n        //判断是否使用了Activity的过度动画\n        if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n          //设置动画场景\n            final Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,\n                    getContext());\n            transitionTo(newScene);\n        } else {\n            //将资源文件通过LayoutInflater对象装换为View树\n            //在PhoneWindow的构造函数中 mLayoutInflater = LayoutInflater.from(context);\n            mLayoutInflater.inflate(layoutResID, mContentParent);\n        }\n\n        //View中\n        /**\n         * Ask that a new dispatch of {@link #onApplyWindowInsets(WindowInsets)} be performed.\n         */\n        // public void requestApplyInsets() {\n        //     requestFitSystemWindows();\n        // }\n        mContentParent.requestApplyInsets();\n        final Callback cb = getCallback();\n        if (cb != null && !isDestroyed()) {\n            cb.onContentChanged();\n        }\n    }\n\n    @Override\n    public void setContentView(View view) {\n        setContentView(view, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));\n    }\n\n    @Override\n    public void setContentView(View view, ViewGroup.LayoutParams params) {\n        if (mContentParent == null) {\n            installDecor();\n        } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            mContentParent.removeAllViews();\n        }\n\n        if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            view.setLayoutParams(params);\n            final Scene newScene = new Scene(mContentParent, view);\n            transitionTo(newScene);\n        } else {\n          //已经为View 直接使用View的addView方法追加到当前mContentParent中\n            mContentParent.addView(view, params);\n        }\n        mContentParent.requestApplyInsets();\n        final Callback cb = getCallback();\n        //调用CallBack接口的onContentChange来通知Activity组件视图发生了变化\n        if (cb != null && !isDestroyed()) {\n            cb.onContentChanged();\n        }\n    }\n  ```\n2. installDecor方法\n  ```java\n    //截取部分主要分析代码\n    private void installDecor() {\n        if (mDecor == null) {\n            //如果mDecor为空则创建一个DecorView实例\n            // protected DecorView generateDecor() {\n            //   return new DecorView(getContext(), -1);\n            // }\n            mDecor = generateDecor();  \n            mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);\n            mDecor.setIsRootNamespace(true);\n            if (!mInvalidatePanelMenuPosted && mInvalidatePanelMenuFeatures != 0) {\n                mDecor.postOnAnimation(mInvalidatePanelMenuRunnable);\n            }\n        }\n        if (mContentParent == null) {\n            //根据窗口的风格修饰 选择对应的修饰布局文件 将id为content的FrameLayout赋值于mContentParent\n            mContentParent = generateLayout(mDecor);\n            ...\n          }\n    }\n  ```\n  ```java\n    protected ViewGroup generateLayout(DecorView decor) {\n         // Apply data from current theme.\n         //根据当前style修饰相应样式\n\n         TypedArray a = getWindowStyle();\n\n         ...\n         //一堆if判断\n\n         // 增加窗口修饰\n\n         int layoutResource;\n         int features = getLocalFeatures();\n\n         ...\n         //根据features选择不同的窗帘修饰布局文件得到\n         //把选中的窗口修饰布局文件添加到DecorView中, 指定contentParent的值\n         View in = mLayoutInflater.inflate(layoutResource, null);\n         decor.addView(in, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));\n         mContentRoot = (ViewGroup) in;\n\n         ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);\n         if (contentParent == null) {\n             throw new RuntimeException(\"Window couldn't find content container view\");\n         }\n\n         ...\n         return contentParent;\n     }\n  ```\n  该方法的主要功能为 根据窗口的style为该窗口选择不同的窗口根布局文件 将mDecor作为根视图将窗口布局添加,获取id为content的FrameLayout返回给mContentParent对象  实质为阐释mDecor和mContentParent对象\n3. (扩展)关于设置Activity属性需要在setContentView方法之前调用的问题\n\n  在设置Activity属性的时候 比如requestWindowFeature(Window.FEATURE_NO_TITLE) 需要在setContentView方法之前调用\n  ```java\n    public boolean requestFeature(int featureId) {\n        if (mContentParent != null) {\n            throw new AndroidRuntimeException(\"requestFeature() must be called before adding content\");\n        }\n        ...\n    }\n```\n\n4. onContentChanged方法\n\n  在PhoneWindow中没有重写getCallback相关方法 而在Window类下\n  ```java\n    /**\n     * Return the current Callback interface for this window.\n     */\n    public final Callback getCallback() {\n        return mCallback;\n    }\n  ```\n  mCallback相关的赋值方法\n  ```java\n    /**\n     * Set the Callback interface for this window, used to intercept key\n     * events and other dynamic operations in the window.\n     *\n     * @param callback The desired Callback interface.\n     */\n    public void setCallback(Callback callback) {\n        mCallback = callback;\n    }\n  ```\n  setCallback方法在Activity中被使用\n  ```java\n    final void attach(Context context, ActivityThread aThread,\n              Instrumentation instr, IBinder token, int ident,\n              Application application, Intent intent, ActivityInfo info,\n              CharSequence title, Activity parent, String id,\n              NonConfigurationInstances lastNonConfigurationInstances,\n              Configuration config, String referrer, IVoiceInteractor voiceInteractor) {\n          ...\n          mWindow.setCallback(this);\n          ...\n    }\n  ```\n  说明Activity实现了Window的CallBack接口 然后在Activity中找到onContentChanged方法\n  ```java\n    public void onContentChanged() {\n    }\n  ```\n  对 空方法. 说明在Activity的布局改动时 (setContentView或者addContentView 方法执行完毕后会调用改方法)\n   所以各种View的findViewById方法什么的可以放在这里\n\n5. setContentView源码总结\n  * 创建一个DecorView的对象mDector 该mDector将作为整个应用窗口的根视图\n  *  根据根据Feature等style theme创建不同的窗口修饰布局文件 并且通过findViewById获取Activity布局文件该存放的地方\n  *  将Activity的布局文件添加至id为content的FrameLayout内\n  *  执行到当前页面还没有显示出来\n\n6. Activity页面显示\n\n  我们都知道Activity的实际开始于ActivityThread的main方法 当该方法调运完之后会调用该类的performLaunchActivity方法来创建要启动的Activity组件 这个过程中还会为该Activity组件创建窗口对象和视图对象 当组件创建完成后用过调用该类的handleResumeActivity方法将其激活\n\n  ```java\n    final void handleResumeActivity(IBinder token,\n               boolean clearHide, boolean isForward, boolean reallyResume) {\n                 ...\n               if (!r.activity.mFinished && willBeVisible\n                       && r.activity.mDecor != null && !r.hideForNow) {\n                   ...\n                   if (r.activity.mVisibleFromClient) {\n                       r.activity.makeVisible();\n                       //这里这里 通过调用Activity的makeVisible方法来显示我们通过setContentView创建的mDecor\n                   }\n                   ...\n               }\n           } else {\n             ...\n           }\n       }\n  ```\n  ```java\n    //Activity的makeVisible方法\n    void makeVisible() {\n         if (!mWindowAdded) {\n             ViewManager wm = getWindowManager();\n             wm.addView(mDecor, getWindow().getAttributes());\n             mWindowAdded = true;\n         }\n         mDecor.setVisibility(View.VISIBLE);\n     }\n  ```\n  至此通过setContentView方法设置的页面才最后显示出来\n\n### LayoutInflater源码分析\n1. 与setContentView相关\n\n  在PhoneWindow的generateLayout中调用了     \n  ```java\n    View in = mLayoutInflater.inflate(layoutResource, null);\n  ```\n\n2. LayoutInflater中获取实例化方法\n  ```java\n    /**\n     * Obtains the LayoutInflater from the given context.\n     */\n    public static LayoutInflater from(Context context) {\n        LayoutInflater LayoutInflater =\n                (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        if (LayoutInflater == null) {\n            throw new AssertionError(\"LayoutInflater not found.\");\n        }\n        return LayoutInflater;\n    }\n  ```\n\n3. inflate方法相关\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root) {\n        return inflate(resource, root, root != null);\n    }\n\n    public View inflate(XmlPullParser parser, @Nullable ViewGroup root) {\n      return inflate(parser, root, root != null);\n    }\n  ```\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\n        final Resources res = getContext().getResources();\n        if (DEBUG) {\n            Log.d(TAG, \"INFLATING from resource: \\\"\" + res.getResourceName(resource) + \"\\\" (\"\n                    + Integer.toHexString(resource) + \")\");\n        }\n\n        final XmlResourceParser parser = res.getLayout(resource);\n        try {\n            return inflate(parser, root, attachToRoot);\n        } finally {\n            parser.close();\n        }\n    }\n  ```\n  最后发现都需要调用\n\n  ```java\n  public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n          synchronized (mConstructorArgs) {\n              Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n\n              final Context inflaterContext = mContext;\n              final AttributeSet attrs = Xml.asAttributeSet(parser);\n              Context lastContext = (Context) mConstructorArgs[0];\n              mConstructorArgs[0] = inflaterContext;\n              //定义返回值 初始化传入形参 root\n              View result = root;\n\n              try {\n                  // 找到根节点\n                  int type;\n                  while ((type = parser.next()) != XmlPullParser.START_TAG &&\n                          type != XmlPullParser.END_DOCUMENT) {\n                  }\n\n                  //验证type是否为Start_Tag  保证xml文件正确\n                  if (type != XmlPullParser.START_TAG) {\n                      throw new InflateException(parser.getPositionDescription()\n                              + \": No start tag found!\");\n                  }\n\n                  //type为 root node\n                  final String name = parser.getName();\n\n                  if (DEBUG) {\n                      System.out.println(\"**************************\");\n                      System.out.println(\"Creating root view: \"\n                              + name);\n                      System.out.println(\"**************************\");\n                  }\n\n                  if (TAG_MERGE.equals(name)) {\n                      //处理 merge相关\n                      //root需要非空 且attachToRoot为空\n                      if (root == null || !attachToRoot) {\n                          throw new InflateException(\"<merge /> can be used only with a valid \"\n                                  + \"ViewGroup root and attachToRoot=true\");\n                      }\n                      //递归inflate 方法调用\n                      rInflate(parser, root, inflaterContext, attrs, false);\n                  } else {\n                      //根据tag节点创建view对象\n                      final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                      ViewGroup.LayoutParams params = null;\n\n                      if (root != null) {\n                          if (DEBUG) {\n                              System.out.println(\"Creating params from root: \" +\n                                      root);\n                          }\n                          //根据root生成LayoutParams\n                          params = root.generateLayoutParams(attrs);\n                          if (!attachToRoot) {\n                              //如果attachToRoot为flase 则调用setLayoutParams\n                              temp.setLayoutParams(params);\n                          }\n                      }\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> start inflating children\");\n                      }\n                      //递归inflate剩下的children\n                      rInflateChildren(parser, temp, attrs, true);\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> done inflating children\");\n                      }\n\n                      // We are supposed to attach all the views we found (int temp)\n                      // to root. Do that now.\n                      if (root != null && attachToRoot) {\n                          //root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里\n                          root.addView(temp, params);\n                      }\n\n                      // Decide whether to return the root that was passed in or the\n                      // top view found in xml.\n                      if (root == null || !attachToRoot) {\n                          //返回xml里解析的root view\n                          result = temp;\n                      }\n                  }\n\n              } catch (XmlPullParserException e) {\n                  InflateException ex = new InflateException(e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } catch (Exception e) {\n                  InflateException ex = new InflateException(\n                          parser.getPositionDescription()\n                                  + \": \" + e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } finally {\n                  // Don't retain static reference on context.\n                  mConstructorArgs[0] = lastContext;\n                  mConstructorArgs[1] = null;\n              }\n\n              Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n              //返回参数root或xml文件里的root view\n              return result;\n          }\n      }\n\n  ```\n  相关inflate参数的结果\n  ![inflate参数.png](/inflate参数.png)\n\n4. 相关方法解析\n  在Inflate中多次被调用的rInflate\n\n  ```java\n     void rInflate(XmlPullParser parser, View parent, Context context,\n             AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException {\n\n         final int depth = parser.getDepth();\n         int type;\n         //XmlPullParser解析器的标准解析模式\n         while (((type = parser.next()) != XmlPullParser.END_TAG ||\n                 parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {\n             //找到start_tag节点\n             if (type != XmlPullParser.START_TAG) {\n                 continue;\n             }\n             //获取Name标记\n             final String name = parser.getName();\n\n             //private static final String TAG_REQUEST_FOCUS = \"requestFocus\";\n             //处理requestFocus\n             if (TAG_REQUEST_FOCUS.equals(name)) {\n                 parseRequestFocus(parser, parent);\n             // private static final String TAG_TAG = \"tag\";\n             //处理tag\n             } else if (TAG_TAG.equals(name)) {\n                 parseViewTag(parser, parent, attrs);\n             //private static final String TAG_INCLUDE = \"include\";\n             //处理include\n             } else if (TAG_INCLUDE.equals(name)) {\n                 //如果是根节点则抛出异常\n                 if (parser.getDepth() == 0) {\n                     throw new InflateException(\"<include /> cannot be the root element\");\n                 }\n                 parseInclude(parser, context, parent, attrs);\n             //private static final String TAG_MERGE = \"merge\";\n             //处理merge merge需要是xml中的根节点\n             } else if (TAG_MERGE.equals(name)) {\n                 throw new InflateException(\"<merge /> must be the root element\");\n             } else {\n                 final View view = createViewFromTag(parent, name, context, attrs);\n                 final ViewGroup viewGroup = (ViewGroup) parent;\n                 final ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);\n                 rInflateChildren(parser, view, attrs, true);\n                 viewGroup.addView(view, params);\n             }\n         }\n\n          //parent的所有子节点都处理完毕的时候回onFinishInflate方法\n         if (finishInflate) {\n             parent.onFinishInflate();\n         }\n     }\n     //可以添加自定义逻辑\n      protected void onFinishInflate() {\n      }\n```\n","slug":"从setContentView说起","published":1,"updated":"2017-02-06T14:56:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8cwyb6b000vo3xwa0bwzo3i","content":"<h2 id=\"从setContentView与LayoutInflater说起\"><a href=\"#从setContentView与LayoutInflater说起\" class=\"headerlink\" title=\"从setContentView与LayoutInflater说起\"></a>从setContentView与LayoutInflater说起</h2><h3 id=\"setContentView分析\"><a href=\"#setContentView分析\" class=\"headerlink\" title=\"setContentView分析\"></a>setContentView分析</h3><h4 id=\"相关关系\"><a href=\"#相关关系\" class=\"headerlink\" title=\"相关关系\"></a>相关关系</h4><p>  <img src=\"http://p1.bpimg.com/567571/ad9dd8344a63f0cd.png\" alt=\"相关关系图\"><br>  <a id=\"more\"></a></p>\n<p>  Activity中有Window成员 实例化为PhoneWindow PhoneWindow是抽象Window类的实现类</p>\n<p>  Window提供了绘制窗口的通用API PhoneWindow中包含了DecorView对象 是所有窗口(Activity界面)的根View</p>\n<p>  具体的构如下</p>\n<p>  <img src=\"http://i1.piimg.com/567571/b7961c0d826c75e0.png\" alt=\"View层级分析\"></p>\n<p>  具体的可以通过hierarchyviewer工具分析一下</p>\n<h4 id=\"PhoneWindow的setContentView分析\"><a href=\"#PhoneWindow的setContentView分析\" class=\"headerlink\" title=\"PhoneWindow的setContentView分析\"></a>PhoneWindow的setContentView分析</h4><blockquote>\n<p>Window类的setContentView方法 而Window的setContentView方法是抽象的  所以查看PhoneWindow的setContentView()</p>\n</blockquote>\n<ol>\n<li><p>setContentView方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// This is the view in which the window contents are placed. It is either</span></div><div class=\"line\"><span class=\"comment\">// mDecor itself, or a child of mDecor where the contents go.</span></div><div class=\"line\"><span class=\"keyword\">private</span> ViewGroup mContentParent;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window</span></div><div class=\"line\">    <span class=\"comment\">// decor, when theme attributes and the like are crystalized. Do not check the feature</span></div><div class=\"line\">    <span class=\"comment\">// before this happens.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//第一次调用</span></div><div class=\"line\">        <span class=\"comment\">//下面会详细分析</span></div><div class=\"line\">        installDecor();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class=\"line\">        <span class=\"comment\">//移除该mContentParent下的所有View</span></div><div class=\"line\">        <span class=\"comment\">//又因为这个的存在  我们可以多次使用setContentView()</span></div><div class=\"line\">        mContentParent.removeAllViews();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//判断是否使用了Activity的过度动画</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class=\"line\">      <span class=\"comment\">//设置动画场景</span></div><div class=\"line\">        <span class=\"keyword\">final</span> Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,</div><div class=\"line\">                getContext());</div><div class=\"line\">        transitionTo(newScene);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//将资源文件通过LayoutInflater对象装换为View树</span></div><div class=\"line\">        <span class=\"comment\">//在PhoneWindow的构造函数中 mLayoutInflater = LayoutInflater.from(context);</span></div><div class=\"line\">        mLayoutInflater.inflate(layoutResID, mContentParent);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//View中</span></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Ask that a new dispatch of &#123;<span class=\"doctag\">@link</span> #onApplyWindowInsets(WindowInsets)&#125; be performed.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"comment\">// public void requestApplyInsets() &#123;</span></div><div class=\"line\">    <span class=\"comment\">//     requestFitSystemWindows();</span></div><div class=\"line\">    <span class=\"comment\">// &#125;</span></div><div class=\"line\">    mContentParent.requestApplyInsets();</div><div class=\"line\">    <span class=\"keyword\">final</span> Callback cb = getCallback();</div><div class=\"line\">    <span class=\"keyword\">if</span> (cb != <span class=\"keyword\">null</span> &amp;&amp; !isDestroyed()) &#123;</div><div class=\"line\">        cb.onContentChanged();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">    setContentView(view, <span class=\"keyword\">new</span> ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        installDecor();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class=\"line\">        mContentParent.removeAllViews();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class=\"line\">        view.setLayoutParams(params);</div><div class=\"line\">        <span class=\"keyword\">final</span> Scene newScene = <span class=\"keyword\">new</span> Scene(mContentParent, view);</div><div class=\"line\">        transitionTo(newScene);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//已经为View 直接使用View的addView方法追加到当前mContentParent中</span></div><div class=\"line\">        mContentParent.addView(view, params);</div><div class=\"line\">    &#125;</div><div class=\"line\">    mContentParent.requestApplyInsets();</div><div class=\"line\">    <span class=\"keyword\">final</span> Callback cb = getCallback();</div><div class=\"line\">    <span class=\"comment\">//调用CallBack接口的onContentChange来通知Activity组件视图发生了变化</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (cb != <span class=\"keyword\">null</span> &amp;&amp; !isDestroyed()) &#123;</div><div class=\"line\">        cb.onContentChanged();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>installDecor方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//截取部分主要分析代码</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installDecor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mDecor == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//如果mDecor为空则创建一个DecorView实例</span></div><div class=\"line\">        <span class=\"comment\">// protected DecorView generateDecor() &#123;</span></div><div class=\"line\">        <span class=\"comment\">//   return new DecorView(getContext(), -1);</span></div><div class=\"line\">        <span class=\"comment\">// &#125;</span></div><div class=\"line\">        mDecor = generateDecor();  </div><div class=\"line\">        mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);</div><div class=\"line\">        mDecor.setIsRootNamespace(<span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!mInvalidatePanelMenuPosted &amp;&amp; mInvalidatePanelMenuFeatures != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            mDecor.postOnAnimation(mInvalidatePanelMenuRunnable);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//根据窗口的风格修饰 选择对应的修饰布局文件 将id为content的FrameLayout赋值于mContentParent</span></div><div class=\"line\">        mContentParent = generateLayout(mDecor);</div><div class=\"line\">        ...</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ViewGroup <span class=\"title\">generateLayout</span><span class=\"params\">(DecorView decor)</span> </span>&#123;</div><div class=\"line\">     <span class=\"comment\">// Apply data from current theme.</span></div><div class=\"line\">     <span class=\"comment\">//根据当前style修饰相应样式</span></div><div class=\"line\"></div><div class=\"line\">     TypedArray a = getWindowStyle();</div><div class=\"line\"></div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"comment\">//一堆if判断</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// 增加窗口修饰</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">int</span> layoutResource;</div><div class=\"line\">     <span class=\"keyword\">int</span> features = getLocalFeatures();</div><div class=\"line\"></div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"comment\">//根据features选择不同的窗帘修饰布局文件得到</span></div><div class=\"line\">     <span class=\"comment\">//把选中的窗口修饰布局文件添加到DecorView中, 指定contentParent的值</span></div><div class=\"line\">     View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</div><div class=\"line\">     decor.addView(in, <span class=\"keyword\">new</span> ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));</div><div class=\"line\">     mContentRoot = (ViewGroup) in;</div><div class=\"line\"></div><div class=\"line\">     ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);</div><div class=\"line\">     <span class=\"keyword\">if</span> (contentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Window couldn't find content container view\"</span>);</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"keyword\">return</span> contentParent;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>该方法的主要功能为 根据窗口的style为该窗口选择不同的窗口根布局文件 将mDecor作为根视图将窗口布局添加,获取id为content的FrameLayout返回给mContentParent对象  实质为阐释mDecor和mContentParent对象</p>\n</li>\n<li><p>(扩展)关于设置Activity属性需要在setContentView方法之前调用的问题</p>\n<p>在设置Activity属性的时候 比如requestWindowFeature(Window.FEATURE_NO_TITLE) 需要在setContentView方法之前调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">requestFeature</span><span class=\"params\">(<span class=\"keyword\">int</span> featureId)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AndroidRuntimeException(<span class=\"string\">\"requestFeature() must be called before adding content\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>onContentChanged方法</p>\n<p>在PhoneWindow中没有重写getCallback相关方法 而在Window类下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Return the current Callback interface for this window.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Callback <span class=\"title\">getCallback</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mCallback;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>mCallback相关的赋值方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Set the Callback interface for this window, used to intercept key</div><div class=\"line\"> * events and other dynamic operations in the window.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> callback The desired Callback interface.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCallback</span><span class=\"params\">(Callback callback)</span> </span>&#123;</div><div class=\"line\">    mCallback = callback;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>setCallback方法在Activity中被使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context, ActivityThread aThread,</span></span></div><div class=\"line\">          Instrumentation instr, IBinder token, <span class=\"keyword\">int</span> ident,</div><div class=\"line\">          Application application, Intent intent, ActivityInfo info,</div><div class=\"line\">          CharSequence title, Activity parent, String id,</div><div class=\"line\">          NonConfigurationInstances lastNonConfigurationInstances,</div><div class=\"line\">          Configuration config, String referrer, IVoiceInteractor voiceInteractor) &#123;</div><div class=\"line\">      ...</div><div class=\"line\">      mWindow.setCallback(<span class=\"keyword\">this</span>);</div><div class=\"line\">      ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>说明Activity实现了Window的CallBack接口 然后在Activity中找到onContentChanged方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onContentChanged</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对 空方法. 说明在Activity的布局改动时 (setContentView或者addContentView 方法执行完毕后会调用改方法)<br>所以各种View的findViewById方法什么的可以放在这里</p>\n</li>\n<li><p>setContentView源码总结</p>\n<ul>\n<li>创建一个DecorView的对象mDector 该mDector将作为整个应用窗口的根视图</li>\n<li>根据根据Feature等style theme创建不同的窗口修饰布局文件 并且通过findViewById获取Activity布局文件该存放的地方</li>\n<li>将Activity的布局文件添加至id为content的FrameLayout内</li>\n<li>执行到当前页面还没有显示出来</li>\n</ul>\n</li>\n<li><p>Activity页面显示</p>\n<p>我们都知道Activity的实际开始于ActivityThread的main方法 当该方法调运完之后会调用该类的performLaunchActivity方法来创建要启动的Activity组件 这个过程中还会为该Activity组件创建窗口对象和视图对象 当组件创建完成后用过调用该类的handleResumeActivity方法将其激活</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">handleResumeActivity</span><span class=\"params\">(IBinder token,</span></span></div><div class=\"line\">           <span class=\"keyword\">boolean</span> clearHide, <span class=\"keyword\">boolean</span> isForward, <span class=\"keyword\">boolean</span> reallyResume) &#123;</div><div class=\"line\">             ...</div><div class=\"line\">           <span class=\"keyword\">if</span> (!r.activity.mFinished &amp;&amp; willBeVisible</div><div class=\"line\">                   &amp;&amp; r.activity.mDecor != <span class=\"keyword\">null</span> &amp;&amp; !r.hideForNow) &#123;</div><div class=\"line\">               ...</div><div class=\"line\">               <span class=\"keyword\">if</span> (r.activity.mVisibleFromClient) &#123;</div><div class=\"line\">                   r.activity.makeVisible();</div><div class=\"line\">                   <span class=\"comment\">//这里这里 通过调用Activity的makeVisible方法来显示我们通过setContentView创建的mDecor</span></div><div class=\"line\">               &#125;</div><div class=\"line\">               ...</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         ...</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Activity的makeVisible方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">makeVisible</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">if</span> (!mWindowAdded) &#123;</div><div class=\"line\">         ViewManager wm = getWindowManager();</div><div class=\"line\">         wm.addView(mDecor, getWindow().getAttributes());</div><div class=\"line\">         mWindowAdded = <span class=\"keyword\">true</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">     mDecor.setVisibility(View.VISIBLE);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>至此通过setContentView方法设置的页面才最后显示出来</p>\n</li>\n</ol>\n<h3 id=\"LayoutInflater源码分析\"><a href=\"#LayoutInflater源码分析\" class=\"headerlink\" title=\"LayoutInflater源码分析\"></a>LayoutInflater源码分析</h3><ol>\n<li><p>与setContentView相关</p>\n<p>在PhoneWindow的generateLayout中调用了     </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>LayoutInflater中获取实例化方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Obtains the LayoutInflater from the given context.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LayoutInflater <span class=\"title\">from</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    LayoutInflater LayoutInflater =</div><div class=\"line\">            (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class=\"line\">    <span class=\"keyword\">if</span> (LayoutInflater == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">\"LayoutInflater not found.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> LayoutInflater;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>inflate方法相关</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> inflate(resource, root, root != <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> inflate(parser, root, root != <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Resources res = getContext().getResources();</div><div class=\"line\">    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"INFLATING from resource: \\\"\"</span> + res.getResourceName(resource) + <span class=\"string\">\"\\\" (\"</span></div><div class=\"line\">                + Integer.toHexString(resource) + <span class=\"string\">\")\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> XmlResourceParser parser = res.getLayout(resource);</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        parser.close();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后发现都需要调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</div><div class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"inflate\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> Context inflaterContext = mContext;</div><div class=\"line\">            <span class=\"keyword\">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</div><div class=\"line\">            Context lastContext = (Context) mConstructorArgs[<span class=\"number\">0</span>];</div><div class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</div><div class=\"line\">            <span class=\"comment\">//定义返回值 初始化传入形参 root</span></div><div class=\"line\">            View result = root;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// 找到根节点</span></div><div class=\"line\">                <span class=\"keyword\">int</span> type;</div><div class=\"line\">                <span class=\"keyword\">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</div><div class=\"line\">                        type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//验证type是否为Start_Tag  保证xml文件正确</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(parser.getPositionDescription()</div><div class=\"line\">                            + <span class=\"string\">\": No start tag found!\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//type为 root node</span></div><div class=\"line\">                <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Creating root view: \"</span></div><div class=\"line\">                            + name);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class=\"line\">                    <span class=\"comment\">//处理 merge相关</span></div><div class=\"line\">                    <span class=\"comment\">//root需要非空 且attachToRoot为空</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; can be used only with a valid \"</span></div><div class=\"line\">                                + <span class=\"string\">\"ViewGroup root and attachToRoot=true\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//递归inflate 方法调用</span></div><div class=\"line\">                    rInflate(parser, root, inflaterContext, attrs, <span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">//根据tag节点创建view对象</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</div><div class=\"line\"></div><div class=\"line\">                    ViewGroup.LayoutParams params = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                            System.out.println(<span class=\"string\">\"Creating params from root: \"</span> +</div><div class=\"line\">                                    root);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"comment\">//根据root生成LayoutParams</span></div><div class=\"line\">                        params = root.generateLayoutParams(attrs);</div><div class=\"line\">                        <span class=\"keyword\">if</span> (!attachToRoot) &#123;</div><div class=\"line\">                            <span class=\"comment\">//如果attachToRoot为flase 则调用setLayoutParams</span></div><div class=\"line\">                            temp.setLayoutParams(params);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; start inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//递归inflate剩下的children</span></div><div class=\"line\">                    rInflateChildren(parser, temp, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; done inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></div><div class=\"line\">                    <span class=\"comment\">// to root. Do that now.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"comment\">//root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里</span></div><div class=\"line\">                        root.addView(temp, params);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></div><div class=\"line\">                    <span class=\"comment\">// top view found in xml.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"comment\">//返回xml里解析的root view</span></div><div class=\"line\">                        result = temp;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;</div><div class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(e.getMessage());</div><div class=\"line\">                ex.initCause(e);</div><div class=\"line\">                <span class=\"keyword\">throw</span> ex;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(</div><div class=\"line\">                        parser.getPositionDescription()</div><div class=\"line\">                                + <span class=\"string\">\": \"</span> + e.getMessage());</div><div class=\"line\">                ex.initCause(e);</div><div class=\"line\">                <span class=\"keyword\">throw</span> ex;</div><div class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// Don't retain static reference on context.</span></div><div class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</div><div class=\"line\">                mConstructorArgs[<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">            <span class=\"comment\">//返回参数root或xml文件里的root view</span></div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>相关inflate参数的结果<br><img src=\"/inflate参数.png\" alt=\"inflate参数.png\"></p>\n</li>\n<li><p>相关方法解析<br>在Inflate中多次被调用的rInflate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</span></span></div><div class=\"line\">        AttributeSet attrs, <span class=\"keyword\">boolean</span> finishInflate) <span class=\"keyword\">throws</span> XmlPullParserException, IOException &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> depth = parser.getDepth();</div><div class=\"line\">    <span class=\"keyword\">int</span> type;</div><div class=\"line\">    <span class=\"comment\">//XmlPullParser解析器的标准解析模式</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</div><div class=\"line\">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">        <span class=\"comment\">//找到start_tag节点</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//获取Name标记</span></div><div class=\"line\">        <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_REQUEST_FOCUS = \"requestFocus\";</span></div><div class=\"line\">        <span class=\"comment\">//处理requestFocus</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</div><div class=\"line\">            parseRequestFocus(parser, parent);</div><div class=\"line\">        <span class=\"comment\">// private static final String TAG_TAG = \"tag\";</span></div><div class=\"line\">        <span class=\"comment\">//处理tag</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</div><div class=\"line\">            parseViewTag(parser, parent, attrs);</div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_INCLUDE = \"include\";</span></div><div class=\"line\">        <span class=\"comment\">//处理include</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;</div><div class=\"line\">            <span class=\"comment\">//如果是根节点则抛出异常</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;include /&gt; cannot be the root element\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            parseInclude(parser, context, parent, attrs);</div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_MERGE = \"merge\";</span></div><div class=\"line\">        <span class=\"comment\">//处理merge merge需要是xml中的根节点</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; must be the root element\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View view = createViewFromTag(parent, name, context, attrs);</div><div class=\"line\">            <span class=\"keyword\">final</span> ViewGroup viewGroup = (ViewGroup) parent;</div><div class=\"line\">            <span class=\"keyword\">final</span> ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);</div><div class=\"line\">            rInflateChildren(parser, view, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\">            viewGroup.addView(view, params);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">//parent的所有子节点都处理完毕的时候回onFinishInflate方法</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (finishInflate) &#123;</div><div class=\"line\">        parent.onFinishInflate();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//可以添加自定义逻辑</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinishInflate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"<h2 id=\"从setContentView与LayoutInflater说起\"><a href=\"#从setContentView与LayoutInflater说起\" class=\"headerlink\" title=\"从setContentView与LayoutInflater说起\"></a>从setContentView与LayoutInflater说起</h2><h3 id=\"setContentView分析\"><a href=\"#setContentView分析\" class=\"headerlink\" title=\"setContentView分析\"></a>setContentView分析</h3><h4 id=\"相关关系\"><a href=\"#相关关系\" class=\"headerlink\" title=\"相关关系\"></a>相关关系</h4><p>  <img src=\"http://p1.bpimg.com/567571/ad9dd8344a63f0cd.png\" alt=\"相关关系图\"><br>","more":"</p>\n<p>  Activity中有Window成员 实例化为PhoneWindow PhoneWindow是抽象Window类的实现类</p>\n<p>  Window提供了绘制窗口的通用API PhoneWindow中包含了DecorView对象 是所有窗口(Activity界面)的根View</p>\n<p>  具体的构如下</p>\n<p>  <img src=\"http://i1.piimg.com/567571/b7961c0d826c75e0.png\" alt=\"View层级分析\"></p>\n<p>  具体的可以通过hierarchyviewer工具分析一下</p>\n<h4 id=\"PhoneWindow的setContentView分析\"><a href=\"#PhoneWindow的setContentView分析\" class=\"headerlink\" title=\"PhoneWindow的setContentView分析\"></a>PhoneWindow的setContentView分析</h4><blockquote>\n<p>Window类的setContentView方法 而Window的setContentView方法是抽象的  所以查看PhoneWindow的setContentView()</p>\n</blockquote>\n<ol>\n<li><p>setContentView方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// This is the view in which the window contents are placed. It is either</span></div><div class=\"line\"><span class=\"comment\">// mDecor itself, or a child of mDecor where the contents go.</span></div><div class=\"line\"><span class=\"keyword\">private</span> ViewGroup mContentParent;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window</span></div><div class=\"line\">    <span class=\"comment\">// decor, when theme attributes and the like are crystalized. Do not check the feature</span></div><div class=\"line\">    <span class=\"comment\">// before this happens.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//第一次调用</span></div><div class=\"line\">        <span class=\"comment\">//下面会详细分析</span></div><div class=\"line\">        installDecor();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class=\"line\">        <span class=\"comment\">//移除该mContentParent下的所有View</span></div><div class=\"line\">        <span class=\"comment\">//又因为这个的存在  我们可以多次使用setContentView()</span></div><div class=\"line\">        mContentParent.removeAllViews();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//判断是否使用了Activity的过度动画</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class=\"line\">      <span class=\"comment\">//设置动画场景</span></div><div class=\"line\">        <span class=\"keyword\">final</span> Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,</div><div class=\"line\">                getContext());</div><div class=\"line\">        transitionTo(newScene);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//将资源文件通过LayoutInflater对象装换为View树</span></div><div class=\"line\">        <span class=\"comment\">//在PhoneWindow的构造函数中 mLayoutInflater = LayoutInflater.from(context);</span></div><div class=\"line\">        mLayoutInflater.inflate(layoutResID, mContentParent);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//View中</span></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Ask that a new dispatch of &#123;<span class=\"doctag\">@link</span> #onApplyWindowInsets(WindowInsets)&#125; be performed.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"comment\">// public void requestApplyInsets() &#123;</span></div><div class=\"line\">    <span class=\"comment\">//     requestFitSystemWindows();</span></div><div class=\"line\">    <span class=\"comment\">// &#125;</span></div><div class=\"line\">    mContentParent.requestApplyInsets();</div><div class=\"line\">    <span class=\"keyword\">final</span> Callback cb = getCallback();</div><div class=\"line\">    <span class=\"keyword\">if</span> (cb != <span class=\"keyword\">null</span> &amp;&amp; !isDestroyed()) &#123;</div><div class=\"line\">        cb.onContentChanged();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">    setContentView(view, <span class=\"keyword\">new</span> ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        installDecor();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class=\"line\">        mContentParent.removeAllViews();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class=\"line\">        view.setLayoutParams(params);</div><div class=\"line\">        <span class=\"keyword\">final</span> Scene newScene = <span class=\"keyword\">new</span> Scene(mContentParent, view);</div><div class=\"line\">        transitionTo(newScene);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//已经为View 直接使用View的addView方法追加到当前mContentParent中</span></div><div class=\"line\">        mContentParent.addView(view, params);</div><div class=\"line\">    &#125;</div><div class=\"line\">    mContentParent.requestApplyInsets();</div><div class=\"line\">    <span class=\"keyword\">final</span> Callback cb = getCallback();</div><div class=\"line\">    <span class=\"comment\">//调用CallBack接口的onContentChange来通知Activity组件视图发生了变化</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (cb != <span class=\"keyword\">null</span> &amp;&amp; !isDestroyed()) &#123;</div><div class=\"line\">        cb.onContentChanged();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>installDecor方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//截取部分主要分析代码</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installDecor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mDecor == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//如果mDecor为空则创建一个DecorView实例</span></div><div class=\"line\">        <span class=\"comment\">// protected DecorView generateDecor() &#123;</span></div><div class=\"line\">        <span class=\"comment\">//   return new DecorView(getContext(), -1);</span></div><div class=\"line\">        <span class=\"comment\">// &#125;</span></div><div class=\"line\">        mDecor = generateDecor();  </div><div class=\"line\">        mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);</div><div class=\"line\">        mDecor.setIsRootNamespace(<span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!mInvalidatePanelMenuPosted &amp;&amp; mInvalidatePanelMenuFeatures != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            mDecor.postOnAnimation(mInvalidatePanelMenuRunnable);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//根据窗口的风格修饰 选择对应的修饰布局文件 将id为content的FrameLayout赋值于mContentParent</span></div><div class=\"line\">        mContentParent = generateLayout(mDecor);</div><div class=\"line\">        ...</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ViewGroup <span class=\"title\">generateLayout</span><span class=\"params\">(DecorView decor)</span> </span>&#123;</div><div class=\"line\">     <span class=\"comment\">// Apply data from current theme.</span></div><div class=\"line\">     <span class=\"comment\">//根据当前style修饰相应样式</span></div><div class=\"line\"></div><div class=\"line\">     TypedArray a = getWindowStyle();</div><div class=\"line\"></div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"comment\">//一堆if判断</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// 增加窗口修饰</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">int</span> layoutResource;</div><div class=\"line\">     <span class=\"keyword\">int</span> features = getLocalFeatures();</div><div class=\"line\"></div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"comment\">//根据features选择不同的窗帘修饰布局文件得到</span></div><div class=\"line\">     <span class=\"comment\">//把选中的窗口修饰布局文件添加到DecorView中, 指定contentParent的值</span></div><div class=\"line\">     View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</div><div class=\"line\">     decor.addView(in, <span class=\"keyword\">new</span> ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));</div><div class=\"line\">     mContentRoot = (ViewGroup) in;</div><div class=\"line\"></div><div class=\"line\">     ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);</div><div class=\"line\">     <span class=\"keyword\">if</span> (contentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Window couldn't find content container view\"</span>);</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"keyword\">return</span> contentParent;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>该方法的主要功能为 根据窗口的style为该窗口选择不同的窗口根布局文件 将mDecor作为根视图将窗口布局添加,获取id为content的FrameLayout返回给mContentParent对象  实质为阐释mDecor和mContentParent对象</p>\n</li>\n<li><p>(扩展)关于设置Activity属性需要在setContentView方法之前调用的问题</p>\n<p>在设置Activity属性的时候 比如requestWindowFeature(Window.FEATURE_NO_TITLE) 需要在setContentView方法之前调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">requestFeature</span><span class=\"params\">(<span class=\"keyword\">int</span> featureId)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AndroidRuntimeException(<span class=\"string\">\"requestFeature() must be called before adding content\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>onContentChanged方法</p>\n<p>在PhoneWindow中没有重写getCallback相关方法 而在Window类下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Return the current Callback interface for this window.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Callback <span class=\"title\">getCallback</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mCallback;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>mCallback相关的赋值方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Set the Callback interface for this window, used to intercept key</div><div class=\"line\"> * events and other dynamic operations in the window.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> callback The desired Callback interface.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCallback</span><span class=\"params\">(Callback callback)</span> </span>&#123;</div><div class=\"line\">    mCallback = callback;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>setCallback方法在Activity中被使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context, ActivityThread aThread,</div><div class=\"line\">          Instrumentation instr, IBinder token, <span class=\"keyword\">int</span> ident,</div><div class=\"line\">          Application application, Intent intent, ActivityInfo info,</div><div class=\"line\">          CharSequence title, Activity parent, String id,</div><div class=\"line\">          NonConfigurationInstances lastNonConfigurationInstances,</div><div class=\"line\">          Configuration config, String referrer, IVoiceInteractor voiceInteractor)</span> </span>&#123;</div><div class=\"line\">      ...</div><div class=\"line\">      mWindow.setCallback(<span class=\"keyword\">this</span>);</div><div class=\"line\">      ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>说明Activity实现了Window的CallBack接口 然后在Activity中找到onContentChanged方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onContentChanged</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对 空方法. 说明在Activity的布局改动时 (setContentView或者addContentView 方法执行完毕后会调用改方法)<br>所以各种View的findViewById方法什么的可以放在这里</p>\n</li>\n<li><p>setContentView源码总结</p>\n<ul>\n<li>创建一个DecorView的对象mDector 该mDector将作为整个应用窗口的根视图</li>\n<li>根据根据Feature等style theme创建不同的窗口修饰布局文件 并且通过findViewById获取Activity布局文件该存放的地方</li>\n<li>将Activity的布局文件添加至id为content的FrameLayout内</li>\n<li>执行到当前页面还没有显示出来</li>\n</ul>\n</li>\n<li><p>Activity页面显示</p>\n<p>我们都知道Activity的实际开始于ActivityThread的main方法 当该方法调运完之后会调用该类的performLaunchActivity方法来创建要启动的Activity组件 这个过程中还会为该Activity组件创建窗口对象和视图对象 当组件创建完成后用过调用该类的handleResumeActivity方法将其激活</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">handleResumeActivity</span><span class=\"params\">(IBinder token,</div><div class=\"line\">           <span class=\"keyword\">boolean</span> clearHide, <span class=\"keyword\">boolean</span> isForward, <span class=\"keyword\">boolean</span> reallyResume)</span> </span>&#123;</div><div class=\"line\">             ...</div><div class=\"line\">           <span class=\"keyword\">if</span> (!r.activity.mFinished &amp;&amp; willBeVisible</div><div class=\"line\">                   &amp;&amp; r.activity.mDecor != <span class=\"keyword\">null</span> &amp;&amp; !r.hideForNow) &#123;</div><div class=\"line\">               ...</div><div class=\"line\">               <span class=\"keyword\">if</span> (r.activity.mVisibleFromClient) &#123;</div><div class=\"line\">                   r.activity.makeVisible();</div><div class=\"line\">                   <span class=\"comment\">//这里这里 通过调用Activity的makeVisible方法来显示我们通过setContentView创建的mDecor</span></div><div class=\"line\">               &#125;</div><div class=\"line\">               ...</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         ...</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Activity的makeVisible方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">makeVisible</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">if</span> (!mWindowAdded) &#123;</div><div class=\"line\">         ViewManager wm = getWindowManager();</div><div class=\"line\">         wm.addView(mDecor, getWindow().getAttributes());</div><div class=\"line\">         mWindowAdded = <span class=\"keyword\">true</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">     mDecor.setVisibility(View.VISIBLE);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>至此通过setContentView方法设置的页面才最后显示出来</p>\n</li>\n</ol>\n<h3 id=\"LayoutInflater源码分析\"><a href=\"#LayoutInflater源码分析\" class=\"headerlink\" title=\"LayoutInflater源码分析\"></a>LayoutInflater源码分析</h3><ol>\n<li><p>与setContentView相关</p>\n<p>在PhoneWindow的generateLayout中调用了     </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>LayoutInflater中获取实例化方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Obtains the LayoutInflater from the given context.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LayoutInflater <span class=\"title\">from</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    LayoutInflater LayoutInflater =</div><div class=\"line\">            (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class=\"line\">    <span class=\"keyword\">if</span> (LayoutInflater == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">\"LayoutInflater not found.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> LayoutInflater;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>inflate方法相关</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> inflate(resource, root, root != <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> inflate(parser, root, root != <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Resources res = getContext().getResources();</div><div class=\"line\">    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"INFLATING from resource: \\\"\"</span> + res.getResourceName(resource) + <span class=\"string\">\"\\\" (\"</span></div><div class=\"line\">                + Integer.toHexString(resource) + <span class=\"string\">\")\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> XmlResourceParser parser = res.getLayout(resource);</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        parser.close();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后发现都需要调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</div><div class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"inflate\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> Context inflaterContext = mContext;</div><div class=\"line\">            <span class=\"keyword\">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</div><div class=\"line\">            Context lastContext = (Context) mConstructorArgs[<span class=\"number\">0</span>];</div><div class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</div><div class=\"line\">            <span class=\"comment\">//定义返回值 初始化传入形参 root</span></div><div class=\"line\">            View result = root;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// 找到根节点</span></div><div class=\"line\">                <span class=\"keyword\">int</span> type;</div><div class=\"line\">                <span class=\"keyword\">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</div><div class=\"line\">                        type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//验证type是否为Start_Tag  保证xml文件正确</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(parser.getPositionDescription()</div><div class=\"line\">                            + <span class=\"string\">\": No start tag found!\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//type为 root node</span></div><div class=\"line\">                <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Creating root view: \"</span></div><div class=\"line\">                            + name);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class=\"line\">                    <span class=\"comment\">//处理 merge相关</span></div><div class=\"line\">                    <span class=\"comment\">//root需要非空 且attachToRoot为空</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; can be used only with a valid \"</span></div><div class=\"line\">                                + <span class=\"string\">\"ViewGroup root and attachToRoot=true\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//递归inflate 方法调用</span></div><div class=\"line\">                    rInflate(parser, root, inflaterContext, attrs, <span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">//根据tag节点创建view对象</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</div><div class=\"line\"></div><div class=\"line\">                    ViewGroup.LayoutParams params = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                            System.out.println(<span class=\"string\">\"Creating params from root: \"</span> +</div><div class=\"line\">                                    root);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"comment\">//根据root生成LayoutParams</span></div><div class=\"line\">                        params = root.generateLayoutParams(attrs);</div><div class=\"line\">                        <span class=\"keyword\">if</span> (!attachToRoot) &#123;</div><div class=\"line\">                            <span class=\"comment\">//如果attachToRoot为flase 则调用setLayoutParams</span></div><div class=\"line\">                            temp.setLayoutParams(params);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; start inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//递归inflate剩下的children</span></div><div class=\"line\">                    rInflateChildren(parser, temp, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; done inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></div><div class=\"line\">                    <span class=\"comment\">// to root. Do that now.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"comment\">//root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里</span></div><div class=\"line\">                        root.addView(temp, params);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></div><div class=\"line\">                    <span class=\"comment\">// top view found in xml.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"comment\">//返回xml里解析的root view</span></div><div class=\"line\">                        result = temp;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;</div><div class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(e.getMessage());</div><div class=\"line\">                ex.initCause(e);</div><div class=\"line\">                <span class=\"keyword\">throw</span> ex;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(</div><div class=\"line\">                        parser.getPositionDescription()</div><div class=\"line\">                                + <span class=\"string\">\": \"</span> + e.getMessage());</div><div class=\"line\">                ex.initCause(e);</div><div class=\"line\">                <span class=\"keyword\">throw</span> ex;</div><div class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// Don't retain static reference on context.</span></div><div class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</div><div class=\"line\">                mConstructorArgs[<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">            <span class=\"comment\">//返回参数root或xml文件里的root view</span></div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>相关inflate参数的结果<br><img src=\"/inflate参数.png\" alt=\"inflate参数.png\"></p>\n</li>\n<li><p>相关方法解析<br>在Inflate中多次被调用的rInflate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</div><div class=\"line\">        AttributeSet attrs, <span class=\"keyword\">boolean</span> finishInflate)</span> <span class=\"keyword\">throws</span> XmlPullParserException, IOException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> depth = parser.getDepth();</div><div class=\"line\">    <span class=\"keyword\">int</span> type;</div><div class=\"line\">    <span class=\"comment\">//XmlPullParser解析器的标准解析模式</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</div><div class=\"line\">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">        <span class=\"comment\">//找到start_tag节点</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//获取Name标记</span></div><div class=\"line\">        <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_REQUEST_FOCUS = \"requestFocus\";</span></div><div class=\"line\">        <span class=\"comment\">//处理requestFocus</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</div><div class=\"line\">            parseRequestFocus(parser, parent);</div><div class=\"line\">        <span class=\"comment\">// private static final String TAG_TAG = \"tag\";</span></div><div class=\"line\">        <span class=\"comment\">//处理tag</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</div><div class=\"line\">            parseViewTag(parser, parent, attrs);</div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_INCLUDE = \"include\";</span></div><div class=\"line\">        <span class=\"comment\">//处理include</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;</div><div class=\"line\">            <span class=\"comment\">//如果是根节点则抛出异常</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;include /&gt; cannot be the root element\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            parseInclude(parser, context, parent, attrs);</div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_MERGE = \"merge\";</span></div><div class=\"line\">        <span class=\"comment\">//处理merge merge需要是xml中的根节点</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; must be the root element\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View view = createViewFromTag(parent, name, context, attrs);</div><div class=\"line\">            <span class=\"keyword\">final</span> ViewGroup viewGroup = (ViewGroup) parent;</div><div class=\"line\">            <span class=\"keyword\">final</span> ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);</div><div class=\"line\">            rInflateChildren(parser, view, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\">            viewGroup.addView(view, params);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">//parent的所有子节点都处理完毕的时候回onFinishInflate方法</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (finishInflate) &#123;</div><div class=\"line\">        parent.onFinishInflate();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//可以添加自定义逻辑</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinishInflate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"在搬瓦工中搭建个人vpn(ss和pptp)","date":"2017-02-04T16:08:52.000Z","_content":"\n\n> 帮助为了方便访问一些不存在的网站的你们\n\n## 搬瓦工\n[官方网站](http://bandwagonhost.com/) 虽然经常连接不上  反而这个[备用地址](http://bwh1.net)倒是连接速度很快\n一个支持*ailpay*的国外vps 价格十分的感人 现在应该是2.99美元一个月 同时五个机房可以随意更换 也就是说可以获得五个ip地址 某些情况下十分的有用\n\n同样价格感人的还有Host1plus 2美元每月 但是线路不是很稳定详细的可以查看[官方网站](https://www.host1plus.com/)\n\n这里只是简单的介绍了两个可以通过支付宝支付的国外vps 免去了还得申请visa卡的纠结 更多详细的内容可以查看[十个便宜VPS(国内国外)主机分享-VPS服务器建站和搭建应用服务体验](https://zhuanlan.zhihu.com/p/21872685)\n  <!-- more -->\n\n## ss和pptp\nss就是Shadowsocks 一个轻量级的科学上网方式支持OS X Windows Linux iOS android的客户端. 具体可以参考[Shadowsocks的详细说明](https://zh.wikipedia.org/zh-cn/Shadowsocks)\n\npptp是一种点对点隧道协议 可以用来实现科学上网相对于ss来说可配置性更多. 具体的也可以参考[点对点隧道协议](https://zh.wikipedia.org/wiki/%E9%BB%9E%E5%B0%8D%E9%BB%9E%E9%9A%A7%E9%81%93%E5%8D%94%E8%AD%B0)\n\n\n## 个人vpn搭建教程\n\n## vps的准备\n由于是在搬瓦工中搭建的vpn 所以还是推荐购买搬瓦工的服务器 需要注意以下几点\n1. 注册的邮箱需要真实 省的以后无法找回密码\n2. 同样是注册时 用拼音填写就可以 资料是否真实无所谓 但是国家 省份需要真实存在的\n3. 购买的时候选择价格最低的就好 国外的服务器一般都是用来搭建这个的不是 500g额度也够你使用了 可以根据自己的情况选择购买的方式 一月 一季度 半年和一年的四种方式 时间越长每月的花销越低 看个人的选择\n4. 玄学是洛杉矶的机房的网速最快\n5. 搬瓦工的对文本的操作是会在额外的弹窗中进行的 注意不要阻止弹出 要不你会因为奇怪的提示而怀疑人生的\n\n\n## 通过ss搭建个人vpn\n搬瓦工有一键开启ss的功能 只是想简单的自己做个vpn没有额外其他的要求可以使用一下 十分的便捷 同样 我也会说一下手动配置的方法 也十分的便捷其实\n### 利用ss的Shadowsocks Server一键开启vpn\n1. 进入控制台\n![进入控制台](http://i1.piimg.com/567571/da396ac2d05d73d7.png)\n\n2. 对系统进行更新\n![对系统进行更新](http://p1.bpimg.com/567571/417fc58c53547be2.png)\n\n3. 一键生成ss服务\n\n  ![一键生成ss服务](http://p1.bpimg.com/567571/71c870fbe1035250.png)\n  选择一键生成的功能\n\n  ![成功生成](http://p1.bpimg.com/567571/a28aca97428d8192.png)\n  这个时候就说明生成成功了\n\n  ![查看信息](http://i1.piimg.com/567571/f16a5cf8480ded88.png)\n  ss服务的相关配置信息\n\n  ![配置ss客户端](http://i1.piimg.com/567571/8c1dbd24a590d38b.png)\n  下载ss客户端后创建新的连接 输入相关的信息\n\n  ![相关介绍](http://p1.bpimg.com/567571/a003df1753b524ae.png)\n\n  ![关闭ss](http://p1.bpimg.com/567571/db9a818fc6d290bd.png)\n  不需要的时候可以点击这里关闭ss服务\n\n### 手动配置ss服务开启vpn\n\n1. 进入控制台\n\n2. 利用pip安装ss服务\n\n  ```\n  # yum install python-setuptools && easy_install pip  \n  # pip install shadowsocks\n  ```\n3. 配置相关信息\n\n  也有两种方式 推荐第一种 配置信息方便查看和更改\n  *  创建配置信息\n    ```\n    # touch /etc/shadowsocks.json\n    # vi /etc/shadowsocks.json\n\n    {\n    \"server\":\"xxx.xxx.xxx\", //服务器的IP\n    \"server_port\":443,      //服务器断开\n    \"local_address\": \"127.0.0.1\",   //客户端地址\n    \"local_port\":1080,              //客户端端口\n    \"password\":\"MyPass\",    //密码\n    \"timeout\":600,          //超时时间(s)\n    \"method\":\"rc4-md5\"      //加密方式 可选“bf-cfb”, “aes-256-cfb”, \"salsa20\" , “rc4″等\n    }\n    ```\n    运行ss服务\n    ```\n    # ssserver -c /etc/shadowsocks.json -d start\n    ```\n  * 直接设置相关信息\n    ```\n    # ssserver -p 443 -k MyPass -m rc4-md5 -d start\n    ```\n4. 停止ss服务\n  ```\n  #ssserver -c /etc/shadowsocks.json -d stop\n  //通过json文件配置开启的服务关闭方法\n\n  #ssserver -d stop\n  //直接配置信息开启的服务关闭的方法\n  ```\n\n## 通过pptp搭建个人vpn\n1. 安装PPP和iptables\n  ```\n  # yum install -y ppp iptables\n  ```\n2. 安装pptpd\n  由于我们是通过yum安转的ppp 因为yum安转的ppp是最新的版本 所以我们要根据当前的ppp版本来选择pptp的版本\n  ```\n  # yum list installed ppp  //查看当前ppp版本\n  ```\n  ![查看当前ppp版本](http://i1.piimg.com/567571/e241c874e8b62a46.png)\n\n  根据当期ppp版本选择对应的pptp版本 可以在[这里](http://poptop.sourceforge.net/yum/stable/packages/)找到对应的版本下载\n\n  ppp 2.4.4 对应 pptp 1.3.4的版本\n\n  ppp 2.4.5 对应 pptp 1.4.0的版本\n\n  ```\n  # wget http://poptop.sourceforge.net/yum/stable/packages/pptpd-1.4.0-1.el6.x86_64.rpm\n  //下载对应的版本\n  # yum install perl\n  //安装perl\n  # rpm -ivh pptpd-1.4.0-1.el6.x86_64.rpm\n  //安装pptp\n  ```\n\n  至此均安装完毕 下面进行配置\n\n3. vpn相关配置\n  一下均对配置文件进行备份 有需要的可以回滚操作\n\n  * 配置 /etc/ppp/options.pptpd\n\n  ```\n  # cp /etc/ppp/options.pptpd /etc/ppp/options.pptpd.bak\n  //备份\n  # vi /etc/ppp/options.pptpd\n\n  //将以下内容添加到options.pptpd当中\n  ms-dns 8.8.8.8\n  ms-dns 8.8.4.4\n  ```\n  * 配置 /etc/ppp/chap-secrets\n\n  ```\n  # cp /etc/ppp/chap-secrets   /etc/ppp/chap-secrets.bak\n  //备份\n  # vi /etc/ppp/chap-secrets\n\n  //添加以下内容\n  myusername pptpd mypassword *\n  //myusername vpn账号\n  //mypassword vpn密码\n  //* 可连接的ip地址 *表示接受所有ip地址的来源\n  ```\n  * 配置 /etc/pptpd.conf\n\n  ```\n  # cp /etc/pptpd.conf     /etc/pptpd.conf.bak\n  //备份\n  # vi /etc/pptpd.conf\n\n  //添加一下内容 用于获得vpn客户端获得ip的范围\n  localip 192.168.0.1\n  remoteip 192.168.0.234-238,192.168.0.245\n\n  //配置文件的最后要以空行结尾\n  ```\n\n  * 配置 /etc/sysctl.conf\n\n  ```\n  # cp /etc/sysctl.conf /etc/sysctl.conf.bak\n  # vi /etc/sysctl.conf\n\n  //修改以下内容 使其支持转发\n  net.ipv4.ip_forward = 1\n\n  # /sbin/sysctl -p\n  //保存修改后的文件\n  ```\n\n  * 启动pptp服务和iptables\n\n  ```\n  # /sbin/service iptables start\n  //启动iptables\n\n  # iptables -t nat -A POSTROUTING -o eth0 -s 192.168.0.0/24 -j SNAT --to-source xxx.xxx.xxx.xxx\n  //设置转发功能 -o eth0制定网卡\n  // xxx.xxx.xxx.xxx为公网ip\n\n  # /etc/init.d/iptables save\n  //保存iptables的转发规则\n  # /sbin/service iptables restart\n  //重新启动iptables\n\n  # service pptpd start\n  ```\n\n## FinalSpeed对ss的优化提速\n```\n# wget http://fs.d1sm.net/finalspeed/install_fs.sh\n# chmod +x install_fs.sh\n# ./install_fs.sh 2>&1 | tee install.log\n```\n\n\n## 相关注意事项\n**个人学习用 不要用于奇怪的地方 游戏延迟可能很高**\n","source":"_posts/vpn.md","raw":"---\ntitle: 在搬瓦工中搭建个人vpn(ss和pptp)\ndate: 2017-02-05 00:08:52\ntags: [\"vpn\" , \"搬瓦工\" , \"bandwagonhost\" , \"Shadowsocks\" , \"ss\"]\ncategories: \"教程\"\n---\n\n\n> 帮助为了方便访问一些不存在的网站的你们\n\n## 搬瓦工\n[官方网站](http://bandwagonhost.com/) 虽然经常连接不上  反而这个[备用地址](http://bwh1.net)倒是连接速度很快\n一个支持*ailpay*的国外vps 价格十分的感人 现在应该是2.99美元一个月 同时五个机房可以随意更换 也就是说可以获得五个ip地址 某些情况下十分的有用\n\n同样价格感人的还有Host1plus 2美元每月 但是线路不是很稳定详细的可以查看[官方网站](https://www.host1plus.com/)\n\n这里只是简单的介绍了两个可以通过支付宝支付的国外vps 免去了还得申请visa卡的纠结 更多详细的内容可以查看[十个便宜VPS(国内国外)主机分享-VPS服务器建站和搭建应用服务体验](https://zhuanlan.zhihu.com/p/21872685)\n  <!-- more -->\n\n## ss和pptp\nss就是Shadowsocks 一个轻量级的科学上网方式支持OS X Windows Linux iOS android的客户端. 具体可以参考[Shadowsocks的详细说明](https://zh.wikipedia.org/zh-cn/Shadowsocks)\n\npptp是一种点对点隧道协议 可以用来实现科学上网相对于ss来说可配置性更多. 具体的也可以参考[点对点隧道协议](https://zh.wikipedia.org/wiki/%E9%BB%9E%E5%B0%8D%E9%BB%9E%E9%9A%A7%E9%81%93%E5%8D%94%E8%AD%B0)\n\n\n## 个人vpn搭建教程\n\n## vps的准备\n由于是在搬瓦工中搭建的vpn 所以还是推荐购买搬瓦工的服务器 需要注意以下几点\n1. 注册的邮箱需要真实 省的以后无法找回密码\n2. 同样是注册时 用拼音填写就可以 资料是否真实无所谓 但是国家 省份需要真实存在的\n3. 购买的时候选择价格最低的就好 国外的服务器一般都是用来搭建这个的不是 500g额度也够你使用了 可以根据自己的情况选择购买的方式 一月 一季度 半年和一年的四种方式 时间越长每月的花销越低 看个人的选择\n4. 玄学是洛杉矶的机房的网速最快\n5. 搬瓦工的对文本的操作是会在额外的弹窗中进行的 注意不要阻止弹出 要不你会因为奇怪的提示而怀疑人生的\n\n\n## 通过ss搭建个人vpn\n搬瓦工有一键开启ss的功能 只是想简单的自己做个vpn没有额外其他的要求可以使用一下 十分的便捷 同样 我也会说一下手动配置的方法 也十分的便捷其实\n### 利用ss的Shadowsocks Server一键开启vpn\n1. 进入控制台\n![进入控制台](http://i1.piimg.com/567571/da396ac2d05d73d7.png)\n\n2. 对系统进行更新\n![对系统进行更新](http://p1.bpimg.com/567571/417fc58c53547be2.png)\n\n3. 一键生成ss服务\n\n  ![一键生成ss服务](http://p1.bpimg.com/567571/71c870fbe1035250.png)\n  选择一键生成的功能\n\n  ![成功生成](http://p1.bpimg.com/567571/a28aca97428d8192.png)\n  这个时候就说明生成成功了\n\n  ![查看信息](http://i1.piimg.com/567571/f16a5cf8480ded88.png)\n  ss服务的相关配置信息\n\n  ![配置ss客户端](http://i1.piimg.com/567571/8c1dbd24a590d38b.png)\n  下载ss客户端后创建新的连接 输入相关的信息\n\n  ![相关介绍](http://p1.bpimg.com/567571/a003df1753b524ae.png)\n\n  ![关闭ss](http://p1.bpimg.com/567571/db9a818fc6d290bd.png)\n  不需要的时候可以点击这里关闭ss服务\n\n### 手动配置ss服务开启vpn\n\n1. 进入控制台\n\n2. 利用pip安装ss服务\n\n  ```\n  # yum install python-setuptools && easy_install pip  \n  # pip install shadowsocks\n  ```\n3. 配置相关信息\n\n  也有两种方式 推荐第一种 配置信息方便查看和更改\n  *  创建配置信息\n    ```\n    # touch /etc/shadowsocks.json\n    # vi /etc/shadowsocks.json\n\n    {\n    \"server\":\"xxx.xxx.xxx\", //服务器的IP\n    \"server_port\":443,      //服务器断开\n    \"local_address\": \"127.0.0.1\",   //客户端地址\n    \"local_port\":1080,              //客户端端口\n    \"password\":\"MyPass\",    //密码\n    \"timeout\":600,          //超时时间(s)\n    \"method\":\"rc4-md5\"      //加密方式 可选“bf-cfb”, “aes-256-cfb”, \"salsa20\" , “rc4″等\n    }\n    ```\n    运行ss服务\n    ```\n    # ssserver -c /etc/shadowsocks.json -d start\n    ```\n  * 直接设置相关信息\n    ```\n    # ssserver -p 443 -k MyPass -m rc4-md5 -d start\n    ```\n4. 停止ss服务\n  ```\n  #ssserver -c /etc/shadowsocks.json -d stop\n  //通过json文件配置开启的服务关闭方法\n\n  #ssserver -d stop\n  //直接配置信息开启的服务关闭的方法\n  ```\n\n## 通过pptp搭建个人vpn\n1. 安装PPP和iptables\n  ```\n  # yum install -y ppp iptables\n  ```\n2. 安装pptpd\n  由于我们是通过yum安转的ppp 因为yum安转的ppp是最新的版本 所以我们要根据当前的ppp版本来选择pptp的版本\n  ```\n  # yum list installed ppp  //查看当前ppp版本\n  ```\n  ![查看当前ppp版本](http://i1.piimg.com/567571/e241c874e8b62a46.png)\n\n  根据当期ppp版本选择对应的pptp版本 可以在[这里](http://poptop.sourceforge.net/yum/stable/packages/)找到对应的版本下载\n\n  ppp 2.4.4 对应 pptp 1.3.4的版本\n\n  ppp 2.4.5 对应 pptp 1.4.0的版本\n\n  ```\n  # wget http://poptop.sourceforge.net/yum/stable/packages/pptpd-1.4.0-1.el6.x86_64.rpm\n  //下载对应的版本\n  # yum install perl\n  //安装perl\n  # rpm -ivh pptpd-1.4.0-1.el6.x86_64.rpm\n  //安装pptp\n  ```\n\n  至此均安装完毕 下面进行配置\n\n3. vpn相关配置\n  一下均对配置文件进行备份 有需要的可以回滚操作\n\n  * 配置 /etc/ppp/options.pptpd\n\n  ```\n  # cp /etc/ppp/options.pptpd /etc/ppp/options.pptpd.bak\n  //备份\n  # vi /etc/ppp/options.pptpd\n\n  //将以下内容添加到options.pptpd当中\n  ms-dns 8.8.8.8\n  ms-dns 8.8.4.4\n  ```\n  * 配置 /etc/ppp/chap-secrets\n\n  ```\n  # cp /etc/ppp/chap-secrets   /etc/ppp/chap-secrets.bak\n  //备份\n  # vi /etc/ppp/chap-secrets\n\n  //添加以下内容\n  myusername pptpd mypassword *\n  //myusername vpn账号\n  //mypassword vpn密码\n  //* 可连接的ip地址 *表示接受所有ip地址的来源\n  ```\n  * 配置 /etc/pptpd.conf\n\n  ```\n  # cp /etc/pptpd.conf     /etc/pptpd.conf.bak\n  //备份\n  # vi /etc/pptpd.conf\n\n  //添加一下内容 用于获得vpn客户端获得ip的范围\n  localip 192.168.0.1\n  remoteip 192.168.0.234-238,192.168.0.245\n\n  //配置文件的最后要以空行结尾\n  ```\n\n  * 配置 /etc/sysctl.conf\n\n  ```\n  # cp /etc/sysctl.conf /etc/sysctl.conf.bak\n  # vi /etc/sysctl.conf\n\n  //修改以下内容 使其支持转发\n  net.ipv4.ip_forward = 1\n\n  # /sbin/sysctl -p\n  //保存修改后的文件\n  ```\n\n  * 启动pptp服务和iptables\n\n  ```\n  # /sbin/service iptables start\n  //启动iptables\n\n  # iptables -t nat -A POSTROUTING -o eth0 -s 192.168.0.0/24 -j SNAT --to-source xxx.xxx.xxx.xxx\n  //设置转发功能 -o eth0制定网卡\n  // xxx.xxx.xxx.xxx为公网ip\n\n  # /etc/init.d/iptables save\n  //保存iptables的转发规则\n  # /sbin/service iptables restart\n  //重新启动iptables\n\n  # service pptpd start\n  ```\n\n## FinalSpeed对ss的优化提速\n```\n# wget http://fs.d1sm.net/finalspeed/install_fs.sh\n# chmod +x install_fs.sh\n# ./install_fs.sh 2>&1 | tee install.log\n```\n\n\n## 相关注意事项\n**个人学习用 不要用于奇怪的地方 游戏延迟可能很高**\n","slug":"vpn","published":1,"updated":"2017-02-06T14:55:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8cwyb6d000yo3xww3sd7kz3","content":"<blockquote>\n<p>帮助为了方便访问一些不存在的网站的你们</p>\n</blockquote>\n<h2 id=\"搬瓦工\"><a href=\"#搬瓦工\" class=\"headerlink\" title=\"搬瓦工\"></a>搬瓦工</h2><p><a href=\"http://bandwagonhost.com/\" target=\"_blank\" rel=\"external\">官方网站</a> 虽然经常连接不上  反而这个<a href=\"http://bwh1.net\" target=\"_blank\" rel=\"external\">备用地址</a>倒是连接速度很快<br>一个支持<em>ailpay</em>的国外vps 价格十分的感人 现在应该是2.99美元一个月 同时五个机房可以随意更换 也就是说可以获得五个ip地址 某些情况下十分的有用</p>\n<p>同样价格感人的还有Host1plus 2美元每月 但是线路不是很稳定详细的可以查看<a href=\"https://www.host1plus.com/\" target=\"_blank\" rel=\"external\">官方网站</a></p>\n<p>这里只是简单的介绍了两个可以通过支付宝支付的国外vps 免去了还得申请visa卡的纠结 更多详细的内容可以查看<a href=\"https://zhuanlan.zhihu.com/p/21872685\" target=\"_blank\" rel=\"external\">十个便宜VPS(国内国外)主机分享-VPS服务器建站和搭建应用服务体验</a><br>  <a id=\"more\"></a></p>\n<h2 id=\"ss和pptp\"><a href=\"#ss和pptp\" class=\"headerlink\" title=\"ss和pptp\"></a>ss和pptp</h2><p>ss就是Shadowsocks 一个轻量级的科学上网方式支持OS X Windows Linux iOS android的客户端. 具体可以参考<a href=\"https://zh.wikipedia.org/zh-cn/Shadowsocks\" target=\"_blank\" rel=\"external\">Shadowsocks的详细说明</a></p>\n<p>pptp是一种点对点隧道协议 可以用来实现科学上网相对于ss来说可配置性更多. 具体的也可以参考<a href=\"https://zh.wikipedia.org/wiki/%E9%BB%9E%E5%B0%8D%E9%BB%9E%E9%9A%A7%E9%81%93%E5%8D%94%E8%AD%B0\" target=\"_blank\" rel=\"external\">点对点隧道协议</a></p>\n<h2 id=\"个人vpn搭建教程\"><a href=\"#个人vpn搭建教程\" class=\"headerlink\" title=\"个人vpn搭建教程\"></a>个人vpn搭建教程</h2><h2 id=\"vps的准备\"><a href=\"#vps的准备\" class=\"headerlink\" title=\"vps的准备\"></a>vps的准备</h2><p>由于是在搬瓦工中搭建的vpn 所以还是推荐购买搬瓦工的服务器 需要注意以下几点</p>\n<ol>\n<li>注册的邮箱需要真实 省的以后无法找回密码</li>\n<li>同样是注册时 用拼音填写就可以 资料是否真实无所谓 但是国家 省份需要真实存在的</li>\n<li>购买的时候选择价格最低的就好 国外的服务器一般都是用来搭建这个的不是 500g额度也够你使用了 可以根据自己的情况选择购买的方式 一月 一季度 半年和一年的四种方式 时间越长每月的花销越低 看个人的选择</li>\n<li>玄学是洛杉矶的机房的网速最快</li>\n<li>搬瓦工的对文本的操作是会在额外的弹窗中进行的 注意不要阻止弹出 要不你会因为奇怪的提示而怀疑人生的</li>\n</ol>\n<h2 id=\"通过ss搭建个人vpn\"><a href=\"#通过ss搭建个人vpn\" class=\"headerlink\" title=\"通过ss搭建个人vpn\"></a>通过ss搭建个人vpn</h2><p>搬瓦工有一键开启ss的功能 只是想简单的自己做个vpn没有额外其他的要求可以使用一下 十分的便捷 同样 我也会说一下手动配置的方法 也十分的便捷其实</p>\n<h3 id=\"利用ss的Shadowsocks-Server一键开启vpn\"><a href=\"#利用ss的Shadowsocks-Server一键开启vpn\" class=\"headerlink\" title=\"利用ss的Shadowsocks Server一键开启vpn\"></a>利用ss的Shadowsocks Server一键开启vpn</h3><ol>\n<li><p>进入控制台<br><img src=\"http://i1.piimg.com/567571/da396ac2d05d73d7.png\" alt=\"进入控制台\"></p>\n</li>\n<li><p>对系统进行更新<br><img src=\"http://p1.bpimg.com/567571/417fc58c53547be2.png\" alt=\"对系统进行更新\"></p>\n</li>\n<li><p>一键生成ss服务</p>\n<p><img src=\"http://p1.bpimg.com/567571/71c870fbe1035250.png\" alt=\"一键生成ss服务\"><br>选择一键生成的功能</p>\n<p><img src=\"http://p1.bpimg.com/567571/a28aca97428d8192.png\" alt=\"成功生成\"><br>这个时候就说明生成成功了</p>\n<p><img src=\"http://i1.piimg.com/567571/f16a5cf8480ded88.png\" alt=\"查看信息\"><br>ss服务的相关配置信息</p>\n<p><img src=\"http://i1.piimg.com/567571/8c1dbd24a590d38b.png\" alt=\"配置ss客户端\"><br>下载ss客户端后创建新的连接 输入相关的信息</p>\n<p><img src=\"http://p1.bpimg.com/567571/a003df1753b524ae.png\" alt=\"相关介绍\"></p>\n<p><img src=\"http://p1.bpimg.com/567571/db9a818fc6d290bd.png\" alt=\"关闭ss\"><br>不需要的时候可以点击这里关闭ss服务</p>\n</li>\n</ol>\n<h3 id=\"手动配置ss服务开启vpn\"><a href=\"#手动配置ss服务开启vpn\" class=\"headerlink\" title=\"手动配置ss服务开启vpn\"></a>手动配置ss服务开启vpn</h3><ol>\n<li><p>进入控制台</p>\n</li>\n<li><p>利用pip安装ss服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># yum install python-setuptools &amp;&amp; easy_install pip  </div><div class=\"line\"># pip install shadowsocks</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置相关信息</p>\n<p>也有两种方式 推荐第一种 配置信息方便查看和更改</p>\n<ul>\n<li><p>创建配置信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># touch /etc/shadowsocks.json</div><div class=\"line\"># vi /etc/shadowsocks.json</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">&quot;server&quot;:&quot;xxx.xxx.xxx&quot;, //服务器的IP</div><div class=\"line\">&quot;server_port&quot;:443,      //服务器断开</div><div class=\"line\">&quot;local_address&quot;: &quot;127.0.0.1&quot;,   //客户端地址</div><div class=\"line\">&quot;local_port&quot;:1080,              //客户端端口</div><div class=\"line\">&quot;password&quot;:&quot;MyPass&quot;,    //密码</div><div class=\"line\">&quot;timeout&quot;:600,          //超时时间(s)</div><div class=\"line\">&quot;method&quot;:&quot;rc4-md5&quot;      //加密方式 可选“bf-cfb”, “aes-256-cfb”, &quot;salsa20&quot; , “rc4″等</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行ss服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># ssserver -c /etc/shadowsocks.json -d start</div></pre></td></tr></table></figure>\n</li>\n<li><p>直接设置相关信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># ssserver -p 443 -k MyPass -m rc4-md5 -d start</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>停止ss服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#ssserver -c /etc/shadowsocks.json -d stop</div><div class=\"line\">//通过json文件配置开启的服务关闭方法</div><div class=\"line\"></div><div class=\"line\">#ssserver -d stop</div><div class=\"line\">//直接配置信息开启的服务关闭的方法</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"通过pptp搭建个人vpn\"><a href=\"#通过pptp搭建个人vpn\" class=\"headerlink\" title=\"通过pptp搭建个人vpn\"></a>通过pptp搭建个人vpn</h2><ol>\n<li><p>安装PPP和iptables</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># yum install -y ppp iptables</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装pptpd<br>由于我们是通过yum安转的ppp 因为yum安转的ppp是最新的版本 所以我们要根据当前的ppp版本来选择pptp的版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># yum list installed ppp  //查看当前ppp版本</div></pre></td></tr></table></figure>\n<p><img src=\"http://i1.piimg.com/567571/e241c874e8b62a46.png\" alt=\"查看当前ppp版本\"></p>\n<p>根据当期ppp版本选择对应的pptp版本 可以在<a href=\"http://poptop.sourceforge.net/yum/stable/packages/\" target=\"_blank\" rel=\"external\">这里</a>找到对应的版本下载</p>\n<p>ppp 2.4.4 对应 pptp 1.3.4的版本</p>\n<p>ppp 2.4.5 对应 pptp 1.4.0的版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># wget http://poptop.sourceforge.net/yum/stable/packages/pptpd-1.4.0-1.el6.x86_64.rpm</div><div class=\"line\">//下载对应的版本</div><div class=\"line\"># yum install perl</div><div class=\"line\">//安装perl</div><div class=\"line\"># rpm -ivh pptpd-1.4.0-1.el6.x86_64.rpm</div><div class=\"line\">//安装pptp</div></pre></td></tr></table></figure>\n<p>至此均安装完毕 下面进行配置</p>\n</li>\n<li><p>vpn相关配置<br>一下均对配置文件进行备份 有需要的可以回滚操作</p>\n<ul>\n<li>配置 /etc/ppp/options.pptpd</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># cp /etc/ppp/options.pptpd /etc/ppp/options.pptpd.bak</div><div class=\"line\">//备份</div><div class=\"line\"># vi /etc/ppp/options.pptpd</div><div class=\"line\"></div><div class=\"line\">//将以下内容添加到options.pptpd当中</div><div class=\"line\">ms-dns 8.8.8.8</div><div class=\"line\">ms-dns 8.8.4.4</div></pre></td></tr></table></figure>\n<ul>\n<li>配置 /etc/ppp/chap-secrets</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"># cp /etc/ppp/chap-secrets   /etc/ppp/chap-secrets.bak</div><div class=\"line\">//备份</div><div class=\"line\"># vi /etc/ppp/chap-secrets</div><div class=\"line\"></div><div class=\"line\">//添加以下内容</div><div class=\"line\">myusername pptpd mypassword *</div><div class=\"line\">//myusername vpn账号</div><div class=\"line\">//mypassword vpn密码</div><div class=\"line\">//* 可连接的ip地址 *表示接受所有ip地址的来源</div></pre></td></tr></table></figure>\n<ul>\n<li>配置 /etc/pptpd.conf</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"># cp /etc/pptpd.conf     /etc/pptpd.conf.bak</div><div class=\"line\">//备份</div><div class=\"line\"># vi /etc/pptpd.conf</div><div class=\"line\"></div><div class=\"line\">//添加一下内容 用于获得vpn客户端获得ip的范围</div><div class=\"line\">localip 192.168.0.1</div><div class=\"line\">remoteip 192.168.0.234-238,192.168.0.245</div><div class=\"line\"></div><div class=\"line\">//配置文件的最后要以空行结尾</div></pre></td></tr></table></figure>\n<ul>\n<li>配置 /etc/sysctl.conf</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># cp /etc/sysctl.conf /etc/sysctl.conf.bak</div><div class=\"line\"># vi /etc/sysctl.conf</div><div class=\"line\"></div><div class=\"line\">//修改以下内容 使其支持转发</div><div class=\"line\">net.ipv4.ip_forward = 1</div><div class=\"line\"></div><div class=\"line\"># /sbin/sysctl -p</div><div class=\"line\">//保存修改后的文件</div></pre></td></tr></table></figure>\n<ul>\n<li>启动pptp服务和iptables</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"># /sbin/service iptables start</div><div class=\"line\">//启动iptables</div><div class=\"line\"></div><div class=\"line\"># iptables -t nat -A POSTROUTING -o eth0 -s 192.168.0.0/24 -j SNAT --to-source xxx.xxx.xxx.xxx</div><div class=\"line\">//设置转发功能 -o eth0制定网卡</div><div class=\"line\">// xxx.xxx.xxx.xxx为公网ip</div><div class=\"line\"></div><div class=\"line\"># /etc/init.d/iptables save</div><div class=\"line\">//保存iptables的转发规则</div><div class=\"line\"># /sbin/service iptables restart</div><div class=\"line\">//重新启动iptables</div><div class=\"line\"></div><div class=\"line\"># service pptpd start</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"FinalSpeed对ss的优化提速\"><a href=\"#FinalSpeed对ss的优化提速\" class=\"headerlink\" title=\"FinalSpeed对ss的优化提速\"></a>FinalSpeed对ss的优化提速</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># wget http://fs.d1sm.net/finalspeed/install_fs.sh</div><div class=\"line\"># chmod +x install_fs.sh</div><div class=\"line\"># ./install_fs.sh 2&gt;&amp;1 | tee install.log</div></pre></td></tr></table></figure>\n<h2 id=\"相关注意事项\"><a href=\"#相关注意事项\" class=\"headerlink\" title=\"相关注意事项\"></a>相关注意事项</h2><p><strong>个人学习用 不要用于奇怪的地方 游戏延迟可能很高</strong></p>\n","excerpt":"<blockquote>\n<p>帮助为了方便访问一些不存在的网站的你们</p>\n</blockquote>\n<h2 id=\"搬瓦工\"><a href=\"#搬瓦工\" class=\"headerlink\" title=\"搬瓦工\"></a>搬瓦工</h2><p><a href=\"http://bandwagonhost.com/\">官方网站</a> 虽然经常连接不上  反而这个<a href=\"http://bwh1.net\">备用地址</a>倒是连接速度很快<br>一个支持<em>ailpay</em>的国外vps 价格十分的感人 现在应该是2.99美元一个月 同时五个机房可以随意更换 也就是说可以获得五个ip地址 某些情况下十分的有用</p>\n<p>同样价格感人的还有Host1plus 2美元每月 但是线路不是很稳定详细的可以查看<a href=\"https://www.host1plus.com/\">官方网站</a></p>\n<p>这里只是简单的介绍了两个可以通过支付宝支付的国外vps 免去了还得申请visa卡的纠结 更多详细的内容可以查看<a href=\"https://zhuanlan.zhihu.com/p/21872685\">十个便宜VPS(国内国外)主机分享-VPS服务器建站和搭建应用服务体验</a><br>","more":"</p>\n<h2 id=\"ss和pptp\"><a href=\"#ss和pptp\" class=\"headerlink\" title=\"ss和pptp\"></a>ss和pptp</h2><p>ss就是Shadowsocks 一个轻量级的科学上网方式支持OS X Windows Linux iOS android的客户端. 具体可以参考<a href=\"https://zh.wikipedia.org/zh-cn/Shadowsocks\">Shadowsocks的详细说明</a></p>\n<p>pptp是一种点对点隧道协议 可以用来实现科学上网相对于ss来说可配置性更多. 具体的也可以参考<a href=\"https://zh.wikipedia.org/wiki/%E9%BB%9E%E5%B0%8D%E9%BB%9E%E9%9A%A7%E9%81%93%E5%8D%94%E8%AD%B0\">点对点隧道协议</a></p>\n<h2 id=\"个人vpn搭建教程\"><a href=\"#个人vpn搭建教程\" class=\"headerlink\" title=\"个人vpn搭建教程\"></a>个人vpn搭建教程</h2><h2 id=\"vps的准备\"><a href=\"#vps的准备\" class=\"headerlink\" title=\"vps的准备\"></a>vps的准备</h2><p>由于是在搬瓦工中搭建的vpn 所以还是推荐购买搬瓦工的服务器 需要注意以下几点</p>\n<ol>\n<li>注册的邮箱需要真实 省的以后无法找回密码</li>\n<li>同样是注册时 用拼音填写就可以 资料是否真实无所谓 但是国家 省份需要真实存在的</li>\n<li>购买的时候选择价格最低的就好 国外的服务器一般都是用来搭建这个的不是 500g额度也够你使用了 可以根据自己的情况选择购买的方式 一月 一季度 半年和一年的四种方式 时间越长每月的花销越低 看个人的选择</li>\n<li>玄学是洛杉矶的机房的网速最快</li>\n<li>搬瓦工的对文本的操作是会在额外的弹窗中进行的 注意不要阻止弹出 要不你会因为奇怪的提示而怀疑人生的</li>\n</ol>\n<h2 id=\"通过ss搭建个人vpn\"><a href=\"#通过ss搭建个人vpn\" class=\"headerlink\" title=\"通过ss搭建个人vpn\"></a>通过ss搭建个人vpn</h2><p>搬瓦工有一键开启ss的功能 只是想简单的自己做个vpn没有额外其他的要求可以使用一下 十分的便捷 同样 我也会说一下手动配置的方法 也十分的便捷其实</p>\n<h3 id=\"利用ss的Shadowsocks-Server一键开启vpn\"><a href=\"#利用ss的Shadowsocks-Server一键开启vpn\" class=\"headerlink\" title=\"利用ss的Shadowsocks Server一键开启vpn\"></a>利用ss的Shadowsocks Server一键开启vpn</h3><ol>\n<li><p>进入控制台<br><img src=\"http://i1.piimg.com/567571/da396ac2d05d73d7.png\" alt=\"进入控制台\"></p>\n</li>\n<li><p>对系统进行更新<br><img src=\"http://p1.bpimg.com/567571/417fc58c53547be2.png\" alt=\"对系统进行更新\"></p>\n</li>\n<li><p>一键生成ss服务</p>\n<p><img src=\"http://p1.bpimg.com/567571/71c870fbe1035250.png\" alt=\"一键生成ss服务\"><br>选择一键生成的功能</p>\n<p><img src=\"http://p1.bpimg.com/567571/a28aca97428d8192.png\" alt=\"成功生成\"><br>这个时候就说明生成成功了</p>\n<p><img src=\"http://i1.piimg.com/567571/f16a5cf8480ded88.png\" alt=\"查看信息\"><br>ss服务的相关配置信息</p>\n<p><img src=\"http://i1.piimg.com/567571/8c1dbd24a590d38b.png\" alt=\"配置ss客户端\"><br>下载ss客户端后创建新的连接 输入相关的信息</p>\n<p><img src=\"http://p1.bpimg.com/567571/a003df1753b524ae.png\" alt=\"相关介绍\"></p>\n<p><img src=\"http://p1.bpimg.com/567571/db9a818fc6d290bd.png\" alt=\"关闭ss\"><br>不需要的时候可以点击这里关闭ss服务</p>\n</li>\n</ol>\n<h3 id=\"手动配置ss服务开启vpn\"><a href=\"#手动配置ss服务开启vpn\" class=\"headerlink\" title=\"手动配置ss服务开启vpn\"></a>手动配置ss服务开启vpn</h3><ol>\n<li><p>进入控制台</p>\n</li>\n<li><p>利用pip安装ss服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># yum install python-setuptools &amp;&amp; easy_install pip  </div><div class=\"line\"># pip install shadowsocks</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置相关信息</p>\n<p>也有两种方式 推荐第一种 配置信息方便查看和更改</p>\n<ul>\n<li><p>创建配置信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># touch /etc/shadowsocks.json</div><div class=\"line\"># vi /etc/shadowsocks.json</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">&quot;server&quot;:&quot;xxx.xxx.xxx&quot;, //服务器的IP</div><div class=\"line\">&quot;server_port&quot;:443,      //服务器断开</div><div class=\"line\">&quot;local_address&quot;: &quot;127.0.0.1&quot;,   //客户端地址</div><div class=\"line\">&quot;local_port&quot;:1080,              //客户端端口</div><div class=\"line\">&quot;password&quot;:&quot;MyPass&quot;,    //密码</div><div class=\"line\">&quot;timeout&quot;:600,          //超时时间(s)</div><div class=\"line\">&quot;method&quot;:&quot;rc4-md5&quot;      //加密方式 可选“bf-cfb”, “aes-256-cfb”, &quot;salsa20&quot; , “rc4″等</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行ss服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># ssserver -c /etc/shadowsocks.json -d start</div></pre></td></tr></table></figure>\n</li>\n<li><p>直接设置相关信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># ssserver -p 443 -k MyPass -m rc4-md5 -d start</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>停止ss服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#ssserver -c /etc/shadowsocks.json -d stop</div><div class=\"line\">//通过json文件配置开启的服务关闭方法</div><div class=\"line\"></div><div class=\"line\">#ssserver -d stop</div><div class=\"line\">//直接配置信息开启的服务关闭的方法</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"通过pptp搭建个人vpn\"><a href=\"#通过pptp搭建个人vpn\" class=\"headerlink\" title=\"通过pptp搭建个人vpn\"></a>通过pptp搭建个人vpn</h2><ol>\n<li><p>安装PPP和iptables</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># yum install -y ppp iptables</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装pptpd<br>由于我们是通过yum安转的ppp 因为yum安转的ppp是最新的版本 所以我们要根据当前的ppp版本来选择pptp的版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># yum list installed ppp  //查看当前ppp版本</div></pre></td></tr></table></figure>\n<p><img src=\"http://i1.piimg.com/567571/e241c874e8b62a46.png\" alt=\"查看当前ppp版本\"></p>\n<p>根据当期ppp版本选择对应的pptp版本 可以在<a href=\"http://poptop.sourceforge.net/yum/stable/packages/\">这里</a>找到对应的版本下载</p>\n<p>ppp 2.4.4 对应 pptp 1.3.4的版本</p>\n<p>ppp 2.4.5 对应 pptp 1.4.0的版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># wget http://poptop.sourceforge.net/yum/stable/packages/pptpd-1.4.0-1.el6.x86_64.rpm</div><div class=\"line\">//下载对应的版本</div><div class=\"line\"># yum install perl</div><div class=\"line\">//安装perl</div><div class=\"line\"># rpm -ivh pptpd-1.4.0-1.el6.x86_64.rpm</div><div class=\"line\">//安装pptp</div></pre></td></tr></table></figure>\n<p>至此均安装完毕 下面进行配置</p>\n</li>\n<li><p>vpn相关配置<br>一下均对配置文件进行备份 有需要的可以回滚操作</p>\n<ul>\n<li>配置 /etc/ppp/options.pptpd</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># cp /etc/ppp/options.pptpd /etc/ppp/options.pptpd.bak</div><div class=\"line\">//备份</div><div class=\"line\"># vi /etc/ppp/options.pptpd</div><div class=\"line\"></div><div class=\"line\">//将以下内容添加到options.pptpd当中</div><div class=\"line\">ms-dns 8.8.8.8</div><div class=\"line\">ms-dns 8.8.4.4</div></pre></td></tr></table></figure>\n<ul>\n<li>配置 /etc/ppp/chap-secrets</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"># cp /etc/ppp/chap-secrets   /etc/ppp/chap-secrets.bak</div><div class=\"line\">//备份</div><div class=\"line\"># vi /etc/ppp/chap-secrets</div><div class=\"line\"></div><div class=\"line\">//添加以下内容</div><div class=\"line\">myusername pptpd mypassword *</div><div class=\"line\">//myusername vpn账号</div><div class=\"line\">//mypassword vpn密码</div><div class=\"line\">//* 可连接的ip地址 *表示接受所有ip地址的来源</div></pre></td></tr></table></figure>\n<ul>\n<li>配置 /etc/pptpd.conf</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"># cp /etc/pptpd.conf     /etc/pptpd.conf.bak</div><div class=\"line\">//备份</div><div class=\"line\"># vi /etc/pptpd.conf</div><div class=\"line\"></div><div class=\"line\">//添加一下内容 用于获得vpn客户端获得ip的范围</div><div class=\"line\">localip 192.168.0.1</div><div class=\"line\">remoteip 192.168.0.234-238,192.168.0.245</div><div class=\"line\"></div><div class=\"line\">//配置文件的最后要以空行结尾</div></pre></td></tr></table></figure>\n<ul>\n<li>配置 /etc/sysctl.conf</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># cp /etc/sysctl.conf /etc/sysctl.conf.bak</div><div class=\"line\"># vi /etc/sysctl.conf</div><div class=\"line\"></div><div class=\"line\">//修改以下内容 使其支持转发</div><div class=\"line\">net.ipv4.ip_forward = 1</div><div class=\"line\"></div><div class=\"line\"># /sbin/sysctl -p</div><div class=\"line\">//保存修改后的文件</div></pre></td></tr></table></figure>\n<ul>\n<li>启动pptp服务和iptables</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"># /sbin/service iptables start</div><div class=\"line\">//启动iptables</div><div class=\"line\"></div><div class=\"line\"># iptables -t nat -A POSTROUTING -o eth0 -s 192.168.0.0/24 -j SNAT --to-source xxx.xxx.xxx.xxx</div><div class=\"line\">//设置转发功能 -o eth0制定网卡</div><div class=\"line\">// xxx.xxx.xxx.xxx为公网ip</div><div class=\"line\"></div><div class=\"line\"># /etc/init.d/iptables save</div><div class=\"line\">//保存iptables的转发规则</div><div class=\"line\"># /sbin/service iptables restart</div><div class=\"line\">//重新启动iptables</div><div class=\"line\"></div><div class=\"line\"># service pptpd start</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"FinalSpeed对ss的优化提速\"><a href=\"#FinalSpeed对ss的优化提速\" class=\"headerlink\" title=\"FinalSpeed对ss的优化提速\"></a>FinalSpeed对ss的优化提速</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># wget http://fs.d1sm.net/finalspeed/install_fs.sh</div><div class=\"line\"># chmod +x install_fs.sh</div><div class=\"line\"># ./install_fs.sh 2&gt;&amp;1 | tee install.log</div></pre></td></tr></table></figure>\n<h2 id=\"相关注意事项\"><a href=\"#相关注意事项\" class=\"headerlink\" title=\"相关注意事项\"></a>相关注意事项</h2><p><strong>个人学习用 不要用于奇怪的地方 游戏延迟可能很高</strong></p>"},{"title":"如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景","date":"2017-05-17T15:56:45.000Z","_content":"\n## 如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景\n\n## 介绍\nSpeed Dial Plus和Earth View from Google Earth都是Chrome中的两个十分好用的新标签页插件\n\nSpeed Dial Plus可以在你打开一个新的标签页的时候提供经常访问的页面的快捷方式 虽然还有很多扩展, 但是这个功能真心好用\n![Speed Dial Plus](http://ooymoxvz4.bkt.clouddn.com/17-5-18/39416953-file_1495036928867_860e.png)\n<!--more-->\nEarth View from Google Earth可以在你打开一个新的标签页的时候展示一副google earth拍摄的图片(虽然只有1500多个图片 但是每幅图都是十分别致的)\n![Earth View from Google Earth](http://ooymoxvz4.bkt.clouddn.com/17-5-18/62579920-file_1495037085098_d853.png)\n\n\n## 需求\n这两个都是十分优秀的标签页的工具,那么问题就是 这两个不能共同使用 虽然SDP提供了设置背景页面的方法,但是每次只能设置成一个页面\n\n## 解决思路\n通过分析Earth View from Google Earth来获取所有图片的地址 再在本地或者自己的服务器中部署一个服务器 可以随机返回有效图片地址中的一个 再将SDP中设置背景为自己的服务器设定的地址\n\n最终实现打开新标签页(SDP) SDP访问你的服务地址 服务随机返回一个图片地址 SDP最终访问你设定的新的图片地址\n\n## 分析Earth View from Google Earth\n本来是打算直接使用Chrome的开发者工具和charles直接分析网络请求，但是每次返回的图片地址都不一样只能进一步查看GoogelEarth的页面了\n如https://g.co/ev/2131 这样的短链，可以看到后面的2131这样的四位id 尝试了几次发现不是连续的。  本来打算写个脚本 验证下一定范围内哪些数字是有效的\n然后日常github 发现了[这个好东西](https://github.com/limhenry/earthview) 提供了一个一个[接口](https://raw.githubusercontent.com/limhenry/earthview/master/earthview.json)可以得到当前所有图片的信息\n![所有图片的信息](http://ooymoxvz4.bkt.clouddn.com/17-5-18/11845916-file_1495088848235_6c3c.png)\n\n可以通过这个json数据解析出所有的图片id  保存到本地作为服务器的数据源\n\n## 具体实现\n```Python\n\nimport requests\nimport random, re , threading , time , socket\nimport tornado.web\nimport tornado.ioloop\n\nallindex = 0\n\ndef getUrl():\n    #通过随机得到的位置来得到对应位置的\n    id = randomid()\n    with open('date', 'r') as f:\n        _image = f.read()\n\n    _imagelist = _image.split(',')\n    _imagelist.pop()\n    return _imagelist[id]\n\n\ndef updateindex():\n  #更新所有图片数量的数据\n    global  allindex\n    with open('daterand', 'r') as f:\n        allindex = f.read()\n\ndef getAllDate():\n  #从提供的接口中获取所有图片的id并保存下来 同时设置延时每天更新下数据\n    print('getAllDate')\n    reponse = requests.get('https://raw.githubusercontent.com/limhenry/earthview/master/earthview.json')\n    html = reponse.text\n\n    with open('date', 'w') as f:\n        imageList = re.findall('\"image\":\".*?\"' , html)\n        for image in imageList:\n            imageurl = re.findall('[0-9]{4,5}' ,image)\n            f.write(imageurl[0] + ',')\n\n    with open('daterand', 'w') as f:\n        f.write(str(len(imageList)))\n\n    updateindex()\n\n    time.sleep(60 * 60 * 24)\n    getAllDate()\n\n\ndef randomid():\n  #随机数什么的\n    global allindex\n    _allindex = int(allindex)\n    id = random.randint(0, _allindex)\n    return id\n\n\nclass earthImage(tornado.web.RequestHandler):\n    def get(self, *args, **kwargs):\n        _id = getUrl()\n        imageurl = 'http://www.gstatic.com/prettyearth/assets/full/%s.jpg'%(_id)\n        print(imageurl)\n        #直接指向随机图片的地址\n        self.redirect(imageurl)\n\napplication = tornado.web.Application([\n    (r\"/earthImage\" , earthImage)\n])\n\ndef runServer():\n  #trnado 服务器的配置 我这里在运行之后会显示当前的地址\n    port = 9011\n    application.listen(port)\n    localIP = socket.gethostbyname(socket.gethostname())\n    print(\"run in %s:%s\"%(localIP,port))\n    tornado.ioloop.IOLoop.instance().start()\n\ndef startServer():\n    print('startServer')\n    runServer()\n\ndef main():\n    //这里开了两个线程 防止取得图片数据的时候访问阻塞\n    updateindex()\n    thread_getInfoDate = threading.Thread(target=getAllDate, name='getAllDate')\n    thread_startServer = threading.Thread(target=startServer, name='startServer')\n\n    thread_getInfoDate.start()\n    thread_startServer.start()\nmain()\n```\n\n最后打开SpeedDialPlus的设置 更改其中主题里的自定义网址为你服务器运行后的地址就好了 当然 也可以部署在云服务器中\n\n## 改进\n程序写的很随意 山顶洞人编程 性能的话自用还可以的\n\n图片的话只有google erath的图片 可以配置或加入更多的图片 现阶段基本没有扩展性 只能看地球了(1500多张图片还不够看 只能说明 该换风格了)\n\n## 项目地址\n\nhttps://github.com/clwater/SpeedDialPlusImage\n","source":"_posts/如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景.md","raw":"---\ntitle: 如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景\ndate: 2017-05-17 23:56:45\ntags: [\"peed Dial Plus\" , \"Earth View from Google Earth\" , \"Chrome插件\" , \"Python\"]\ncategories: \"Python\"\n---\n\n## 如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景\n\n## 介绍\nSpeed Dial Plus和Earth View from Google Earth都是Chrome中的两个十分好用的新标签页插件\n\nSpeed Dial Plus可以在你打开一个新的标签页的时候提供经常访问的页面的快捷方式 虽然还有很多扩展, 但是这个功能真心好用\n![Speed Dial Plus](http://ooymoxvz4.bkt.clouddn.com/17-5-18/39416953-file_1495036928867_860e.png)\n<!--more-->\nEarth View from Google Earth可以在你打开一个新的标签页的时候展示一副google earth拍摄的图片(虽然只有1500多个图片 但是每幅图都是十分别致的)\n![Earth View from Google Earth](http://ooymoxvz4.bkt.clouddn.com/17-5-18/62579920-file_1495037085098_d853.png)\n\n\n## 需求\n这两个都是十分优秀的标签页的工具,那么问题就是 这两个不能共同使用 虽然SDP提供了设置背景页面的方法,但是每次只能设置成一个页面\n\n## 解决思路\n通过分析Earth View from Google Earth来获取所有图片的地址 再在本地或者自己的服务器中部署一个服务器 可以随机返回有效图片地址中的一个 再将SDP中设置背景为自己的服务器设定的地址\n\n最终实现打开新标签页(SDP) SDP访问你的服务地址 服务随机返回一个图片地址 SDP最终访问你设定的新的图片地址\n\n## 分析Earth View from Google Earth\n本来是打算直接使用Chrome的开发者工具和charles直接分析网络请求，但是每次返回的图片地址都不一样只能进一步查看GoogelEarth的页面了\n如https://g.co/ev/2131 这样的短链，可以看到后面的2131这样的四位id 尝试了几次发现不是连续的。  本来打算写个脚本 验证下一定范围内哪些数字是有效的\n然后日常github 发现了[这个好东西](https://github.com/limhenry/earthview) 提供了一个一个[接口](https://raw.githubusercontent.com/limhenry/earthview/master/earthview.json)可以得到当前所有图片的信息\n![所有图片的信息](http://ooymoxvz4.bkt.clouddn.com/17-5-18/11845916-file_1495088848235_6c3c.png)\n\n可以通过这个json数据解析出所有的图片id  保存到本地作为服务器的数据源\n\n## 具体实现\n```Python\n\nimport requests\nimport random, re , threading , time , socket\nimport tornado.web\nimport tornado.ioloop\n\nallindex = 0\n\ndef getUrl():\n    #通过随机得到的位置来得到对应位置的\n    id = randomid()\n    with open('date', 'r') as f:\n        _image = f.read()\n\n    _imagelist = _image.split(',')\n    _imagelist.pop()\n    return _imagelist[id]\n\n\ndef updateindex():\n  #更新所有图片数量的数据\n    global  allindex\n    with open('daterand', 'r') as f:\n        allindex = f.read()\n\ndef getAllDate():\n  #从提供的接口中获取所有图片的id并保存下来 同时设置延时每天更新下数据\n    print('getAllDate')\n    reponse = requests.get('https://raw.githubusercontent.com/limhenry/earthview/master/earthview.json')\n    html = reponse.text\n\n    with open('date', 'w') as f:\n        imageList = re.findall('\"image\":\".*?\"' , html)\n        for image in imageList:\n            imageurl = re.findall('[0-9]{4,5}' ,image)\n            f.write(imageurl[0] + ',')\n\n    with open('daterand', 'w') as f:\n        f.write(str(len(imageList)))\n\n    updateindex()\n\n    time.sleep(60 * 60 * 24)\n    getAllDate()\n\n\ndef randomid():\n  #随机数什么的\n    global allindex\n    _allindex = int(allindex)\n    id = random.randint(0, _allindex)\n    return id\n\n\nclass earthImage(tornado.web.RequestHandler):\n    def get(self, *args, **kwargs):\n        _id = getUrl()\n        imageurl = 'http://www.gstatic.com/prettyearth/assets/full/%s.jpg'%(_id)\n        print(imageurl)\n        #直接指向随机图片的地址\n        self.redirect(imageurl)\n\napplication = tornado.web.Application([\n    (r\"/earthImage\" , earthImage)\n])\n\ndef runServer():\n  #trnado 服务器的配置 我这里在运行之后会显示当前的地址\n    port = 9011\n    application.listen(port)\n    localIP = socket.gethostbyname(socket.gethostname())\n    print(\"run in %s:%s\"%(localIP,port))\n    tornado.ioloop.IOLoop.instance().start()\n\ndef startServer():\n    print('startServer')\n    runServer()\n\ndef main():\n    //这里开了两个线程 防止取得图片数据的时候访问阻塞\n    updateindex()\n    thread_getInfoDate = threading.Thread(target=getAllDate, name='getAllDate')\n    thread_startServer = threading.Thread(target=startServer, name='startServer')\n\n    thread_getInfoDate.start()\n    thread_startServer.start()\nmain()\n```\n\n最后打开SpeedDialPlus的设置 更改其中主题里的自定义网址为你服务器运行后的地址就好了 当然 也可以部署在云服务器中\n\n## 改进\n程序写的很随意 山顶洞人编程 性能的话自用还可以的\n\n图片的话只有google erath的图片 可以配置或加入更多的图片 现阶段基本没有扩展性 只能看地球了(1500多张图片还不够看 只能说明 该换风格了)\n\n## 项目地址\n\nhttps://github.com/clwater/SpeedDialPlusImage\n","slug":"如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景","published":1,"updated":"2017-05-18T09:57:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8cwyb6f0011o3xw9rsl6rjp","content":"<h2 id=\"如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景\"><a href=\"#如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景\" class=\"headerlink\" title=\"如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景\"></a>如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景</h2><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Speed Dial Plus和Earth View from Google Earth都是Chrome中的两个十分好用的新标签页插件</p>\n<p>Speed Dial Plus可以在你打开一个新的标签页的时候提供经常访问的页面的快捷方式 虽然还有很多扩展, 但是这个功能真心好用<br><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-18/39416953-file_1495036928867_860e.png\" alt=\"Speed Dial Plus\"><br><a id=\"more\"></a><br>Earth View from Google Earth可以在你打开一个新的标签页的时候展示一副google earth拍摄的图片(虽然只有1500多个图片 但是每幅图都是十分别致的)<br><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-18/62579920-file_1495037085098_d853.png\" alt=\"Earth View from Google Earth\"></p>\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>这两个都是十分优秀的标签页的工具,那么问题就是 这两个不能共同使用 虽然SDP提供了设置背景页面的方法,但是每次只能设置成一个页面</p>\n<h2 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h2><p>通过分析Earth View from Google Earth来获取所有图片的地址 再在本地或者自己的服务器中部署一个服务器 可以随机返回有效图片地址中的一个 再将SDP中设置背景为自己的服务器设定的地址</p>\n<p>最终实现打开新标签页(SDP) SDP访问你的服务地址 服务随机返回一个图片地址 SDP最终访问你设定的新的图片地址</p>\n<h2 id=\"分析Earth-View-from-Google-Earth\"><a href=\"#分析Earth-View-from-Google-Earth\" class=\"headerlink\" title=\"分析Earth View from Google Earth\"></a>分析Earth View from Google Earth</h2><p>本来是打算直接使用Chrome的开发者工具和charles直接分析网络请求，但是每次返回的图片地址都不一样只能进一步查看GoogelEarth的页面了<br>如<a href=\"https://g.co/ev/2131\" target=\"_blank\" rel=\"external\">https://g.co/ev/2131</a> 这样的短链，可以看到后面的2131这样的四位id 尝试了几次发现不是连续的。  本来打算写个脚本 验证下一定范围内哪些数字是有效的<br>然后日常github 发现了<a href=\"https://github.com/limhenry/earthview\" target=\"_blank\" rel=\"external\">这个好东西</a> 提供了一个一个<a href=\"https://raw.githubusercontent.com/limhenry/earthview/master/earthview.json\" target=\"_blank\" rel=\"external\">接口</a>可以得到当前所有图片的信息<br><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-18/11845916-file_1495088848235_6c3c.png\" alt=\"所有图片的信息\"></p>\n<p>可以通过这个json数据解析出所有的图片id  保存到本地作为服务器的数据源</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">import</span> random, re , threading , time , socket</div><div class=\"line\"><span class=\"keyword\">import</span> tornado.web</div><div class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</div><div class=\"line\"></div><div class=\"line\">allindex = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getUrl</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\">#通过随机得到的位置来得到对应位置的</span></div><div class=\"line\">    id = randomid()</div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'date'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        _image = f.read()</div><div class=\"line\"></div><div class=\"line\">    _imagelist = _image.split(<span class=\"string\">','</span>)</div><div class=\"line\">    _imagelist.pop()</div><div class=\"line\">    <span class=\"keyword\">return</span> _imagelist[id]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">updateindex</span><span class=\"params\">()</span>:</span></div><div class=\"line\">  <span class=\"comment\">#更新所有图片数量的数据</span></div><div class=\"line\">    <span class=\"keyword\">global</span>  allindex</div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'daterand'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        allindex = f.read()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getAllDate</span><span class=\"params\">()</span>:</span></div><div class=\"line\">  <span class=\"comment\">#从提供的接口中获取所有图片的id并保存下来 同时设置延时每天更新下数据</span></div><div class=\"line\">    print(<span class=\"string\">'getAllDate'</span>)</div><div class=\"line\">    reponse = requests.get(<span class=\"string\">'https://raw.githubusercontent.com/limhenry/earthview/master/earthview.json'</span>)</div><div class=\"line\">    html = reponse.text</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'date'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        imageList = re.findall(<span class=\"string\">'\"image\":\".*?\"'</span> , html)</div><div class=\"line\">        <span class=\"keyword\">for</span> image <span class=\"keyword\">in</span> imageList:</div><div class=\"line\">            imageurl = re.findall(<span class=\"string\">'[0-9]&#123;4,5&#125;'</span> ,image)</div><div class=\"line\">            f.write(imageurl[<span class=\"number\">0</span>] + <span class=\"string\">','</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'daterand'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        f.write(str(len(imageList)))</div><div class=\"line\"></div><div class=\"line\">    updateindex()</div><div class=\"line\"></div><div class=\"line\">    time.sleep(<span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>)</div><div class=\"line\">    getAllDate()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">randomid</span><span class=\"params\">()</span>:</span></div><div class=\"line\">  <span class=\"comment\">#随机数什么的</span></div><div class=\"line\">    <span class=\"keyword\">global</span> allindex</div><div class=\"line\">    _allindex = int(allindex)</div><div class=\"line\">    id = random.randint(<span class=\"number\">0</span>, _allindex)</div><div class=\"line\">    <span class=\"keyword\">return</span> id</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">earthImage</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></div><div class=\"line\">        _id = getUrl()</div><div class=\"line\">        imageurl = <span class=\"string\">'http://www.gstatic.com/prettyearth/assets/full/%s.jpg'</span>%(_id)</div><div class=\"line\">        print(imageurl)</div><div class=\"line\">        <span class=\"comment\">#直接指向随机图片的地址</span></div><div class=\"line\">        self.redirect(imageurl)</div><div class=\"line\"></div><div class=\"line\">application = tornado.web.Application([</div><div class=\"line\">    (<span class=\"string\">r\"/earthImage\"</span> , earthImage)</div><div class=\"line\">])</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runServer</span><span class=\"params\">()</span>:</span></div><div class=\"line\">  <span class=\"comment\">#trnado 服务器的配置 我这里在运行之后会显示当前的地址</span></div><div class=\"line\">    port = <span class=\"number\">9011</span></div><div class=\"line\">    application.listen(port)</div><div class=\"line\">    localIP = socket.gethostbyname(socket.gethostname())</div><div class=\"line\">    print(<span class=\"string\">\"run in %s:%s\"</span>%(localIP,port))</div><div class=\"line\">    tornado.ioloop.IOLoop.instance().start()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">startServer</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'startServer'</span>)</div><div class=\"line\">    runServer()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    //这里开了两个线程 防止取得图片数据的时候访问阻塞</div><div class=\"line\">    updateindex()</div><div class=\"line\">    thread_getInfoDate = threading.Thread(target=getAllDate, name=<span class=\"string\">'getAllDate'</span>)</div><div class=\"line\">    thread_startServer = threading.Thread(target=startServer, name=<span class=\"string\">'startServer'</span>)</div><div class=\"line\"></div><div class=\"line\">    thread_getInfoDate.start()</div><div class=\"line\">    thread_startServer.start()</div><div class=\"line\">main()</div></pre></td></tr></table></figure>\n<p>最后打开SpeedDialPlus的设置 更改其中主题里的自定义网址为你服务器运行后的地址就好了 当然 也可以部署在云服务器中</p>\n<h2 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h2><p>程序写的很随意 山顶洞人编程 性能的话自用还可以的</p>\n<p>图片的话只有google erath的图片 可以配置或加入更多的图片 现阶段基本没有扩展性 只能看地球了(1500多张图片还不够看 只能说明 该换风格了)</p>\n<h2 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h2><p><a href=\"https://github.com/clwater/SpeedDialPlusImage\" target=\"_blank\" rel=\"external\">https://github.com/clwater/SpeedDialPlusImage</a></p>\n","excerpt":"<h2 id=\"如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景\"><a href=\"#如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景\" class=\"headerlink\" title=\"如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景\"></a>如何在SpeedDialPlus中使用EarthViewfromGoogleEarth图片作为背景</h2><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Speed Dial Plus和Earth View from Google Earth都是Chrome中的两个十分好用的新标签页插件</p>\n<p>Speed Dial Plus可以在你打开一个新的标签页的时候提供经常访问的页面的快捷方式 虽然还有很多扩展, 但是这个功能真心好用<br><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-18/39416953-file_1495036928867_860e.png\" alt=\"Speed Dial Plus\"><br>","more":"<br>Earth View from Google Earth可以在你打开一个新的标签页的时候展示一副google earth拍摄的图片(虽然只有1500多个图片 但是每幅图都是十分别致的)<br><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-18/62579920-file_1495037085098_d853.png\" alt=\"Earth View from Google Earth\"></p>\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>这两个都是十分优秀的标签页的工具,那么问题就是 这两个不能共同使用 虽然SDP提供了设置背景页面的方法,但是每次只能设置成一个页面</p>\n<h2 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h2><p>通过分析Earth View from Google Earth来获取所有图片的地址 再在本地或者自己的服务器中部署一个服务器 可以随机返回有效图片地址中的一个 再将SDP中设置背景为自己的服务器设定的地址</p>\n<p>最终实现打开新标签页(SDP) SDP访问你的服务地址 服务随机返回一个图片地址 SDP最终访问你设定的新的图片地址</p>\n<h2 id=\"分析Earth-View-from-Google-Earth\"><a href=\"#分析Earth-View-from-Google-Earth\" class=\"headerlink\" title=\"分析Earth View from Google Earth\"></a>分析Earth View from Google Earth</h2><p>本来是打算直接使用Chrome的开发者工具和charles直接分析网络请求，但是每次返回的图片地址都不一样只能进一步查看GoogelEarth的页面了<br>如<a href=\"https://g.co/ev/2131\">https://g.co/ev/2131</a> 这样的短链，可以看到后面的2131这样的四位id 尝试了几次发现不是连续的。  本来打算写个脚本 验证下一定范围内哪些数字是有效的<br>然后日常github 发现了<a href=\"https://github.com/limhenry/earthview\">这个好东西</a> 提供了一个一个<a href=\"https://raw.githubusercontent.com/limhenry/earthview/master/earthview.json\">接口</a>可以得到当前所有图片的信息<br><img src=\"http://ooymoxvz4.bkt.clouddn.com/17-5-18/11845916-file_1495088848235_6c3c.png\" alt=\"所有图片的信息\"></p>\n<p>可以通过这个json数据解析出所有的图片id  保存到本地作为服务器的数据源</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">import</span> random, re , threading , time , socket</div><div class=\"line\"><span class=\"keyword\">import</span> tornado.web</div><div class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</div><div class=\"line\"></div><div class=\"line\">allindex = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getUrl</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\">#通过随机得到的位置来得到对应位置的</span></div><div class=\"line\">    id = randomid()</div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'date'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        _image = f.read()</div><div class=\"line\"></div><div class=\"line\">    _imagelist = _image.split(<span class=\"string\">','</span>)</div><div class=\"line\">    _imagelist.pop()</div><div class=\"line\">    <span class=\"keyword\">return</span> _imagelist[id]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">updateindex</span><span class=\"params\">()</span>:</span></div><div class=\"line\">  <span class=\"comment\">#更新所有图片数量的数据</span></div><div class=\"line\">    <span class=\"keyword\">global</span>  allindex</div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'daterand'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        allindex = f.read()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getAllDate</span><span class=\"params\">()</span>:</span></div><div class=\"line\">  <span class=\"comment\">#从提供的接口中获取所有图片的id并保存下来 同时设置延时每天更新下数据</span></div><div class=\"line\">    print(<span class=\"string\">'getAllDate'</span>)</div><div class=\"line\">    reponse = requests.get(<span class=\"string\">'https://raw.githubusercontent.com/limhenry/earthview/master/earthview.json'</span>)</div><div class=\"line\">    html = reponse.text</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'date'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        imageList = re.findall(<span class=\"string\">'\"image\":\".*?\"'</span> , html)</div><div class=\"line\">        <span class=\"keyword\">for</span> image <span class=\"keyword\">in</span> imageList:</div><div class=\"line\">            imageurl = re.findall(<span class=\"string\">'[0-9]&#123;4,5&#125;'</span> ,image)</div><div class=\"line\">            f.write(imageurl[<span class=\"number\">0</span>] + <span class=\"string\">','</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'daterand'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        f.write(str(len(imageList)))</div><div class=\"line\"></div><div class=\"line\">    updateindex()</div><div class=\"line\"></div><div class=\"line\">    time.sleep(<span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>)</div><div class=\"line\">    getAllDate()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">randomid</span><span class=\"params\">()</span>:</span></div><div class=\"line\">  <span class=\"comment\">#随机数什么的</span></div><div class=\"line\">    <span class=\"keyword\">global</span> allindex</div><div class=\"line\">    _allindex = int(allindex)</div><div class=\"line\">    id = random.randint(<span class=\"number\">0</span>, _allindex)</div><div class=\"line\">    <span class=\"keyword\">return</span> id</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">earthImage</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></div><div class=\"line\">        _id = getUrl()</div><div class=\"line\">        imageurl = <span class=\"string\">'http://www.gstatic.com/prettyearth/assets/full/%s.jpg'</span>%(_id)</div><div class=\"line\">        print(imageurl)</div><div class=\"line\">        <span class=\"comment\">#直接指向随机图片的地址</span></div><div class=\"line\">        self.redirect(imageurl)</div><div class=\"line\"></div><div class=\"line\">application = tornado.web.Application([</div><div class=\"line\">    (<span class=\"string\">r\"/earthImage\"</span> , earthImage)</div><div class=\"line\">])</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runServer</span><span class=\"params\">()</span>:</span></div><div class=\"line\">  <span class=\"comment\">#trnado 服务器的配置 我这里在运行之后会显示当前的地址</span></div><div class=\"line\">    port = <span class=\"number\">9011</span></div><div class=\"line\">    application.listen(port)</div><div class=\"line\">    localIP = socket.gethostbyname(socket.gethostname())</div><div class=\"line\">    print(<span class=\"string\">\"run in %s:%s\"</span>%(localIP,port))</div><div class=\"line\">    tornado.ioloop.IOLoop.instance().start()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">startServer</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'startServer'</span>)</div><div class=\"line\">    runServer()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    //这里开了两个线程 防止取得图片数据的时候访问阻塞</div><div class=\"line\">    updateindex()</div><div class=\"line\">    thread_getInfoDate = threading.Thread(target=getAllDate, name=<span class=\"string\">'getAllDate'</span>)</div><div class=\"line\">    thread_startServer = threading.Thread(target=startServer, name=<span class=\"string\">'startServer'</span>)</div><div class=\"line\"></div><div class=\"line\">    thread_getInfoDate.start()</div><div class=\"line\">    thread_startServer.start()</div><div class=\"line\">main()</div></pre></td></tr></table></figure>\n<p>最后打开SpeedDialPlus的设置 更改其中主题里的自定义网址为你服务器运行后的地址就好了 当然 也可以部署在云服务器中</p>\n<h2 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h2><p>程序写的很随意 山顶洞人编程 性能的话自用还可以的</p>\n<p>图片的话只有google erath的图片 可以配置或加入更多的图片 现阶段基本没有扩展性 只能看地球了(1500多张图片还不够看 只能说明 该换风格了)</p>\n<h2 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h2><p><a href=\"https://github.com/clwater/SpeedDialPlusImage\">https://github.com/clwater/SpeedDialPlusImage</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj8cwyb4o0001o3xw06s9ftsp","category_id":"cj8cwyb5b0005o3xw7ke7nppg","_id":"cj8cwyb5t000eo3xwt35izzel"},{"post_id":"cj8cwyb4z0003o3xw5i80pfg6","category_id":"cj8cwyb5p000bo3xwq2hja28v","_id":"cj8cwyb60000lo3xwaercpegn"},{"post_id":"cj8cwyb5e0007o3xwjkoslr8m","category_id":"cj8cwyb5p000bo3xwq2hja28v","_id":"cj8cwyb66000ro3xw4i6d1gya"},{"post_id":"cj8cwyb5m0009o3xwmjbkxez3","category_id":"cj8cwyb5p000bo3xwq2hja28v","_id":"cj8cwyb6c000wo3xwgfuixyg1"},{"post_id":"cj8cwyb63000qo3xwigs2brlt","category_id":"cj8cwyb5p000bo3xwq2hja28v","_id":"cj8cwyb6e000zo3xwo5oftzbu"},{"post_id":"cj8cwyb5o000ao3xwr22ed86c","category_id":"cj8cwyb5p000bo3xwq2hja28v","_id":"cj8cwyb6g0012o3xw4lnhf89a"},{"post_id":"cj8cwyb6b000vo3xwa0bwzo3i","category_id":"cj8cwyb5p000bo3xwq2hja28v","_id":"cj8cwyb6i0014o3xwbbm4ukqz"},{"post_id":"cj8cwyb5s000do3xwh9cz7par","category_id":"cj8cwyb6c000xo3xwozq87kzl","_id":"cj8cwyb6j0017o3xwxezw9d7l"},{"post_id":"cj8cwyb5u000fo3xwoz0zbl91","category_id":"cj8cwyb6c000xo3xwozq87kzl","_id":"cj8cwyb6k001co3xwtm6pmc93"},{"post_id":"cj8cwyb5x000io3xwfq39penb","category_id":"cj8cwyb6c000xo3xwozq87kzl","_id":"cj8cwyb6k001go3xwgtxonsqr"},{"post_id":"cj8cwyb5z000ko3xw1gjexriz","category_id":"cj8cwyb6k001do3xwx16fzsl0","_id":"cj8cwyb6r001ko3xw3pm2t9k2"},{"post_id":"cj8cwyb62000po3xwq8383qan","category_id":"cj8cwyb6k001ho3xwz7164xib","_id":"cj8cwyb6t001po3xwp1c0awj9"},{"post_id":"cj8cwyb6a000uo3xw8bjjdg7s","category_id":"cj8cwyb6s001lo3xw3u5l6m7j","_id":"cj8cwyb6v001so3xwp5mvatix"},{"post_id":"cj8cwyb6d000yo3xww3sd7kz3","category_id":"cj8cwyb6t001qo3xwyuqvwzj2","_id":"cj8cwyb70001wo3xwhac8z11r"},{"post_id":"cj8cwyb6f0011o3xw9rsl6rjp","category_id":"cj8cwyb6x001to3xw5g9ylwu7","_id":"cj8cwyb730020o3xw0av65rz6"}],"PostTag":[{"post_id":"cj8cwyb4o0001o3xw06s9ftsp","tag_id":"cj8cwyb5e0006o3xwtb2wfymx","_id":"cj8cwyb5z000jo3xwibc5u2y4"},{"post_id":"cj8cwyb4o0001o3xw06s9ftsp","tag_id":"cj8cwyb5p000co3xwrugj9742","_id":"cj8cwyb60000mo3xwzpr6epyl"},{"post_id":"cj8cwyb4z0003o3xw5i80pfg6","tag_id":"cj8cwyb5v000ho3xw2030uw3m","_id":"cj8cwyb6j0016o3xw986rh37u"},{"post_id":"cj8cwyb4z0003o3xw5i80pfg6","tag_id":"cj8cwyb61000oo3xwfc2h8tet","_id":"cj8cwyb6j0019o3xwairzbuyr"},{"post_id":"cj8cwyb4z0003o3xw5i80pfg6","tag_id":"cj8cwyb69000to3xwgeucp4rq","_id":"cj8cwyb6k001bo3xwf70u2ee3"},{"post_id":"cj8cwyb4z0003o3xw5i80pfg6","tag_id":"cj8cwyb6e0010o3xwqlp7jmix","_id":"cj8cwyb6k001eo3xwt48tcfvw"},{"post_id":"cj8cwyb5e0007o3xwjkoslr8m","tag_id":"cj8cwyb5v000ho3xw2030uw3m","_id":"cj8cwyb6r001jo3xwa2bggxui"},{"post_id":"cj8cwyb5e0007o3xwjkoslr8m","tag_id":"cj8cwyb61000oo3xwfc2h8tet","_id":"cj8cwyb6s001mo3xwsuasqm3r"},{"post_id":"cj8cwyb5e0007o3xwjkoslr8m","tag_id":"cj8cwyb6k001fo3xw1rfee40v","_id":"cj8cwyb6t001oo3xw1b6d8t9b"},{"post_id":"cj8cwyb5m0009o3xwmjbkxez3","tag_id":"cj8cwyb5v000ho3xw2030uw3m","_id":"cj8cwyb70001vo3xwmokw9mho"},{"post_id":"cj8cwyb5m0009o3xwmjbkxez3","tag_id":"cj8cwyb61000oo3xwfc2h8tet","_id":"cj8cwyb70001xo3xwq6a39ntx"},{"post_id":"cj8cwyb5m0009o3xwmjbkxez3","tag_id":"cj8cwyb6k001fo3xw1rfee40v","_id":"cj8cwyb72001zo3xw90a7fxr0"},{"post_id":"cj8cwyb5o000ao3xwr22ed86c","tag_id":"cj8cwyb5v000ho3xw2030uw3m","_id":"cj8cwyb740023o3xwchmm5rrs"},{"post_id":"cj8cwyb5o000ao3xwr22ed86c","tag_id":"cj8cwyb61000oo3xwfc2h8tet","_id":"cj8cwyb740024o3xwgp2o6zbj"},{"post_id":"cj8cwyb5o000ao3xwr22ed86c","tag_id":"cj8cwyb6k001fo3xw1rfee40v","_id":"cj8cwyb750026o3xwxj3p7pqh"},{"post_id":"cj8cwyb5s000do3xwh9cz7par","tag_id":"cj8cwyb730022o3xw76xxg6p2","_id":"cj8cwyb750027o3xwzgejf32e"},{"post_id":"cj8cwyb5u000fo3xwoz0zbl91","tag_id":"cj8cwyb730022o3xw76xxg6p2","_id":"cj8cwyb760029o3xw9br6zz2a"},{"post_id":"cj8cwyb5x000io3xwfq39penb","tag_id":"cj8cwyb730022o3xw76xxg6p2","_id":"cj8cwyb76002bo3xwafl4728n"},{"post_id":"cj8cwyb5z000ko3xw1gjexriz","tag_id":"cj8cwyb5v000ho3xw2030uw3m","_id":"cj8cwyb77002eo3xww8w15lwu"},{"post_id":"cj8cwyb5z000ko3xw1gjexriz","tag_id":"cj8cwyb61000oo3xwfc2h8tet","_id":"cj8cwyb77002fo3xw6hvfkbbs"},{"post_id":"cj8cwyb5z000ko3xw1gjexriz","tag_id":"cj8cwyb76002co3xwyxwawlii","_id":"cj8cwyb77002ho3xw25e3lf34"},{"post_id":"cj8cwyb62000po3xwq8383qan","tag_id":"cj8cwyb76002do3xw75ja31bq","_id":"cj8cwyb79002lo3xw8q4a35gx"},{"post_id":"cj8cwyb62000po3xwq8383qan","tag_id":"cj8cwyb77002go3xw42pv8ntv","_id":"cj8cwyb79002mo3xwengqx0mt"},{"post_id":"cj8cwyb62000po3xwq8383qan","tag_id":"cj8cwyb78002io3xwc6bju0tv","_id":"cj8cwyb79002oo3xwxpptgkrr"},{"post_id":"cj8cwyb62000po3xwq8383qan","tag_id":"cj8cwyb78002jo3xwk0uhhc2z","_id":"cj8cwyb79002po3xwfk3u8i4p"},{"post_id":"cj8cwyb63000qo3xwigs2brlt","tag_id":"cj8cwyb5v000ho3xw2030uw3m","_id":"cj8cwyb7a002ro3xwunk1qmph"},{"post_id":"cj8cwyb63000qo3xwigs2brlt","tag_id":"cj8cwyb61000oo3xwfc2h8tet","_id":"cj8cwyb7a002so3xwkx9idces"},{"post_id":"cj8cwyb63000qo3xwigs2brlt","tag_id":"cj8cwyb6k001fo3xw1rfee40v","_id":"cj8cwyb7a002uo3xw6h6x6r0d"},{"post_id":"cj8cwyb6a000uo3xw8bjjdg7s","tag_id":"cj8cwyb79002no3xw8d0esj0l","_id":"cj8cwyb7a002wo3xwea1g5yt4"},{"post_id":"cj8cwyb6a000uo3xw8bjjdg7s","tag_id":"cj8cwyb7a002qo3xwwwmim0yy","_id":"cj8cwyb7a002xo3xwf2pr1wso"},{"post_id":"cj8cwyb6a000uo3xw8bjjdg7s","tag_id":"cj8cwyb7a002to3xwjvic2mbr","_id":"cj8cwyb7b002zo3xwdogo4y29"},{"post_id":"cj8cwyb6b000vo3xwa0bwzo3i","tag_id":"cj8cwyb5v000ho3xw2030uw3m","_id":"cj8cwyb7b0030o3xw8ybo5i7z"},{"post_id":"cj8cwyb6b000vo3xwa0bwzo3i","tag_id":"cj8cwyb61000oo3xwfc2h8tet","_id":"cj8cwyb7b0032o3xw87kkyxah"},{"post_id":"cj8cwyb6b000vo3xwa0bwzo3i","tag_id":"cj8cwyb6k001fo3xw1rfee40v","_id":"cj8cwyb7b0033o3xwdvtqtmjx"},{"post_id":"cj8cwyb6d000yo3xww3sd7kz3","tag_id":"cj8cwyb7a002yo3xwyv85q47e","_id":"cj8cwyb7e0038o3xw3yfofvxt"},{"post_id":"cj8cwyb6d000yo3xww3sd7kz3","tag_id":"cj8cwyb7b0031o3xwk09fbdaz","_id":"cj8cwyb7e0039o3xwnq7dr791"},{"post_id":"cj8cwyb6d000yo3xww3sd7kz3","tag_id":"cj8cwyb7b0034o3xwxog6v0fd","_id":"cj8cwyb7f003bo3xww9k2j8ec"},{"post_id":"cj8cwyb6d000yo3xww3sd7kz3","tag_id":"cj8cwyb7c0035o3xwxgcn2oj2","_id":"cj8cwyb7f003co3xwvqyk0vrh"},{"post_id":"cj8cwyb6d000yo3xww3sd7kz3","tag_id":"cj8cwyb7d0036o3xw3hbufhs6","_id":"cj8cwyb7f003eo3xwmzorq4wq"},{"post_id":"cj8cwyb6f0011o3xw9rsl6rjp","tag_id":"cj8cwyb7d0037o3xwo7hf7cb2","_id":"cj8cwyb7f003go3xwhgkw0tkt"},{"post_id":"cj8cwyb6f0011o3xw9rsl6rjp","tag_id":"cj8cwyb7e003ao3xwdgeh68tw","_id":"cj8cwyb7f003ho3xwfjn3igvq"},{"post_id":"cj8cwyb6f0011o3xw9rsl6rjp","tag_id":"cj8cwyb7f003do3xw2u8c2x7p","_id":"cj8cwyb7g003io3xwsjdbov69"},{"post_id":"cj8cwyb6f0011o3xw9rsl6rjp","tag_id":"cj8cwyb7f003fo3xwx237ofh5","_id":"cj8cwyb7g003jo3xww4r9tn45"}],"Tag":[{"name":"hexo","_id":"cj8cwyb5e0006o3xwtb2wfymx"},{"name":"command not found","_id":"cj8cwyb5p000co3xwrugj9742"},{"name":"android","_id":"cj8cwyb5v000ho3xw2030uw3m"},{"name":"view","_id":"cj8cwyb61000oo3xwfc2h8tet"},{"name":"tools","_id":"cj8cwyb69000to3xwgeucp4rq"},{"name":"Hierarchy Viewer","_id":"cj8cwyb6e0010o3xwqlp7jmix"},{"name":"源码","_id":"cj8cwyb6k001fo3xw1rfee40v"},{"name":"Rpg Maker","_id":"cj8cwyb730022o3xw76xxg6p2"},{"name":"自定义","_id":"cj8cwyb76002co3xwyxwawlii"},{"name":"音乐","_id":"cj8cwyb76002do3xw75ja31bq"},{"name":"music","_id":"cj8cwyb77002go3xw42pv8ntv"},{"name":"代码","_id":"cj8cwyb78002io3xwc6bju0tv"},{"name":"coding","_id":"cj8cwyb78002jo3xwk0uhhc2z"},{"name":"python","_id":"cj8cwyb79002no3xw8d0esj0l"},{"name":"api","_id":"cj8cwyb7a002qo3xwwwmim0yy"},{"name":"爬虫","_id":"cj8cwyb7a002to3xwjvic2mbr"},{"name":"vpn","_id":"cj8cwyb7a002yo3xwyv85q47e"},{"name":"搬瓦工","_id":"cj8cwyb7b0031o3xwk09fbdaz"},{"name":"bandwagonhost","_id":"cj8cwyb7b0034o3xwxog6v0fd"},{"name":"Shadowsocks","_id":"cj8cwyb7c0035o3xwxgcn2oj2"},{"name":"ss","_id":"cj8cwyb7d0036o3xw3hbufhs6"},{"name":"peed Dial Plus","_id":"cj8cwyb7d0037o3xwo7hf7cb2"},{"name":"Earth View from Google Earth","_id":"cj8cwyb7e003ao3xwdgeh68tw"},{"name":"Chrome插件","_id":"cj8cwyb7f003do3xw2u8c2x7p"},{"name":"Python","_id":"cj8cwyb7f003fo3xwx237ofh5"}]}}