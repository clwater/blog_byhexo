{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/myicon.jpeg","path":"images/myicon.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"42171f5d661de34ed171085370b75a75a6f67374","modified":1486109240000},{"_id":"source/404.html","hash":"0cee696e3bea01edad234cac4de69d18eed5fe79","modified":1486112957000},{"_id":"source/.DS_Store","hash":"4a2b580830055dca9429628f60b9abbb17600216","modified":1486116205000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1486092971000},{"_id":"themes/next/.DS_Store","hash":"a5378165e2991552e503c74c3fefdbc7b5400565","modified":1486112893000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1486092971000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1486092971000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1486092971000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1486092971000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1486092971000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1486092971000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1486092971000},{"_id":"themes/next/favicon.ico","hash":"e045ba4041efdf518f3dba99c17ab28e060ba100","modified":1486110512000},{"_id":"themes/next/README.en.md","hash":"3b0c7998cf17f9cf9e1a5bfcd65679a43a00c817","modified":1486092971000},{"_id":"themes/next/_config.yml","hash":"2aef4870f1767f28f31abe305b393d68e426e8f4","modified":1486117059000},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1486092971000},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1486092971000},{"_id":"source/_posts/.DS_Store","hash":"4516cd6c91fb3542383903bf22be435bfb13a5e6","modified":1486116137000},{"_id":"source/about/.DS_Store","hash":"7206fcba796c7cba911c82e85ab2aca8d71c9861","modified":1486111754000},{"_id":"source/_posts/从setContentView与LayoutInflater说起.md","hash":"085578517e03c2be22063672c8c654646eb24829","modified":1486115172000},{"_id":"source/about/index.md","hash":"dbd20128e20f4e1f2594609f4c7af7f776c5f6fd","modified":1486111876000},{"_id":"source/categories/.DS_Store","hash":"0203e668175914dff6a72b324de111ecf675c428","modified":1486108185000},{"_id":"source/categories/index.md","hash":"3d1b717cf45e66a19c850e452772c1001133cddc","modified":1486104938000},{"_id":"source/tags/.DS_Store","hash":"4b1737e2d95536850ac239b97c1d4b1deae9a602","modified":1486111748000},{"_id":"source/tags/index.md","hash":"0c4d3bebe7ff03b130b425ced2fd8d5ad9e402e5","modified":1486105025000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1486092971000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1486092971000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1486092940000},{"_id":"themes/next/.git/packed-refs","hash":"12ca02d8374d9a441a6c8a6c9ed061432cb0a8c9","modified":1486092971000},{"_id":"themes/next/.git/index","hash":"7c93688a0f40ff9e6e4b13d8dfa32d5cb1d90073","modified":1486107699000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1486092971000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1486092971000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1486092971000},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1486092971000},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1486092971000},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1486092971000},{"_id":"themes/next/languages/.DS_Store","hash":"7fc8e9a2448dcebffc291e753c83cf23df5fbb19","modified":1486109908000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1486092971000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1486092971000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1486092971000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1486092971000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1486092971000},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1486092971000},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1486092971000},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1486092971000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"28e54804c61545b14c0beb464e2c341616aec956","modified":1486112784000},{"_id":"themes/next/layout/_layout.swig","hash":"2fa3c74066843a859fac77803324a1de51044da9","modified":1486092971000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1486092971000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1486092971000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1486092971000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1486092971000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1486092971000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1486092971000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1486092971000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1486092971000},{"_id":"themes/next/source/.DS_Store","hash":"e8893af79b3e515ce49b490cd7f9f2dfadb5d01e","modified":1486110825000},{"_id":"themes/next/source/favicon.ico","hash":"e045ba4041efdf518f3dba99c17ab28e060ba100","modified":1486110512000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1486092971000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1486092971000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1486092971000},{"_id":"source/_posts/image/.DS_Store","hash":"26295bd2d25d1a1f00f2a58f08f175b4e97eadc7","modified":1486114226000},{"_id":"source/_posts/image/View层级分析.png","hash":"2b1959a3d80b8124538f341cb96c88a73398292b","modified":1481013256000},{"_id":"source/_posts/image/image_1.png","hash":"e6ff26a12c109b103722de5a55a5cb3d95c7bf25","modified":1480928687000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486092971000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1486092940000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1486092940000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1486092940000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1486092940000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1486092940000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1486092940000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1486092940000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1486092940000},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1486092940000},{"_id":"themes/next/.git/logs/HEAD","hash":"6e6e77f2a540a7f77e14826dd6131862e4c844e5","modified":1486092971000},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1486092940000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1486092971000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1486092971000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1486092971000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1486092971000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1486092971000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1486092971000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"78ccfc1dc915247c1fec3c86d742e0f4c2f6d99c","modified":1486092971000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1486092971000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1486092971000},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1486092971000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1486092971000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1486092971000},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1486092971000},{"_id":"themes/next/layout/_partials/header.swig","hash":"adab5c3f7b173f1b45454787f39dde07aea03483","modified":1486092971000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1486092971000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"43d8830bb19da4fc7a5773866be19fa066b62645","modified":1486092971000},{"_id":"themes/next/layout/_macro/post.swig","hash":"e6016def9b512188f4c2725399c9adc7bc41cdae","modified":1486092971000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1486092971000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1486092971000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1486092971000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1486092971000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1486092971000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1486092971000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1486092971000},{"_id":"themes/next/source/css/.DS_Store","hash":"1b1a376eb3da4d6cd65149f006e6faf22179bfbf","modified":1486107643000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1486092971000},{"_id":"themes/next/source/fonts/.DS_Store","hash":"2ccb3fc11dddf94c61eb70aa2279e7a05dc4a90a","modified":1486107813000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1486092971000},{"_id":"themes/next/source/images/.DS_Store","hash":"3089a8fbb7f4db73a32a208138ee05496823b46c","modified":1486103937000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1486092971000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1486092971000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1486092971000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1486092971000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1486092971000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1486092971000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1486092971000},{"_id":"themes/next/source/images/myicon.jpeg","hash":"c4c281479e470c7099fbfedcbeccbb6e82401138","modified":1477306859000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1486092971000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1486092971000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1486092971000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1486092971000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1486092971000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1486092971000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486092971000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486092971000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486092971000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486092971000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486092971000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486092971000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486092971000},{"_id":"themes/next/.git/refs/heads/master","hash":"2311b7302155cc3ec46e40ad16dc5c94e36328b4","modified":1486092971000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1486092971000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1486092971000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1486092971000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1486092971000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1486092971000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1486092971000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1486092971000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1486092971000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"4abc01bc870e1d7a783cdbd26166edc782a6a4f4","modified":1486092971000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1486092971000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1486092971000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1486092971000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1486092971000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1486092971000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1486092971000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1486092971000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1486092971000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1486092971000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1486092971000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1486092971000},{"_id":"themes/next/source/css/_common/.DS_Store","hash":"1cd6d6d2450bd15d61e022fe20718c0fd3c72bf4","modified":1486107801000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1486092971000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1486092971000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1486092971000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1486092971000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"fc185c6cec79593775d1c2440dbe2a71cfbe2e99","modified":1486092971000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c459aa6d607d8bcb747544e74f6ad0b8374aa3b1","modified":1486092971000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1486092971000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1486092971000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1486092971000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1486092971000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1486092971000},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1486092971000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1486092971000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1486092971000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1486092971000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1486092971000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1486092971000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1486092971000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1486092971000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1486092971000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1486092971000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1486092971000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1486092971000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1486092971000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1486092971000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1486092971000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1486092971000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1486092971000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1486092971000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1486092971000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1486092971000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1486092971000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1486092971000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1486092971000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1486092971000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1486092971000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1486092971000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1486092971000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1486092971000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1486092971000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"6e6e77f2a540a7f77e14826dd6131862e4c844e5","modified":1486092971000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1486092971000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1486092971000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1486092971000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1486092971000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1486092971000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1486092971000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1486092971000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1486092971000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1486092971000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1486092971000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1486092971000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"ea8078fa9e10be2bb042749d8b6a97adc38f914c","modified":1486092971000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1486092971000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1486092971000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1486092971000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1486092971000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1486092971000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1486092971000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"ff9f163bb05c0709577040a875924d36c9ab99d6","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"dcf9fe43b2ef78b923118ba39efedb38760e76b1","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1408209dfb9a22a0982a30bdbd14842c2b53f264","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9b63bd8effc7cf4b96acdea4d73add7df934a222","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1486092971000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1486092971000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1486092971000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1486092971000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1486092971000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1486092971000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1486092971000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1486092971000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1486092971000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1486092971000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1486092971000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1486092971000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1486092971000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1486092971000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1486092971000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1486092971000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1486092971000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1486092971000},{"_id":"themes/next/.git/objects/pack/pack-a53cc289c75babf041d708b8ebd1f560676ee348.idx","hash":"360246dfc39fbe894d460fc58bc6b2a989f8f382","modified":1486092971000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1486092971000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1486092971000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1486092971000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1486092971000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1486092971000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"6e6e77f2a540a7f77e14826dd6131862e4c844e5","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"fdfadbb4483043c7e0afd541ee9712389e633517","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"7f1aab694caf603809e33cff82beea84cd0128fd","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1486092971000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1486092971000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1486092971000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1486092971000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1486092971000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1486092971000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1486092971000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1486092971000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1486092971000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1486092971000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1486092971000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1486092971000},{"_id":"themes/next/.git/objects/pack/pack-a53cc289c75babf041d708b8ebd1f560676ee348.pack","hash":"0a8d4b0f87e50d3c9cae3f2ac034cd565110aeb7","modified":1486092971000},{"_id":"source/_posts/.base.md","hash":"ae6c596a859fbb94cf7739a10cf48077aa1a0f21","modified":1486114555000},{"_id":"source/_posts/LinearLayout 源码分析.md","hash":"3cdb53e8af8c4a396ea763747f0d425387dc57ef","modified":1486115737000},{"_id":"source/_posts/View 绘制源码分析.md","hash":"c9500df939ab7c260607a088429e0d7c9889552c","modified":1486115497000},{"_id":"source/_posts/从setContentView说起副本.md","hash":"89d312b475edf9f15a55464d72e26caa796ca2d9","modified":1486115716000},{"_id":"source/_posts/从setContentView说起.md","hash":"085578517e03c2be22063672c8c654646eb24829","modified":1486115172000},{"_id":"source/_posts/LayoutInflater.md","hash":"b9bc1518dbc73039066b167586d758d636fff6bf","modified":1486115823000},{"_id":"source/_posts/RelativeLayout 源码分析.md","hash":"b2dd0eb779830f7a72369d499738e5b58a3d9933","modified":1486115960000},{"_id":"source/_posts/HierarchyViewer.md","hash":"dc65095d0819f8d65ffb7b141f8e4db49ea6e548","modified":1486116314000},{"_id":"public/search.xml","hash":"5ba04fbadfc6ba2a1d68941581944838533ffc41","modified":1486116470456},{"_id":"public/404.html","hash":"951e98432490c47883fa5862ffb0acd891cb3cfa","modified":1486117133287},{"_id":"public/about/index.html","hash":"583d24ae6950ed8987640647873f500435383fd3","modified":1486117133287},{"_id":"public/categories/index.html","hash":"b1b553cf353052929ba995b0f65ef2a01a6366b6","modified":1486117133287},{"_id":"public/tags/index.html","hash":"38099e285b22c511f4ffd056e4f5734a08625f82","modified":1486117133287},{"_id":"public/archives/index.html","hash":"7e08ec5cc0742b9a373caec1b5de7169a54dbec9","modified":1486117133288},{"_id":"public/archives/2017/index.html","hash":"1aaab7d5ec78813cba3645855fd976bdf43b0170","modified":1486117133288},{"_id":"public/archives/2017/02/index.html","hash":"5f81e08bb3cbb300a8ab734d65a67366ae35175e","modified":1486117133288},{"_id":"public/index.html","hash":"61729f56900feca26b47220797bb729806799230","modified":1486117133288},{"_id":"public/2017/02/03/HierarchyViewer/index.html","hash":"9e66d24ec705bfe93d204fc419f16225efafb55f","modified":1486117133287},{"_id":"public/2017/02/03/RelativeLayout 源码分析/index.html","hash":"e6369cc227190f84b70ca2ce51d85fecb96f794c","modified":1486117133287},{"_id":"public/2017/02/03/LinearLayout 源码分析/index.html","hash":"6231dba86ea039af15cd7e1956eea51e542cf19b","modified":1486117133287},{"_id":"public/2017/02/03/View 绘制源码分析/index.html","hash":"a9c2fd06d80bcc5f61b980ea7b07078e9ce1b448","modified":1486117133288},{"_id":"public/2017/02/03/LayoutInflater/index.html","hash":"b578babdaee1243f6fc1cbaf9b4ab5f0f9a14a81","modified":1486117133288},{"_id":"public/2017/02/03/从setContentView说起/index.html","hash":"cc2d612356cbc551013eb9c126949b51940b30c9","modified":1486117133288},{"_id":"public/categories/android/index.html","hash":"d34dee409621bea031913a5f45236bb1687d8aa0","modified":1486117133288},{"_id":"public/tags/android/index.html","hash":"43cea6a73cd0a4d65c5fcf7e69297eb635b5c8b0","modified":1486117133288},{"_id":"public/tags/view/index.html","hash":"9403c724d7e0845684f05185101bd95ed8fbc018","modified":1486117133288},{"_id":"public/tags/源码/index.html","hash":"4ef527400dc2c12b07e6993ecedf8c6da0c945bb","modified":1486117133288},{"_id":"public/tags/tools/index.html","hash":"973ff8b794be183dc60ab30ffeade40f7fd9f380","modified":1486117133288},{"_id":"public/tags/Hierarchy-Viewer/index.html","hash":"fb4c4978fbf81137585a1926b466e92d624ecf39","modified":1486117133288}],"Category":[{"name":"android","_id":"ciypm410n0000l4o9fa4kzz04"}],"Data":[],"Page":[{"_content":"<html>\n    <head>\n         <meta http-equiv=\"Content-Type\" content=\"text/html\" charset=\"UTF-8\" />\n         <title>公益404</title>\n    </head>\n\n    <body>\n         <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://www.gengzhibo.com\" homePageName=\"回到我的主页\"></script>\n    </body>\n</html>\n","source":"404.html","raw":"<html>\n    <head>\n         <meta http-equiv=\"Content-Type\" content=\"text/html\" charset=\"UTF-8\" />\n         <title>公益404</title>\n    </head>\n\n    <body>\n         <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://www.gengzhibo.com\" homePageName=\"回到我的主页\"></script>\n    </body>\n</html>\n","date":"2017-02-03T09:09:17.000Z","updated":"2017-02-03T09:09:17.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ciypm0pm50000k7o99bnimc6m","content":"<html>\n    <head>\n         <meta http-equiv=\"Content-Type\" content=\"text/html\" charset=\"UTF-8\">\n         <title>公益404</title>\n    </head>\n\n    <body>\n         <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://www.gengzhibo.com\" homepagename=\"回到我的主页\"></script>\n    </body>\n</html>\n","excerpt":"","more":"<html>\n    <head>\n         <meta http-equiv=\"Content-Type\" content=\"text/html\" charset=\"UTF-8\" />\n         <title>公益404</title>\n    </head>\n\n    <body>\n         <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://www.gengzhibo.com\" homePageName=\"回到我的主页\"></script>\n    </body>\n</html>\n"},{"title":"关于我","date":"2017-02-03T07:44:46.000Z","type":"about","comments":0,"_content":"\n\n具体相关联系方式侧边栏中有的  常写bug的小程序员而已啦 感谢你的访问 也欢迎你的交流\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-02-03 15:44:46\ntype: \"about\"\ncomments: false\n---\n\n\n具体相关联系方式侧边栏中有的  常写bug的小程序员而已啦 感谢你的访问 也欢迎你的交流\n","updated":"2017-02-03T08:51:16.000Z","path":"about/index.html","layout":"page","_id":"ciypm0pns0002k7o9kdy7q9wb","content":"<p>具体相关联系方式侧边栏中有的  常写bug的小程序员而已啦 感谢你的访问 也欢迎你的交流</p>\n","excerpt":"","more":"<p>具体相关联系方式侧边栏中有的  常写bug的小程序员而已啦 感谢你的访问 也欢迎你的交流</p>\n"},{"title":"categories","date":"2017-02-03T06:53:58.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-02-03 14:53:58\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-02-03T06:55:38.000Z","path":"categories/index.html","layout":"page","_id":"ciypm0pot0003k7o9u5u3u6r7","content":"","excerpt":"","more":""},{"title":"tags","date":"2017-02-03T06:56:44.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-02-03 14:56:44\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-02-03T06:57:05.000Z","path":"tags/index.html","layout":"page","_id":"ciypm0pou0004k7o94yl9xvwl","content":"","excerpt":"","more":""}],"Post":[{"title":"Android View 相关源码分析之三 View的绘制过程","date":"2017-02-03T09:48:05.000Z","_content":"\n# Android View\n>Android View框架相关  View的测量 布局 绘制过程\nLinearLayout RelativeLayout实现源码分析\n\n\n\n## View的测量 布局 绘制过程\n\n### 测量之前的事情\nView的整个绘制流程是开始于ViewRootImpl类的performTraversals方法(1k行)  根据相关设置来觉得十分要重新执行相关功能\n```java\n  private void performTraversals() {\n    // cache mView since it is used so much below...\n    final View host = mView;\n    ...\n    int childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);\n    int childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);\n    ...\n    //measure\n    mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n    ...\n    //layout\n    mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());\n    ...\n    //draw\n    mView.draw(canvas);\n    ...\n  }\n  ```\n  <!-- more -->\n  \n  ```java\n  private static int getRootMeasureSpec(int windowSize, int rootDimension) {\n        int measureSpec;\n        switch (rootDimension) {\n\n        case ViewGroup.LayoutParams.MATCH_PARENT:\n            // Window can't resize. Force root view to be windowSize.\n            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);\n            break;\n        ...\n        }\n        return measureSpec;\n    }\n  ```\nView 绘制整体流程图如下\n\n![View绘制整体流程图](http://p1.bqimg.com/567571/a5aa47e56fd6434a.png)\n\n### measure源码分析\n\n结论:\n* measure的过程就是父View向子View递归调用view.measure方法 (measure中回调onMeasure方法)的过程\n\n* measure方法是 final的 只能重载onMeasure方法\n\n* 最顶层的DocerView的MeasureSpec由ViewRootImpl的getRootMeasureSpec方法提供 LayoutParams的参数为MATCH_PARENT specMode是EXACTLY，specSize为物理屏幕大小\n\n* 只要是ViewGroup的子类就必须要求LayoutParams继承子MarginLayoutParams 否则无法使用layout_margin参数\n\n* View的getMeasuredWidth()和getMeasuredHeight()方法来获取View测量的宽高，要必须保证这两个方法在onMeasure流程之后被调用才能返回有效值。\n\n\n\n![View measure过程](/View measure过程.png)\n\n```java\n/**\n * <p>\n * This is called to find out how big a view should be. The parent supplies constraint information in the width and height parameters.\n * </p>\n *\n * <p>\n * The actual measurement work of a view is performed in\n * {@link #onMeasure(int, int)}, called by this method. Therefore, only\n * {@link #onMeasure(int, int)} can and must be overridden by subclasses.\n * </p>\n *\n *\n * @param widthMeasureSpec Horizontal space requirements as imposed by the\n *        parent\n * @param heightMeasureSpec Vertical space requirements as imposed by the\n *        parent\n *\n * @see #onMeasure(int, int)\n */\n //没舍得删这些注释  感觉重要的事情都说了   为了计算整个View树的实际大小 设置实际的高和宽 每个子View都是根据父视图和自身决定实际宽高的 在onMeasure()方法中进行实际测量.传入widthMeasureSpec和heightMeasureSpec参数来表示了父View的规格 不但传入了模式 还传入了size 而对于DecorView来说 传入的模式一般为EXACTLY模式 size对应屏幕的宽高. 所以说子View的大小是父子View共同决定的\npublic final void measure(int widthMeasureSpec, int heightMeasureSpec) {\n\n               // measure ourselves, this should set the measured dimension flag back\n               onMeasure(widthMeasureSpec, heightMeasureSpec);\n   }\n```\n\nMeasureSpec内部类\n\nMeasureSpec是View的内部类 int型，由高2位规格模式specMode和低30位具体尺寸specSize组成 其中specMode只有三种\n* MeasureSpec.EXACTLY //确定模式，父View希望子View的大小是确定的，由specSize决定；\n* MeasureSpec.AT_MOST //最多模式，父View希望子View的大小最多是specSize指定的值；\n* MeasureSpec.UNSPECIFIED //未指定模式，父View完全依据子View的设计值来决定；\n\nonMeasure()方法\n\n```java\n    /**\n     * <p>\n     * Measure the view and its content to determine the measured width and the\n     * measured height. This method is invoked by {@link #measure(int, int)} and\n     * should be overridden by subclasses to provide accurate and efficient\n     * measurement of their contents.\n     * </p>\n     *\n     * <p>\n     * <strong>CONTRACT:</strong> When overriding this method, you\n     * <em>must</em> call {@link #setMeasuredDimension(int, int)} to store the\n     * measured width and height of this view. Failure to do so will trigger an\n     * <code>IllegalStateException</code>, thrown by\n     * {@link #measure(int, int)}. Calling the superclass'\n     * {@link #onMeasure(int, int)} is a valid use.\n     * </p>\n     *\n     * <p>\n     * The base class implementation of measure defaults to the background size,\n     * unless a larger size is allowed by the MeasureSpec. Subclasses should\n     * override {@link #onMeasure(int, int)} to provide better measurements of\n     * their content.\n     * </p>\n     *\n     * <p>\n     * If this method is overridden, it is the subclass's responsibility to make\n     * sure the measured height and width are at least the view's minimum height\n     * and width ({@link #getSuggestedMinimumHeight()} and\n     * {@link #getSuggestedMinimumWidth()}).\n     * </p>\n     *\n     * @param widthMeasureSpec horizontal space requirements as imposed by the parent.\n     *                         The requirements are encoded with\n     *                         {@link android.view.View.MeasureSpec}.\n     * @param heightMeasureSpec vertical space requirements as imposed by the parent.\n     *                         The requirements are encoded with\n     *                         {@link android.view.View.MeasureSpec}.\n     *\n     * @see #getMeasuredWidth()\n     * @see #getMeasuredHeight()\n     * @see #setMeasuredDimension(int, int)\n     * @see #getSuggestedMinimumHeight()\n     * @see #getSuggestedMinimumWidth()\n     * @see android.view.View.MeasureSpec#getMode(int)\n     * @see android.view.View.MeasureSpec#getSize(int)\n     */\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n    }\n```\ngetDefaultSize方法相关\n```java\n  public static int getDefaultSize(int size, int measureSpec) {\n    int result = size;\n    //通过measureSpec得到mode和size\n    int specMode = MeasureSpec.getMode(measureSpec);\n    int specSize = MeasureSpec.getSize(measureSpec);\n\n    switch (specMode) {\n    case MeasureSpec.UNSPECIFIED:\n        result = size;\n        break;\n    case MeasureSpec.AT_MOST:\n    case MeasureSpec.EXACTLY:\n        result = specSize;\n        break;\n    }\n    return result;\n  }\n\n  //最小宽度和高度由View的Background尺寸和View的minXXX共同决定\n  protected int getSuggestedMinimumHeight() {\n      return (mBackground == null) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());\n\n  }\n  protected int getSuggestedMinimumWidth() {\n      return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());\n  }\n```\nsetMeasuredDimension方法 对View的成员变量measuredWidth和measuredHeight变量赋值 也就是说该方法最终决定了View的大小\n```java\n  protected final void setMeasuredDimension(int measuredWidth, int measuredHeight) {\n      boolean optical = isLayoutModeOptical(this);\n      if (optical != isLayoutModeOptical(mParent)) {\n          Insets insets = getOpticalInsets();\n          int opticalWidth  = insets.left + insets.right;\n          int opticalHeight = insets.top  + insets.bottom;\n\n          measuredWidth  += optical ? opticalWidth  : -opticalWidth;\n          measuredHeight += optical ? opticalHeight : -opticalHeight;\n      }\n      setMeasuredDimensionRaw(measuredWidth, measuredHeight);\n  }\n\n  public boolean isLayoutRequested() {\n    return (mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT;\n  }\n\n  private void setMeasuredDimensionRaw(int measuredWidth, int measuredHeight) {\n    mMeasuredWidth = measuredWidth;\n    mMeasuredHeight = measuredHeight;\n\n    mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;\n  }\n```\n\n至此一次最基础的View的measure过程就完成了  但是由于View可以嵌套  所以measure是递归传递的所以ViewGroup中需要对其子类进行measure过程 measureChildren方法实质为循环调用measureChild方法\n\n而measureChild和measureChildWithMargins的区别是后者将margin和padding也作为了子视图的大小\n\n一下分析measureChildWithMargins方法\n```java\n  protected void measureChildWithMargins(View child,\n          int parentWidthMeasureSpec, int widthUsed,\n          int parentHeightMeasureSpec, int heightUsed) {\n      //获取当前子视图的LayoutParams\n      final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();\n      //设定子View的测量规格\n      final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\n              mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin\n                      + widthUsed, lp.width);\n      final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\n              mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin\n                      + heightUsed, lp.height);\n      //子view的继续调用\n      child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n  }\n\n  //在getChildMeasureSpec中通过父View和本身的模式共同决定当前View的size\n  public static int getChildMeasureSpec(int spec, int padding, int childDimension) {\n        //获取当前父View的mode和size\n        int specMode = MeasureSpec.getMode(spec);\n        int specSize = MeasureSpec.getSize(spec);\n        //获取父View的的剩余大小\n        int size = Math.max(0, specSize - padding);\n        //定义结果变量\n        int resultSize = 0;\n        int resultMode = 0;\n        //根据对应的mode做处理\n        //通过父View和本身的模式共同决定当前View的size\n        switch (specMode) {\n        // Parent has imposed an exact size on us\n        case MeasureSpec.EXACTLY:\n            if (childDimension >= 0) {\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size. So be it.\n                resultSize = size;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent has imposed a maximum size on us\n        case MeasureSpec.AT_MOST:\n            if (childDimension >= 0) {\n                // Child wants a specific size... so be it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size, but our size is not fixed.\n                // Constrain child to not be bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent asked to see how big we want to be\n        case MeasureSpec.UNSPECIFIED:\n            if (childDimension >= 0) {\n                // Child wants a specific size... let him have it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size... find out how big it should\n                // be\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size.... find out how\n                // big it should be\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            }\n            break;\n        }\n        //将size和mode整合为MeasureSpec模式后返回\n        return MeasureSpec.makeMeasureSpec(resultSize, resultMode);\n    }\n\n```\n\n### layout源码分析\nView layout整体流程与measure过程基本一样\n\n结论:\n* 需要根据ViewGroup本身的情况讨论 LinearLayout下会更看重子View的height和width 来安排对应位置 而RelativeLayout则更加关注子View的left right top bottom值 并且优先级高于width和height 甚至在部分自定义ViewGroup中 measure可能是无用的   直接使用layout方法来设置子View的位置也可以\n* ViewGroup需要实现自己的layout逻辑\n* layout_XXX中的各个熟悉都是针对子View的父ViewGroup的\n* 同样使用View的getWidth()和getHeight()方法来获取View测量的宽高 必须保证这两个方法在onLayout流程之后被调用才能返回有效值\n\n```java\n  /**\n     * Assign a size and position to a view and all of its\n     * descendants\n     *\n     * <p>This is the second phase of the layout mechanism.\n     * (The first is measuring). In this phase, each parent calls\n     * layout on all of its children to position them.\n     * This is typically done using the child measurements\n     * that were stored in the measure pass().</p>\n     *\n     * <p>Derived classes should not override this method.\n     * Derived classes with children should override\n     * onLayout. In that method, they should\n     * call layout on each of their children.</p>\n     *\n     * @param l Left position, relative to parent\n     * @param t Top position, relative to parent\n     * @param r Right position, relative to parent\n     * @param b Bottom position, relative to parent\n     */\n\n     //同样注解写的很好了  分派给他和他的所有的子视图大小和位置\n    @SuppressWarnings({\"unchecked\"})\n    public void layout(int l, int t, int r, int b) {\n        if ((mPrivateFlags3 & PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != 0) {\n            onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);\n            mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n        }\n         //调用setFrame方法把参数分别赋值于\n        int oldL = mLeft;\n        int oldT = mTop;\n        int oldB = mBottom;\n        int oldR = mRight;\n        //判断view的位置是否发生过变化 , 确定是否对当前view重新layout\n        boolean changed = isLayoutModeOptical(mParent) ?\n                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);\n\n\n        if (changed || (mPrivateFlags & PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) {\n            //调用onLayout\n            onLayout(changed, l, t, r, b);\n            mPrivateFlags &= ~PFLAG_LAYOUT_REQUIRED;\n            ListenerInfo li = mListenerInfo;\n            if (li != null && li.mOnLayoutChangeListeners != null) {\n                ArrayList<OnLayoutChangeListener> listenersCopy =\n                        (ArrayList<OnLayoutChangeListener>)li.mOnLayoutChangeListeners.clone();\n                int numListeners = listenersCopy.size();\n                for (int i = 0; i < numListeners; ++i) {\n                    listenersCopy.get(i).onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB);\n                }\n            }\n        }\n\n        mPrivateFlags &= ~PFLAG_FORCE_LAYOUT;\n        mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;\n    }\n```\n\nonLyayout方法\n```java\n  View中\n  protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n  }\n  ViewGroup中\n  protected abstract void onLayout(boolean changed,\n        int l, int t, int r, int b);\n```\n\n均是空方法  后面会就LinearLayout和RelativeLayout源码进行分析\n\n### draw源码分析\n\nView的draw流程图如下\n\n![Viewdraw](http://p1.bpimg.com/567571/e7b2c1005fdb70b2.png)\n\n结论:\n* View需要在子类中实现onDraw的过程\n* 在ViewGroup中 会调用其子View的方法 顺序与子view的添加顺序一致\n\n\ndraw的源码也很长 但是官方也给出给出了draw的过程\n```java\n  public void draw(Canvas canvas) {\n     ...\n     /*\n      * Draw traversal performs several drawing steps which must be executed\n      * in the appropriate order:\n      *\n      *      1. Draw the background\n      *      2. If necessary, save the canvas' layers to prepare for fading\n      *      3. Draw view's content\n      *      4. Draw children\n      *      5. If necessary, draw the fading edges and restore layers\n      *      6. Draw decorations (scrollbars for instance)\n      */\n\n     // Step 1, draw the background, if needed\n     ...\n     if (!dirtyOpaque) {\n         drawBackground(canvas);\n     }\n\n     // skip step 2 & 5 if possible (common case)\n     ...\n\n     // Step 2, save the canvas' layers\n     ...\n         if (drawTop) {\n             canvas.saveLayer(left, top, right, top + length, null, flags);\n         }\n     ...\n\n     // Step 3, draw the content\n     if (!dirtyOpaque) onDraw(canvas);\n\n     // Step 4, draw the children\n     dispatchDraw(canvas);\n\n     // Step 5, draw the fade effect and restore layers\n     ...\n     if (drawTop) {\n         matrix.setScale(1, fadeHeight * topFadeStrength);\n         matrix.postTranslate(left, top);\n         fade.setLocalMatrix(matrix);\n         p.setShader(fade);\n         canvas.drawRect(left, top, right, top + length, p);\n     }\n     ...\n\n     // Step 6, draw decorations (scrollbars)\n     onDrawScrollBars(canvas);\n     ...\n }\n```\n\n#### Step 1, draw the background, if needed\n```java\n  // Step 1, draw the background, if needed\n  //如果需要的话绘制背景\n\n  if (!dirtyOpaque) {\n      drawBackground(canvas);\n  }\n```\n\n```java\n  private void drawBackground(Canvas canvas) {\n\n    \t//通过xml中属性background或者代码中setBackGroundColor\\setBackgroundResource等方法赋值的背景drawable\n        final Drawable background = mBackground;\n        if (background == null) {\n            return;\n        }\n\n        //根据layout中确定的view位置来设置背景的绘制区域\n        setBackgroundBounds();\n\n\n        // 如果需要的话使用显示列表\n        //canvas.isHardwareAccelerated() 硬件加速判定\n        //硬件加速时会将图层缓存到GPU上 而不是重绘View的每一层\n        if (canvas.isHardwareAccelerated() && mAttachInfo != null\n                && mAttachInfo.mHardwareRenderer != null) {\n            mBackgroundRenderNode = getDrawableRenderNode(background, mBackgroundRenderNode);\n\n            final RenderNode renderNode = mBackgroundRenderNode;\n            if (renderNode != null && renderNode.isValid()) {\n                setBackgroundRenderNodeProperties(renderNode);\n                ((DisplayListCanvas) canvas).drawRenderNode(renderNode);\n                return;\n            }\n        }\n\n        final int scrollX = mScrollX;\n        final int scrollY = mScrollY;\n        //调用Drawable的draw方法来完成背景的绘制工作\n        if ((scrollX | scrollY) == 0) {\n            background.draw(canvas);\n        } else {\n            canvas.translate(scrollX, scrollY);\n            background.draw(canvas);\n            canvas.translate(-scrollX, -scrollY);\n        }\n    }\n\n\n    void setBackgroundBounds() {\n    if (mBackgroundSizeChanged && mBackground != null) {\n        mBackground.setBounds(0, 0,  mRight - mLeft, mBottom - mTop);\n        mBackgroundSizeChanged = false;\n        rebuildOutline();\n    }\n  }\n```\n\n\n#### Step 2, save the canvas' layers\n```java\n  // Step 2, save the canvas' layers\n  //保存绘制图层\n\n         if (drawTop) {\n             canvas.saveLayer(left, top, right, top + length, null, flags);\n         }\n\n```\n\n#### Step 3, draw the content\n```java\n  // Step 3, draw the content\n  //对View的内容进行绘制\n  if (!dirtyOpaque) onDraw(canvas);\n```\n```java\n  /**\n  * Implement this to do your drawing.\n  *\n  * @param canvas the canvas on which the background will be drawn\n  */\n  //onDraw也是空方法需要子类根据自身去实现相应的\n  protected void onDraw(Canvas canvas) {\n  }\n\n```\n\n#### Step 4, draw the children\n```java\n  // Step 4, draw the children\n  //绘制其子View\n  dispatchDraw(canvas);\n```\n\n```java\n  /**\n   * Called by draw to draw the child views. This may be overridden\n   * by derived classes to gain control just before its children are drawn\n   * (but after its own view has been drawn).\n   * @param canvas the canvas on which to draw the view\n   */\n  protected void dispatchDraw(Canvas canvas) {\n  //dispatchDraw同样空方法 与onDraw不同的是dispatchDraw在ViewGroup中被重写\n  }\n```\n\nViewGroup\n```java\n  //dispatchDraw方法中根据子View的不同情况 包括但不只包括该View是否显示 是否有进入或消失动画等进行了部分的调整\n  protected void dispatchDraw(Canvas canvas) {\n      ...\n        more |= drawChild(canvas, transientChild, drawingTime);\n      ...    \n  }\n\n  protected boolean drawChild(Canvas canvas, View child, long drawingTime) {\n    return child.draw(canvas, this, drawingTime);\n  }\n```\n#### Step 5, draw the fade effect and restore layers\n\n```java\n  // Step 5, draw the fade effect and restore layers\n  //绘制过度效果和恢复图层\n  if (drawTop) {\n      matrix.setScale(1, fadeHeight * topFadeStrength);\n      matrix.postTranslate(left, top);\n      fade.setLocalMatrix(matrix);\n      p.setShader(fade);\n      canvas.drawRect(left, top, right, top + length, p);\n  }\n```\n\n####  Step 6, draw decorations (scrollbars)\n```java\n  // Step 6, draw decorations (scrollbars)\n  //对滚动条进行绘制\n  onDrawScrollBars(canvas);\n```\n","source":"_posts/View 绘制源码分析.md","raw":"---\ntitle: Android View 相关源码分析之三 View的绘制过程\ndate: 2017-02-03 17:48:05\ntags: [\"android\" , \"view\" , \"源码\"]\ncategories: \"android\"\n---\n\n# Android View\n>Android View框架相关  View的测量 布局 绘制过程\nLinearLayout RelativeLayout实现源码分析\n\n\n\n## View的测量 布局 绘制过程\n\n### 测量之前的事情\nView的整个绘制流程是开始于ViewRootImpl类的performTraversals方法(1k行)  根据相关设置来觉得十分要重新执行相关功能\n```java\n  private void performTraversals() {\n    // cache mView since it is used so much below...\n    final View host = mView;\n    ...\n    int childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);\n    int childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);\n    ...\n    //measure\n    mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n    ...\n    //layout\n    mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());\n    ...\n    //draw\n    mView.draw(canvas);\n    ...\n  }\n  ```\n  <!-- more -->\n  \n  ```java\n  private static int getRootMeasureSpec(int windowSize, int rootDimension) {\n        int measureSpec;\n        switch (rootDimension) {\n\n        case ViewGroup.LayoutParams.MATCH_PARENT:\n            // Window can't resize. Force root view to be windowSize.\n            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);\n            break;\n        ...\n        }\n        return measureSpec;\n    }\n  ```\nView 绘制整体流程图如下\n\n![View绘制整体流程图](http://p1.bqimg.com/567571/a5aa47e56fd6434a.png)\n\n### measure源码分析\n\n结论:\n* measure的过程就是父View向子View递归调用view.measure方法 (measure中回调onMeasure方法)的过程\n\n* measure方法是 final的 只能重载onMeasure方法\n\n* 最顶层的DocerView的MeasureSpec由ViewRootImpl的getRootMeasureSpec方法提供 LayoutParams的参数为MATCH_PARENT specMode是EXACTLY，specSize为物理屏幕大小\n\n* 只要是ViewGroup的子类就必须要求LayoutParams继承子MarginLayoutParams 否则无法使用layout_margin参数\n\n* View的getMeasuredWidth()和getMeasuredHeight()方法来获取View测量的宽高，要必须保证这两个方法在onMeasure流程之后被调用才能返回有效值。\n\n\n\n![View measure过程](/View measure过程.png)\n\n```java\n/**\n * <p>\n * This is called to find out how big a view should be. The parent supplies constraint information in the width and height parameters.\n * </p>\n *\n * <p>\n * The actual measurement work of a view is performed in\n * {@link #onMeasure(int, int)}, called by this method. Therefore, only\n * {@link #onMeasure(int, int)} can and must be overridden by subclasses.\n * </p>\n *\n *\n * @param widthMeasureSpec Horizontal space requirements as imposed by the\n *        parent\n * @param heightMeasureSpec Vertical space requirements as imposed by the\n *        parent\n *\n * @see #onMeasure(int, int)\n */\n //没舍得删这些注释  感觉重要的事情都说了   为了计算整个View树的实际大小 设置实际的高和宽 每个子View都是根据父视图和自身决定实际宽高的 在onMeasure()方法中进行实际测量.传入widthMeasureSpec和heightMeasureSpec参数来表示了父View的规格 不但传入了模式 还传入了size 而对于DecorView来说 传入的模式一般为EXACTLY模式 size对应屏幕的宽高. 所以说子View的大小是父子View共同决定的\npublic final void measure(int widthMeasureSpec, int heightMeasureSpec) {\n\n               // measure ourselves, this should set the measured dimension flag back\n               onMeasure(widthMeasureSpec, heightMeasureSpec);\n   }\n```\n\nMeasureSpec内部类\n\nMeasureSpec是View的内部类 int型，由高2位规格模式specMode和低30位具体尺寸specSize组成 其中specMode只有三种\n* MeasureSpec.EXACTLY //确定模式，父View希望子View的大小是确定的，由specSize决定；\n* MeasureSpec.AT_MOST //最多模式，父View希望子View的大小最多是specSize指定的值；\n* MeasureSpec.UNSPECIFIED //未指定模式，父View完全依据子View的设计值来决定；\n\nonMeasure()方法\n\n```java\n    /**\n     * <p>\n     * Measure the view and its content to determine the measured width and the\n     * measured height. This method is invoked by {@link #measure(int, int)} and\n     * should be overridden by subclasses to provide accurate and efficient\n     * measurement of their contents.\n     * </p>\n     *\n     * <p>\n     * <strong>CONTRACT:</strong> When overriding this method, you\n     * <em>must</em> call {@link #setMeasuredDimension(int, int)} to store the\n     * measured width and height of this view. Failure to do so will trigger an\n     * <code>IllegalStateException</code>, thrown by\n     * {@link #measure(int, int)}. Calling the superclass'\n     * {@link #onMeasure(int, int)} is a valid use.\n     * </p>\n     *\n     * <p>\n     * The base class implementation of measure defaults to the background size,\n     * unless a larger size is allowed by the MeasureSpec. Subclasses should\n     * override {@link #onMeasure(int, int)} to provide better measurements of\n     * their content.\n     * </p>\n     *\n     * <p>\n     * If this method is overridden, it is the subclass's responsibility to make\n     * sure the measured height and width are at least the view's minimum height\n     * and width ({@link #getSuggestedMinimumHeight()} and\n     * {@link #getSuggestedMinimumWidth()}).\n     * </p>\n     *\n     * @param widthMeasureSpec horizontal space requirements as imposed by the parent.\n     *                         The requirements are encoded with\n     *                         {@link android.view.View.MeasureSpec}.\n     * @param heightMeasureSpec vertical space requirements as imposed by the parent.\n     *                         The requirements are encoded with\n     *                         {@link android.view.View.MeasureSpec}.\n     *\n     * @see #getMeasuredWidth()\n     * @see #getMeasuredHeight()\n     * @see #setMeasuredDimension(int, int)\n     * @see #getSuggestedMinimumHeight()\n     * @see #getSuggestedMinimumWidth()\n     * @see android.view.View.MeasureSpec#getMode(int)\n     * @see android.view.View.MeasureSpec#getSize(int)\n     */\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n    }\n```\ngetDefaultSize方法相关\n```java\n  public static int getDefaultSize(int size, int measureSpec) {\n    int result = size;\n    //通过measureSpec得到mode和size\n    int specMode = MeasureSpec.getMode(measureSpec);\n    int specSize = MeasureSpec.getSize(measureSpec);\n\n    switch (specMode) {\n    case MeasureSpec.UNSPECIFIED:\n        result = size;\n        break;\n    case MeasureSpec.AT_MOST:\n    case MeasureSpec.EXACTLY:\n        result = specSize;\n        break;\n    }\n    return result;\n  }\n\n  //最小宽度和高度由View的Background尺寸和View的minXXX共同决定\n  protected int getSuggestedMinimumHeight() {\n      return (mBackground == null) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());\n\n  }\n  protected int getSuggestedMinimumWidth() {\n      return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());\n  }\n```\nsetMeasuredDimension方法 对View的成员变量measuredWidth和measuredHeight变量赋值 也就是说该方法最终决定了View的大小\n```java\n  protected final void setMeasuredDimension(int measuredWidth, int measuredHeight) {\n      boolean optical = isLayoutModeOptical(this);\n      if (optical != isLayoutModeOptical(mParent)) {\n          Insets insets = getOpticalInsets();\n          int opticalWidth  = insets.left + insets.right;\n          int opticalHeight = insets.top  + insets.bottom;\n\n          measuredWidth  += optical ? opticalWidth  : -opticalWidth;\n          measuredHeight += optical ? opticalHeight : -opticalHeight;\n      }\n      setMeasuredDimensionRaw(measuredWidth, measuredHeight);\n  }\n\n  public boolean isLayoutRequested() {\n    return (mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT;\n  }\n\n  private void setMeasuredDimensionRaw(int measuredWidth, int measuredHeight) {\n    mMeasuredWidth = measuredWidth;\n    mMeasuredHeight = measuredHeight;\n\n    mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;\n  }\n```\n\n至此一次最基础的View的measure过程就完成了  但是由于View可以嵌套  所以measure是递归传递的所以ViewGroup中需要对其子类进行measure过程 measureChildren方法实质为循环调用measureChild方法\n\n而measureChild和measureChildWithMargins的区别是后者将margin和padding也作为了子视图的大小\n\n一下分析measureChildWithMargins方法\n```java\n  protected void measureChildWithMargins(View child,\n          int parentWidthMeasureSpec, int widthUsed,\n          int parentHeightMeasureSpec, int heightUsed) {\n      //获取当前子视图的LayoutParams\n      final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();\n      //设定子View的测量规格\n      final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\n              mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin\n                      + widthUsed, lp.width);\n      final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\n              mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin\n                      + heightUsed, lp.height);\n      //子view的继续调用\n      child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n  }\n\n  //在getChildMeasureSpec中通过父View和本身的模式共同决定当前View的size\n  public static int getChildMeasureSpec(int spec, int padding, int childDimension) {\n        //获取当前父View的mode和size\n        int specMode = MeasureSpec.getMode(spec);\n        int specSize = MeasureSpec.getSize(spec);\n        //获取父View的的剩余大小\n        int size = Math.max(0, specSize - padding);\n        //定义结果变量\n        int resultSize = 0;\n        int resultMode = 0;\n        //根据对应的mode做处理\n        //通过父View和本身的模式共同决定当前View的size\n        switch (specMode) {\n        // Parent has imposed an exact size on us\n        case MeasureSpec.EXACTLY:\n            if (childDimension >= 0) {\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size. So be it.\n                resultSize = size;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent has imposed a maximum size on us\n        case MeasureSpec.AT_MOST:\n            if (childDimension >= 0) {\n                // Child wants a specific size... so be it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size, but our size is not fixed.\n                // Constrain child to not be bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent asked to see how big we want to be\n        case MeasureSpec.UNSPECIFIED:\n            if (childDimension >= 0) {\n                // Child wants a specific size... let him have it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size... find out how big it should\n                // be\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size.... find out how\n                // big it should be\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            }\n            break;\n        }\n        //将size和mode整合为MeasureSpec模式后返回\n        return MeasureSpec.makeMeasureSpec(resultSize, resultMode);\n    }\n\n```\n\n### layout源码分析\nView layout整体流程与measure过程基本一样\n\n结论:\n* 需要根据ViewGroup本身的情况讨论 LinearLayout下会更看重子View的height和width 来安排对应位置 而RelativeLayout则更加关注子View的left right top bottom值 并且优先级高于width和height 甚至在部分自定义ViewGroup中 measure可能是无用的   直接使用layout方法来设置子View的位置也可以\n* ViewGroup需要实现自己的layout逻辑\n* layout_XXX中的各个熟悉都是针对子View的父ViewGroup的\n* 同样使用View的getWidth()和getHeight()方法来获取View测量的宽高 必须保证这两个方法在onLayout流程之后被调用才能返回有效值\n\n```java\n  /**\n     * Assign a size and position to a view and all of its\n     * descendants\n     *\n     * <p>This is the second phase of the layout mechanism.\n     * (The first is measuring). In this phase, each parent calls\n     * layout on all of its children to position them.\n     * This is typically done using the child measurements\n     * that were stored in the measure pass().</p>\n     *\n     * <p>Derived classes should not override this method.\n     * Derived classes with children should override\n     * onLayout. In that method, they should\n     * call layout on each of their children.</p>\n     *\n     * @param l Left position, relative to parent\n     * @param t Top position, relative to parent\n     * @param r Right position, relative to parent\n     * @param b Bottom position, relative to parent\n     */\n\n     //同样注解写的很好了  分派给他和他的所有的子视图大小和位置\n    @SuppressWarnings({\"unchecked\"})\n    public void layout(int l, int t, int r, int b) {\n        if ((mPrivateFlags3 & PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != 0) {\n            onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);\n            mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n        }\n         //调用setFrame方法把参数分别赋值于\n        int oldL = mLeft;\n        int oldT = mTop;\n        int oldB = mBottom;\n        int oldR = mRight;\n        //判断view的位置是否发生过变化 , 确定是否对当前view重新layout\n        boolean changed = isLayoutModeOptical(mParent) ?\n                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);\n\n\n        if (changed || (mPrivateFlags & PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) {\n            //调用onLayout\n            onLayout(changed, l, t, r, b);\n            mPrivateFlags &= ~PFLAG_LAYOUT_REQUIRED;\n            ListenerInfo li = mListenerInfo;\n            if (li != null && li.mOnLayoutChangeListeners != null) {\n                ArrayList<OnLayoutChangeListener> listenersCopy =\n                        (ArrayList<OnLayoutChangeListener>)li.mOnLayoutChangeListeners.clone();\n                int numListeners = listenersCopy.size();\n                for (int i = 0; i < numListeners; ++i) {\n                    listenersCopy.get(i).onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB);\n                }\n            }\n        }\n\n        mPrivateFlags &= ~PFLAG_FORCE_LAYOUT;\n        mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;\n    }\n```\n\nonLyayout方法\n```java\n  View中\n  protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n  }\n  ViewGroup中\n  protected abstract void onLayout(boolean changed,\n        int l, int t, int r, int b);\n```\n\n均是空方法  后面会就LinearLayout和RelativeLayout源码进行分析\n\n### draw源码分析\n\nView的draw流程图如下\n\n![Viewdraw](http://p1.bpimg.com/567571/e7b2c1005fdb70b2.png)\n\n结论:\n* View需要在子类中实现onDraw的过程\n* 在ViewGroup中 会调用其子View的方法 顺序与子view的添加顺序一致\n\n\ndraw的源码也很长 但是官方也给出给出了draw的过程\n```java\n  public void draw(Canvas canvas) {\n     ...\n     /*\n      * Draw traversal performs several drawing steps which must be executed\n      * in the appropriate order:\n      *\n      *      1. Draw the background\n      *      2. If necessary, save the canvas' layers to prepare for fading\n      *      3. Draw view's content\n      *      4. Draw children\n      *      5. If necessary, draw the fading edges and restore layers\n      *      6. Draw decorations (scrollbars for instance)\n      */\n\n     // Step 1, draw the background, if needed\n     ...\n     if (!dirtyOpaque) {\n         drawBackground(canvas);\n     }\n\n     // skip step 2 & 5 if possible (common case)\n     ...\n\n     // Step 2, save the canvas' layers\n     ...\n         if (drawTop) {\n             canvas.saveLayer(left, top, right, top + length, null, flags);\n         }\n     ...\n\n     // Step 3, draw the content\n     if (!dirtyOpaque) onDraw(canvas);\n\n     // Step 4, draw the children\n     dispatchDraw(canvas);\n\n     // Step 5, draw the fade effect and restore layers\n     ...\n     if (drawTop) {\n         matrix.setScale(1, fadeHeight * topFadeStrength);\n         matrix.postTranslate(left, top);\n         fade.setLocalMatrix(matrix);\n         p.setShader(fade);\n         canvas.drawRect(left, top, right, top + length, p);\n     }\n     ...\n\n     // Step 6, draw decorations (scrollbars)\n     onDrawScrollBars(canvas);\n     ...\n }\n```\n\n#### Step 1, draw the background, if needed\n```java\n  // Step 1, draw the background, if needed\n  //如果需要的话绘制背景\n\n  if (!dirtyOpaque) {\n      drawBackground(canvas);\n  }\n```\n\n```java\n  private void drawBackground(Canvas canvas) {\n\n    \t//通过xml中属性background或者代码中setBackGroundColor\\setBackgroundResource等方法赋值的背景drawable\n        final Drawable background = mBackground;\n        if (background == null) {\n            return;\n        }\n\n        //根据layout中确定的view位置来设置背景的绘制区域\n        setBackgroundBounds();\n\n\n        // 如果需要的话使用显示列表\n        //canvas.isHardwareAccelerated() 硬件加速判定\n        //硬件加速时会将图层缓存到GPU上 而不是重绘View的每一层\n        if (canvas.isHardwareAccelerated() && mAttachInfo != null\n                && mAttachInfo.mHardwareRenderer != null) {\n            mBackgroundRenderNode = getDrawableRenderNode(background, mBackgroundRenderNode);\n\n            final RenderNode renderNode = mBackgroundRenderNode;\n            if (renderNode != null && renderNode.isValid()) {\n                setBackgroundRenderNodeProperties(renderNode);\n                ((DisplayListCanvas) canvas).drawRenderNode(renderNode);\n                return;\n            }\n        }\n\n        final int scrollX = mScrollX;\n        final int scrollY = mScrollY;\n        //调用Drawable的draw方法来完成背景的绘制工作\n        if ((scrollX | scrollY) == 0) {\n            background.draw(canvas);\n        } else {\n            canvas.translate(scrollX, scrollY);\n            background.draw(canvas);\n            canvas.translate(-scrollX, -scrollY);\n        }\n    }\n\n\n    void setBackgroundBounds() {\n    if (mBackgroundSizeChanged && mBackground != null) {\n        mBackground.setBounds(0, 0,  mRight - mLeft, mBottom - mTop);\n        mBackgroundSizeChanged = false;\n        rebuildOutline();\n    }\n  }\n```\n\n\n#### Step 2, save the canvas' layers\n```java\n  // Step 2, save the canvas' layers\n  //保存绘制图层\n\n         if (drawTop) {\n             canvas.saveLayer(left, top, right, top + length, null, flags);\n         }\n\n```\n\n#### Step 3, draw the content\n```java\n  // Step 3, draw the content\n  //对View的内容进行绘制\n  if (!dirtyOpaque) onDraw(canvas);\n```\n```java\n  /**\n  * Implement this to do your drawing.\n  *\n  * @param canvas the canvas on which the background will be drawn\n  */\n  //onDraw也是空方法需要子类根据自身去实现相应的\n  protected void onDraw(Canvas canvas) {\n  }\n\n```\n\n#### Step 4, draw the children\n```java\n  // Step 4, draw the children\n  //绘制其子View\n  dispatchDraw(canvas);\n```\n\n```java\n  /**\n   * Called by draw to draw the child views. This may be overridden\n   * by derived classes to gain control just before its children are drawn\n   * (but after its own view has been drawn).\n   * @param canvas the canvas on which to draw the view\n   */\n  protected void dispatchDraw(Canvas canvas) {\n  //dispatchDraw同样空方法 与onDraw不同的是dispatchDraw在ViewGroup中被重写\n  }\n```\n\nViewGroup\n```java\n  //dispatchDraw方法中根据子View的不同情况 包括但不只包括该View是否显示 是否有进入或消失动画等进行了部分的调整\n  protected void dispatchDraw(Canvas canvas) {\n      ...\n        more |= drawChild(canvas, transientChild, drawingTime);\n      ...    \n  }\n\n  protected boolean drawChild(Canvas canvas, View child, long drawingTime) {\n    return child.draw(canvas, this, drawingTime);\n  }\n```\n#### Step 5, draw the fade effect and restore layers\n\n```java\n  // Step 5, draw the fade effect and restore layers\n  //绘制过度效果和恢复图层\n  if (drawTop) {\n      matrix.setScale(1, fadeHeight * topFadeStrength);\n      matrix.postTranslate(left, top);\n      fade.setLocalMatrix(matrix);\n      p.setShader(fade);\n      canvas.drawRect(left, top, right, top + length, p);\n  }\n```\n\n####  Step 6, draw decorations (scrollbars)\n```java\n  // Step 6, draw decorations (scrollbars)\n  //对滚动条进行绘制\n  onDrawScrollBars(canvas);\n```\n","slug":"View 绘制源码分析","published":1,"updated":"2017-02-03T09:51:37.000Z","_id":"ciypmndvs0000z3o98efkrcc3","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Android-View\"><a href=\"#Android-View\" class=\"headerlink\" title=\"Android View\"></a>Android View</h1><blockquote>\n<p>Android View框架相关  View的测量 布局 绘制过程<br>LinearLayout RelativeLayout实现源码分析</p>\n</blockquote>\n<h2 id=\"View的测量-布局-绘制过程\"><a href=\"#View的测量-布局-绘制过程\" class=\"headerlink\" title=\"View的测量 布局 绘制过程\"></a>View的测量 布局 绘制过程</h2><h3 id=\"测量之前的事情\"><a href=\"#测量之前的事情\" class=\"headerlink\" title=\"测量之前的事情\"></a>测量之前的事情</h3><p>View的整个绘制流程是开始于ViewRootImpl类的performTraversals方法(1k行)  根据相关设置来觉得十分要重新执行相关功能<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performTraversals</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// cache mView since it is used so much below...</span></div><div class=\"line\">  <span class=\"keyword\">final</span> View host = mView;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"keyword\">int</span> childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);</div><div class=\"line\">  <span class=\"keyword\">int</span> childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">//measure</span></div><div class=\"line\">  mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">//layout</span></div><div class=\"line\">  mView.layout(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mView.getMeasuredWidth(), mView.getMeasuredHeight());</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">//draw</span></div><div class=\"line\">  mView.draw(canvas);</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n  <a id=\"more\"></a>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getRootMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> windowSize, <span class=\"keyword\">int</span> rootDimension)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> measureSpec;</div><div class=\"line\">      <span class=\"keyword\">switch</span> (rootDimension) &#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> ViewGroup.LayoutParams.MATCH_PARENT:</div><div class=\"line\">          <span class=\"comment\">// Window can't resize. Force root view to be windowSize.</span></div><div class=\"line\">          measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">      ...</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> measureSpec;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>View 绘制整体流程图如下</p>\n<p><img src=\"http://p1.bqimg.com/567571/a5aa47e56fd6434a.png\" alt=\"View绘制整体流程图\"></p>\n<h3 id=\"measure源码分析\"><a href=\"#measure源码分析\" class=\"headerlink\" title=\"measure源码分析\"></a>measure源码分析</h3><p>结论:</p>\n<ul>\n<li><p>measure的过程就是父View向子View递归调用view.measure方法 (measure中回调onMeasure方法)的过程</p>\n</li>\n<li><p>measure方法是 final的 只能重载onMeasure方法</p>\n</li>\n<li><p>最顶层的DocerView的MeasureSpec由ViewRootImpl的getRootMeasureSpec方法提供 LayoutParams的参数为MATCH_PARENT specMode是EXACTLY，specSize为物理屏幕大小</p>\n</li>\n<li><p>只要是ViewGroup的子类就必须要求LayoutParams继承子MarginLayoutParams 否则无法使用layout_margin参数</p>\n</li>\n<li><p>View的getMeasuredWidth()和getMeasuredHeight()方法来获取View测量的宽高，要必须保证这两个方法在onMeasure流程之后被调用才能返回有效值。</p>\n</li>\n</ul>\n<p><img src=\"/View measure过程.png\" alt=\"View measure过程\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * This is called to find out how big a view should be. The parent supplies constraint information in the width and height parameters.</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * The actual measurement work of a view is performed in</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125;, called by this method. Therefore, only</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; can and must be overridden by subclasses.</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> widthMeasureSpec Horizontal space requirements as imposed by the</div><div class=\"line\"> *        parent</div><div class=\"line\"> * <span class=\"doctag\">@param</span> heightMeasureSpec Vertical space requirements as imposed by the</div><div class=\"line\"> *        parent</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #onMeasure(int, int)</div><div class=\"line\"> */</div><div class=\"line\"> <span class=\"comment\">//没舍得删这些注释  感觉重要的事情都说了   为了计算整个View树的实际大小 设置实际的高和宽 每个子View都是根据父视图和自身决定实际宽高的 在onMeasure()方法中进行实际测量.传入widthMeasureSpec和heightMeasureSpec参数来表示了父View的规格 不但传入了模式 还传入了size 而对于DecorView来说 传入的模式一般为EXACTLY模式 size对应屏幕的宽高. 所以说子View的大小是父子View共同决定的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">measure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"comment\">// measure ourselves, this should set the measured dimension flag back</span></div><div class=\"line\">               onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>MeasureSpec内部类</p>\n<p>MeasureSpec是View的内部类 int型，由高2位规格模式specMode和低30位具体尺寸specSize组成 其中specMode只有三种</p>\n<ul>\n<li>MeasureSpec.EXACTLY //确定模式，父View希望子View的大小是确定的，由specSize决定；</li>\n<li>MeasureSpec.AT_MOST //最多模式，父View希望子View的大小最多是specSize指定的值；</li>\n<li>MeasureSpec.UNSPECIFIED //未指定模式，父View完全依据子View的设计值来决定；</li>\n</ul>\n<p>onMeasure()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * Measure the view and its content to determine the measured width and the</div><div class=\"line\"> * measured height. This method is invoked by &#123;<span class=\"doctag\">@link</span> #measure(int, int)&#125; and</div><div class=\"line\"> * should be overridden by subclasses to provide accurate and efficient</div><div class=\"line\"> * measurement of their contents.</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * &lt;strong&gt;CONTRACT:&lt;/strong&gt; When overriding this method, you</div><div class=\"line\"> * &lt;em&gt;must&lt;/em&gt; call &#123;<span class=\"doctag\">@link</span> #setMeasuredDimension(int, int)&#125; to store the</div><div class=\"line\"> * measured width and height of this view. Failure to do so will trigger an</div><div class=\"line\"> * &lt;code&gt;IllegalStateException&lt;/code&gt;, thrown by</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #measure(int, int)&#125;. Calling the superclass'</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; is a valid use.</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * The base class implementation of measure defaults to the background size,</div><div class=\"line\"> * unless a larger size is allowed by the MeasureSpec. Subclasses should</div><div class=\"line\"> * override &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; to provide better measurements of</div><div class=\"line\"> * their content.</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * If this method is overridden, it is the subclass's responsibility to make</div><div class=\"line\"> * sure the measured height and width are at least the view's minimum height</div><div class=\"line\"> * and width (&#123;<span class=\"doctag\">@link</span> #getSuggestedMinimumHeight()&#125; and</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #getSuggestedMinimumWidth()&#125;).</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> widthMeasureSpec horizontal space requirements as imposed by the parent.</div><div class=\"line\"> *                         The requirements are encoded with</div><div class=\"line\"> *                         &#123;<span class=\"doctag\">@link</span> android.view.View.MeasureSpec&#125;.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> heightMeasureSpec vertical space requirements as imposed by the parent.</div><div class=\"line\"> *                         The requirements are encoded with</div><div class=\"line\"> *                         &#123;<span class=\"doctag\">@link</span> android.view.View.MeasureSpec&#125;.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #getMeasuredWidth()</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #getMeasuredHeight()</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #setMeasuredDimension(int, int)</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #getSuggestedMinimumHeight()</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #getSuggestedMinimumWidth()</div><div class=\"line\"> * <span class=\"doctag\">@see</span> android.view.View.MeasureSpec#getMode(int)</div><div class=\"line\"> * <span class=\"doctag\">@see</span> android.view.View.MeasureSpec#getSize(int)</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</div><div class=\"line\">            getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>getDefaultSize方法相关<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> result = size;</div><div class=\"line\">  <span class=\"comment\">//通过measureSpec得到mode和size</span></div><div class=\"line\">  <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class=\"line\">  <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">      result = size;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">  <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">      result = specSize;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//最小宽度和高度由View的Background尺寸和View的minXXX共同决定</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumHeight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumWidth</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>setMeasuredDimension方法 对View的成员变量measuredWidth和measuredHeight变量赋值 也就是说该方法最终决定了View的大小<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasuredDimension</span><span class=\"params\">(<span class=\"keyword\">int</span> measuredWidth, <span class=\"keyword\">int</span> measuredHeight)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> optical = isLayoutModeOptical(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (optical != isLayoutModeOptical(mParent)) &#123;</div><div class=\"line\">        Insets insets = getOpticalInsets();</div><div class=\"line\">        <span class=\"keyword\">int</span> opticalWidth  = insets.left + insets.right;</div><div class=\"line\">        <span class=\"keyword\">int</span> opticalHeight = insets.top  + insets.bottom;</div><div class=\"line\"></div><div class=\"line\">        measuredWidth  += optical ? opticalWidth  : -opticalWidth;</div><div class=\"line\">        measuredHeight += optical ? opticalHeight : -opticalHeight;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setMeasuredDimensionRaw(measuredWidth, measuredHeight);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLayoutRequested</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (mPrivateFlags &amp; PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasuredDimensionRaw</span><span class=\"params\">(<span class=\"keyword\">int</span> measuredWidth, <span class=\"keyword\">int</span> measuredHeight)</span> </span>&#123;</div><div class=\"line\">  mMeasuredWidth = measuredWidth;</div><div class=\"line\">  mMeasuredHeight = measuredHeight;</div><div class=\"line\"></div><div class=\"line\">  mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>至此一次最基础的View的measure过程就完成了  但是由于View可以嵌套  所以measure是递归传递的所以ViewGroup中需要对其子类进行measure过程 measureChildren方法实质为循环调用measureChild方法</p>\n<p>而measureChild和measureChildWithMargins的区别是后者将margin和padding也作为了子视图的大小</p>\n<p>一下分析measureChildWithMargins方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildWithMargins</span><span class=\"params\">(View child,</span></span></div><div class=\"line\">        <span class=\"keyword\">int</span> parentWidthMeasureSpec, <span class=\"keyword\">int</span> widthUsed,</div><div class=\"line\">        <span class=\"keyword\">int</span> parentHeightMeasureSpec, <span class=\"keyword\">int</span> heightUsed) &#123;</div><div class=\"line\">    <span class=\"comment\">//获取当前子视图的LayoutParams</span></div><div class=\"line\">    <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class=\"line\">    <span class=\"comment\">//设定子View的测量规格</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</div><div class=\"line\">            mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin</div><div class=\"line\">                    + widthUsed, lp.width);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</div><div class=\"line\">            mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin</div><div class=\"line\">                    + heightUsed, lp.height);</div><div class=\"line\">    <span class=\"comment\">//子view的继续调用</span></div><div class=\"line\">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//在getChildMeasureSpec中通过父View和本身的模式共同决定当前View的size</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec, <span class=\"keyword\">int</span> padding, <span class=\"keyword\">int</span> childDimension)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//获取当前父View的mode和size</span></div><div class=\"line\">      <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);</div><div class=\"line\">      <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</div><div class=\"line\">      <span class=\"comment\">//获取父View的的剩余大小</span></div><div class=\"line\">      <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>, specSize - padding);</div><div class=\"line\">      <span class=\"comment\">//定义结果变量</span></div><div class=\"line\">      <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"comment\">//根据对应的mode做处理</span></div><div class=\"line\">      <span class=\"comment\">//通过父View和本身的模式共同决定当前View的size</span></div><div class=\"line\">      <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">      <span class=\"comment\">// Parent has imposed an exact size on us</span></div><div class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              resultSize = childDimension;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to be our size. So be it.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to determine its own size. It can't be</span></div><div class=\"line\">              <span class=\"comment\">// bigger than us.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Parent has imposed a maximum size on us</span></div><div class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants a specific size... so be it</span></div><div class=\"line\">              resultSize = childDimension;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to be our size, but our size is not fixed.</span></div><div class=\"line\">              <span class=\"comment\">// Constrain child to not be bigger than us.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to determine its own size. It can't be</span></div><div class=\"line\">              <span class=\"comment\">// bigger than us.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Parent asked to see how big we want to be</span></div><div class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants a specific size... let him have it</span></div><div class=\"line\">              resultSize = childDimension;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to be our size... find out how big it should</span></div><div class=\"line\">              <span class=\"comment\">// be</span></div><div class=\"line\">              resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</div><div class=\"line\">              resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to determine its own size.... find out how</span></div><div class=\"line\">              <span class=\"comment\">// big it should be</span></div><div class=\"line\">              resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</div><div class=\"line\">              resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">//将size和mode整合为MeasureSpec模式后返回</span></div><div class=\"line\">      <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"layout源码分析\"><a href=\"#layout源码分析\" class=\"headerlink\" title=\"layout源码分析\"></a>layout源码分析</h3><p>View layout整体流程与measure过程基本一样</p>\n<p>结论:</p>\n<ul>\n<li>需要根据ViewGroup本身的情况讨论 LinearLayout下会更看重子View的height和width 来安排对应位置 而RelativeLayout则更加关注子View的left right top bottom值 并且优先级高于width和height 甚至在部分自定义ViewGroup中 measure可能是无用的   直接使用layout方法来设置子View的位置也可以</li>\n<li>ViewGroup需要实现自己的layout逻辑</li>\n<li>layout_XXX中的各个熟悉都是针对子View的父ViewGroup的</li>\n<li>同样使用View的getWidth()和getHeight()方法来获取View测量的宽高 必须保证这两个方法在onLayout流程之后被调用才能返回有效值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">   * Assign a size and position to a view and all of its</div><div class=\"line\">   * descendants</div><div class=\"line\">   *</div><div class=\"line\">   * &lt;p&gt;This is the second phase of the layout mechanism.</div><div class=\"line\">   * (The first is measuring). In this phase, each parent calls</div><div class=\"line\">   * layout on all of its children to position them.</div><div class=\"line\">   * This is typically done using the child measurements</div><div class=\"line\">   * that were stored in the measure pass().&lt;/p&gt;</div><div class=\"line\">   *</div><div class=\"line\">   * &lt;p&gt;Derived classes should not override this method.</div><div class=\"line\">   * Derived classes with children should override</div><div class=\"line\">   * onLayout. In that method, they should</div><div class=\"line\">   * call layout on each of their children.&lt;/p&gt;</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> l Left position, relative to parent</div><div class=\"line\">   * <span class=\"doctag\">@param</span> t Top position, relative to parent</div><div class=\"line\">   * <span class=\"doctag\">@param</span> r Right position, relative to parent</div><div class=\"line\">   * <span class=\"doctag\">@param</span> b Bottom position, relative to parent</div><div class=\"line\">   */</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//同样注解写的很好了  分派给他和他的所有的子视图大小和位置</span></div><div class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"unchecked\"</span>&#125;)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</div><div class=\"line\">          mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</div><div class=\"line\">      &#125;</div><div class=\"line\">       <span class=\"comment\">//调用setFrame方法把参数分别赋值于</span></div><div class=\"line\">      <span class=\"keyword\">int</span> oldL = mLeft;</div><div class=\"line\">      <span class=\"keyword\">int</span> oldT = mTop;</div><div class=\"line\">      <span class=\"keyword\">int</span> oldB = mBottom;</div><div class=\"line\">      <span class=\"keyword\">int</span> oldR = mRight;</div><div class=\"line\">      <span class=\"comment\">//判断view的位置是否发生过变化 , 确定是否对当前view重新layout</span></div><div class=\"line\">      <span class=\"keyword\">boolean</span> changed = isLayoutModeOptical(mParent) ?</div><div class=\"line\">              setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</div><div class=\"line\">          <span class=\"comment\">//调用onLayout</span></div><div class=\"line\">          onLayout(changed, l, t, r, b);</div><div class=\"line\">          mPrivateFlags &amp;= ~PFLAG_LAYOUT_REQUIRED;</div><div class=\"line\">          ListenerInfo li = mListenerInfo;</div><div class=\"line\">          <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnLayoutChangeListeners != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =</div><div class=\"line\">                      (ArrayList&lt;OnLayoutChangeListener&gt;)li.mOnLayoutChangeListeners.clone();</div><div class=\"line\">              <span class=\"keyword\">int</span> numListeners = listenersCopy.size();</div><div class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numListeners; ++i) &#123;</div><div class=\"line\">                  listenersCopy.get(i).onLayoutChange(<span class=\"keyword\">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      mPrivateFlags &amp;= ~PFLAG_FORCE_LAYOUT;</div><div class=\"line\">      mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>onLyayout方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">View中</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">ViewGroup中</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed,</span></span></div><div class=\"line\">      <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b);</div></pre></td></tr></table></figure></p>\n<p>均是空方法  后面会就LinearLayout和RelativeLayout源码进行分析</p>\n<h3 id=\"draw源码分析\"><a href=\"#draw源码分析\" class=\"headerlink\" title=\"draw源码分析\"></a>draw源码分析</h3><p>View的draw流程图如下</p>\n<p><img src=\"http://p1.bpimg.com/567571/e7b2c1005fdb70b2.png\" alt=\"Viewdraw\"></p>\n<p>结论:</p>\n<ul>\n<li>View需要在子类中实现onDraw的过程</li>\n<li>在ViewGroup中 会调用其子View的方法 顺序与子view的添加顺序一致</li>\n</ul>\n<p>draw的源码也很长 但是官方也给出给出了draw的过程<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Draw traversal performs several drawing steps which must be executed</div><div class=\"line\">     * in the appropriate order:</div><div class=\"line\">     *</div><div class=\"line\">     *      1. Draw the background</div><div class=\"line\">     *      2. If necessary, save the canvas' layers to prepare for fading</div><div class=\"line\">     *      3. Draw view's content</div><div class=\"line\">     *      4. Draw children</div><div class=\"line\">     *      5. If necessary, draw the fading edges and restore layers</div><div class=\"line\">     *      6. Draw decorations (scrollbars for instance)</div><div class=\"line\">     */</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 1, draw the background, if needed</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> (!dirtyOpaque) &#123;</div><div class=\"line\">        drawBackground(canvas);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// skip step 2 &amp; 5 if possible (common case)</span></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 2, save the canvas' layers</span></div><div class=\"line\">    ...</div><div class=\"line\">        <span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">            canvas.saveLayer(left, top, right, top + length, <span class=\"keyword\">null</span>, flags);</div><div class=\"line\">        &#125;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 3, draw the content</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!dirtyOpaque) onDraw(canvas);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 4, draw the children</span></div><div class=\"line\">    dispatchDraw(canvas);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 5, draw the fade effect and restore layers</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">        matrix.setScale(<span class=\"number\">1</span>, fadeHeight * topFadeStrength);</div><div class=\"line\">        matrix.postTranslate(left, top);</div><div class=\"line\">        fade.setLocalMatrix(matrix);</div><div class=\"line\">        p.setShader(fade);</div><div class=\"line\">        canvas.drawRect(left, top, right, top + length, p);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 6, draw decorations (scrollbars)</span></div><div class=\"line\">    onDrawScrollBars(canvas);</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Step-1-draw-the-background-if-needed\"><a href=\"#Step-1-draw-the-background-if-needed\" class=\"headerlink\" title=\"Step 1, draw the background, if needed\"></a>Step 1, draw the background, if needed</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 1, draw the background, if needed</span></div><div class=\"line\"><span class=\"comment\">//如果需要的话绘制背景</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (!dirtyOpaque) &#123;</div><div class=\"line\">    drawBackground(canvas);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">drawBackground</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  \t<span class=\"comment\">//通过xml中属性background或者代码中setBackGroundColor\\setBackgroundResource等方法赋值的背景drawable</span></div><div class=\"line\">      <span class=\"keyword\">final</span> Drawable background = mBackground;</div><div class=\"line\">      <span class=\"keyword\">if</span> (background == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//根据layout中确定的view位置来设置背景的绘制区域</span></div><div class=\"line\">      setBackgroundBounds();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 如果需要的话使用显示列表</span></div><div class=\"line\">      <span class=\"comment\">//canvas.isHardwareAccelerated() 硬件加速判定</span></div><div class=\"line\">      <span class=\"comment\">//硬件加速时会将图层缓存到GPU上 而不是重绘View的每一层</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (canvas.isHardwareAccelerated() &amp;&amp; mAttachInfo != <span class=\"keyword\">null</span></div><div class=\"line\">              &amp;&amp; mAttachInfo.mHardwareRenderer != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          mBackgroundRenderNode = getDrawableRenderNode(background, mBackgroundRenderNode);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">final</span> RenderNode renderNode = mBackgroundRenderNode;</div><div class=\"line\">          <span class=\"keyword\">if</span> (renderNode != <span class=\"keyword\">null</span> &amp;&amp; renderNode.isValid()) &#123;</div><div class=\"line\">              setBackgroundRenderNodeProperties(renderNode);</div><div class=\"line\">              ((DisplayListCanvas) canvas).drawRenderNode(renderNode);</div><div class=\"line\">              <span class=\"keyword\">return</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrollX = mScrollX;</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrollY = mScrollY;</div><div class=\"line\">      <span class=\"comment\">//调用Drawable的draw方法来完成背景的绘制工作</span></div><div class=\"line\">      <span class=\"keyword\">if</span> ((scrollX | scrollY) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          background.draw(canvas);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          canvas.translate(scrollX, scrollY);</div><div class=\"line\">          background.draw(canvas);</div><div class=\"line\">          canvas.translate(-scrollX, -scrollY);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setBackgroundBounds</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mBackgroundSizeChanged &amp;&amp; mBackground != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      mBackground.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>,  mRight - mLeft, mBottom - mTop);</div><div class=\"line\">      mBackgroundSizeChanged = <span class=\"keyword\">false</span>;</div><div class=\"line\">      rebuildOutline();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Step-2-save-the-canvas’-layers\"><a href=\"#Step-2-save-the-canvas’-layers\" class=\"headerlink\" title=\"Step 2, save the canvas’ layers\"></a>Step 2, save the canvas’ layers</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 2, save the canvas' layers</span></div><div class=\"line\"><span class=\"comment\">//保存绘制图层</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">           canvas.saveLayer(left, top, right, top + length, <span class=\"keyword\">null</span>, flags);</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Step-3-draw-the-content\"><a href=\"#Step-3-draw-the-content\" class=\"headerlink\" title=\"Step 3, draw the content\"></a>Step 3, draw the content</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 3, draw the content</span></div><div class=\"line\"><span class=\"comment\">//对View的内容进行绘制</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!dirtyOpaque) onDraw(canvas);</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* Implement this to do your drawing.</div><div class=\"line\">*</div><div class=\"line\">* <span class=\"doctag\">@param</span> canvas the canvas on which the background will be drawn</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"comment\">//onDraw也是空方法需要子类根据自身去实现相应的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Step-4-draw-the-children\"><a href=\"#Step-4-draw-the-children\" class=\"headerlink\" title=\"Step 4, draw the children\"></a>Step 4, draw the children</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 4, draw the children</span></div><div class=\"line\"><span class=\"comment\">//绘制其子View</span></div><div class=\"line\">dispatchDraw(canvas);</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Called by draw to draw the child views. This may be overridden</div><div class=\"line\"> * by derived classes to gain control just before its children are drawn</div><div class=\"line\"> * (but after its own view has been drawn).</div><div class=\"line\"> * <span class=\"doctag\">@param</span> canvas the canvas on which to draw the view</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//dispatchDraw同样空方法 与onDraw不同的是dispatchDraw在ViewGroup中被重写</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ViewGroup<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//dispatchDraw方法中根据子View的不同情况 包括但不只包括该View是否显示 是否有进入或消失动画等进行了部分的调整</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">      more |= drawChild(canvas, transientChild, drawingTime);</div><div class=\"line\">    ...    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">drawChild</span><span class=\"params\">(Canvas canvas, View child, <span class=\"keyword\">long</span> drawingTime)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> child.draw(canvas, <span class=\"keyword\">this</span>, drawingTime);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Step-5-draw-the-fade-effect-and-restore-layers\"><a href=\"#Step-5-draw-the-fade-effect-and-restore-layers\" class=\"headerlink\" title=\"Step 5, draw the fade effect and restore layers\"></a>Step 5, draw the fade effect and restore layers</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 5, draw the fade effect and restore layers</span></div><div class=\"line\"><span class=\"comment\">//绘制过度效果和恢复图层</span></div><div class=\"line\"><span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">    matrix.setScale(<span class=\"number\">1</span>, fadeHeight * topFadeStrength);</div><div class=\"line\">    matrix.postTranslate(left, top);</div><div class=\"line\">    fade.setLocalMatrix(matrix);</div><div class=\"line\">    p.setShader(fade);</div><div class=\"line\">    canvas.drawRect(left, top, right, top + length, p);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Step-6-draw-decorations-scrollbars\"><a href=\"#Step-6-draw-decorations-scrollbars\" class=\"headerlink\" title=\"Step 6, draw decorations (scrollbars)\"></a>Step 6, draw decorations (scrollbars)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 6, draw decorations (scrollbars)</span></div><div class=\"line\"><span class=\"comment\">//对滚动条进行绘制</span></div><div class=\"line\">onDrawScrollBars(canvas);</div></pre></td></tr></table></figure>\n","excerpt":"<h1 id=\"Android-View\"><a href=\"#Android-View\" class=\"headerlink\" title=\"Android View\"></a>Android View</h1><blockquote>\n<p>Android View框架相关  View的测量 布局 绘制过程<br>LinearLayout RelativeLayout实现源码分析</p>\n</blockquote>\n<h2 id=\"View的测量-布局-绘制过程\"><a href=\"#View的测量-布局-绘制过程\" class=\"headerlink\" title=\"View的测量 布局 绘制过程\"></a>View的测量 布局 绘制过程</h2><h3 id=\"测量之前的事情\"><a href=\"#测量之前的事情\" class=\"headerlink\" title=\"测量之前的事情\"></a>测量之前的事情</h3><p>View的整个绘制流程是开始于ViewRootImpl类的performTraversals方法(1k行)  根据相关设置来觉得十分要重新执行相关功能<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performTraversals</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// cache mView since it is used so much below...</span></div><div class=\"line\">  <span class=\"keyword\">final</span> View host = mView;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"keyword\">int</span> childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);</div><div class=\"line\">  <span class=\"keyword\">int</span> childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">//measure</span></div><div class=\"line\">  mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">//layout</span></div><div class=\"line\">  mView.layout(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mView.getMeasuredWidth(), mView.getMeasuredHeight());</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">//draw</span></div><div class=\"line\">  mView.draw(canvas);</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getRootMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> windowSize, <span class=\"keyword\">int</span> rootDimension)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> measureSpec;</div><div class=\"line\">      <span class=\"keyword\">switch</span> (rootDimension) &#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> ViewGroup.LayoutParams.MATCH_PARENT:</div><div class=\"line\">          <span class=\"comment\">// Window can't resize. Force root view to be windowSize.</span></div><div class=\"line\">          measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">      ...</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> measureSpec;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>View 绘制整体流程图如下</p>\n<p><img src=\"http://p1.bqimg.com/567571/a5aa47e56fd6434a.png\" alt=\"View绘制整体流程图\"></p>\n<h3 id=\"measure源码分析\"><a href=\"#measure源码分析\" class=\"headerlink\" title=\"measure源码分析\"></a>measure源码分析</h3><p>结论:</p>\n<ul>\n<li><p>measure的过程就是父View向子View递归调用view.measure方法 (measure中回调onMeasure方法)的过程</p>\n</li>\n<li><p>measure方法是 final的 只能重载onMeasure方法</p>\n</li>\n<li><p>最顶层的DocerView的MeasureSpec由ViewRootImpl的getRootMeasureSpec方法提供 LayoutParams的参数为MATCH_PARENT specMode是EXACTLY，specSize为物理屏幕大小</p>\n</li>\n<li><p>只要是ViewGroup的子类就必须要求LayoutParams继承子MarginLayoutParams 否则无法使用layout_margin参数</p>\n</li>\n<li><p>View的getMeasuredWidth()和getMeasuredHeight()方法来获取View测量的宽高，要必须保证这两个方法在onMeasure流程之后被调用才能返回有效值。</p>\n</li>\n</ul>\n<p><img src=\"/View measure过程.png\" alt=\"View measure过程\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * This is called to find out how big a view should be. The parent supplies constraint information in the width and height parameters.</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * The actual measurement work of a view is performed in</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125;, called by this method. Therefore, only</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; can and must be overridden by subclasses.</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> widthMeasureSpec Horizontal space requirements as imposed by the</div><div class=\"line\"> *        parent</div><div class=\"line\"> * <span class=\"doctag\">@param</span> heightMeasureSpec Vertical space requirements as imposed by the</div><div class=\"line\"> *        parent</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #onMeasure(int, int)</div><div class=\"line\"> */</span></div><div class=\"line\"> <span class=\"comment\">//没舍得删这些注释  感觉重要的事情都说了   为了计算整个View树的实际大小 设置实际的高和宽 每个子View都是根据父视图和自身决定实际宽高的 在onMeasure()方法中进行实际测量.传入widthMeasureSpec和heightMeasureSpec参数来表示了父View的规格 不但传入了模式 还传入了size 而对于DecorView来说 传入的模式一般为EXACTLY模式 size对应屏幕的宽高. 所以说子View的大小是父子View共同决定的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">measure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"comment\">// measure ourselves, this should set the measured dimension flag back</span></div><div class=\"line\">               onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>MeasureSpec内部类</p>\n<p>MeasureSpec是View的内部类 int型，由高2位规格模式specMode和低30位具体尺寸specSize组成 其中specMode只有三种</p>\n<ul>\n<li>MeasureSpec.EXACTLY //确定模式，父View希望子View的大小是确定的，由specSize决定；</li>\n<li>MeasureSpec.AT_MOST //最多模式，父View希望子View的大小最多是specSize指定的值；</li>\n<li>MeasureSpec.UNSPECIFIED //未指定模式，父View完全依据子View的设计值来决定；</li>\n</ul>\n<p>onMeasure()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * Measure the view and its content to determine the measured width and the</div><div class=\"line\"> * measured height. This method is invoked by &#123;<span class=\"doctag\">@link</span> #measure(int, int)&#125; and</div><div class=\"line\"> * should be overridden by subclasses to provide accurate and efficient</div><div class=\"line\"> * measurement of their contents.</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * &lt;strong&gt;CONTRACT:&lt;/strong&gt; When overriding this method, you</div><div class=\"line\"> * &lt;em&gt;must&lt;/em&gt; call &#123;<span class=\"doctag\">@link</span> #setMeasuredDimension(int, int)&#125; to store the</div><div class=\"line\"> * measured width and height of this view. Failure to do so will trigger an</div><div class=\"line\"> * &lt;code&gt;IllegalStateException&lt;/code&gt;, thrown by</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #measure(int, int)&#125;. Calling the superclass'</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; is a valid use.</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * The base class implementation of measure defaults to the background size,</div><div class=\"line\"> * unless a larger size is allowed by the MeasureSpec. Subclasses should</div><div class=\"line\"> * override &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; to provide better measurements of</div><div class=\"line\"> * their content.</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * If this method is overridden, it is the subclass's responsibility to make</div><div class=\"line\"> * sure the measured height and width are at least the view's minimum height</div><div class=\"line\"> * and width (&#123;<span class=\"doctag\">@link</span> #getSuggestedMinimumHeight()&#125; and</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #getSuggestedMinimumWidth()&#125;).</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> widthMeasureSpec horizontal space requirements as imposed by the parent.</div><div class=\"line\"> *                         The requirements are encoded with</div><div class=\"line\"> *                         &#123;<span class=\"doctag\">@link</span> android.view.View.MeasureSpec&#125;.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> heightMeasureSpec vertical space requirements as imposed by the parent.</div><div class=\"line\"> *                         The requirements are encoded with</div><div class=\"line\"> *                         &#123;<span class=\"doctag\">@link</span> android.view.View.MeasureSpec&#125;.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #getMeasuredWidth()</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #getMeasuredHeight()</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #setMeasuredDimension(int, int)</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #getSuggestedMinimumHeight()</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #getSuggestedMinimumWidth()</div><div class=\"line\"> * <span class=\"doctag\">@see</span> android.view.View.MeasureSpec#getMode(int)</div><div class=\"line\"> * <span class=\"doctag\">@see</span> android.view.View.MeasureSpec#getSize(int)</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</div><div class=\"line\">            getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>getDefaultSize方法相关<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> result = size;</div><div class=\"line\">  <span class=\"comment\">//通过measureSpec得到mode和size</span></div><div class=\"line\">  <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class=\"line\">  <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">      result = size;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">  <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">      result = specSize;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//最小宽度和高度由View的Background尺寸和View的minXXX共同决定</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumHeight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumWidth</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>setMeasuredDimension方法 对View的成员变量measuredWidth和measuredHeight变量赋值 也就是说该方法最终决定了View的大小<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasuredDimension</span><span class=\"params\">(<span class=\"keyword\">int</span> measuredWidth, <span class=\"keyword\">int</span> measuredHeight)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> optical = isLayoutModeOptical(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (optical != isLayoutModeOptical(mParent)) &#123;</div><div class=\"line\">        Insets insets = getOpticalInsets();</div><div class=\"line\">        <span class=\"keyword\">int</span> opticalWidth  = insets.left + insets.right;</div><div class=\"line\">        <span class=\"keyword\">int</span> opticalHeight = insets.top  + insets.bottom;</div><div class=\"line\"></div><div class=\"line\">        measuredWidth  += optical ? opticalWidth  : -opticalWidth;</div><div class=\"line\">        measuredHeight += optical ? opticalHeight : -opticalHeight;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setMeasuredDimensionRaw(measuredWidth, measuredHeight);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLayoutRequested</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (mPrivateFlags &amp; PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasuredDimensionRaw</span><span class=\"params\">(<span class=\"keyword\">int</span> measuredWidth, <span class=\"keyword\">int</span> measuredHeight)</span> </span>&#123;</div><div class=\"line\">  mMeasuredWidth = measuredWidth;</div><div class=\"line\">  mMeasuredHeight = measuredHeight;</div><div class=\"line\"></div><div class=\"line\">  mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>至此一次最基础的View的measure过程就完成了  但是由于View可以嵌套  所以measure是递归传递的所以ViewGroup中需要对其子类进行measure过程 measureChildren方法实质为循环调用measureChild方法</p>\n<p>而measureChild和measureChildWithMargins的区别是后者将margin和padding也作为了子视图的大小</p>\n<p>一下分析measureChildWithMargins方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildWithMargins</span><span class=\"params\">(View child,</div><div class=\"line\">        <span class=\"keyword\">int</span> parentWidthMeasureSpec, <span class=\"keyword\">int</span> widthUsed,</div><div class=\"line\">        <span class=\"keyword\">int</span> parentHeightMeasureSpec, <span class=\"keyword\">int</span> heightUsed)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//获取当前子视图的LayoutParams</span></div><div class=\"line\">    <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class=\"line\">    <span class=\"comment\">//设定子View的测量规格</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</div><div class=\"line\">            mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin</div><div class=\"line\">                    + widthUsed, lp.width);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</div><div class=\"line\">            mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin</div><div class=\"line\">                    + heightUsed, lp.height);</div><div class=\"line\">    <span class=\"comment\">//子view的继续调用</span></div><div class=\"line\">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//在getChildMeasureSpec中通过父View和本身的模式共同决定当前View的size</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec, <span class=\"keyword\">int</span> padding, <span class=\"keyword\">int</span> childDimension)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//获取当前父View的mode和size</span></div><div class=\"line\">      <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);</div><div class=\"line\">      <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</div><div class=\"line\">      <span class=\"comment\">//获取父View的的剩余大小</span></div><div class=\"line\">      <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>, specSize - padding);</div><div class=\"line\">      <span class=\"comment\">//定义结果变量</span></div><div class=\"line\">      <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"comment\">//根据对应的mode做处理</span></div><div class=\"line\">      <span class=\"comment\">//通过父View和本身的模式共同决定当前View的size</span></div><div class=\"line\">      <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">      <span class=\"comment\">// Parent has imposed an exact size on us</span></div><div class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              resultSize = childDimension;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to be our size. So be it.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to determine its own size. It can't be</span></div><div class=\"line\">              <span class=\"comment\">// bigger than us.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Parent has imposed a maximum size on us</span></div><div class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants a specific size... so be it</span></div><div class=\"line\">              resultSize = childDimension;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to be our size, but our size is not fixed.</span></div><div class=\"line\">              <span class=\"comment\">// Constrain child to not be bigger than us.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to determine its own size. It can't be</span></div><div class=\"line\">              <span class=\"comment\">// bigger than us.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Parent asked to see how big we want to be</span></div><div class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants a specific size... let him have it</span></div><div class=\"line\">              resultSize = childDimension;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to be our size... find out how big it should</span></div><div class=\"line\">              <span class=\"comment\">// be</span></div><div class=\"line\">              resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</div><div class=\"line\">              resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to determine its own size.... find out how</span></div><div class=\"line\">              <span class=\"comment\">// big it should be</span></div><div class=\"line\">              resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</div><div class=\"line\">              resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">//将size和mode整合为MeasureSpec模式后返回</span></div><div class=\"line\">      <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"layout源码分析\"><a href=\"#layout源码分析\" class=\"headerlink\" title=\"layout源码分析\"></a>layout源码分析</h3><p>View layout整体流程与measure过程基本一样</p>\n<p>结论:</p>\n<ul>\n<li>需要根据ViewGroup本身的情况讨论 LinearLayout下会更看重子View的height和width 来安排对应位置 而RelativeLayout则更加关注子View的left right top bottom值 并且优先级高于width和height 甚至在部分自定义ViewGroup中 measure可能是无用的   直接使用layout方法来设置子View的位置也可以</li>\n<li>ViewGroup需要实现自己的layout逻辑</li>\n<li>layout_XXX中的各个熟悉都是针对子View的父ViewGroup的</li>\n<li>同样使用View的getWidth()和getHeight()方法来获取View测量的宽高 必须保证这两个方法在onLayout流程之后被调用才能返回有效值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">   * Assign a size and position to a view and all of its</div><div class=\"line\">   * descendants</div><div class=\"line\">   *</div><div class=\"line\">   * &lt;p&gt;This is the second phase of the layout mechanism.</div><div class=\"line\">   * (The first is measuring). In this phase, each parent calls</div><div class=\"line\">   * layout on all of its children to position them.</div><div class=\"line\">   * This is typically done using the child measurements</div><div class=\"line\">   * that were stored in the measure pass().&lt;/p&gt;</div><div class=\"line\">   *</div><div class=\"line\">   * &lt;p&gt;Derived classes should not override this method.</div><div class=\"line\">   * Derived classes with children should override</div><div class=\"line\">   * onLayout. In that method, they should</div><div class=\"line\">   * call layout on each of their children.&lt;/p&gt;</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> l Left position, relative to parent</div><div class=\"line\">   * <span class=\"doctag\">@param</span> t Top position, relative to parent</div><div class=\"line\">   * <span class=\"doctag\">@param</span> r Right position, relative to parent</div><div class=\"line\">   * <span class=\"doctag\">@param</span> b Bottom position, relative to parent</div><div class=\"line\">   */</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//同样注解写的很好了  分派给他和他的所有的子视图大小和位置</span></div><div class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"unchecked\"</span>&#125;)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</div><div class=\"line\">          mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</div><div class=\"line\">      &#125;</div><div class=\"line\">       <span class=\"comment\">//调用setFrame方法把参数分别赋值于</span></div><div class=\"line\">      <span class=\"keyword\">int</span> oldL = mLeft;</div><div class=\"line\">      <span class=\"keyword\">int</span> oldT = mTop;</div><div class=\"line\">      <span class=\"keyword\">int</span> oldB = mBottom;</div><div class=\"line\">      <span class=\"keyword\">int</span> oldR = mRight;</div><div class=\"line\">      <span class=\"comment\">//判断view的位置是否发生过变化 , 确定是否对当前view重新layout</span></div><div class=\"line\">      <span class=\"keyword\">boolean</span> changed = isLayoutModeOptical(mParent) ?</div><div class=\"line\">              setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</div><div class=\"line\">          <span class=\"comment\">//调用onLayout</span></div><div class=\"line\">          onLayout(changed, l, t, r, b);</div><div class=\"line\">          mPrivateFlags &amp;= ~PFLAG_LAYOUT_REQUIRED;</div><div class=\"line\">          ListenerInfo li = mListenerInfo;</div><div class=\"line\">          <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnLayoutChangeListeners != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =</div><div class=\"line\">                      (ArrayList&lt;OnLayoutChangeListener&gt;)li.mOnLayoutChangeListeners.clone();</div><div class=\"line\">              <span class=\"keyword\">int</span> numListeners = listenersCopy.size();</div><div class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numListeners; ++i) &#123;</div><div class=\"line\">                  listenersCopy.get(i).onLayoutChange(<span class=\"keyword\">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      mPrivateFlags &amp;= ~PFLAG_FORCE_LAYOUT;</div><div class=\"line\">      mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>onLyayout方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">View中</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">ViewGroup中</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed,</div><div class=\"line\">      <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span></span>;</div></pre></td></tr></table></figure></p>\n<p>均是空方法  后面会就LinearLayout和RelativeLayout源码进行分析</p>\n<h3 id=\"draw源码分析\"><a href=\"#draw源码分析\" class=\"headerlink\" title=\"draw源码分析\"></a>draw源码分析</h3><p>View的draw流程图如下</p>\n<p><img src=\"http://p1.bpimg.com/567571/e7b2c1005fdb70b2.png\" alt=\"Viewdraw\"></p>\n<p>结论:</p>\n<ul>\n<li>View需要在子类中实现onDraw的过程</li>\n<li>在ViewGroup中 会调用其子View的方法 顺序与子view的添加顺序一致</li>\n</ul>\n<p>draw的源码也很长 但是官方也给出给出了draw的过程<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Draw traversal performs several drawing steps which must be executed</div><div class=\"line\">     * in the appropriate order:</div><div class=\"line\">     *</div><div class=\"line\">     *      1. Draw the background</div><div class=\"line\">     *      2. If necessary, save the canvas' layers to prepare for fading</div><div class=\"line\">     *      3. Draw view's content</div><div class=\"line\">     *      4. Draw children</div><div class=\"line\">     *      5. If necessary, draw the fading edges and restore layers</div><div class=\"line\">     *      6. Draw decorations (scrollbars for instance)</div><div class=\"line\">     */</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 1, draw the background, if needed</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> (!dirtyOpaque) &#123;</div><div class=\"line\">        drawBackground(canvas);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// skip step 2 &amp; 5 if possible (common case)</span></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 2, save the canvas' layers</span></div><div class=\"line\">    ...</div><div class=\"line\">        <span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">            canvas.saveLayer(left, top, right, top + length, <span class=\"keyword\">null</span>, flags);</div><div class=\"line\">        &#125;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 3, draw the content</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!dirtyOpaque) onDraw(canvas);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 4, draw the children</span></div><div class=\"line\">    dispatchDraw(canvas);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 5, draw the fade effect and restore layers</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">        matrix.setScale(<span class=\"number\">1</span>, fadeHeight * topFadeStrength);</div><div class=\"line\">        matrix.postTranslate(left, top);</div><div class=\"line\">        fade.setLocalMatrix(matrix);</div><div class=\"line\">        p.setShader(fade);</div><div class=\"line\">        canvas.drawRect(left, top, right, top + length, p);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Step 6, draw decorations (scrollbars)</span></div><div class=\"line\">    onDrawScrollBars(canvas);</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Step-1-draw-the-background-if-needed\"><a href=\"#Step-1-draw-the-background-if-needed\" class=\"headerlink\" title=\"Step 1, draw the background, if needed\"></a>Step 1, draw the background, if needed</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 1, draw the background, if needed</span></div><div class=\"line\"><span class=\"comment\">//如果需要的话绘制背景</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (!dirtyOpaque) &#123;</div><div class=\"line\">    drawBackground(canvas);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">drawBackground</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  \t<span class=\"comment\">//通过xml中属性background或者代码中setBackGroundColor\\setBackgroundResource等方法赋值的背景drawable</span></div><div class=\"line\">      <span class=\"keyword\">final</span> Drawable background = mBackground;</div><div class=\"line\">      <span class=\"keyword\">if</span> (background == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//根据layout中确定的view位置来设置背景的绘制区域</span></div><div class=\"line\">      setBackgroundBounds();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 如果需要的话使用显示列表</span></div><div class=\"line\">      <span class=\"comment\">//canvas.isHardwareAccelerated() 硬件加速判定</span></div><div class=\"line\">      <span class=\"comment\">//硬件加速时会将图层缓存到GPU上 而不是重绘View的每一层</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (canvas.isHardwareAccelerated() &amp;&amp; mAttachInfo != <span class=\"keyword\">null</span></div><div class=\"line\">              &amp;&amp; mAttachInfo.mHardwareRenderer != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          mBackgroundRenderNode = getDrawableRenderNode(background, mBackgroundRenderNode);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">final</span> RenderNode renderNode = mBackgroundRenderNode;</div><div class=\"line\">          <span class=\"keyword\">if</span> (renderNode != <span class=\"keyword\">null</span> &amp;&amp; renderNode.isValid()) &#123;</div><div class=\"line\">              setBackgroundRenderNodeProperties(renderNode);</div><div class=\"line\">              ((DisplayListCanvas) canvas).drawRenderNode(renderNode);</div><div class=\"line\">              <span class=\"keyword\">return</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrollX = mScrollX;</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrollY = mScrollY;</div><div class=\"line\">      <span class=\"comment\">//调用Drawable的draw方法来完成背景的绘制工作</span></div><div class=\"line\">      <span class=\"keyword\">if</span> ((scrollX | scrollY) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          background.draw(canvas);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          canvas.translate(scrollX, scrollY);</div><div class=\"line\">          background.draw(canvas);</div><div class=\"line\">          canvas.translate(-scrollX, -scrollY);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setBackgroundBounds</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mBackgroundSizeChanged &amp;&amp; mBackground != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      mBackground.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>,  mRight - mLeft, mBottom - mTop);</div><div class=\"line\">      mBackgroundSizeChanged = <span class=\"keyword\">false</span>;</div><div class=\"line\">      rebuildOutline();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Step-2-save-the-canvas’-layers\"><a href=\"#Step-2-save-the-canvas’-layers\" class=\"headerlink\" title=\"Step 2, save the canvas’ layers\"></a>Step 2, save the canvas’ layers</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 2, save the canvas' layers</span></div><div class=\"line\"><span class=\"comment\">//保存绘制图层</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">           canvas.saveLayer(left, top, right, top + length, <span class=\"keyword\">null</span>, flags);</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Step-3-draw-the-content\"><a href=\"#Step-3-draw-the-content\" class=\"headerlink\" title=\"Step 3, draw the content\"></a>Step 3, draw the content</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 3, draw the content</span></div><div class=\"line\"><span class=\"comment\">//对View的内容进行绘制</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!dirtyOpaque) onDraw(canvas);</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">* Implement this to do your drawing.</div><div class=\"line\">*</div><div class=\"line\">* <span class=\"doctag\">@param</span> canvas the canvas on which the background will be drawn</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"comment\">//onDraw也是空方法需要子类根据自身去实现相应的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Step-4-draw-the-children\"><a href=\"#Step-4-draw-the-children\" class=\"headerlink\" title=\"Step 4, draw the children\"></a>Step 4, draw the children</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 4, draw the children</span></div><div class=\"line\"><span class=\"comment\">//绘制其子View</span></div><div class=\"line\">dispatchDraw(canvas);</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Called by draw to draw the child views. This may be overridden</div><div class=\"line\"> * by derived classes to gain control just before its children are drawn</div><div class=\"line\"> * (but after its own view has been drawn).</div><div class=\"line\"> * <span class=\"doctag\">@param</span> canvas the canvas on which to draw the view</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//dispatchDraw同样空方法 与onDraw不同的是dispatchDraw在ViewGroup中被重写</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ViewGroup<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//dispatchDraw方法中根据子View的不同情况 包括但不只包括该View是否显示 是否有进入或消失动画等进行了部分的调整</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">      more |= drawChild(canvas, transientChild, drawingTime);</div><div class=\"line\">    ...    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">drawChild</span><span class=\"params\">(Canvas canvas, View child, <span class=\"keyword\">long</span> drawingTime)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> child.draw(canvas, <span class=\"keyword\">this</span>, drawingTime);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Step-5-draw-the-fade-effect-and-restore-layers\"><a href=\"#Step-5-draw-the-fade-effect-and-restore-layers\" class=\"headerlink\" title=\"Step 5, draw the fade effect and restore layers\"></a>Step 5, draw the fade effect and restore layers</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 5, draw the fade effect and restore layers</span></div><div class=\"line\"><span class=\"comment\">//绘制过度效果和恢复图层</span></div><div class=\"line\"><span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">    matrix.setScale(<span class=\"number\">1</span>, fadeHeight * topFadeStrength);</div><div class=\"line\">    matrix.postTranslate(left, top);</div><div class=\"line\">    fade.setLocalMatrix(matrix);</div><div class=\"line\">    p.setShader(fade);</div><div class=\"line\">    canvas.drawRect(left, top, right, top + length, p);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Step-6-draw-decorations-scrollbars\"><a href=\"#Step-6-draw-decorations-scrollbars\" class=\"headerlink\" title=\"Step 6, draw decorations (scrollbars)\"></a>Step 6, draw decorations (scrollbars)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 6, draw decorations (scrollbars)</span></div><div class=\"line\"><span class=\"comment\">//对滚动条进行绘制</span></div><div class=\"line\">onDrawScrollBars(canvas);</div></pre></td></tr></table></figure>"},{"title":"Android View 相关源码分析之四 LinearLayout源码分析","date":"2017-02-03T09:55:53.000Z","_content":"## LinearLayout 源码分析\n### measure过程\n#### 主要过程\n* 根据布局方向选择measure过程分支\n* 初始化相关变量\n* 对View进行第一次测量\n* mTotalLength的再次测量\n* 二次测量部分View和对为测量的子View进行测量\n\n<!-- more -->\n\n```java\n  protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n      //判断布局方向\n      if (mOrientation == VERTICAL) {\n          measureVertical(widthMeasureSpec, heightMeasureSpec);\n      } else {\n          measureHorizontal(widthMeasureSpec, heightMeasureSpec);\n      }\n  }\n```\nmeasureVertical和measureHorizontal只是布局方向上的区别 以下主要分析measureVertical方法\n\n#### 初始化相关变量\n```java\n  //mTotalLength是记录内部使用的高度也就是子View的高度和 而不是LinearLayout的高度\n  mTotalLength = 0;\n  //子视图的最大宽度(不包括layout_weight>0的子View)\n  int maxWidth = 0;\n  int childState = 0;\n  int alternativeMaxWidth = 0;\n  //子视图的最大宽度(仅包含layout_weight>0的子View)\n  int weightedMaxWidth = 0;\n  //子视图是否均为fillParent 用于判断是否需要重新计算\n  boolean allFillParent = true;\n  //权重值的总和\n  float totalWeight = 0;\n  //子View的数量(统一级别下)\n  final int count = getVirtualChildCount();\n  //高度宽度模式\n  final int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n  final int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n  //子View的宽度是否需要由父View决定\n  boolean matchWidth = false;\n  boolean skippedMeasure = false;\n  //第几个子View的baseLine作为LinearLayout的基准线\n  final int baselineChildIndex = mBaselineAlignedChildIndex;  \n  //mUseLargestChild为是否使用最大子元素的尺寸作为标准再次测量\n  final boolean useLargestChild = mUseLargestChild;\n  //子View中最高高度\n  int largestChildHeight = Integer.MIN_VALUE;\n```\n\n#### 第一次测量\n```java\n  // See how tall everyone is. Also remember max width.\n  for (int i = 0; i < count; ++i) {\n      final View child = getVirtualChildAt(i);\n\n      // 测量为null的子视图的高度\n      // measureNullChild() 暂时返回 0 便于扩展\n      if (child == null) {\n          mTotalLength += measureNullChild(i);\n          continue;\n      }\n      //Visibility为Gone的时候跳过该View\n      // getChildrenSkipCount()方法同样返回0 便于扩展\n      if (child.getVisibility() == View.GONE) {\n         i += getChildrenSkipCount(child, i);\n         continue;\n      }\n      //根据showDivider的值(通过hasDividerBeforeChildAt()) 来决定当前子View是否需要添加分割线的高度\n      if (hasDividerBeforeChildAt(i)) {\n          mTotalLength += mDividerHeight;\n      }\n\n      //会将子view的LayoutParams强转为父View的LayoutParams类型\n      LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)child.getLayoutParams();\n\n      totalWeight += lp.weight;\n\n      if (heightMode == MeasureSpec.EXACTLY && lp.height == 0 && lp.weight > 0) {\n          // 满足该条件的话 不需要现在计算该子视图的高度 测量工作会在之后进行\n          // 若子View的height=0 且weight> 0 则说明该View希望使用的是LinearLayout的剩余空间\n          // LinearLayout是EXACTLY模式的说明LinearLayout高度已经确定 不需要依赖子View的测量结果来计算自己 就无需测量该子View\n\n          final int totalLength = mTotalLength;\n          mTotalLength = Math.max(totalLength, totalLength + lp.topMargin + lp.bottomMargin);\n          skippedMeasure = true;\n      } else {\n          //测量子View\n\n          int oldHeight = Integer.MIN_VALUE;\n\n          //当前View的height=0 且weight> 0 则说明该LinearLayout的高度需要靠子View测量(不需要的在上面分支处理了)\n          //将子View的高度设为-1 防止子View高度为0\n          if (lp.height == 0 && lp.weight > 0) {\n              oldHeight = 0;\n              lp.height = LayoutParams.WRAP_CONTENT;\n          }\n\n          //调用子View的measureChildWithMargins() 对子View进行测量\n          //第四个参数表示当前已使用的宽度  因为是竖直模式 所以为0\n          //最后一个参数表示已使用的高度 如果之前的子View或者当前的View有weight属性 则当前子视图使用 LinearLayout 的所有高度 已使用的高度为0\n          measureChildBeforeLayout(child, i, widthMeasureSpec, 0, heightMeasureSpec,\n                 totalWeight == 0 ? mTotalLength : 0);\n\n          if (oldHeight != Integer.MIN_VALUE) {\n             //测量完成后 重置子View高度\n             lp.height = oldHeight;\n          }\n\n          final int childHeight = child.getMeasuredHeight();\n          final int totalLength = mTotalLength;\n          // 比较child测量前后总高度 取较大值\n          ///getNextLocationOffset() 返回0 便于扩展\n          mTotalLength = Math.max(totalLength, totalLength + childHeight + lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));\n          // 设置最高子视图大小\n          if (useLargestChild) {\n              largestChildHeight = Math.max(childHeight, largestChildHeight);\n          }\n      }\n\n       // mBaselineChildTop 表示指定的 baseline 的子视图的顶部高度\n      if ((baselineChildIndex >= 0) && (baselineChildIndex == i + 1)) {\n         mBaselineChildTop = mTotalLength;\n      }\n\n      // 设置为 baseline 的子视图的前面不允许设置 weiget 属性\n      if (i < baselineChildIndex && lp.weight > 0) {\n          throw new RuntimeException(\"A child of LinearLayout with index \"\n                  + \"less than mBaselineAlignedChildIndex has weight > 0, which \"\n                  + \"won't work.  Either remove the weight, or don't set \"\n                  + \"mBaselineAlignedChildIndex.\");\n      }\n\n      // 宽度测量相关\n\n      boolean matchWidthLocally = false;\n\n      //当LinearLayout非EXACTLY模式 并且自View为MATCH_PARENT时\n      //设置matchWidth和matchWidthLocally为true\n      //该子View占据LinearLayout水平方向上所有空间\n\n      if (widthMode != MeasureSpec.EXACTLY && lp.width == LayoutParams.MATCH_PARENT) {\n          matchWidth = true;\n          matchWidthLocally = true;\n      }\n\n      final int margin = lp.leftMargin + lp.rightMargin;\n      final int measuredWidth = child.getMeasuredWidth() + margin;\n\n      //对一堆变量赋值\n      maxWidth = Math.max(maxWidth, measuredWidth);\n      childState = combineMeasuredStates(childState, child.getMeasuredState());\n\n      allFillParent = allFillParent && lp.width == LayoutParams.MATCH_PARENT;\n      if (lp.weight > 0) {\n          weightedMaxWidth = Math.max(weightedMaxWidth,\n                  matchWidthLocally ? margin : measuredWidth);\n      } else {\n          alternativeMaxWidth = Math.max(alternativeMaxWidth,\n                  matchWidthLocally ? margin : measuredWidth);\n      }\n\n      i += getChildrenSkipCount(child, i);\n  }\n```\n\n#### 二次测量mTotalLength\n\n```java\n  //根据hasDividerBeforeChildAt得到showDivider的值是否为end 来判断是否需要加上divider的高度\n  if (mTotalLength > 0 && hasDividerBeforeChildAt(count))\n      mTotalLength += mDividerHeight;\n  }\n  //如果高度测量模式为AT_MOST或者UNSPECIFIED 则进行二次测量 且设置了measureWithLargestChild\n  if (useLargestChild && (heightMode == MeasureSpec.AT_MOST ||\n      heightMode == MeasureSpec.UNSPECIFIED)) {\n      mTotalLength = 0;\n      for (int i = 0; i < count; ++i) {\n          final View child = getVirtualChildAt(i);\n          if (child == null) {\n              mTotalLength += measureNullChild(i);\n              continue;\n          }\n          if (child.getVisibility() == GONE) {\n              i += getChildrenSkipCount(child, i);\n              continue;\n          }\n          final LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)\n                  child.getLayoutParams();\n          // 计算所有子View的高度之和\n          final int totalLength = mTotalLength;\n          mTotalLength = Math.max(totalLength, totalLength + largestChildHeight +\n                  lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));\n      }\n  }\n```\n就是需要useLargestChild\n\n而 mUseLargestChild = a.getBoolean(R.styleable.LinearLayout_measureWithLargestChild, false);\n\n就是说仅在LinearLayout的measureWithLargestChild属性设置为True时(默认为false)才可能出现某个child被二次测量\n\n实例如下\n\n![LinearLayout二次测量](http://p1.bpimg.com/567571/8ac762ffc7d13b2e.png)\n\n\n\n#### 二次测量部分View和对为测量的子View进行测量\n\n```java\n\n   //加上padding的值\n   mTotalLength += mPaddingTop + mPaddingBottom;\n   int heightSize = mTotalLength;\n   //minHeight和当前使用的高度比较取较大值\n   heightSize = Math.max(heightSize, getSuggestedMinimumHeight());\n\n   //根据heightMeasureSpec协助计算heightSizeAndState的大小\n   //resolveSizeAndState方法之后会分析\n   int heightSizeAndState = resolveSizeAndState(heightSize, heightMeasureSpec, 0);\n   heightSize = heightSizeAndState & MEASURED_SIZE_MASK;\n\n   // Either expand children with weight to take up available space or\n   // shrink them if they extend beyond our current bounds. If we skipped\n   // measurement on any children, we need to measure them now.\n\n\n\n   //delta为额外的空间 及LinearLayout中未被分配的空间(可以为负)\n   int delta = heightSize - mTotalLength;\n   if (skippedMeasure || delta != 0 && totalWeight > 0.0f) {\n       //skippedMeasure为第一次测量下对跳过测量的子View设置的\n       //weightSum为权重和 如果设置了总权重则使用我们所设置的  如果没有则使用子View的weight和\n       float weightSum = mWeightSum > 0.0f ? mWeightSum : totalWeight;\n\n       mTotalLength = 0;\n       //测量什么的\n       for (int i = 0; i < count; ++i) {\n           final View child = getVirtualChildAt(i);\n\n           if (child.getVisibility() == View.GONE) {\n               continue;\n           }\n\n           LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) child.getLayoutParams();\n\n           float childExtra = lp.weight;\n           if (childExtra > 0) {\n               // Child said it could absorb extra space -- give him his share\n               //计算weight属性分配的大小\n               int share = (int) (childExtra * delta / weightSum);\n               //权重和减去已经分配权重\n               weightSum -= childExtra;\n               //剩余高度减去分配的高度\n               delta -= share;\n\n               final int childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,\n                       mPaddingLeft + mPaddingRight +\n                               lp.leftMargin + lp.rightMargin, lp.width);\n\n               // TODO: Use a field like lp.isMeasured to figure out if this\n               // child has been previously measured\n\n\n               if ((lp.height != 0) || (heightMode != MeasureSpec.EXACTLY)) {\n                   //子视图已经被测量过\n                   //非EXACTLY view需要加上share\n                   int childHeight = child.getMeasuredHeight() + share;\n                   if (childHeight < 0) {\n                       childHeight = 0;\n                   }\n                   //重新测量View\n                   child.measure(childWidthMeasureSpec,\n                           MeasureSpec.makeMeasureSpec(childHeight, MeasureSpec.EXACTLY));\n               } else {\n                   //如果当前是EXACTLY模式 说明没有被测量 需要进行测量\n                   //子视图首次被测量\n                   //EXACTLY模式下 将weight占比的高度分配给子View    \n                   child.measure(childWidthMeasureSpec,\n                           MeasureSpec.makeMeasureSpec(share > 0 ? share : 0,\n                                   MeasureSpec.EXACTLY));\n               }\n\n               // Child may now not fit in vertical dimension.\n               childState = combineMeasuredStates(childState, child.getMeasuredState()\n                       & (MEASURED_STATE_MASK>>MEASURED_HEIGHT_STATE_SHIFT));\n           }\n\n          //处理子视图宽度\n           final int margin =  lp.leftMargin + lp.rightMargin;\n           final int measuredWidth = child.getMeasuredWidth() + margin;\n           maxWidth = Math.max(maxWidth, measuredWidth);\n\n           boolean matchWidthLocally = widthMode != MeasureSpec.EXACTLY &&\n                   lp.width == LayoutParams.MATCH_PARENT;\n\n           alternativeMaxWidth = Math.max(alternativeMaxWidth,\n                   matchWidthLocally ? margin : measuredWidth);\n\n           allFillParent = allFillParent && lp.width == LayoutParams.MATCH_PARENT;\n\n           final int totalLength = mTotalLength;\n           mTotalLength = Math.max(totalLength, totalLength + child.getMeasuredHeight() +\n                   lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));\n       }\n\n       // Add in our padding\n       mTotalLength += mPaddingTop + mPaddingBottom;\n       // TODO: Should we recompute the heightSpec based on the new total length?\n   } else {\n       alternativeMaxWidth = Math.max(alternativeMaxWidth,\n                                      weightedMaxWidth);\n\n\n       // We have no limit, so make all weighted views as tall as the largest child.\n       // Children will have already been measured once.\n       if (useLargestChild && heightMode != MeasureSpec.EXACTLY) {\n           for (int i = 0; i < count; i++) {\n               final View child = getVirtualChildAt(i);\n\n               if (child == null || child.getVisibility() == View.GONE) {\n                   continue;\n               }\n\n               final LinearLayout.LayoutParams lp =\n                       (LinearLayout.LayoutParams) child.getLayoutParams();\n\n               float childExtra = lp.weight;\n               if (childExtra > 0) {\n                  //使用最大子视图高度测量\n                   child.measure(\n                           MeasureSpec.makeMeasureSpec(child.getMeasuredWidth(),\n                                   MeasureSpec.EXACTLY),\n                           MeasureSpec.makeMeasureSpec(largestChildHeight,\n                                   MeasureSpec.EXACTLY));\n               }\n           }\n       }\n   }\n\n   if (!allFillParent && widthMode != MeasureSpec.EXACTLY) {\n       maxWidth = alternativeMaxWidth;\n   }\n\n   maxWidth += mPaddingLeft + mPaddingRight;\n\n   // Check against our minimum width\n   maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());\n\n   setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),\n           heightSizeAndState);\n\n   if (matchWidth) {\n       forceUniformWidth(count, heightMeasureSpec);\n   }\n```\nresolveSizeAndState方法 定义在View中\n```java\n/**\n   * Utility to reconcile a desired size and state, with constraints imposed\n   * by a MeasureSpec. Will take the desired size, unless a different size\n   * is imposed by the constraints. The returned value is a compound integer,\n   * with the resolved size in the {@link #MEASURED_SIZE_MASK} bits and\n   * optionally the bit {@link #MEASURED_STATE_TOO_SMALL} set if the\n   * resulting size is smaller than the size the view wants to be.\n   *\n   * @param size How big the view wants to be.\n   * @param measureSpec Constraints imposed by the parent.\n   * @param childMeasuredState Size information bit mask for the view's\n   *                           children.\n   * @return Size information bit mask as defined by\n   *         {@link #MEASURED_SIZE_MASK} and\n   *         {@link #MEASURED_STATE_TOO_SMALL}.\n   */\n  public static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState) {\n      final int specMode = MeasureSpec.getMode(measureSpec);\n      final int specSize = MeasureSpec.getSize(measureSpec);\n      final int result;\n      switch (specMode) {\n          case MeasureSpec.AT_MOST:\n              if (specSize < size) {\n                  result = specSize | MEASURED_STATE_TOO_SMALL;\n              } else {\n                  result = size;\n              }\n              break;\n          case MeasureSpec.EXACTLY:\n              result = specSize;\n              break;\n          case MeasureSpec.UNSPECIFIED:\n          default:\n              result = size;\n      }\n      return result | (childMeasuredState & MEASURED_STATE_MASK);\n  }\n```\n\n###### delta为负的相关解析\n相关代码及效果如下\n\n![负delta.png](http://p1.bqimg.com/567571/214652b3a9d04170.png)\n\n根据之前的measure流程分析一下\n\n* 相关变量初始化\n* 第一次测量  两个子TextView都会被测量 TextView1.height = TextView1.height = 500dp 则mToatalLength为1000dp\n* mToatalLength再次测量跳过\n* 计算delta delta = heightSize - mTotalLength 根据resolveSizeAndState方法 父LinearLayout是EXACTLY模式 所以最终heightSize为500dp delta = -500dp\n* 根据weight分配剩余空间 TextView1.height = 500 + 1 / 5 * (- 500) = 400 dp\n  TextView2.height = 500 + 4 / 5 * (- 500) = 100 dp\n\n\n### layout过程\n\n\n```java\n  protected void onLayout(boolean changed, int l, int t, int r, int b) {\n    if (mOrientation == VERTICAL) {\n        layoutVertical(l, t, r, b);\n    } else {\n        layoutHorizontal(l, t, r, b);\n    }\n  }\n```\n我们可以看出 同样是分成水平和竖直两个方向的 同样分析竖直 方向下的layout过程\n\n```java\n/**\n    * Position the children during a layout pass if the orientation of this\n    * LinearLayout is set to {@link #VERTICAL}.\n    *\n    * @see #getOrientation()\n    * @see #setOrientation(int)\n    * @see #onLayout(boolean, int, int, int, int)\n    * @param left\n    * @param top\n    * @param right\n    * @param bottom\n    */\n   void layoutVertical(int left, int top, int right, int bottom) {\n       final int paddingLeft = mPaddingLeft;\n\n       int childTop;\n       int childLeft;\n\n       //父View默认子View的宽度\n       final int width = right - left;\n       //子View的右侧默认位置\n       int childRight = width - mPaddingRight;\n\n       // 子View的可用空间大小\n       int childSpace = width - paddingLeft - mPaddingRight;\n\n       //子View的个数\n       final int count = getVirtualChildCount();\n\n       final int majorGravity = mGravity & Gravity.VERTICAL_GRAVITY_MASK;\n       final int minorGravity = mGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;\n\n       //根据LinearLayout设置的对其方式 设置第一个子View的Top值\n       switch (majorGravity) {\n          case Gravity.BOTTOM:\n              // mTotalLength contains the padding already\n              childTop = mPaddingTop + bottom - top - mTotalLength;\n              break;\n\n              // mTotalLength contains the padding already\n          case Gravity.CENTER_VERTICAL:\n              childTop = mPaddingTop + (bottom - top - mTotalLength) / 2;\n              break;\n\n          case Gravity.TOP:\n          default:\n              childTop = mPaddingTop;\n              break;\n       }\n\n       //遍历各个子View\n       for (int i = 0; i < count; i++) {\n           final View child = getVirtualChildAt(i);\n           if (child == null) {\n               childTop += measureNullChild(i);\n           } else if (child.getVisibility() != GONE) {\n                //LinearLayout中子View的宽和高有measure过程决定\n               final int childWidth = child.getMeasuredWidth();\n               final int childHeight = child.getMeasuredHeight();\n               //获取子View的LayoutParams\n               final LinearLayout.LayoutParams lp =\n                       (LinearLayout.LayoutParams) child.getLayoutParams();\n\n               int gravity = lp.gravity;\n               if (gravity < 0) {\n                   gravity = minorGravity;\n               }\n               final int layoutDirection = getLayoutDirection();\n               final int absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);\n               //根据子View的对其方式设置Left值\n               switch (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {\n                   case Gravity.CENTER_HORIZONTAL:\n                       childLeft = paddingLeft + ((childSpace - childWidth) / 2)\n                               + lp.leftMargin - lp.rightMargin;\n                       break;\n\n                   case Gravity.RIGHT:\n                       childLeft = childRight - childWidth - lp.rightMargin;\n                       break;\n\n                   case Gravity.LEFT:\n                   default:\n                       childLeft = paddingLeft + lp.leftMargin;\n                       break;\n               }\n               //如果有分割线 添加分割线的高度\n               if (hasDividerBeforeChildAt(i)) {\n                   childTop += mDividerHeight;\n               }\n               //子View的top修改\n               childTop += lp.topMargin;\n               //用setChildFrame()方法设置子控件控件的在父控件上的坐标轴\n               setChildFrame(child, childLeft, childTop + getLocationOffset(child),\n                       childWidth, childHeight);\n               childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);\n\n               i += getChildrenSkipCount(child, i);\n           }\n       }\n   }\n```\n\n#### draw 源码分析\n```java\n  protected void onDraw(Canvas canvas) {\n    if (mDivider == null) {\n        return;\n    }\n\n    if (mOrientation == VERTICAL) {\n        drawDividersVertical(canvas);\n    } else {\n        drawDividersHorizontal(canvas);\n    }\n  }\n```\n同样主要分析垂直方向的处理\n\n```java\n\n  void drawDividersVertical(Canvas canvas) {\n      final int count = getVirtualChildCount();\n      //根据计算好的坐标绘制对应的子View\n      for (int i = 0; i < count; i++) {\n          final View child = getVirtualChildAt(i);\n\n          if (child != null && child.getVisibility() != GONE) {\n              if (hasDividerBeforeChildAt(i)) {\n                  final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n                  final int top = child.getTop() - lp.topMargin - mDividerHeight;\n                  drawHorizontalDivider(canvas, top);\n              }\n          }\n      }\n      //绘制分割线\n      if (hasDividerBeforeChildAt(count)) {\n          final View child = getLastNonGoneChild();\n          int bottom = 0;\n          if (child == null) {\n              bottom = getHeight() - getPaddingBottom() - mDividerHeight;\n          } else {\n              final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n              bottom = child.getBottom() + lp.bottomMargin;\n          }\n          drawHorizontalDivider(canvas, bottom);\n      }\n  }\n\n  void drawHorizontalDivider(Canvas canvas, int top) {\n    mDivider.setBounds(getPaddingLeft() + mDividerPadding, top,\n            getWidth() - getPaddingRight() - mDividerPadding, top + mDividerHeight);\n    mDivider.draw(canvas);\n  }\n```\n","source":"_posts/LinearLayout 源码分析.md","raw":"---\ntitle: Android View 相关源码分析之四 LinearLayout源码分析\ndate: 2017-02-03 17:55:53\ntags: [\"android\" , \"view\" , \"源码\"]\ncategories: \"android\"\n---\n## LinearLayout 源码分析\n### measure过程\n#### 主要过程\n* 根据布局方向选择measure过程分支\n* 初始化相关变量\n* 对View进行第一次测量\n* mTotalLength的再次测量\n* 二次测量部分View和对为测量的子View进行测量\n\n<!-- more -->\n\n```java\n  protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n      //判断布局方向\n      if (mOrientation == VERTICAL) {\n          measureVertical(widthMeasureSpec, heightMeasureSpec);\n      } else {\n          measureHorizontal(widthMeasureSpec, heightMeasureSpec);\n      }\n  }\n```\nmeasureVertical和measureHorizontal只是布局方向上的区别 以下主要分析measureVertical方法\n\n#### 初始化相关变量\n```java\n  //mTotalLength是记录内部使用的高度也就是子View的高度和 而不是LinearLayout的高度\n  mTotalLength = 0;\n  //子视图的最大宽度(不包括layout_weight>0的子View)\n  int maxWidth = 0;\n  int childState = 0;\n  int alternativeMaxWidth = 0;\n  //子视图的最大宽度(仅包含layout_weight>0的子View)\n  int weightedMaxWidth = 0;\n  //子视图是否均为fillParent 用于判断是否需要重新计算\n  boolean allFillParent = true;\n  //权重值的总和\n  float totalWeight = 0;\n  //子View的数量(统一级别下)\n  final int count = getVirtualChildCount();\n  //高度宽度模式\n  final int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n  final int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n  //子View的宽度是否需要由父View决定\n  boolean matchWidth = false;\n  boolean skippedMeasure = false;\n  //第几个子View的baseLine作为LinearLayout的基准线\n  final int baselineChildIndex = mBaselineAlignedChildIndex;  \n  //mUseLargestChild为是否使用最大子元素的尺寸作为标准再次测量\n  final boolean useLargestChild = mUseLargestChild;\n  //子View中最高高度\n  int largestChildHeight = Integer.MIN_VALUE;\n```\n\n#### 第一次测量\n```java\n  // See how tall everyone is. Also remember max width.\n  for (int i = 0; i < count; ++i) {\n      final View child = getVirtualChildAt(i);\n\n      // 测量为null的子视图的高度\n      // measureNullChild() 暂时返回 0 便于扩展\n      if (child == null) {\n          mTotalLength += measureNullChild(i);\n          continue;\n      }\n      //Visibility为Gone的时候跳过该View\n      // getChildrenSkipCount()方法同样返回0 便于扩展\n      if (child.getVisibility() == View.GONE) {\n         i += getChildrenSkipCount(child, i);\n         continue;\n      }\n      //根据showDivider的值(通过hasDividerBeforeChildAt()) 来决定当前子View是否需要添加分割线的高度\n      if (hasDividerBeforeChildAt(i)) {\n          mTotalLength += mDividerHeight;\n      }\n\n      //会将子view的LayoutParams强转为父View的LayoutParams类型\n      LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)child.getLayoutParams();\n\n      totalWeight += lp.weight;\n\n      if (heightMode == MeasureSpec.EXACTLY && lp.height == 0 && lp.weight > 0) {\n          // 满足该条件的话 不需要现在计算该子视图的高度 测量工作会在之后进行\n          // 若子View的height=0 且weight> 0 则说明该View希望使用的是LinearLayout的剩余空间\n          // LinearLayout是EXACTLY模式的说明LinearLayout高度已经确定 不需要依赖子View的测量结果来计算自己 就无需测量该子View\n\n          final int totalLength = mTotalLength;\n          mTotalLength = Math.max(totalLength, totalLength + lp.topMargin + lp.bottomMargin);\n          skippedMeasure = true;\n      } else {\n          //测量子View\n\n          int oldHeight = Integer.MIN_VALUE;\n\n          //当前View的height=0 且weight> 0 则说明该LinearLayout的高度需要靠子View测量(不需要的在上面分支处理了)\n          //将子View的高度设为-1 防止子View高度为0\n          if (lp.height == 0 && lp.weight > 0) {\n              oldHeight = 0;\n              lp.height = LayoutParams.WRAP_CONTENT;\n          }\n\n          //调用子View的measureChildWithMargins() 对子View进行测量\n          //第四个参数表示当前已使用的宽度  因为是竖直模式 所以为0\n          //最后一个参数表示已使用的高度 如果之前的子View或者当前的View有weight属性 则当前子视图使用 LinearLayout 的所有高度 已使用的高度为0\n          measureChildBeforeLayout(child, i, widthMeasureSpec, 0, heightMeasureSpec,\n                 totalWeight == 0 ? mTotalLength : 0);\n\n          if (oldHeight != Integer.MIN_VALUE) {\n             //测量完成后 重置子View高度\n             lp.height = oldHeight;\n          }\n\n          final int childHeight = child.getMeasuredHeight();\n          final int totalLength = mTotalLength;\n          // 比较child测量前后总高度 取较大值\n          ///getNextLocationOffset() 返回0 便于扩展\n          mTotalLength = Math.max(totalLength, totalLength + childHeight + lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));\n          // 设置最高子视图大小\n          if (useLargestChild) {\n              largestChildHeight = Math.max(childHeight, largestChildHeight);\n          }\n      }\n\n       // mBaselineChildTop 表示指定的 baseline 的子视图的顶部高度\n      if ((baselineChildIndex >= 0) && (baselineChildIndex == i + 1)) {\n         mBaselineChildTop = mTotalLength;\n      }\n\n      // 设置为 baseline 的子视图的前面不允许设置 weiget 属性\n      if (i < baselineChildIndex && lp.weight > 0) {\n          throw new RuntimeException(\"A child of LinearLayout with index \"\n                  + \"less than mBaselineAlignedChildIndex has weight > 0, which \"\n                  + \"won't work.  Either remove the weight, or don't set \"\n                  + \"mBaselineAlignedChildIndex.\");\n      }\n\n      // 宽度测量相关\n\n      boolean matchWidthLocally = false;\n\n      //当LinearLayout非EXACTLY模式 并且自View为MATCH_PARENT时\n      //设置matchWidth和matchWidthLocally为true\n      //该子View占据LinearLayout水平方向上所有空间\n\n      if (widthMode != MeasureSpec.EXACTLY && lp.width == LayoutParams.MATCH_PARENT) {\n          matchWidth = true;\n          matchWidthLocally = true;\n      }\n\n      final int margin = lp.leftMargin + lp.rightMargin;\n      final int measuredWidth = child.getMeasuredWidth() + margin;\n\n      //对一堆变量赋值\n      maxWidth = Math.max(maxWidth, measuredWidth);\n      childState = combineMeasuredStates(childState, child.getMeasuredState());\n\n      allFillParent = allFillParent && lp.width == LayoutParams.MATCH_PARENT;\n      if (lp.weight > 0) {\n          weightedMaxWidth = Math.max(weightedMaxWidth,\n                  matchWidthLocally ? margin : measuredWidth);\n      } else {\n          alternativeMaxWidth = Math.max(alternativeMaxWidth,\n                  matchWidthLocally ? margin : measuredWidth);\n      }\n\n      i += getChildrenSkipCount(child, i);\n  }\n```\n\n#### 二次测量mTotalLength\n\n```java\n  //根据hasDividerBeforeChildAt得到showDivider的值是否为end 来判断是否需要加上divider的高度\n  if (mTotalLength > 0 && hasDividerBeforeChildAt(count))\n      mTotalLength += mDividerHeight;\n  }\n  //如果高度测量模式为AT_MOST或者UNSPECIFIED 则进行二次测量 且设置了measureWithLargestChild\n  if (useLargestChild && (heightMode == MeasureSpec.AT_MOST ||\n      heightMode == MeasureSpec.UNSPECIFIED)) {\n      mTotalLength = 0;\n      for (int i = 0; i < count; ++i) {\n          final View child = getVirtualChildAt(i);\n          if (child == null) {\n              mTotalLength += measureNullChild(i);\n              continue;\n          }\n          if (child.getVisibility() == GONE) {\n              i += getChildrenSkipCount(child, i);\n              continue;\n          }\n          final LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)\n                  child.getLayoutParams();\n          // 计算所有子View的高度之和\n          final int totalLength = mTotalLength;\n          mTotalLength = Math.max(totalLength, totalLength + largestChildHeight +\n                  lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));\n      }\n  }\n```\n就是需要useLargestChild\n\n而 mUseLargestChild = a.getBoolean(R.styleable.LinearLayout_measureWithLargestChild, false);\n\n就是说仅在LinearLayout的measureWithLargestChild属性设置为True时(默认为false)才可能出现某个child被二次测量\n\n实例如下\n\n![LinearLayout二次测量](http://p1.bpimg.com/567571/8ac762ffc7d13b2e.png)\n\n\n\n#### 二次测量部分View和对为测量的子View进行测量\n\n```java\n\n   //加上padding的值\n   mTotalLength += mPaddingTop + mPaddingBottom;\n   int heightSize = mTotalLength;\n   //minHeight和当前使用的高度比较取较大值\n   heightSize = Math.max(heightSize, getSuggestedMinimumHeight());\n\n   //根据heightMeasureSpec协助计算heightSizeAndState的大小\n   //resolveSizeAndState方法之后会分析\n   int heightSizeAndState = resolveSizeAndState(heightSize, heightMeasureSpec, 0);\n   heightSize = heightSizeAndState & MEASURED_SIZE_MASK;\n\n   // Either expand children with weight to take up available space or\n   // shrink them if they extend beyond our current bounds. If we skipped\n   // measurement on any children, we need to measure them now.\n\n\n\n   //delta为额外的空间 及LinearLayout中未被分配的空间(可以为负)\n   int delta = heightSize - mTotalLength;\n   if (skippedMeasure || delta != 0 && totalWeight > 0.0f) {\n       //skippedMeasure为第一次测量下对跳过测量的子View设置的\n       //weightSum为权重和 如果设置了总权重则使用我们所设置的  如果没有则使用子View的weight和\n       float weightSum = mWeightSum > 0.0f ? mWeightSum : totalWeight;\n\n       mTotalLength = 0;\n       //测量什么的\n       for (int i = 0; i < count; ++i) {\n           final View child = getVirtualChildAt(i);\n\n           if (child.getVisibility() == View.GONE) {\n               continue;\n           }\n\n           LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) child.getLayoutParams();\n\n           float childExtra = lp.weight;\n           if (childExtra > 0) {\n               // Child said it could absorb extra space -- give him his share\n               //计算weight属性分配的大小\n               int share = (int) (childExtra * delta / weightSum);\n               //权重和减去已经分配权重\n               weightSum -= childExtra;\n               //剩余高度减去分配的高度\n               delta -= share;\n\n               final int childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,\n                       mPaddingLeft + mPaddingRight +\n                               lp.leftMargin + lp.rightMargin, lp.width);\n\n               // TODO: Use a field like lp.isMeasured to figure out if this\n               // child has been previously measured\n\n\n               if ((lp.height != 0) || (heightMode != MeasureSpec.EXACTLY)) {\n                   //子视图已经被测量过\n                   //非EXACTLY view需要加上share\n                   int childHeight = child.getMeasuredHeight() + share;\n                   if (childHeight < 0) {\n                       childHeight = 0;\n                   }\n                   //重新测量View\n                   child.measure(childWidthMeasureSpec,\n                           MeasureSpec.makeMeasureSpec(childHeight, MeasureSpec.EXACTLY));\n               } else {\n                   //如果当前是EXACTLY模式 说明没有被测量 需要进行测量\n                   //子视图首次被测量\n                   //EXACTLY模式下 将weight占比的高度分配给子View    \n                   child.measure(childWidthMeasureSpec,\n                           MeasureSpec.makeMeasureSpec(share > 0 ? share : 0,\n                                   MeasureSpec.EXACTLY));\n               }\n\n               // Child may now not fit in vertical dimension.\n               childState = combineMeasuredStates(childState, child.getMeasuredState()\n                       & (MEASURED_STATE_MASK>>MEASURED_HEIGHT_STATE_SHIFT));\n           }\n\n          //处理子视图宽度\n           final int margin =  lp.leftMargin + lp.rightMargin;\n           final int measuredWidth = child.getMeasuredWidth() + margin;\n           maxWidth = Math.max(maxWidth, measuredWidth);\n\n           boolean matchWidthLocally = widthMode != MeasureSpec.EXACTLY &&\n                   lp.width == LayoutParams.MATCH_PARENT;\n\n           alternativeMaxWidth = Math.max(alternativeMaxWidth,\n                   matchWidthLocally ? margin : measuredWidth);\n\n           allFillParent = allFillParent && lp.width == LayoutParams.MATCH_PARENT;\n\n           final int totalLength = mTotalLength;\n           mTotalLength = Math.max(totalLength, totalLength + child.getMeasuredHeight() +\n                   lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));\n       }\n\n       // Add in our padding\n       mTotalLength += mPaddingTop + mPaddingBottom;\n       // TODO: Should we recompute the heightSpec based on the new total length?\n   } else {\n       alternativeMaxWidth = Math.max(alternativeMaxWidth,\n                                      weightedMaxWidth);\n\n\n       // We have no limit, so make all weighted views as tall as the largest child.\n       // Children will have already been measured once.\n       if (useLargestChild && heightMode != MeasureSpec.EXACTLY) {\n           for (int i = 0; i < count; i++) {\n               final View child = getVirtualChildAt(i);\n\n               if (child == null || child.getVisibility() == View.GONE) {\n                   continue;\n               }\n\n               final LinearLayout.LayoutParams lp =\n                       (LinearLayout.LayoutParams) child.getLayoutParams();\n\n               float childExtra = lp.weight;\n               if (childExtra > 0) {\n                  //使用最大子视图高度测量\n                   child.measure(\n                           MeasureSpec.makeMeasureSpec(child.getMeasuredWidth(),\n                                   MeasureSpec.EXACTLY),\n                           MeasureSpec.makeMeasureSpec(largestChildHeight,\n                                   MeasureSpec.EXACTLY));\n               }\n           }\n       }\n   }\n\n   if (!allFillParent && widthMode != MeasureSpec.EXACTLY) {\n       maxWidth = alternativeMaxWidth;\n   }\n\n   maxWidth += mPaddingLeft + mPaddingRight;\n\n   // Check against our minimum width\n   maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());\n\n   setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),\n           heightSizeAndState);\n\n   if (matchWidth) {\n       forceUniformWidth(count, heightMeasureSpec);\n   }\n```\nresolveSizeAndState方法 定义在View中\n```java\n/**\n   * Utility to reconcile a desired size and state, with constraints imposed\n   * by a MeasureSpec. Will take the desired size, unless a different size\n   * is imposed by the constraints. The returned value is a compound integer,\n   * with the resolved size in the {@link #MEASURED_SIZE_MASK} bits and\n   * optionally the bit {@link #MEASURED_STATE_TOO_SMALL} set if the\n   * resulting size is smaller than the size the view wants to be.\n   *\n   * @param size How big the view wants to be.\n   * @param measureSpec Constraints imposed by the parent.\n   * @param childMeasuredState Size information bit mask for the view's\n   *                           children.\n   * @return Size information bit mask as defined by\n   *         {@link #MEASURED_SIZE_MASK} and\n   *         {@link #MEASURED_STATE_TOO_SMALL}.\n   */\n  public static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState) {\n      final int specMode = MeasureSpec.getMode(measureSpec);\n      final int specSize = MeasureSpec.getSize(measureSpec);\n      final int result;\n      switch (specMode) {\n          case MeasureSpec.AT_MOST:\n              if (specSize < size) {\n                  result = specSize | MEASURED_STATE_TOO_SMALL;\n              } else {\n                  result = size;\n              }\n              break;\n          case MeasureSpec.EXACTLY:\n              result = specSize;\n              break;\n          case MeasureSpec.UNSPECIFIED:\n          default:\n              result = size;\n      }\n      return result | (childMeasuredState & MEASURED_STATE_MASK);\n  }\n```\n\n###### delta为负的相关解析\n相关代码及效果如下\n\n![负delta.png](http://p1.bqimg.com/567571/214652b3a9d04170.png)\n\n根据之前的measure流程分析一下\n\n* 相关变量初始化\n* 第一次测量  两个子TextView都会被测量 TextView1.height = TextView1.height = 500dp 则mToatalLength为1000dp\n* mToatalLength再次测量跳过\n* 计算delta delta = heightSize - mTotalLength 根据resolveSizeAndState方法 父LinearLayout是EXACTLY模式 所以最终heightSize为500dp delta = -500dp\n* 根据weight分配剩余空间 TextView1.height = 500 + 1 / 5 * (- 500) = 400 dp\n  TextView2.height = 500 + 4 / 5 * (- 500) = 100 dp\n\n\n### layout过程\n\n\n```java\n  protected void onLayout(boolean changed, int l, int t, int r, int b) {\n    if (mOrientation == VERTICAL) {\n        layoutVertical(l, t, r, b);\n    } else {\n        layoutHorizontal(l, t, r, b);\n    }\n  }\n```\n我们可以看出 同样是分成水平和竖直两个方向的 同样分析竖直 方向下的layout过程\n\n```java\n/**\n    * Position the children during a layout pass if the orientation of this\n    * LinearLayout is set to {@link #VERTICAL}.\n    *\n    * @see #getOrientation()\n    * @see #setOrientation(int)\n    * @see #onLayout(boolean, int, int, int, int)\n    * @param left\n    * @param top\n    * @param right\n    * @param bottom\n    */\n   void layoutVertical(int left, int top, int right, int bottom) {\n       final int paddingLeft = mPaddingLeft;\n\n       int childTop;\n       int childLeft;\n\n       //父View默认子View的宽度\n       final int width = right - left;\n       //子View的右侧默认位置\n       int childRight = width - mPaddingRight;\n\n       // 子View的可用空间大小\n       int childSpace = width - paddingLeft - mPaddingRight;\n\n       //子View的个数\n       final int count = getVirtualChildCount();\n\n       final int majorGravity = mGravity & Gravity.VERTICAL_GRAVITY_MASK;\n       final int minorGravity = mGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;\n\n       //根据LinearLayout设置的对其方式 设置第一个子View的Top值\n       switch (majorGravity) {\n          case Gravity.BOTTOM:\n              // mTotalLength contains the padding already\n              childTop = mPaddingTop + bottom - top - mTotalLength;\n              break;\n\n              // mTotalLength contains the padding already\n          case Gravity.CENTER_VERTICAL:\n              childTop = mPaddingTop + (bottom - top - mTotalLength) / 2;\n              break;\n\n          case Gravity.TOP:\n          default:\n              childTop = mPaddingTop;\n              break;\n       }\n\n       //遍历各个子View\n       for (int i = 0; i < count; i++) {\n           final View child = getVirtualChildAt(i);\n           if (child == null) {\n               childTop += measureNullChild(i);\n           } else if (child.getVisibility() != GONE) {\n                //LinearLayout中子View的宽和高有measure过程决定\n               final int childWidth = child.getMeasuredWidth();\n               final int childHeight = child.getMeasuredHeight();\n               //获取子View的LayoutParams\n               final LinearLayout.LayoutParams lp =\n                       (LinearLayout.LayoutParams) child.getLayoutParams();\n\n               int gravity = lp.gravity;\n               if (gravity < 0) {\n                   gravity = minorGravity;\n               }\n               final int layoutDirection = getLayoutDirection();\n               final int absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);\n               //根据子View的对其方式设置Left值\n               switch (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {\n                   case Gravity.CENTER_HORIZONTAL:\n                       childLeft = paddingLeft + ((childSpace - childWidth) / 2)\n                               + lp.leftMargin - lp.rightMargin;\n                       break;\n\n                   case Gravity.RIGHT:\n                       childLeft = childRight - childWidth - lp.rightMargin;\n                       break;\n\n                   case Gravity.LEFT:\n                   default:\n                       childLeft = paddingLeft + lp.leftMargin;\n                       break;\n               }\n               //如果有分割线 添加分割线的高度\n               if (hasDividerBeforeChildAt(i)) {\n                   childTop += mDividerHeight;\n               }\n               //子View的top修改\n               childTop += lp.topMargin;\n               //用setChildFrame()方法设置子控件控件的在父控件上的坐标轴\n               setChildFrame(child, childLeft, childTop + getLocationOffset(child),\n                       childWidth, childHeight);\n               childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);\n\n               i += getChildrenSkipCount(child, i);\n           }\n       }\n   }\n```\n\n#### draw 源码分析\n```java\n  protected void onDraw(Canvas canvas) {\n    if (mDivider == null) {\n        return;\n    }\n\n    if (mOrientation == VERTICAL) {\n        drawDividersVertical(canvas);\n    } else {\n        drawDividersHorizontal(canvas);\n    }\n  }\n```\n同样主要分析垂直方向的处理\n\n```java\n\n  void drawDividersVertical(Canvas canvas) {\n      final int count = getVirtualChildCount();\n      //根据计算好的坐标绘制对应的子View\n      for (int i = 0; i < count; i++) {\n          final View child = getVirtualChildAt(i);\n\n          if (child != null && child.getVisibility() != GONE) {\n              if (hasDividerBeforeChildAt(i)) {\n                  final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n                  final int top = child.getTop() - lp.topMargin - mDividerHeight;\n                  drawHorizontalDivider(canvas, top);\n              }\n          }\n      }\n      //绘制分割线\n      if (hasDividerBeforeChildAt(count)) {\n          final View child = getLastNonGoneChild();\n          int bottom = 0;\n          if (child == null) {\n              bottom = getHeight() - getPaddingBottom() - mDividerHeight;\n          } else {\n              final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n              bottom = child.getBottom() + lp.bottomMargin;\n          }\n          drawHorizontalDivider(canvas, bottom);\n      }\n  }\n\n  void drawHorizontalDivider(Canvas canvas, int top) {\n    mDivider.setBounds(getPaddingLeft() + mDividerPadding, top,\n            getWidth() - getPaddingRight() - mDividerPadding, top + mDividerHeight);\n    mDivider.draw(canvas);\n  }\n```\n","slug":"LinearLayout 源码分析","published":1,"updated":"2017-02-03T09:55:37.000Z","_id":"ciypmw91y00003xo9djg5dd1i","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"LinearLayout-源码分析\"><a href=\"#LinearLayout-源码分析\" class=\"headerlink\" title=\"LinearLayout 源码分析\"></a>LinearLayout 源码分析</h2><h3 id=\"measure过程\"><a href=\"#measure过程\" class=\"headerlink\" title=\"measure过程\"></a>measure过程</h3><h4 id=\"主要过程\"><a href=\"#主要过程\" class=\"headerlink\" title=\"主要过程\"></a>主要过程</h4><ul>\n<li>根据布局方向选择measure过程分支</li>\n<li>初始化相关变量</li>\n<li>对View进行第一次测量</li>\n<li>mTotalLength的再次测量</li>\n<li>二次测量部分View和对为测量的子View进行测量</li>\n</ul>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//判断布局方向</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</div><div class=\"line\">        measureVertical(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        measureHorizontal(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>measureVertical和measureHorizontal只是布局方向上的区别 以下主要分析measureVertical方法</p>\n<h4 id=\"初始化相关变量\"><a href=\"#初始化相关变量\" class=\"headerlink\" title=\"初始化相关变量\"></a>初始化相关变量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//mTotalLength是记录内部使用的高度也就是子View的高度和 而不是LinearLayout的高度</span></div><div class=\"line\">mTotalLength = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">//子视图的最大宽度(不包括layout_weight&gt;0的子View)</span></div><div class=\"line\"><span class=\"keyword\">int</span> maxWidth = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> childState = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> alternativeMaxWidth = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">//子视图的最大宽度(仅包含layout_weight&gt;0的子View)</span></div><div class=\"line\"><span class=\"keyword\">int</span> weightedMaxWidth = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">//子视图是否均为fillParent 用于判断是否需要重新计算</span></div><div class=\"line\"><span class=\"keyword\">boolean</span> allFillParent = <span class=\"keyword\">true</span>;</div><div class=\"line\"><span class=\"comment\">//权重值的总和</span></div><div class=\"line\"><span class=\"keyword\">float</span> totalWeight = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">//子View的数量(统一级别下)</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</div><div class=\"line\"><span class=\"comment\">//高度宽度模式</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\"><span class=\"comment\">//子View的宽度是否需要由父View决定</span></div><div class=\"line\"><span class=\"keyword\">boolean</span> matchWidth = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"keyword\">boolean</span> skippedMeasure = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"comment\">//第几个子View的baseLine作为LinearLayout的基准线</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> baselineChildIndex = mBaselineAlignedChildIndex;  </div><div class=\"line\"><span class=\"comment\">//mUseLargestChild为是否使用最大子元素的尺寸作为标准再次测量</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> useLargestChild = mUseLargestChild;</div><div class=\"line\"><span class=\"comment\">//子View中最高高度</span></div><div class=\"line\"><span class=\"keyword\">int</span> largestChildHeight = Integer.MIN_VALUE;</div></pre></td></tr></table></figure>\n<h4 id=\"第一次测量\"><a href=\"#第一次测量\" class=\"headerlink\" title=\"第一次测量\"></a>第一次测量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// See how tall everyone is. Also remember max width.</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 测量为null的子视图的高度</span></div><div class=\"line\">    <span class=\"comment\">// measureNullChild() 暂时返回 0 便于扩展</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mTotalLength += measureNullChild(i);</div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//Visibility为Gone的时候跳过该View</span></div><div class=\"line\">    <span class=\"comment\">// getChildrenSkipCount()方法同样返回0 便于扩展</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (child.getVisibility() == View.GONE) &#123;</div><div class=\"line\">       i += getChildrenSkipCount(child, i);</div><div class=\"line\">       <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//根据showDivider的值(通过hasDividerBeforeChildAt()) 来决定当前子View是否需要添加分割线的高度</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class=\"line\">        mTotalLength += mDividerHeight;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//会将子view的LayoutParams强转为父View的LayoutParams类型</span></div><div class=\"line\">    LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">    totalWeight += lp.weight;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (heightMode == MeasureSpec.EXACTLY &amp;&amp; lp.height == <span class=\"number\">0</span> &amp;&amp; lp.weight &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 满足该条件的话 不需要现在计算该子视图的高度 测量工作会在之后进行</span></div><div class=\"line\">        <span class=\"comment\">// 若子View的height=0 且weight&gt; 0 则说明该View希望使用的是LinearLayout的剩余空间</span></div><div class=\"line\">        <span class=\"comment\">// LinearLayout是EXACTLY模式的说明LinearLayout高度已经确定 不需要依赖子View的测量结果来计算自己 就无需测量该子View</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</div><div class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + lp.topMargin + lp.bottomMargin);</div><div class=\"line\">        skippedMeasure = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//测量子View</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> oldHeight = Integer.MIN_VALUE;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//当前View的height=0 且weight&gt; 0 则说明该LinearLayout的高度需要靠子View测量(不需要的在上面分支处理了)</span></div><div class=\"line\">        <span class=\"comment\">//将子View的高度设为-1 防止子View高度为0</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (lp.height == <span class=\"number\">0</span> &amp;&amp; lp.weight &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            oldHeight = <span class=\"number\">0</span>;</div><div class=\"line\">            lp.height = LayoutParams.WRAP_CONTENT;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//调用子View的measureChildWithMargins() 对子View进行测量</span></div><div class=\"line\">        <span class=\"comment\">//第四个参数表示当前已使用的宽度  因为是竖直模式 所以为0</span></div><div class=\"line\">        <span class=\"comment\">//最后一个参数表示已使用的高度 如果之前的子View或者当前的View有weight属性 则当前子视图使用 LinearLayout 的所有高度 已使用的高度为0</span></div><div class=\"line\">        measureChildBeforeLayout(child, i, widthMeasureSpec, <span class=\"number\">0</span>, heightMeasureSpec,</div><div class=\"line\">               totalWeight == <span class=\"number\">0</span> ? mTotalLength : <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (oldHeight != Integer.MIN_VALUE) &#123;</div><div class=\"line\">           <span class=\"comment\">//测量完成后 重置子View高度</span></div><div class=\"line\">           lp.height = oldHeight;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</div><div class=\"line\">        <span class=\"comment\">// 比较child测量前后总高度 取较大值</span></div><div class=\"line\">        <span class=\"comment\">///getNextLocationOffset() 返回0 便于扩展</span></div><div class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + childHeight + lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));</div><div class=\"line\">        <span class=\"comment\">// 设置最高子视图大小</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (useLargestChild) &#123;</div><div class=\"line\">            largestChildHeight = Math.max(childHeight, largestChildHeight);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// mBaselineChildTop 表示指定的 baseline 的子视图的顶部高度</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((baselineChildIndex &gt;= <span class=\"number\">0</span>) &amp;&amp; (baselineChildIndex == i + <span class=\"number\">1</span>)) &#123;</div><div class=\"line\">       mBaselineChildTop = mTotalLength;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 设置为 baseline 的子视图的前面不允许设置 weiget 属性</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (i &lt; baselineChildIndex &amp;&amp; lp.weight &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"A child of LinearLayout with index \"</span></div><div class=\"line\">                + <span class=\"string\">\"less than mBaselineAlignedChildIndex has weight &gt; 0, which \"</span></div><div class=\"line\">                + <span class=\"string\">\"won't work.  Either remove the weight, or don't set \"</span></div><div class=\"line\">                + <span class=\"string\">\"mBaselineAlignedChildIndex.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 宽度测量相关</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">boolean</span> matchWidthLocally = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//当LinearLayout非EXACTLY模式 并且自View为MATCH_PARENT时</span></div><div class=\"line\">    <span class=\"comment\">//设置matchWidth和matchWidthLocally为true</span></div><div class=\"line\">    <span class=\"comment\">//该子View占据LinearLayout水平方向上所有空间</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (widthMode != MeasureSpec.EXACTLY &amp;&amp; lp.width == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">        matchWidth = <span class=\"keyword\">true</span>;</div><div class=\"line\">        matchWidthLocally = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> margin = lp.leftMargin + lp.rightMargin;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> measuredWidth = child.getMeasuredWidth() + margin;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//对一堆变量赋值</span></div><div class=\"line\">    maxWidth = Math.max(maxWidth, measuredWidth);</div><div class=\"line\">    childState = combineMeasuredStates(childState, child.getMeasuredState());</div><div class=\"line\"></div><div class=\"line\">    allFillParent = allFillParent &amp;&amp; lp.width == LayoutParams.MATCH_PARENT;</div><div class=\"line\">    <span class=\"keyword\">if</span> (lp.weight &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        weightedMaxWidth = Math.max(weightedMaxWidth,</div><div class=\"line\">                matchWidthLocally ? margin : measuredWidth);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        alternativeMaxWidth = Math.max(alternativeMaxWidth,</div><div class=\"line\">                matchWidthLocally ? margin : measuredWidth);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    i += getChildrenSkipCount(child, i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"二次测量mTotalLength\"><a href=\"#二次测量mTotalLength\" class=\"headerlink\" title=\"二次测量mTotalLength\"></a>二次测量mTotalLength</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//根据hasDividerBeforeChildAt得到showDivider的值是否为end 来判断是否需要加上divider的高度</span></div><div class=\"line\"><span class=\"keyword\">if</span> (mTotalLength &gt; <span class=\"number\">0</span> &amp;&amp; hasDividerBeforeChildAt(count))</div><div class=\"line\">    mTotalLength += mDividerHeight;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//如果高度测量模式为AT_MOST或者UNSPECIFIED 则进行二次测量 且设置了measureWithLargestChild</span></div><div class=\"line\"><span class=\"keyword\">if</span> (useLargestChild &amp;&amp; (heightMode == MeasureSpec.AT_MOST ||</div><div class=\"line\">    heightMode == MeasureSpec.UNSPECIFIED)) &#123;</div><div class=\"line\">    mTotalLength = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\">        <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mTotalLength += measureNullChild(i);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() == GONE) &#123;</div><div class=\"line\">            i += getChildrenSkipCount(child, i);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)</div><div class=\"line\">                child.getLayoutParams();</div><div class=\"line\">        <span class=\"comment\">// 计算所有子View的高度之和</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</div><div class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + largestChildHeight +</div><div class=\"line\">                lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>就是需要useLargestChild</p>\n<p>而 mUseLargestChild = a.getBoolean(R.styleable.LinearLayout_measureWithLargestChild, false);</p>\n<p>就是说仅在LinearLayout的measureWithLargestChild属性设置为True时(默认为false)才可能出现某个child被二次测量</p>\n<p>实例如下</p>\n<p><img src=\"http://p1.bpimg.com/567571/8ac762ffc7d13b2e.png\" alt=\"LinearLayout二次测量\"></p>\n<h4 id=\"二次测量部分View和对为测量的子View进行测量\"><a href=\"#二次测量部分View和对为测量的子View进行测量\" class=\"headerlink\" title=\"二次测量部分View和对为测量的子View进行测量\"></a>二次测量部分View和对为测量的子View进行测量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加上padding的值</span></div><div class=\"line\">mTotalLength += mPaddingTop + mPaddingBottom;</div><div class=\"line\"><span class=\"keyword\">int</span> heightSize = mTotalLength;</div><div class=\"line\"><span class=\"comment\">//minHeight和当前使用的高度比较取较大值</span></div><div class=\"line\">heightSize = Math.max(heightSize, getSuggestedMinimumHeight());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据heightMeasureSpec协助计算heightSizeAndState的大小</span></div><div class=\"line\"><span class=\"comment\">//resolveSizeAndState方法之后会分析</span></div><div class=\"line\"><span class=\"keyword\">int</span> heightSizeAndState = resolveSizeAndState(heightSize, heightMeasureSpec, <span class=\"number\">0</span>);</div><div class=\"line\">heightSize = heightSizeAndState &amp; MEASURED_SIZE_MASK;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Either expand children with weight to take up available space or</span></div><div class=\"line\"><span class=\"comment\">// shrink them if they extend beyond our current bounds. If we skipped</span></div><div class=\"line\"><span class=\"comment\">// measurement on any children, we need to measure them now.</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//delta为额外的空间 及LinearLayout中未被分配的空间(可以为负)</span></div><div class=\"line\"><span class=\"keyword\">int</span> delta = heightSize - mTotalLength;</div><div class=\"line\"><span class=\"keyword\">if</span> (skippedMeasure || delta != <span class=\"number\">0</span> &amp;&amp; totalWeight &gt; <span class=\"number\">0.0f</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">//skippedMeasure为第一次测量下对跳过测量的子View设置的</span></div><div class=\"line\">    <span class=\"comment\">//weightSum为权重和 如果设置了总权重则使用我们所设置的  如果没有则使用子View的weight和</span></div><div class=\"line\">    <span class=\"keyword\">float</span> weightSum = mWeightSum &gt; <span class=\"number\">0.0f</span> ? mWeightSum : totalWeight;</div><div class=\"line\"></div><div class=\"line\">    mTotalLength = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">//测量什么的</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() == View.GONE) &#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">float</span> childExtra = lp.weight;</div><div class=\"line\">        <span class=\"keyword\">if</span> (childExtra &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// Child said it could absorb extra space -- give him his share</span></div><div class=\"line\">            <span class=\"comment\">//计算weight属性分配的大小</span></div><div class=\"line\">            <span class=\"keyword\">int</span> share = (<span class=\"keyword\">int</span>) (childExtra * delta / weightSum);</div><div class=\"line\">            <span class=\"comment\">//权重和减去已经分配权重</span></div><div class=\"line\">            weightSum -= childExtra;</div><div class=\"line\">            <span class=\"comment\">//剩余高度减去分配的高度</span></div><div class=\"line\">            delta -= share;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,</div><div class=\"line\">                    mPaddingLeft + mPaddingRight +</div><div class=\"line\">                            lp.leftMargin + lp.rightMargin, lp.width);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Use a field like lp.isMeasured to figure out if this</span></div><div class=\"line\">            <span class=\"comment\">// child has been previously measured</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> ((lp.height != <span class=\"number\">0</span>) || (heightMode != MeasureSpec.EXACTLY)) &#123;</div><div class=\"line\">                <span class=\"comment\">//子视图已经被测量过</span></div><div class=\"line\">                <span class=\"comment\">//非EXACTLY view需要加上share</span></div><div class=\"line\">                <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight() + share;</div><div class=\"line\">                <span class=\"keyword\">if</span> (childHeight &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    childHeight = <span class=\"number\">0</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//重新测量View</span></div><div class=\"line\">                child.measure(childWidthMeasureSpec,</div><div class=\"line\">                        MeasureSpec.makeMeasureSpec(childHeight, MeasureSpec.EXACTLY));</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//如果当前是EXACTLY模式 说明没有被测量 需要进行测量</span></div><div class=\"line\">                <span class=\"comment\">//子视图首次被测量</span></div><div class=\"line\">                <span class=\"comment\">//EXACTLY模式下 将weight占比的高度分配给子View    </span></div><div class=\"line\">                child.measure(childWidthMeasureSpec,</div><div class=\"line\">                        MeasureSpec.makeMeasureSpec(share &gt; <span class=\"number\">0</span> ? share : <span class=\"number\">0</span>,</div><div class=\"line\">                                MeasureSpec.EXACTLY));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Child may now not fit in vertical dimension.</span></div><div class=\"line\">            childState = combineMeasuredStates(childState, child.getMeasuredState()</div><div class=\"line\">                    &amp; (MEASURED_STATE_MASK&gt;&gt;MEASURED_HEIGHT_STATE_SHIFT));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//处理子视图宽度</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> margin =  lp.leftMargin + lp.rightMargin;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> measuredWidth = child.getMeasuredWidth() + margin;</div><div class=\"line\">        maxWidth = Math.max(maxWidth, measuredWidth);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">boolean</span> matchWidthLocally = widthMode != MeasureSpec.EXACTLY &amp;&amp;</div><div class=\"line\">                lp.width == LayoutParams.MATCH_PARENT;</div><div class=\"line\"></div><div class=\"line\">        alternativeMaxWidth = Math.max(alternativeMaxWidth,</div><div class=\"line\">                matchWidthLocally ? margin : measuredWidth);</div><div class=\"line\"></div><div class=\"line\">        allFillParent = allFillParent &amp;&amp; lp.width == LayoutParams.MATCH_PARENT;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</div><div class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + child.getMeasuredHeight() +</div><div class=\"line\">                lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Add in our padding</span></div><div class=\"line\">    mTotalLength += mPaddingTop + mPaddingBottom;</div><div class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Should we recompute the heightSpec based on the new total length?</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    alternativeMaxWidth = Math.max(alternativeMaxWidth,</div><div class=\"line\">                                   weightedMaxWidth);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// We have no limit, so make all weighted views as tall as the largest child.</span></div><div class=\"line\">    <span class=\"comment\">// Children will have already been measured once.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (useLargestChild &amp;&amp; heightMode != MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span> || child.getVisibility() == View.GONE) &#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp =</div><div class=\"line\">                    (LinearLayout.LayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">float</span> childExtra = lp.weight;</div><div class=\"line\">            <span class=\"keyword\">if</span> (childExtra &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               <span class=\"comment\">//使用最大子视图高度测量</span></div><div class=\"line\">                child.measure(</div><div class=\"line\">                        MeasureSpec.makeMeasureSpec(child.getMeasuredWidth(),</div><div class=\"line\">                                MeasureSpec.EXACTLY),</div><div class=\"line\">                        MeasureSpec.makeMeasureSpec(largestChildHeight,</div><div class=\"line\">                                MeasureSpec.EXACTLY));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (!allFillParent &amp;&amp; widthMode != MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">    maxWidth = alternativeMaxWidth;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">maxWidth += mPaddingLeft + mPaddingRight;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Check against our minimum width</span></div><div class=\"line\">maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());</div><div class=\"line\"></div><div class=\"line\">setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),</div><div class=\"line\">        heightSizeAndState);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (matchWidth) &#123;</div><div class=\"line\">    forceUniformWidth(count, heightMeasureSpec);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>resolveSizeAndState方法 定义在View中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">   * Utility to reconcile a desired size and state, with constraints imposed</div><div class=\"line\">   * by a MeasureSpec. Will take the desired size, unless a different size</div><div class=\"line\">   * is imposed by the constraints. The returned value is a compound integer,</div><div class=\"line\">   * with the resolved size in the &#123;<span class=\"doctag\">@link</span> #MEASURED_SIZE_MASK&#125; bits and</div><div class=\"line\">   * optionally the bit &#123;<span class=\"doctag\">@link</span> #MEASURED_STATE_TOO_SMALL&#125; set if the</div><div class=\"line\">   * resulting size is smaller than the size the view wants to be.</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> size How big the view wants to be.</div><div class=\"line\">   * <span class=\"doctag\">@param</span> measureSpec Constraints imposed by the parent.</div><div class=\"line\">   * <span class=\"doctag\">@param</span> childMeasuredState Size information bit mask for the view's</div><div class=\"line\">   *                           children.</div><div class=\"line\">   * <span class=\"doctag\">@return</span> Size information bit mask as defined by</div><div class=\"line\">   *         &#123;<span class=\"doctag\">@link</span> #MEASURED_SIZE_MASK&#125; and</div><div class=\"line\">   *         &#123;<span class=\"doctag\">@link</span> #MEASURED_STATE_TOO_SMALL&#125;.</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">resolveSizeAndState</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec, <span class=\"keyword\">int</span> childMeasuredState)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> result;</div><div class=\"line\">      <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">          <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">              <span class=\"keyword\">if</span> (specSize &lt; size) &#123;</div><div class=\"line\">                  result = specSize | MEASURED_STATE_TOO_SMALL;</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  result = size;</div><div class=\"line\">              &#125;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">              result = specSize;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">          <span class=\"keyword\">default</span>:</div><div class=\"line\">              result = size;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> result | (childMeasuredState &amp; MEASURED_STATE_MASK);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h6 id=\"delta为负的相关解析\"><a href=\"#delta为负的相关解析\" class=\"headerlink\" title=\"delta为负的相关解析\"></a>delta为负的相关解析</h6><p>相关代码及效果如下</p>\n<p><img src=\"http://p1.bqimg.com/567571/214652b3a9d04170.png\" alt=\"负delta.png\"></p>\n<p>根据之前的measure流程分析一下</p>\n<ul>\n<li>相关变量初始化</li>\n<li>第一次测量  两个子TextView都会被测量 TextView1.height = TextView1.height = 500dp 则mToatalLength为1000dp</li>\n<li>mToatalLength再次测量跳过</li>\n<li>计算delta delta = heightSize - mTotalLength 根据resolveSizeAndState方法 父LinearLayout是EXACTLY模式 所以最终heightSize为500dp delta = -500dp</li>\n<li>根据weight分配剩余空间 TextView1.height = 500 + 1 / 5 <em> (- 500) = 400 dp<br>TextView2.height = 500 + 4 / 5 </em> (- 500) = 100 dp</li>\n</ul>\n<h3 id=\"layout过程\"><a href=\"#layout过程\" class=\"headerlink\" title=\"layout过程\"></a>layout过程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</div><div class=\"line\">      layoutVertical(l, t, r, b);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      layoutHorizontal(l, t, r, b);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以看出 同样是分成水平和竖直两个方向的 同样分析竖直 方向下的layout过程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * Position the children during a layout pass if the orientation of this</div><div class=\"line\">    * LinearLayout is set to &#123;<span class=\"doctag\">@link</span> #VERTICAL&#125;.</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@see</span> #getOrientation()</div><div class=\"line\">    * <span class=\"doctag\">@see</span> #setOrientation(int)</div><div class=\"line\">    * <span class=\"doctag\">@see</span> #onLayout(boolean, int, int, int, int)</div><div class=\"line\">    * <span class=\"doctag\">@param</span> left</div><div class=\"line\">    * <span class=\"doctag\">@param</span> top</div><div class=\"line\">    * <span class=\"doctag\">@param</span> right</div><div class=\"line\">    * <span class=\"doctag\">@param</span> bottom</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">layoutVertical</span><span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingLeft = mPaddingLeft;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> childTop;</div><div class=\"line\">       <span class=\"keyword\">int</span> childLeft;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//父View默认子View的宽度</span></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = right - left;</div><div class=\"line\">       <span class=\"comment\">//子View的右侧默认位置</span></div><div class=\"line\">       <span class=\"keyword\">int</span> childRight = width - mPaddingRight;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 子View的可用空间大小</span></div><div class=\"line\">       <span class=\"keyword\">int</span> childSpace = width - paddingLeft - mPaddingRight;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//子View的个数</span></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> majorGravity = mGravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> minorGravity = mGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//根据LinearLayout设置的对其方式 设置第一个子View的Top值</span></div><div class=\"line\">       <span class=\"keyword\">switch</span> (majorGravity) &#123;</div><div class=\"line\">          <span class=\"keyword\">case</span> Gravity.BOTTOM:</div><div class=\"line\">              <span class=\"comment\">// mTotalLength contains the padding already</span></div><div class=\"line\">              childTop = mPaddingTop + bottom - top - mTotalLength;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"comment\">// mTotalLength contains the padding already</span></div><div class=\"line\">          <span class=\"keyword\">case</span> Gravity.CENTER_VERTICAL:</div><div class=\"line\">              childTop = mPaddingTop + (bottom - top - mTotalLength) / <span class=\"number\">2</span>;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">case</span> Gravity.TOP:</div><div class=\"line\">          <span class=\"keyword\">default</span>:</div><div class=\"line\">              childTop = mPaddingTop;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//遍历各个子View</span></div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\">           <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               childTop += measureNullChild(i);</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">                <span class=\"comment\">//LinearLayout中子View的宽和高有measure过程决定</span></div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = child.getMeasuredWidth();</div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</div><div class=\"line\">               <span class=\"comment\">//获取子View的LayoutParams</span></div><div class=\"line\">               <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp =</div><div class=\"line\">                       (LinearLayout.LayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">int</span> gravity = lp.gravity;</div><div class=\"line\">               <span class=\"keyword\">if</span> (gravity &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                   gravity = minorGravity;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);</div><div class=\"line\">               <span class=\"comment\">//根据子View的对其方式设置Left值</span></div><div class=\"line\">               <span class=\"keyword\">switch</span> (absoluteGravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) &#123;</div><div class=\"line\">                   <span class=\"keyword\">case</span> Gravity.CENTER_HORIZONTAL:</div><div class=\"line\">                       childLeft = paddingLeft + ((childSpace - childWidth) / <span class=\"number\">2</span>)</div><div class=\"line\">                               + lp.leftMargin - lp.rightMargin;</div><div class=\"line\">                       <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"keyword\">case</span> Gravity.RIGHT:</div><div class=\"line\">                       childLeft = childRight - childWidth - lp.rightMargin;</div><div class=\"line\">                       <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"keyword\">case</span> Gravity.LEFT:</div><div class=\"line\">                   <span class=\"keyword\">default</span>:</div><div class=\"line\">                       childLeft = paddingLeft + lp.leftMargin;</div><div class=\"line\">                       <span class=\"keyword\">break</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"comment\">//如果有分割线 添加分割线的高度</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class=\"line\">                   childTop += mDividerHeight;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"comment\">//子View的top修改</span></div><div class=\"line\">               childTop += lp.topMargin;</div><div class=\"line\">               <span class=\"comment\">//用setChildFrame()方法设置子控件控件的在父控件上的坐标轴</span></div><div class=\"line\">               setChildFrame(child, childLeft, childTop + getLocationOffset(child),</div><div class=\"line\">                       childWidth, childHeight);</div><div class=\"line\">               childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);</div><div class=\"line\"></div><div class=\"line\">               i += getChildrenSkipCount(child, i);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"draw-源码分析\"><a href=\"#draw-源码分析\" class=\"headerlink\" title=\"draw 源码分析\"></a>draw 源码分析</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mDivider == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</div><div class=\"line\">      drawDividersVertical(canvas);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      drawDividersHorizontal(canvas);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>同样主要分析垂直方向的处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">drawDividersVertical</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</div><div class=\"line\">    <span class=\"comment\">//根据计算好的坐标绘制对应的子View</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (child != <span class=\"keyword\">null</span> &amp;&amp; child.getVisibility() != GONE) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> top = child.getTop() - lp.topMargin - mDividerHeight;</div><div class=\"line\">                drawHorizontalDivider(canvas, top);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//绘制分割线</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(count)) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = getLastNonGoneChild();</div><div class=\"line\">        <span class=\"keyword\">int</span> bottom = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            bottom = getHeight() - getPaddingBottom() - mDividerHeight;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">            bottom = child.getBottom() + lp.bottomMargin;</div><div class=\"line\">        &#125;</div><div class=\"line\">        drawHorizontalDivider(canvas, bottom);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">drawHorizontalDivider</span><span class=\"params\">(Canvas canvas, <span class=\"keyword\">int</span> top)</span> </span>&#123;</div><div class=\"line\">  mDivider.setBounds(getPaddingLeft() + mDividerPadding, top,</div><div class=\"line\">          getWidth() - getPaddingRight() - mDividerPadding, top + mDividerHeight);</div><div class=\"line\">  mDivider.draw(canvas);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<h2 id=\"LinearLayout-源码分析\"><a href=\"#LinearLayout-源码分析\" class=\"headerlink\" title=\"LinearLayout 源码分析\"></a>LinearLayout 源码分析</h2><h3 id=\"measure过程\"><a href=\"#measure过程\" class=\"headerlink\" title=\"measure过程\"></a>measure过程</h3><h4 id=\"主要过程\"><a href=\"#主要过程\" class=\"headerlink\" title=\"主要过程\"></a>主要过程</h4><ul>\n<li>根据布局方向选择measure过程分支</li>\n<li>初始化相关变量</li>\n<li>对View进行第一次测量</li>\n<li>mTotalLength的再次测量</li>\n<li>二次测量部分View和对为测量的子View进行测量</li>\n</ul>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//判断布局方向</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</div><div class=\"line\">        measureVertical(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        measureHorizontal(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>measureVertical和measureHorizontal只是布局方向上的区别 以下主要分析measureVertical方法</p>\n<h4 id=\"初始化相关变量\"><a href=\"#初始化相关变量\" class=\"headerlink\" title=\"初始化相关变量\"></a>初始化相关变量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//mTotalLength是记录内部使用的高度也就是子View的高度和 而不是LinearLayout的高度</span></div><div class=\"line\">mTotalLength = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">//子视图的最大宽度(不包括layout_weight&gt;0的子View)</span></div><div class=\"line\"><span class=\"keyword\">int</span> maxWidth = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> childState = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> alternativeMaxWidth = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">//子视图的最大宽度(仅包含layout_weight&gt;0的子View)</span></div><div class=\"line\"><span class=\"keyword\">int</span> weightedMaxWidth = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">//子视图是否均为fillParent 用于判断是否需要重新计算</span></div><div class=\"line\"><span class=\"keyword\">boolean</span> allFillParent = <span class=\"keyword\">true</span>;</div><div class=\"line\"><span class=\"comment\">//权重值的总和</span></div><div class=\"line\"><span class=\"keyword\">float</span> totalWeight = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">//子View的数量(统一级别下)</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</div><div class=\"line\"><span class=\"comment\">//高度宽度模式</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\"><span class=\"comment\">//子View的宽度是否需要由父View决定</span></div><div class=\"line\"><span class=\"keyword\">boolean</span> matchWidth = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"keyword\">boolean</span> skippedMeasure = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"comment\">//第几个子View的baseLine作为LinearLayout的基准线</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> baselineChildIndex = mBaselineAlignedChildIndex;  </div><div class=\"line\"><span class=\"comment\">//mUseLargestChild为是否使用最大子元素的尺寸作为标准再次测量</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> useLargestChild = mUseLargestChild;</div><div class=\"line\"><span class=\"comment\">//子View中最高高度</span></div><div class=\"line\"><span class=\"keyword\">int</span> largestChildHeight = Integer.MIN_VALUE;</div></pre></td></tr></table></figure>\n<h4 id=\"第一次测量\"><a href=\"#第一次测量\" class=\"headerlink\" title=\"第一次测量\"></a>第一次测量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// See how tall everyone is. Also remember max width.</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 测量为null的子视图的高度</span></div><div class=\"line\">    <span class=\"comment\">// measureNullChild() 暂时返回 0 便于扩展</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mTotalLength += measureNullChild(i);</div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//Visibility为Gone的时候跳过该View</span></div><div class=\"line\">    <span class=\"comment\">// getChildrenSkipCount()方法同样返回0 便于扩展</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (child.getVisibility() == View.GONE) &#123;</div><div class=\"line\">       i += getChildrenSkipCount(child, i);</div><div class=\"line\">       <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//根据showDivider的值(通过hasDividerBeforeChildAt()) 来决定当前子View是否需要添加分割线的高度</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class=\"line\">        mTotalLength += mDividerHeight;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//会将子view的LayoutParams强转为父View的LayoutParams类型</span></div><div class=\"line\">    LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">    totalWeight += lp.weight;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (heightMode == MeasureSpec.EXACTLY &amp;&amp; lp.height == <span class=\"number\">0</span> &amp;&amp; lp.weight &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 满足该条件的话 不需要现在计算该子视图的高度 测量工作会在之后进行</span></div><div class=\"line\">        <span class=\"comment\">// 若子View的height=0 且weight&gt; 0 则说明该View希望使用的是LinearLayout的剩余空间</span></div><div class=\"line\">        <span class=\"comment\">// LinearLayout是EXACTLY模式的说明LinearLayout高度已经确定 不需要依赖子View的测量结果来计算自己 就无需测量该子View</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</div><div class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + lp.topMargin + lp.bottomMargin);</div><div class=\"line\">        skippedMeasure = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//测量子View</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> oldHeight = Integer.MIN_VALUE;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//当前View的height=0 且weight&gt; 0 则说明该LinearLayout的高度需要靠子View测量(不需要的在上面分支处理了)</span></div><div class=\"line\">        <span class=\"comment\">//将子View的高度设为-1 防止子View高度为0</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (lp.height == <span class=\"number\">0</span> &amp;&amp; lp.weight &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            oldHeight = <span class=\"number\">0</span>;</div><div class=\"line\">            lp.height = LayoutParams.WRAP_CONTENT;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//调用子View的measureChildWithMargins() 对子View进行测量</span></div><div class=\"line\">        <span class=\"comment\">//第四个参数表示当前已使用的宽度  因为是竖直模式 所以为0</span></div><div class=\"line\">        <span class=\"comment\">//最后一个参数表示已使用的高度 如果之前的子View或者当前的View有weight属性 则当前子视图使用 LinearLayout 的所有高度 已使用的高度为0</span></div><div class=\"line\">        measureChildBeforeLayout(child, i, widthMeasureSpec, <span class=\"number\">0</span>, heightMeasureSpec,</div><div class=\"line\">               totalWeight == <span class=\"number\">0</span> ? mTotalLength : <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (oldHeight != Integer.MIN_VALUE) &#123;</div><div class=\"line\">           <span class=\"comment\">//测量完成后 重置子View高度</span></div><div class=\"line\">           lp.height = oldHeight;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</div><div class=\"line\">        <span class=\"comment\">// 比较child测量前后总高度 取较大值</span></div><div class=\"line\">        <span class=\"comment\">///getNextLocationOffset() 返回0 便于扩展</span></div><div class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + childHeight + lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));</div><div class=\"line\">        <span class=\"comment\">// 设置最高子视图大小</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (useLargestChild) &#123;</div><div class=\"line\">            largestChildHeight = Math.max(childHeight, largestChildHeight);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// mBaselineChildTop 表示指定的 baseline 的子视图的顶部高度</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((baselineChildIndex &gt;= <span class=\"number\">0</span>) &amp;&amp; (baselineChildIndex == i + <span class=\"number\">1</span>)) &#123;</div><div class=\"line\">       mBaselineChildTop = mTotalLength;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 设置为 baseline 的子视图的前面不允许设置 weiget 属性</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (i &lt; baselineChildIndex &amp;&amp; lp.weight &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"A child of LinearLayout with index \"</span></div><div class=\"line\">                + <span class=\"string\">\"less than mBaselineAlignedChildIndex has weight &gt; 0, which \"</span></div><div class=\"line\">                + <span class=\"string\">\"won't work.  Either remove the weight, or don't set \"</span></div><div class=\"line\">                + <span class=\"string\">\"mBaselineAlignedChildIndex.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 宽度测量相关</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">boolean</span> matchWidthLocally = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//当LinearLayout非EXACTLY模式 并且自View为MATCH_PARENT时</span></div><div class=\"line\">    <span class=\"comment\">//设置matchWidth和matchWidthLocally为true</span></div><div class=\"line\">    <span class=\"comment\">//该子View占据LinearLayout水平方向上所有空间</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (widthMode != MeasureSpec.EXACTLY &amp;&amp; lp.width == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">        matchWidth = <span class=\"keyword\">true</span>;</div><div class=\"line\">        matchWidthLocally = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> margin = lp.leftMargin + lp.rightMargin;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> measuredWidth = child.getMeasuredWidth() + margin;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//对一堆变量赋值</span></div><div class=\"line\">    maxWidth = Math.max(maxWidth, measuredWidth);</div><div class=\"line\">    childState = combineMeasuredStates(childState, child.getMeasuredState());</div><div class=\"line\"></div><div class=\"line\">    allFillParent = allFillParent &amp;&amp; lp.width == LayoutParams.MATCH_PARENT;</div><div class=\"line\">    <span class=\"keyword\">if</span> (lp.weight &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        weightedMaxWidth = Math.max(weightedMaxWidth,</div><div class=\"line\">                matchWidthLocally ? margin : measuredWidth);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        alternativeMaxWidth = Math.max(alternativeMaxWidth,</div><div class=\"line\">                matchWidthLocally ? margin : measuredWidth);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    i += getChildrenSkipCount(child, i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"二次测量mTotalLength\"><a href=\"#二次测量mTotalLength\" class=\"headerlink\" title=\"二次测量mTotalLength\"></a>二次测量mTotalLength</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//根据hasDividerBeforeChildAt得到showDivider的值是否为end 来判断是否需要加上divider的高度</span></div><div class=\"line\"><span class=\"keyword\">if</span> (mTotalLength &gt; <span class=\"number\">0</span> &amp;&amp; hasDividerBeforeChildAt(count))</div><div class=\"line\">    mTotalLength += mDividerHeight;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//如果高度测量模式为AT_MOST或者UNSPECIFIED 则进行二次测量 且设置了measureWithLargestChild</span></div><div class=\"line\"><span class=\"keyword\">if</span> (useLargestChild &amp;&amp; (heightMode == MeasureSpec.AT_MOST ||</div><div class=\"line\">    heightMode == MeasureSpec.UNSPECIFIED)) &#123;</div><div class=\"line\">    mTotalLength = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\">        <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mTotalLength += measureNullChild(i);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() == GONE) &#123;</div><div class=\"line\">            i += getChildrenSkipCount(child, i);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)</div><div class=\"line\">                child.getLayoutParams();</div><div class=\"line\">        <span class=\"comment\">// 计算所有子View的高度之和</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</div><div class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + largestChildHeight +</div><div class=\"line\">                lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>就是需要useLargestChild</p>\n<p>而 mUseLargestChild = a.getBoolean(R.styleable.LinearLayout_measureWithLargestChild, false);</p>\n<p>就是说仅在LinearLayout的measureWithLargestChild属性设置为True时(默认为false)才可能出现某个child被二次测量</p>\n<p>实例如下</p>\n<p><img src=\"http://p1.bpimg.com/567571/8ac762ffc7d13b2e.png\" alt=\"LinearLayout二次测量\"></p>\n<h4 id=\"二次测量部分View和对为测量的子View进行测量\"><a href=\"#二次测量部分View和对为测量的子View进行测量\" class=\"headerlink\" title=\"二次测量部分View和对为测量的子View进行测量\"></a>二次测量部分View和对为测量的子View进行测量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加上padding的值</span></div><div class=\"line\">mTotalLength += mPaddingTop + mPaddingBottom;</div><div class=\"line\"><span class=\"keyword\">int</span> heightSize = mTotalLength;</div><div class=\"line\"><span class=\"comment\">//minHeight和当前使用的高度比较取较大值</span></div><div class=\"line\">heightSize = Math.max(heightSize, getSuggestedMinimumHeight());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据heightMeasureSpec协助计算heightSizeAndState的大小</span></div><div class=\"line\"><span class=\"comment\">//resolveSizeAndState方法之后会分析</span></div><div class=\"line\"><span class=\"keyword\">int</span> heightSizeAndState = resolveSizeAndState(heightSize, heightMeasureSpec, <span class=\"number\">0</span>);</div><div class=\"line\">heightSize = heightSizeAndState &amp; MEASURED_SIZE_MASK;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Either expand children with weight to take up available space or</span></div><div class=\"line\"><span class=\"comment\">// shrink them if they extend beyond our current bounds. If we skipped</span></div><div class=\"line\"><span class=\"comment\">// measurement on any children, we need to measure them now.</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//delta为额外的空间 及LinearLayout中未被分配的空间(可以为负)</span></div><div class=\"line\"><span class=\"keyword\">int</span> delta = heightSize - mTotalLength;</div><div class=\"line\"><span class=\"keyword\">if</span> (skippedMeasure || delta != <span class=\"number\">0</span> &amp;&amp; totalWeight &gt; <span class=\"number\">0.0f</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">//skippedMeasure为第一次测量下对跳过测量的子View设置的</span></div><div class=\"line\">    <span class=\"comment\">//weightSum为权重和 如果设置了总权重则使用我们所设置的  如果没有则使用子View的weight和</span></div><div class=\"line\">    <span class=\"keyword\">float</span> weightSum = mWeightSum &gt; <span class=\"number\">0.0f</span> ? mWeightSum : totalWeight;</div><div class=\"line\"></div><div class=\"line\">    mTotalLength = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">//测量什么的</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() == View.GONE) &#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">float</span> childExtra = lp.weight;</div><div class=\"line\">        <span class=\"keyword\">if</span> (childExtra &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// Child said it could absorb extra space -- give him his share</span></div><div class=\"line\">            <span class=\"comment\">//计算weight属性分配的大小</span></div><div class=\"line\">            <span class=\"keyword\">int</span> share = (<span class=\"keyword\">int</span>) (childExtra * delta / weightSum);</div><div class=\"line\">            <span class=\"comment\">//权重和减去已经分配权重</span></div><div class=\"line\">            weightSum -= childExtra;</div><div class=\"line\">            <span class=\"comment\">//剩余高度减去分配的高度</span></div><div class=\"line\">            delta -= share;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,</div><div class=\"line\">                    mPaddingLeft + mPaddingRight +</div><div class=\"line\">                            lp.leftMargin + lp.rightMargin, lp.width);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Use a field like lp.isMeasured to figure out if this</span></div><div class=\"line\">            <span class=\"comment\">// child has been previously measured</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> ((lp.height != <span class=\"number\">0</span>) || (heightMode != MeasureSpec.EXACTLY)) &#123;</div><div class=\"line\">                <span class=\"comment\">//子视图已经被测量过</span></div><div class=\"line\">                <span class=\"comment\">//非EXACTLY view需要加上share</span></div><div class=\"line\">                <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight() + share;</div><div class=\"line\">                <span class=\"keyword\">if</span> (childHeight &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    childHeight = <span class=\"number\">0</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//重新测量View</span></div><div class=\"line\">                child.measure(childWidthMeasureSpec,</div><div class=\"line\">                        MeasureSpec.makeMeasureSpec(childHeight, MeasureSpec.EXACTLY));</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//如果当前是EXACTLY模式 说明没有被测量 需要进行测量</span></div><div class=\"line\">                <span class=\"comment\">//子视图首次被测量</span></div><div class=\"line\">                <span class=\"comment\">//EXACTLY模式下 将weight占比的高度分配给子View    </span></div><div class=\"line\">                child.measure(childWidthMeasureSpec,</div><div class=\"line\">                        MeasureSpec.makeMeasureSpec(share &gt; <span class=\"number\">0</span> ? share : <span class=\"number\">0</span>,</div><div class=\"line\">                                MeasureSpec.EXACTLY));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Child may now not fit in vertical dimension.</span></div><div class=\"line\">            childState = combineMeasuredStates(childState, child.getMeasuredState()</div><div class=\"line\">                    &amp; (MEASURED_STATE_MASK&gt;&gt;MEASURED_HEIGHT_STATE_SHIFT));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//处理子视图宽度</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> margin =  lp.leftMargin + lp.rightMargin;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> measuredWidth = child.getMeasuredWidth() + margin;</div><div class=\"line\">        maxWidth = Math.max(maxWidth, measuredWidth);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">boolean</span> matchWidthLocally = widthMode != MeasureSpec.EXACTLY &amp;&amp;</div><div class=\"line\">                lp.width == LayoutParams.MATCH_PARENT;</div><div class=\"line\"></div><div class=\"line\">        alternativeMaxWidth = Math.max(alternativeMaxWidth,</div><div class=\"line\">                matchWidthLocally ? margin : measuredWidth);</div><div class=\"line\"></div><div class=\"line\">        allFillParent = allFillParent &amp;&amp; lp.width == LayoutParams.MATCH_PARENT;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</div><div class=\"line\">        mTotalLength = Math.max(totalLength, totalLength + child.getMeasuredHeight() +</div><div class=\"line\">                lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Add in our padding</span></div><div class=\"line\">    mTotalLength += mPaddingTop + mPaddingBottom;</div><div class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Should we recompute the heightSpec based on the new total length?</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    alternativeMaxWidth = Math.max(alternativeMaxWidth,</div><div class=\"line\">                                   weightedMaxWidth);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// We have no limit, so make all weighted views as tall as the largest child.</span></div><div class=\"line\">    <span class=\"comment\">// Children will have already been measured once.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (useLargestChild &amp;&amp; heightMode != MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span> || child.getVisibility() == View.GONE) &#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp =</div><div class=\"line\">                    (LinearLayout.LayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">float</span> childExtra = lp.weight;</div><div class=\"line\">            <span class=\"keyword\">if</span> (childExtra &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               <span class=\"comment\">//使用最大子视图高度测量</span></div><div class=\"line\">                child.measure(</div><div class=\"line\">                        MeasureSpec.makeMeasureSpec(child.getMeasuredWidth(),</div><div class=\"line\">                                MeasureSpec.EXACTLY),</div><div class=\"line\">                        MeasureSpec.makeMeasureSpec(largestChildHeight,</div><div class=\"line\">                                MeasureSpec.EXACTLY));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (!allFillParent &amp;&amp; widthMode != MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">    maxWidth = alternativeMaxWidth;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">maxWidth += mPaddingLeft + mPaddingRight;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Check against our minimum width</span></div><div class=\"line\">maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());</div><div class=\"line\"></div><div class=\"line\">setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),</div><div class=\"line\">        heightSizeAndState);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (matchWidth) &#123;</div><div class=\"line\">    forceUniformWidth(count, heightMeasureSpec);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>resolveSizeAndState方法 定义在View中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">   * Utility to reconcile a desired size and state, with constraints imposed</div><div class=\"line\">   * by a MeasureSpec. Will take the desired size, unless a different size</div><div class=\"line\">   * is imposed by the constraints. The returned value is a compound integer,</div><div class=\"line\">   * with the resolved size in the &#123;<span class=\"doctag\">@link</span> #MEASURED_SIZE_MASK&#125; bits and</div><div class=\"line\">   * optionally the bit &#123;<span class=\"doctag\">@link</span> #MEASURED_STATE_TOO_SMALL&#125; set if the</div><div class=\"line\">   * resulting size is smaller than the size the view wants to be.</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> size How big the view wants to be.</div><div class=\"line\">   * <span class=\"doctag\">@param</span> measureSpec Constraints imposed by the parent.</div><div class=\"line\">   * <span class=\"doctag\">@param</span> childMeasuredState Size information bit mask for the view's</div><div class=\"line\">   *                           children.</div><div class=\"line\">   * <span class=\"doctag\">@return</span> Size information bit mask as defined by</div><div class=\"line\">   *         &#123;<span class=\"doctag\">@link</span> #MEASURED_SIZE_MASK&#125; and</div><div class=\"line\">   *         &#123;<span class=\"doctag\">@link</span> #MEASURED_STATE_TOO_SMALL&#125;.</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">resolveSizeAndState</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec, <span class=\"keyword\">int</span> childMeasuredState)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> result;</div><div class=\"line\">      <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">          <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">              <span class=\"keyword\">if</span> (specSize &lt; size) &#123;</div><div class=\"line\">                  result = specSize | MEASURED_STATE_TOO_SMALL;</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  result = size;</div><div class=\"line\">              &#125;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">              result = specSize;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">          <span class=\"keyword\">default</span>:</div><div class=\"line\">              result = size;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> result | (childMeasuredState &amp; MEASURED_STATE_MASK);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h6 id=\"delta为负的相关解析\"><a href=\"#delta为负的相关解析\" class=\"headerlink\" title=\"delta为负的相关解析\"></a>delta为负的相关解析</h6><p>相关代码及效果如下</p>\n<p><img src=\"http://p1.bqimg.com/567571/214652b3a9d04170.png\" alt=\"负delta.png\"></p>\n<p>根据之前的measure流程分析一下</p>\n<ul>\n<li>相关变量初始化</li>\n<li>第一次测量  两个子TextView都会被测量 TextView1.height = TextView1.height = 500dp 则mToatalLength为1000dp</li>\n<li>mToatalLength再次测量跳过</li>\n<li>计算delta delta = heightSize - mTotalLength 根据resolveSizeAndState方法 父LinearLayout是EXACTLY模式 所以最终heightSize为500dp delta = -500dp</li>\n<li>根据weight分配剩余空间 TextView1.height = 500 + 1 / 5 <em> (- 500) = 400 dp<br>TextView2.height = 500 + 4 / 5 </em> (- 500) = 100 dp</li>\n</ul>\n<h3 id=\"layout过程\"><a href=\"#layout过程\" class=\"headerlink\" title=\"layout过程\"></a>layout过程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</div><div class=\"line\">      layoutVertical(l, t, r, b);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      layoutHorizontal(l, t, r, b);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以看出 同样是分成水平和竖直两个方向的 同样分析竖直 方向下的layout过程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * Position the children during a layout pass if the orientation of this</div><div class=\"line\">    * LinearLayout is set to &#123;<span class=\"doctag\">@link</span> #VERTICAL&#125;.</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@see</span> #getOrientation()</div><div class=\"line\">    * <span class=\"doctag\">@see</span> #setOrientation(int)</div><div class=\"line\">    * <span class=\"doctag\">@see</span> #onLayout(boolean, int, int, int, int)</div><div class=\"line\">    * <span class=\"doctag\">@param</span> left</div><div class=\"line\">    * <span class=\"doctag\">@param</span> top</div><div class=\"line\">    * <span class=\"doctag\">@param</span> right</div><div class=\"line\">    * <span class=\"doctag\">@param</span> bottom</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">layoutVertical</span><span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingLeft = mPaddingLeft;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> childTop;</div><div class=\"line\">       <span class=\"keyword\">int</span> childLeft;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//父View默认子View的宽度</span></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = right - left;</div><div class=\"line\">       <span class=\"comment\">//子View的右侧默认位置</span></div><div class=\"line\">       <span class=\"keyword\">int</span> childRight = width - mPaddingRight;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 子View的可用空间大小</span></div><div class=\"line\">       <span class=\"keyword\">int</span> childSpace = width - paddingLeft - mPaddingRight;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//子View的个数</span></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> majorGravity = mGravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> minorGravity = mGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//根据LinearLayout设置的对其方式 设置第一个子View的Top值</span></div><div class=\"line\">       <span class=\"keyword\">switch</span> (majorGravity) &#123;</div><div class=\"line\">          <span class=\"keyword\">case</span> Gravity.BOTTOM:</div><div class=\"line\">              <span class=\"comment\">// mTotalLength contains the padding already</span></div><div class=\"line\">              childTop = mPaddingTop + bottom - top - mTotalLength;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"comment\">// mTotalLength contains the padding already</span></div><div class=\"line\">          <span class=\"keyword\">case</span> Gravity.CENTER_VERTICAL:</div><div class=\"line\">              childTop = mPaddingTop + (bottom - top - mTotalLength) / <span class=\"number\">2</span>;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">case</span> Gravity.TOP:</div><div class=\"line\">          <span class=\"keyword\">default</span>:</div><div class=\"line\">              childTop = mPaddingTop;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//遍历各个子View</span></div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\">           <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               childTop += measureNullChild(i);</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">                <span class=\"comment\">//LinearLayout中子View的宽和高有measure过程决定</span></div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = child.getMeasuredWidth();</div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</div><div class=\"line\">               <span class=\"comment\">//获取子View的LayoutParams</span></div><div class=\"line\">               <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp =</div><div class=\"line\">                       (LinearLayout.LayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">int</span> gravity = lp.gravity;</div><div class=\"line\">               <span class=\"keyword\">if</span> (gravity &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                   gravity = minorGravity;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);</div><div class=\"line\">               <span class=\"comment\">//根据子View的对其方式设置Left值</span></div><div class=\"line\">               <span class=\"keyword\">switch</span> (absoluteGravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) &#123;</div><div class=\"line\">                   <span class=\"keyword\">case</span> Gravity.CENTER_HORIZONTAL:</div><div class=\"line\">                       childLeft = paddingLeft + ((childSpace - childWidth) / <span class=\"number\">2</span>)</div><div class=\"line\">                               + lp.leftMargin - lp.rightMargin;</div><div class=\"line\">                       <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"keyword\">case</span> Gravity.RIGHT:</div><div class=\"line\">                       childLeft = childRight - childWidth - lp.rightMargin;</div><div class=\"line\">                       <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"keyword\">case</span> Gravity.LEFT:</div><div class=\"line\">                   <span class=\"keyword\">default</span>:</div><div class=\"line\">                       childLeft = paddingLeft + lp.leftMargin;</div><div class=\"line\">                       <span class=\"keyword\">break</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"comment\">//如果有分割线 添加分割线的高度</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class=\"line\">                   childTop += mDividerHeight;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"comment\">//子View的top修改</span></div><div class=\"line\">               childTop += lp.topMargin;</div><div class=\"line\">               <span class=\"comment\">//用setChildFrame()方法设置子控件控件的在父控件上的坐标轴</span></div><div class=\"line\">               setChildFrame(child, childLeft, childTop + getLocationOffset(child),</div><div class=\"line\">                       childWidth, childHeight);</div><div class=\"line\">               childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);</div><div class=\"line\"></div><div class=\"line\">               i += getChildrenSkipCount(child, i);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"draw-源码分析\"><a href=\"#draw-源码分析\" class=\"headerlink\" title=\"draw 源码分析\"></a>draw 源码分析</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mDivider == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</div><div class=\"line\">      drawDividersVertical(canvas);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      drawDividersHorizontal(canvas);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>同样主要分析垂直方向的处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">drawDividersVertical</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</div><div class=\"line\">    <span class=\"comment\">//根据计算好的坐标绘制对应的子View</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (child != <span class=\"keyword\">null</span> &amp;&amp; child.getVisibility() != GONE) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> top = child.getTop() - lp.topMargin - mDividerHeight;</div><div class=\"line\">                drawHorizontalDivider(canvas, top);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//绘制分割线</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(count)) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = getLastNonGoneChild();</div><div class=\"line\">        <span class=\"keyword\">int</span> bottom = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            bottom = getHeight() - getPaddingBottom() - mDividerHeight;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">            bottom = child.getBottom() + lp.bottomMargin;</div><div class=\"line\">        &#125;</div><div class=\"line\">        drawHorizontalDivider(canvas, bottom);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">drawHorizontalDivider</span><span class=\"params\">(Canvas canvas, <span class=\"keyword\">int</span> top)</span> </span>&#123;</div><div class=\"line\">  mDivider.setBounds(getPaddingLeft() + mDividerPadding, top,</div><div class=\"line\">          getWidth() - getPaddingRight() - mDividerPadding, top + mDividerHeight);</div><div class=\"line\">  mDivider.draw(canvas);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Android View 相关源码分析之一 从setContentView与LayoutInflater说起","date":"2017-02-03T09:29:24.000Z","_content":"\n## 从setContentView与LayoutInflater说起\n### setContentView分析\n#### 相关关系\n\n  ![相关关系图](http://p1.bpimg.com/567571/ad9dd8344a63f0cd.png)  \n  <!-- more -->\n\n  Activity中有Window成员 实例化为PhoneWindow PhoneWindow是抽象Window类的实现类\n\n  Window提供了绘制窗口的通用API PhoneWindow中包含了DecorView对象 是所有窗口(Activity界面)的根View\n\n  具体的构如下\n\n  ![View层级分析](http://i1.piimg.com/567571/b7961c0d826c75e0.png)\n\n  具体的可以通过hierarchyviewer工具分析一下\n\n\n\n#### PhoneWindow的setContentView分析\n>Window类的setContentView方法 而Window的setContentView方法是抽象的  所以查看PhoneWindow的setContentView()\n\n1. setContentView方法\n  ```java\n    // This is the view in which the window contents are placed. It is either\n    // mDecor itself, or a child of mDecor where the contents go.\n    private ViewGroup mContentParent;\n\n    @Override\n    public void setContentView(int layoutResID) {\n        // Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window\n        // decor, when theme attributes and the like are crystalized. Do not check the feature\n        // before this happens.\n        if (mContentParent == null) {\n            //第一次调用\n            //下面会详细分析\n            installDecor();\n        } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            //移除该mContentParent下的所有View\n            //又因为这个的存在  我们可以多次使用setContentView()\n            mContentParent.removeAllViews();\n        }\n        //判断是否使用了Activity的过度动画\n        if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n          //设置动画场景\n            final Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,\n                    getContext());\n            transitionTo(newScene);\n        } else {\n            //将资源文件通过LayoutInflater对象装换为View树\n            //在PhoneWindow的构造函数中 mLayoutInflater = LayoutInflater.from(context);\n            mLayoutInflater.inflate(layoutResID, mContentParent);\n        }\n\n        //View中\n        /**\n         * Ask that a new dispatch of {@link #onApplyWindowInsets(WindowInsets)} be performed.\n         */\n        // public void requestApplyInsets() {\n        //     requestFitSystemWindows();\n        // }\n        mContentParent.requestApplyInsets();\n        final Callback cb = getCallback();\n        if (cb != null && !isDestroyed()) {\n            cb.onContentChanged();\n        }\n    }\n\n    @Override\n    public void setContentView(View view) {\n        setContentView(view, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));\n    }\n\n    @Override\n    public void setContentView(View view, ViewGroup.LayoutParams params) {\n        if (mContentParent == null) {\n            installDecor();\n        } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            mContentParent.removeAllViews();\n        }\n\n        if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            view.setLayoutParams(params);\n            final Scene newScene = new Scene(mContentParent, view);\n            transitionTo(newScene);\n        } else {\n          //已经为View 直接使用View的addView方法追加到当前mContentParent中\n            mContentParent.addView(view, params);\n        }\n        mContentParent.requestApplyInsets();\n        final Callback cb = getCallback();\n        //调用CallBack接口的onContentChange来通知Activity组件视图发生了变化\n        if (cb != null && !isDestroyed()) {\n            cb.onContentChanged();\n        }\n    }\n  ```\n2. installDecor方法\n  ```java\n    //截取部分主要分析代码\n    private void installDecor() {\n        if (mDecor == null) {\n            //如果mDecor为空则创建一个DecorView实例\n            // protected DecorView generateDecor() {\n            //   return new DecorView(getContext(), -1);\n            // }\n            mDecor = generateDecor();  \n            mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);\n            mDecor.setIsRootNamespace(true);\n            if (!mInvalidatePanelMenuPosted && mInvalidatePanelMenuFeatures != 0) {\n                mDecor.postOnAnimation(mInvalidatePanelMenuRunnable);\n            }\n        }\n        if (mContentParent == null) {\n            //根据窗口的风格修饰 选择对应的修饰布局文件 将id为content的FrameLayout赋值于mContentParent\n            mContentParent = generateLayout(mDecor);\n            ...\n          }\n    }\n  ```\n  ```java\n    protected ViewGroup generateLayout(DecorView decor) {\n         // Apply data from current theme.\n         //根据当前style修饰相应样式\n\n         TypedArray a = getWindowStyle();\n\n         ...\n         //一堆if判断\n\n         // 增加窗口修饰\n\n         int layoutResource;\n         int features = getLocalFeatures();\n\n         ...\n         //根据features选择不同的窗帘修饰布局文件得到\n         //把选中的窗口修饰布局文件添加到DecorView中, 指定contentParent的值\n         View in = mLayoutInflater.inflate(layoutResource, null);\n         decor.addView(in, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));\n         mContentRoot = (ViewGroup) in;\n\n         ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);\n         if (contentParent == null) {\n             throw new RuntimeException(\"Window couldn't find content container view\");\n         }\n\n         ...\n         return contentParent;\n     }\n  ```\n  该方法的主要功能为 根据窗口的style为该窗口选择不同的窗口根布局文件 将mDecor作为根视图将窗口布局添加,获取id为content的FrameLayout返回给mContentParent对象  实质为阐释mDecor和mContentParent对象\n3. (扩展)关于设置Activity属性需要在setContentView方法之前调用的问题\n\n  在设置Activity属性的时候 比如requestWindowFeature(Window.FEATURE_NO_TITLE) 需要在setContentView方法之前调用\n  ```java\n    public boolean requestFeature(int featureId) {\n        if (mContentParent != null) {\n            throw new AndroidRuntimeException(\"requestFeature() must be called before adding content\");\n        }\n        ...\n    }\n```\n\n4. onContentChanged方法\n\n  在PhoneWindow中没有重写getCallback相关方法 而在Window类下\n  ```java\n    /**\n     * Return the current Callback interface for this window.\n     */\n    public final Callback getCallback() {\n        return mCallback;\n    }\n  ```\n  mCallback相关的赋值方法\n  ```java\n    /**\n     * Set the Callback interface for this window, used to intercept key\n     * events and other dynamic operations in the window.\n     *\n     * @param callback The desired Callback interface.\n     */\n    public void setCallback(Callback callback) {\n        mCallback = callback;\n    }\n  ```\n  setCallback方法在Activity中被使用\n  ```java\n    final void attach(Context context, ActivityThread aThread,\n              Instrumentation instr, IBinder token, int ident,\n              Application application, Intent intent, ActivityInfo info,\n              CharSequence title, Activity parent, String id,\n              NonConfigurationInstances lastNonConfigurationInstances,\n              Configuration config, String referrer, IVoiceInteractor voiceInteractor) {\n          ...\n          mWindow.setCallback(this);\n          ...\n    }\n  ```\n  说明Activity实现了Window的CallBack接口 然后在Activity中找到onContentChanged方法\n  ```java\n    public void onContentChanged() {\n    }\n  ```\n  对 空方法. 说明在Activity的布局改动时 (setContentView或者addContentView 方法执行完毕后会调用改方法)\n   所以各种View的findViewById方法什么的可以放在这里\n\n5. setContentView源码总结\n  * 创建一个DecorView的对象mDector 该mDector将作为整个应用窗口的根视图\n  *  根据根据Feature等style theme创建不同的窗口修饰布局文件 并且通过findViewById获取Activity布局文件该存放的地方\n  *  将Activity的布局文件添加至id为content的FrameLayout内\n  *  执行到当前页面还没有显示出来\n\n6. Activity页面显示\n\n  我们都知道Activity的实际开始于ActivityThread的main方法 当该方法调运完之后会调用该类的performLaunchActivity方法来创建要启动的Activity组件 这个过程中还会为该Activity组件创建窗口对象和视图对象 当组件创建完成后用过调用该类的handleResumeActivity方法将其激活\n\n  ```java\n    final void handleResumeActivity(IBinder token,\n               boolean clearHide, boolean isForward, boolean reallyResume) {\n                 ...\n               if (!r.activity.mFinished && willBeVisible\n                       && r.activity.mDecor != null && !r.hideForNow) {\n                   ...\n                   if (r.activity.mVisibleFromClient) {\n                       r.activity.makeVisible();\n                       //这里这里 通过调用Activity的makeVisible方法来显示我们通过setContentView创建的mDecor\n                   }\n                   ...\n               }\n           } else {\n             ...\n           }\n       }\n  ```\n  ```java\n    //Activity的makeVisible方法\n    void makeVisible() {\n         if (!mWindowAdded) {\n             ViewManager wm = getWindowManager();\n             wm.addView(mDecor, getWindow().getAttributes());\n             mWindowAdded = true;\n         }\n         mDecor.setVisibility(View.VISIBLE);\n     }\n  ```\n  至此通过setContentView方法设置的页面才最后显示出来\n\n### LayoutInflater源码分析\n1. 与setContentView相关\n\n  在PhoneWindow的generateLayout中调用了     \n  ```java\n    View in = mLayoutInflater.inflate(layoutResource, null);\n  ```\n\n2. LayoutInflater中获取实例化方法\n  ```java\n    /**\n     * Obtains the LayoutInflater from the given context.\n     */\n    public static LayoutInflater from(Context context) {\n        LayoutInflater LayoutInflater =\n                (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        if (LayoutInflater == null) {\n            throw new AssertionError(\"LayoutInflater not found.\");\n        }\n        return LayoutInflater;\n    }\n  ```\n\n3. inflate方法相关\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root) {\n        return inflate(resource, root, root != null);\n    }\n\n    public View inflate(XmlPullParser parser, @Nullable ViewGroup root) {\n      return inflate(parser, root, root != null);\n    }\n  ```\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\n        final Resources res = getContext().getResources();\n        if (DEBUG) {\n            Log.d(TAG, \"INFLATING from resource: \\\"\" + res.getResourceName(resource) + \"\\\" (\"\n                    + Integer.toHexString(resource) + \")\");\n        }\n\n        final XmlResourceParser parser = res.getLayout(resource);\n        try {\n            return inflate(parser, root, attachToRoot);\n        } finally {\n            parser.close();\n        }\n    }\n  ```\n  最后发现都需要调用\n\n  ```java\n  public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n          synchronized (mConstructorArgs) {\n              Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n\n              final Context inflaterContext = mContext;\n              final AttributeSet attrs = Xml.asAttributeSet(parser);\n              Context lastContext = (Context) mConstructorArgs[0];\n              mConstructorArgs[0] = inflaterContext;\n              //定义返回值 初始化传入形参 root\n              View result = root;\n\n              try {\n                  // 找到根节点\n                  int type;\n                  while ((type = parser.next()) != XmlPullParser.START_TAG &&\n                          type != XmlPullParser.END_DOCUMENT) {\n                  }\n\n                  //验证type是否为Start_Tag  保证xml文件正确\n                  if (type != XmlPullParser.START_TAG) {\n                      throw new InflateException(parser.getPositionDescription()\n                              + \": No start tag found!\");\n                  }\n\n                  //type为 root node\n                  final String name = parser.getName();\n\n                  if (DEBUG) {\n                      System.out.println(\"**************************\");\n                      System.out.println(\"Creating root view: \"\n                              + name);\n                      System.out.println(\"**************************\");\n                  }\n\n                  if (TAG_MERGE.equals(name)) {\n                      //处理 merge相关\n                      //root需要非空 且attachToRoot为空\n                      if (root == null || !attachToRoot) {\n                          throw new InflateException(\"<merge /> can be used only with a valid \"\n                                  + \"ViewGroup root and attachToRoot=true\");\n                      }\n                      //递归inflate 方法调用\n                      rInflate(parser, root, inflaterContext, attrs, false);\n                  } else {\n                      //根据tag节点创建view对象\n                      final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                      ViewGroup.LayoutParams params = null;\n\n                      if (root != null) {\n                          if (DEBUG) {\n                              System.out.println(\"Creating params from root: \" +\n                                      root);\n                          }\n                          //根据root生成LayoutParams\n                          params = root.generateLayoutParams(attrs);\n                          if (!attachToRoot) {\n                              //如果attachToRoot为flase 则调用setLayoutParams\n                              temp.setLayoutParams(params);\n                          }\n                      }\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> start inflating children\");\n                      }\n                      //递归inflate剩下的children\n                      rInflateChildren(parser, temp, attrs, true);\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> done inflating children\");\n                      }\n\n                      // We are supposed to attach all the views we found (int temp)\n                      // to root. Do that now.\n                      if (root != null && attachToRoot) {\n                          //root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里\n                          root.addView(temp, params);\n                      }\n\n                      // Decide whether to return the root that was passed in or the\n                      // top view found in xml.\n                      if (root == null || !attachToRoot) {\n                          //返回xml里解析的root view\n                          result = temp;\n                      }\n                  }\n\n              } catch (XmlPullParserException e) {\n                  InflateException ex = new InflateException(e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } catch (Exception e) {\n                  InflateException ex = new InflateException(\n                          parser.getPositionDescription()\n                                  + \": \" + e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } finally {\n                  // Don't retain static reference on context.\n                  mConstructorArgs[0] = lastContext;\n                  mConstructorArgs[1] = null;\n              }\n\n              Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n              //返回参数root或xml文件里的root view\n              return result;\n          }\n      }\n\n  ```\n  相关inflate参数的结果\n  ![inflate参数.png](/inflate参数.png)\n\n4. 相关方法解析\n  在Inflate中多次被调用的rInflate\n\n  ```java\n     void rInflate(XmlPullParser parser, View parent, Context context,\n             AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException {\n\n         final int depth = parser.getDepth();\n         int type;\n         //XmlPullParser解析器的标准解析模式\n         while (((type = parser.next()) != XmlPullParser.END_TAG ||\n                 parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {\n             //找到start_tag节点\n             if (type != XmlPullParser.START_TAG) {\n                 continue;\n             }\n             //获取Name标记\n             final String name = parser.getName();\n\n             //private static final String TAG_REQUEST_FOCUS = \"requestFocus\";\n             //处理requestFocus\n             if (TAG_REQUEST_FOCUS.equals(name)) {\n                 parseRequestFocus(parser, parent);\n             // private static final String TAG_TAG = \"tag\";\n             //处理tag\n             } else if (TAG_TAG.equals(name)) {\n                 parseViewTag(parser, parent, attrs);\n             //private static final String TAG_INCLUDE = \"include\";\n             //处理include\n             } else if (TAG_INCLUDE.equals(name)) {\n                 //如果是根节点则抛出异常\n                 if (parser.getDepth() == 0) {\n                     throw new InflateException(\"<include /> cannot be the root element\");\n                 }\n                 parseInclude(parser, context, parent, attrs);\n             //private static final String TAG_MERGE = \"merge\";\n             //处理merge merge需要是xml中的根节点\n             } else if (TAG_MERGE.equals(name)) {\n                 throw new InflateException(\"<merge /> must be the root element\");\n             } else {\n                 final View view = createViewFromTag(parent, name, context, attrs);\n                 final ViewGroup viewGroup = (ViewGroup) parent;\n                 final ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);\n                 rInflateChildren(parser, view, attrs, true);\n                 viewGroup.addView(view, params);\n             }\n         }\n\n          //parent的所有子节点都处理完毕的时候回onFinishInflate方法\n         if (finishInflate) {\n             parent.onFinishInflate();\n         }\n     }\n     //可以添加自定义逻辑\n      protected void onFinishInflate() {\n      }\n```\n","source":"_posts/从setContentView说起.md","raw":"---\ntitle: Android View 相关源码分析之一 从setContentView与LayoutInflater说起\ndate: 2017-02-03 17:29:24\ntags: [\"android\" , \"view\" , \"源码\"]\ncategories: \"android\"\n---\n\n## 从setContentView与LayoutInflater说起\n### setContentView分析\n#### 相关关系\n\n  ![相关关系图](http://p1.bpimg.com/567571/ad9dd8344a63f0cd.png)  \n  <!-- more -->\n\n  Activity中有Window成员 实例化为PhoneWindow PhoneWindow是抽象Window类的实现类\n\n  Window提供了绘制窗口的通用API PhoneWindow中包含了DecorView对象 是所有窗口(Activity界面)的根View\n\n  具体的构如下\n\n  ![View层级分析](http://i1.piimg.com/567571/b7961c0d826c75e0.png)\n\n  具体的可以通过hierarchyviewer工具分析一下\n\n\n\n#### PhoneWindow的setContentView分析\n>Window类的setContentView方法 而Window的setContentView方法是抽象的  所以查看PhoneWindow的setContentView()\n\n1. setContentView方法\n  ```java\n    // This is the view in which the window contents are placed. It is either\n    // mDecor itself, or a child of mDecor where the contents go.\n    private ViewGroup mContentParent;\n\n    @Override\n    public void setContentView(int layoutResID) {\n        // Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window\n        // decor, when theme attributes and the like are crystalized. Do not check the feature\n        // before this happens.\n        if (mContentParent == null) {\n            //第一次调用\n            //下面会详细分析\n            installDecor();\n        } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            //移除该mContentParent下的所有View\n            //又因为这个的存在  我们可以多次使用setContentView()\n            mContentParent.removeAllViews();\n        }\n        //判断是否使用了Activity的过度动画\n        if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n          //设置动画场景\n            final Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,\n                    getContext());\n            transitionTo(newScene);\n        } else {\n            //将资源文件通过LayoutInflater对象装换为View树\n            //在PhoneWindow的构造函数中 mLayoutInflater = LayoutInflater.from(context);\n            mLayoutInflater.inflate(layoutResID, mContentParent);\n        }\n\n        //View中\n        /**\n         * Ask that a new dispatch of {@link #onApplyWindowInsets(WindowInsets)} be performed.\n         */\n        // public void requestApplyInsets() {\n        //     requestFitSystemWindows();\n        // }\n        mContentParent.requestApplyInsets();\n        final Callback cb = getCallback();\n        if (cb != null && !isDestroyed()) {\n            cb.onContentChanged();\n        }\n    }\n\n    @Override\n    public void setContentView(View view) {\n        setContentView(view, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));\n    }\n\n    @Override\n    public void setContentView(View view, ViewGroup.LayoutParams params) {\n        if (mContentParent == null) {\n            installDecor();\n        } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            mContentParent.removeAllViews();\n        }\n\n        if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            view.setLayoutParams(params);\n            final Scene newScene = new Scene(mContentParent, view);\n            transitionTo(newScene);\n        } else {\n          //已经为View 直接使用View的addView方法追加到当前mContentParent中\n            mContentParent.addView(view, params);\n        }\n        mContentParent.requestApplyInsets();\n        final Callback cb = getCallback();\n        //调用CallBack接口的onContentChange来通知Activity组件视图发生了变化\n        if (cb != null && !isDestroyed()) {\n            cb.onContentChanged();\n        }\n    }\n  ```\n2. installDecor方法\n  ```java\n    //截取部分主要分析代码\n    private void installDecor() {\n        if (mDecor == null) {\n            //如果mDecor为空则创建一个DecorView实例\n            // protected DecorView generateDecor() {\n            //   return new DecorView(getContext(), -1);\n            // }\n            mDecor = generateDecor();  \n            mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);\n            mDecor.setIsRootNamespace(true);\n            if (!mInvalidatePanelMenuPosted && mInvalidatePanelMenuFeatures != 0) {\n                mDecor.postOnAnimation(mInvalidatePanelMenuRunnable);\n            }\n        }\n        if (mContentParent == null) {\n            //根据窗口的风格修饰 选择对应的修饰布局文件 将id为content的FrameLayout赋值于mContentParent\n            mContentParent = generateLayout(mDecor);\n            ...\n          }\n    }\n  ```\n  ```java\n    protected ViewGroup generateLayout(DecorView decor) {\n         // Apply data from current theme.\n         //根据当前style修饰相应样式\n\n         TypedArray a = getWindowStyle();\n\n         ...\n         //一堆if判断\n\n         // 增加窗口修饰\n\n         int layoutResource;\n         int features = getLocalFeatures();\n\n         ...\n         //根据features选择不同的窗帘修饰布局文件得到\n         //把选中的窗口修饰布局文件添加到DecorView中, 指定contentParent的值\n         View in = mLayoutInflater.inflate(layoutResource, null);\n         decor.addView(in, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));\n         mContentRoot = (ViewGroup) in;\n\n         ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);\n         if (contentParent == null) {\n             throw new RuntimeException(\"Window couldn't find content container view\");\n         }\n\n         ...\n         return contentParent;\n     }\n  ```\n  该方法的主要功能为 根据窗口的style为该窗口选择不同的窗口根布局文件 将mDecor作为根视图将窗口布局添加,获取id为content的FrameLayout返回给mContentParent对象  实质为阐释mDecor和mContentParent对象\n3. (扩展)关于设置Activity属性需要在setContentView方法之前调用的问题\n\n  在设置Activity属性的时候 比如requestWindowFeature(Window.FEATURE_NO_TITLE) 需要在setContentView方法之前调用\n  ```java\n    public boolean requestFeature(int featureId) {\n        if (mContentParent != null) {\n            throw new AndroidRuntimeException(\"requestFeature() must be called before adding content\");\n        }\n        ...\n    }\n```\n\n4. onContentChanged方法\n\n  在PhoneWindow中没有重写getCallback相关方法 而在Window类下\n  ```java\n    /**\n     * Return the current Callback interface for this window.\n     */\n    public final Callback getCallback() {\n        return mCallback;\n    }\n  ```\n  mCallback相关的赋值方法\n  ```java\n    /**\n     * Set the Callback interface for this window, used to intercept key\n     * events and other dynamic operations in the window.\n     *\n     * @param callback The desired Callback interface.\n     */\n    public void setCallback(Callback callback) {\n        mCallback = callback;\n    }\n  ```\n  setCallback方法在Activity中被使用\n  ```java\n    final void attach(Context context, ActivityThread aThread,\n              Instrumentation instr, IBinder token, int ident,\n              Application application, Intent intent, ActivityInfo info,\n              CharSequence title, Activity parent, String id,\n              NonConfigurationInstances lastNonConfigurationInstances,\n              Configuration config, String referrer, IVoiceInteractor voiceInteractor) {\n          ...\n          mWindow.setCallback(this);\n          ...\n    }\n  ```\n  说明Activity实现了Window的CallBack接口 然后在Activity中找到onContentChanged方法\n  ```java\n    public void onContentChanged() {\n    }\n  ```\n  对 空方法. 说明在Activity的布局改动时 (setContentView或者addContentView 方法执行完毕后会调用改方法)\n   所以各种View的findViewById方法什么的可以放在这里\n\n5. setContentView源码总结\n  * 创建一个DecorView的对象mDector 该mDector将作为整个应用窗口的根视图\n  *  根据根据Feature等style theme创建不同的窗口修饰布局文件 并且通过findViewById获取Activity布局文件该存放的地方\n  *  将Activity的布局文件添加至id为content的FrameLayout内\n  *  执行到当前页面还没有显示出来\n\n6. Activity页面显示\n\n  我们都知道Activity的实际开始于ActivityThread的main方法 当该方法调运完之后会调用该类的performLaunchActivity方法来创建要启动的Activity组件 这个过程中还会为该Activity组件创建窗口对象和视图对象 当组件创建完成后用过调用该类的handleResumeActivity方法将其激活\n\n  ```java\n    final void handleResumeActivity(IBinder token,\n               boolean clearHide, boolean isForward, boolean reallyResume) {\n                 ...\n               if (!r.activity.mFinished && willBeVisible\n                       && r.activity.mDecor != null && !r.hideForNow) {\n                   ...\n                   if (r.activity.mVisibleFromClient) {\n                       r.activity.makeVisible();\n                       //这里这里 通过调用Activity的makeVisible方法来显示我们通过setContentView创建的mDecor\n                   }\n                   ...\n               }\n           } else {\n             ...\n           }\n       }\n  ```\n  ```java\n    //Activity的makeVisible方法\n    void makeVisible() {\n         if (!mWindowAdded) {\n             ViewManager wm = getWindowManager();\n             wm.addView(mDecor, getWindow().getAttributes());\n             mWindowAdded = true;\n         }\n         mDecor.setVisibility(View.VISIBLE);\n     }\n  ```\n  至此通过setContentView方法设置的页面才最后显示出来\n\n### LayoutInflater源码分析\n1. 与setContentView相关\n\n  在PhoneWindow的generateLayout中调用了     \n  ```java\n    View in = mLayoutInflater.inflate(layoutResource, null);\n  ```\n\n2. LayoutInflater中获取实例化方法\n  ```java\n    /**\n     * Obtains the LayoutInflater from the given context.\n     */\n    public static LayoutInflater from(Context context) {\n        LayoutInflater LayoutInflater =\n                (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        if (LayoutInflater == null) {\n            throw new AssertionError(\"LayoutInflater not found.\");\n        }\n        return LayoutInflater;\n    }\n  ```\n\n3. inflate方法相关\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root) {\n        return inflate(resource, root, root != null);\n    }\n\n    public View inflate(XmlPullParser parser, @Nullable ViewGroup root) {\n      return inflate(parser, root, root != null);\n    }\n  ```\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\n        final Resources res = getContext().getResources();\n        if (DEBUG) {\n            Log.d(TAG, \"INFLATING from resource: \\\"\" + res.getResourceName(resource) + \"\\\" (\"\n                    + Integer.toHexString(resource) + \")\");\n        }\n\n        final XmlResourceParser parser = res.getLayout(resource);\n        try {\n            return inflate(parser, root, attachToRoot);\n        } finally {\n            parser.close();\n        }\n    }\n  ```\n  最后发现都需要调用\n\n  ```java\n  public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n          synchronized (mConstructorArgs) {\n              Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n\n              final Context inflaterContext = mContext;\n              final AttributeSet attrs = Xml.asAttributeSet(parser);\n              Context lastContext = (Context) mConstructorArgs[0];\n              mConstructorArgs[0] = inflaterContext;\n              //定义返回值 初始化传入形参 root\n              View result = root;\n\n              try {\n                  // 找到根节点\n                  int type;\n                  while ((type = parser.next()) != XmlPullParser.START_TAG &&\n                          type != XmlPullParser.END_DOCUMENT) {\n                  }\n\n                  //验证type是否为Start_Tag  保证xml文件正确\n                  if (type != XmlPullParser.START_TAG) {\n                      throw new InflateException(parser.getPositionDescription()\n                              + \": No start tag found!\");\n                  }\n\n                  //type为 root node\n                  final String name = parser.getName();\n\n                  if (DEBUG) {\n                      System.out.println(\"**************************\");\n                      System.out.println(\"Creating root view: \"\n                              + name);\n                      System.out.println(\"**************************\");\n                  }\n\n                  if (TAG_MERGE.equals(name)) {\n                      //处理 merge相关\n                      //root需要非空 且attachToRoot为空\n                      if (root == null || !attachToRoot) {\n                          throw new InflateException(\"<merge /> can be used only with a valid \"\n                                  + \"ViewGroup root and attachToRoot=true\");\n                      }\n                      //递归inflate 方法调用\n                      rInflate(parser, root, inflaterContext, attrs, false);\n                  } else {\n                      //根据tag节点创建view对象\n                      final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                      ViewGroup.LayoutParams params = null;\n\n                      if (root != null) {\n                          if (DEBUG) {\n                              System.out.println(\"Creating params from root: \" +\n                                      root);\n                          }\n                          //根据root生成LayoutParams\n                          params = root.generateLayoutParams(attrs);\n                          if (!attachToRoot) {\n                              //如果attachToRoot为flase 则调用setLayoutParams\n                              temp.setLayoutParams(params);\n                          }\n                      }\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> start inflating children\");\n                      }\n                      //递归inflate剩下的children\n                      rInflateChildren(parser, temp, attrs, true);\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> done inflating children\");\n                      }\n\n                      // We are supposed to attach all the views we found (int temp)\n                      // to root. Do that now.\n                      if (root != null && attachToRoot) {\n                          //root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里\n                          root.addView(temp, params);\n                      }\n\n                      // Decide whether to return the root that was passed in or the\n                      // top view found in xml.\n                      if (root == null || !attachToRoot) {\n                          //返回xml里解析的root view\n                          result = temp;\n                      }\n                  }\n\n              } catch (XmlPullParserException e) {\n                  InflateException ex = new InflateException(e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } catch (Exception e) {\n                  InflateException ex = new InflateException(\n                          parser.getPositionDescription()\n                                  + \": \" + e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } finally {\n                  // Don't retain static reference on context.\n                  mConstructorArgs[0] = lastContext;\n                  mConstructorArgs[1] = null;\n              }\n\n              Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n              //返回参数root或xml文件里的root view\n              return result;\n          }\n      }\n\n  ```\n  相关inflate参数的结果\n  ![inflate参数.png](/inflate参数.png)\n\n4. 相关方法解析\n  在Inflate中多次被调用的rInflate\n\n  ```java\n     void rInflate(XmlPullParser parser, View parent, Context context,\n             AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException {\n\n         final int depth = parser.getDepth();\n         int type;\n         //XmlPullParser解析器的标准解析模式\n         while (((type = parser.next()) != XmlPullParser.END_TAG ||\n                 parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {\n             //找到start_tag节点\n             if (type != XmlPullParser.START_TAG) {\n                 continue;\n             }\n             //获取Name标记\n             final String name = parser.getName();\n\n             //private static final String TAG_REQUEST_FOCUS = \"requestFocus\";\n             //处理requestFocus\n             if (TAG_REQUEST_FOCUS.equals(name)) {\n                 parseRequestFocus(parser, parent);\n             // private static final String TAG_TAG = \"tag\";\n             //处理tag\n             } else if (TAG_TAG.equals(name)) {\n                 parseViewTag(parser, parent, attrs);\n             //private static final String TAG_INCLUDE = \"include\";\n             //处理include\n             } else if (TAG_INCLUDE.equals(name)) {\n                 //如果是根节点则抛出异常\n                 if (parser.getDepth() == 0) {\n                     throw new InflateException(\"<include /> cannot be the root element\");\n                 }\n                 parseInclude(parser, context, parent, attrs);\n             //private static final String TAG_MERGE = \"merge\";\n             //处理merge merge需要是xml中的根节点\n             } else if (TAG_MERGE.equals(name)) {\n                 throw new InflateException(\"<merge /> must be the root element\");\n             } else {\n                 final View view = createViewFromTag(parent, name, context, attrs);\n                 final ViewGroup viewGroup = (ViewGroup) parent;\n                 final ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);\n                 rInflateChildren(parser, view, attrs, true);\n                 viewGroup.addView(view, params);\n             }\n         }\n\n          //parent的所有子节点都处理完毕的时候回onFinishInflate方法\n         if (finishInflate) {\n             parent.onFinishInflate();\n         }\n     }\n     //可以添加自定义逻辑\n      protected void onFinishInflate() {\n      }\n```\n","slug":"从setContentView说起","published":1,"updated":"2017-02-03T09:46:12.000Z","_id":"ciypmwr3m00053xo93jn3r8im","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"从setContentView与LayoutInflater说起\"><a href=\"#从setContentView与LayoutInflater说起\" class=\"headerlink\" title=\"从setContentView与LayoutInflater说起\"></a>从setContentView与LayoutInflater说起</h2><h3 id=\"setContentView分析\"><a href=\"#setContentView分析\" class=\"headerlink\" title=\"setContentView分析\"></a>setContentView分析</h3><h4 id=\"相关关系\"><a href=\"#相关关系\" class=\"headerlink\" title=\"相关关系\"></a>相关关系</h4><p>  <img src=\"http://p1.bpimg.com/567571/ad9dd8344a63f0cd.png\" alt=\"相关关系图\"><br>  <a id=\"more\"></a></p>\n<p>  Activity中有Window成员 实例化为PhoneWindow PhoneWindow是抽象Window类的实现类</p>\n<p>  Window提供了绘制窗口的通用API PhoneWindow中包含了DecorView对象 是所有窗口(Activity界面)的根View</p>\n<p>  具体的构如下</p>\n<p>  <img src=\"http://i1.piimg.com/567571/b7961c0d826c75e0.png\" alt=\"View层级分析\"></p>\n<p>  具体的可以通过hierarchyviewer工具分析一下</p>\n<h4 id=\"PhoneWindow的setContentView分析\"><a href=\"#PhoneWindow的setContentView分析\" class=\"headerlink\" title=\"PhoneWindow的setContentView分析\"></a>PhoneWindow的setContentView分析</h4><blockquote>\n<p>Window类的setContentView方法 而Window的setContentView方法是抽象的  所以查看PhoneWindow的setContentView()</p>\n</blockquote>\n<ol>\n<li><p>setContentView方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// This is the view in which the window contents are placed. It is either</span></div><div class=\"line\"><span class=\"comment\">// mDecor itself, or a child of mDecor where the contents go.</span></div><div class=\"line\"><span class=\"keyword\">private</span> ViewGroup mContentParent;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window</span></div><div class=\"line\">    <span class=\"comment\">// decor, when theme attributes and the like are crystalized. Do not check the feature</span></div><div class=\"line\">    <span class=\"comment\">// before this happens.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//第一次调用</span></div><div class=\"line\">        <span class=\"comment\">//下面会详细分析</span></div><div class=\"line\">        installDecor();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class=\"line\">        <span class=\"comment\">//移除该mContentParent下的所有View</span></div><div class=\"line\">        <span class=\"comment\">//又因为这个的存在  我们可以多次使用setContentView()</span></div><div class=\"line\">        mContentParent.removeAllViews();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//判断是否使用了Activity的过度动画</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class=\"line\">      <span class=\"comment\">//设置动画场景</span></div><div class=\"line\">        <span class=\"keyword\">final</span> Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,</div><div class=\"line\">                getContext());</div><div class=\"line\">        transitionTo(newScene);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//将资源文件通过LayoutInflater对象装换为View树</span></div><div class=\"line\">        <span class=\"comment\">//在PhoneWindow的构造函数中 mLayoutInflater = LayoutInflater.from(context);</span></div><div class=\"line\">        mLayoutInflater.inflate(layoutResID, mContentParent);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//View中</span></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Ask that a new dispatch of &#123;<span class=\"doctag\">@link</span> #onApplyWindowInsets(WindowInsets)&#125; be performed.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"comment\">// public void requestApplyInsets() &#123;</span></div><div class=\"line\">    <span class=\"comment\">//     requestFitSystemWindows();</span></div><div class=\"line\">    <span class=\"comment\">// &#125;</span></div><div class=\"line\">    mContentParent.requestApplyInsets();</div><div class=\"line\">    <span class=\"keyword\">final</span> Callback cb = getCallback();</div><div class=\"line\">    <span class=\"keyword\">if</span> (cb != <span class=\"keyword\">null</span> &amp;&amp; !isDestroyed()) &#123;</div><div class=\"line\">        cb.onContentChanged();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">    setContentView(view, <span class=\"keyword\">new</span> ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        installDecor();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class=\"line\">        mContentParent.removeAllViews();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class=\"line\">        view.setLayoutParams(params);</div><div class=\"line\">        <span class=\"keyword\">final</span> Scene newScene = <span class=\"keyword\">new</span> Scene(mContentParent, view);</div><div class=\"line\">        transitionTo(newScene);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//已经为View 直接使用View的addView方法追加到当前mContentParent中</span></div><div class=\"line\">        mContentParent.addView(view, params);</div><div class=\"line\">    &#125;</div><div class=\"line\">    mContentParent.requestApplyInsets();</div><div class=\"line\">    <span class=\"keyword\">final</span> Callback cb = getCallback();</div><div class=\"line\">    <span class=\"comment\">//调用CallBack接口的onContentChange来通知Activity组件视图发生了变化</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (cb != <span class=\"keyword\">null</span> &amp;&amp; !isDestroyed()) &#123;</div><div class=\"line\">        cb.onContentChanged();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>installDecor方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//截取部分主要分析代码</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installDecor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mDecor == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//如果mDecor为空则创建一个DecorView实例</span></div><div class=\"line\">        <span class=\"comment\">// protected DecorView generateDecor() &#123;</span></div><div class=\"line\">        <span class=\"comment\">//   return new DecorView(getContext(), -1);</span></div><div class=\"line\">        <span class=\"comment\">// &#125;</span></div><div class=\"line\">        mDecor = generateDecor();  </div><div class=\"line\">        mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);</div><div class=\"line\">        mDecor.setIsRootNamespace(<span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!mInvalidatePanelMenuPosted &amp;&amp; mInvalidatePanelMenuFeatures != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            mDecor.postOnAnimation(mInvalidatePanelMenuRunnable);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//根据窗口的风格修饰 选择对应的修饰布局文件 将id为content的FrameLayout赋值于mContentParent</span></div><div class=\"line\">        mContentParent = generateLayout(mDecor);</div><div class=\"line\">        ...</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ViewGroup <span class=\"title\">generateLayout</span><span class=\"params\">(DecorView decor)</span> </span>&#123;</div><div class=\"line\">     <span class=\"comment\">// Apply data from current theme.</span></div><div class=\"line\">     <span class=\"comment\">//根据当前style修饰相应样式</span></div><div class=\"line\"></div><div class=\"line\">     TypedArray a = getWindowStyle();</div><div class=\"line\"></div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"comment\">//一堆if判断</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// 增加窗口修饰</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">int</span> layoutResource;</div><div class=\"line\">     <span class=\"keyword\">int</span> features = getLocalFeatures();</div><div class=\"line\"></div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"comment\">//根据features选择不同的窗帘修饰布局文件得到</span></div><div class=\"line\">     <span class=\"comment\">//把选中的窗口修饰布局文件添加到DecorView中, 指定contentParent的值</span></div><div class=\"line\">     View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</div><div class=\"line\">     decor.addView(in, <span class=\"keyword\">new</span> ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));</div><div class=\"line\">     mContentRoot = (ViewGroup) in;</div><div class=\"line\"></div><div class=\"line\">     ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);</div><div class=\"line\">     <span class=\"keyword\">if</span> (contentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Window couldn't find content container view\"</span>);</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"keyword\">return</span> contentParent;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>该方法的主要功能为 根据窗口的style为该窗口选择不同的窗口根布局文件 将mDecor作为根视图将窗口布局添加,获取id为content的FrameLayout返回给mContentParent对象  实质为阐释mDecor和mContentParent对象</p>\n</li>\n<li><p>(扩展)关于设置Activity属性需要在setContentView方法之前调用的问题</p>\n<p>在设置Activity属性的时候 比如requestWindowFeature(Window.FEATURE_NO_TITLE) 需要在setContentView方法之前调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">requestFeature</span><span class=\"params\">(<span class=\"keyword\">int</span> featureId)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AndroidRuntimeException(<span class=\"string\">\"requestFeature() must be called before adding content\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>onContentChanged方法</p>\n<p>在PhoneWindow中没有重写getCallback相关方法 而在Window类下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Return the current Callback interface for this window.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Callback <span class=\"title\">getCallback</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mCallback;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>mCallback相关的赋值方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Set the Callback interface for this window, used to intercept key</div><div class=\"line\"> * events and other dynamic operations in the window.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> callback The desired Callback interface.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCallback</span><span class=\"params\">(Callback callback)</span> </span>&#123;</div><div class=\"line\">    mCallback = callback;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>setCallback方法在Activity中被使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context, ActivityThread aThread,</span></span></div><div class=\"line\">          Instrumentation instr, IBinder token, <span class=\"keyword\">int</span> ident,</div><div class=\"line\">          Application application, Intent intent, ActivityInfo info,</div><div class=\"line\">          CharSequence title, Activity parent, String id,</div><div class=\"line\">          NonConfigurationInstances lastNonConfigurationInstances,</div><div class=\"line\">          Configuration config, String referrer, IVoiceInteractor voiceInteractor) &#123;</div><div class=\"line\">      ...</div><div class=\"line\">      mWindow.setCallback(<span class=\"keyword\">this</span>);</div><div class=\"line\">      ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>说明Activity实现了Window的CallBack接口 然后在Activity中找到onContentChanged方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onContentChanged</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对 空方法. 说明在Activity的布局改动时 (setContentView或者addContentView 方法执行完毕后会调用改方法)<br>所以各种View的findViewById方法什么的可以放在这里</p>\n</li>\n<li><p>setContentView源码总结</p>\n<ul>\n<li>创建一个DecorView的对象mDector 该mDector将作为整个应用窗口的根视图</li>\n<li>根据根据Feature等style theme创建不同的窗口修饰布局文件 并且通过findViewById获取Activity布局文件该存放的地方</li>\n<li>将Activity的布局文件添加至id为content的FrameLayout内</li>\n<li>执行到当前页面还没有显示出来</li>\n</ul>\n</li>\n<li><p>Activity页面显示</p>\n<p>我们都知道Activity的实际开始于ActivityThread的main方法 当该方法调运完之后会调用该类的performLaunchActivity方法来创建要启动的Activity组件 这个过程中还会为该Activity组件创建窗口对象和视图对象 当组件创建完成后用过调用该类的handleResumeActivity方法将其激活</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">handleResumeActivity</span><span class=\"params\">(IBinder token,</span></span></div><div class=\"line\">           <span class=\"keyword\">boolean</span> clearHide, <span class=\"keyword\">boolean</span> isForward, <span class=\"keyword\">boolean</span> reallyResume) &#123;</div><div class=\"line\">             ...</div><div class=\"line\">           <span class=\"keyword\">if</span> (!r.activity.mFinished &amp;&amp; willBeVisible</div><div class=\"line\">                   &amp;&amp; r.activity.mDecor != <span class=\"keyword\">null</span> &amp;&amp; !r.hideForNow) &#123;</div><div class=\"line\">               ...</div><div class=\"line\">               <span class=\"keyword\">if</span> (r.activity.mVisibleFromClient) &#123;</div><div class=\"line\">                   r.activity.makeVisible();</div><div class=\"line\">                   <span class=\"comment\">//这里这里 通过调用Activity的makeVisible方法来显示我们通过setContentView创建的mDecor</span></div><div class=\"line\">               &#125;</div><div class=\"line\">               ...</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         ...</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Activity的makeVisible方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">makeVisible</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">if</span> (!mWindowAdded) &#123;</div><div class=\"line\">         ViewManager wm = getWindowManager();</div><div class=\"line\">         wm.addView(mDecor, getWindow().getAttributes());</div><div class=\"line\">         mWindowAdded = <span class=\"keyword\">true</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">     mDecor.setVisibility(View.VISIBLE);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>至此通过setContentView方法设置的页面才最后显示出来</p>\n</li>\n</ol>\n<h3 id=\"LayoutInflater源码分析\"><a href=\"#LayoutInflater源码分析\" class=\"headerlink\" title=\"LayoutInflater源码分析\"></a>LayoutInflater源码分析</h3><ol>\n<li><p>与setContentView相关</p>\n<p>在PhoneWindow的generateLayout中调用了     </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>LayoutInflater中获取实例化方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Obtains the LayoutInflater from the given context.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LayoutInflater <span class=\"title\">from</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    LayoutInflater LayoutInflater =</div><div class=\"line\">            (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class=\"line\">    <span class=\"keyword\">if</span> (LayoutInflater == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">\"LayoutInflater not found.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> LayoutInflater;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>inflate方法相关</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> inflate(resource, root, root != <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> inflate(parser, root, root != <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Resources res = getContext().getResources();</div><div class=\"line\">    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"INFLATING from resource: \\\"\"</span> + res.getResourceName(resource) + <span class=\"string\">\"\\\" (\"</span></div><div class=\"line\">                + Integer.toHexString(resource) + <span class=\"string\">\")\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> XmlResourceParser parser = res.getLayout(resource);</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        parser.close();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后发现都需要调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</div><div class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"inflate\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> Context inflaterContext = mContext;</div><div class=\"line\">            <span class=\"keyword\">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</div><div class=\"line\">            Context lastContext = (Context) mConstructorArgs[<span class=\"number\">0</span>];</div><div class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</div><div class=\"line\">            <span class=\"comment\">//定义返回值 初始化传入形参 root</span></div><div class=\"line\">            View result = root;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// 找到根节点</span></div><div class=\"line\">                <span class=\"keyword\">int</span> type;</div><div class=\"line\">                <span class=\"keyword\">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</div><div class=\"line\">                        type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//验证type是否为Start_Tag  保证xml文件正确</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(parser.getPositionDescription()</div><div class=\"line\">                            + <span class=\"string\">\": No start tag found!\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//type为 root node</span></div><div class=\"line\">                <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Creating root view: \"</span></div><div class=\"line\">                            + name);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class=\"line\">                    <span class=\"comment\">//处理 merge相关</span></div><div class=\"line\">                    <span class=\"comment\">//root需要非空 且attachToRoot为空</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; can be used only with a valid \"</span></div><div class=\"line\">                                + <span class=\"string\">\"ViewGroup root and attachToRoot=true\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//递归inflate 方法调用</span></div><div class=\"line\">                    rInflate(parser, root, inflaterContext, attrs, <span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">//根据tag节点创建view对象</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</div><div class=\"line\"></div><div class=\"line\">                    ViewGroup.LayoutParams params = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                            System.out.println(<span class=\"string\">\"Creating params from root: \"</span> +</div><div class=\"line\">                                    root);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"comment\">//根据root生成LayoutParams</span></div><div class=\"line\">                        params = root.generateLayoutParams(attrs);</div><div class=\"line\">                        <span class=\"keyword\">if</span> (!attachToRoot) &#123;</div><div class=\"line\">                            <span class=\"comment\">//如果attachToRoot为flase 则调用setLayoutParams</span></div><div class=\"line\">                            temp.setLayoutParams(params);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; start inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//递归inflate剩下的children</span></div><div class=\"line\">                    rInflateChildren(parser, temp, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; done inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></div><div class=\"line\">                    <span class=\"comment\">// to root. Do that now.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"comment\">//root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里</span></div><div class=\"line\">                        root.addView(temp, params);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></div><div class=\"line\">                    <span class=\"comment\">// top view found in xml.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"comment\">//返回xml里解析的root view</span></div><div class=\"line\">                        result = temp;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;</div><div class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(e.getMessage());</div><div class=\"line\">                ex.initCause(e);</div><div class=\"line\">                <span class=\"keyword\">throw</span> ex;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(</div><div class=\"line\">                        parser.getPositionDescription()</div><div class=\"line\">                                + <span class=\"string\">\": \"</span> + e.getMessage());</div><div class=\"line\">                ex.initCause(e);</div><div class=\"line\">                <span class=\"keyword\">throw</span> ex;</div><div class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// Don't retain static reference on context.</span></div><div class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</div><div class=\"line\">                mConstructorArgs[<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">            <span class=\"comment\">//返回参数root或xml文件里的root view</span></div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>相关inflate参数的结果<br><img src=\"/inflate参数.png\" alt=\"inflate参数.png\"></p>\n</li>\n<li><p>相关方法解析<br>在Inflate中多次被调用的rInflate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</span></span></div><div class=\"line\">        AttributeSet attrs, <span class=\"keyword\">boolean</span> finishInflate) <span class=\"keyword\">throws</span> XmlPullParserException, IOException &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> depth = parser.getDepth();</div><div class=\"line\">    <span class=\"keyword\">int</span> type;</div><div class=\"line\">    <span class=\"comment\">//XmlPullParser解析器的标准解析模式</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</div><div class=\"line\">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">        <span class=\"comment\">//找到start_tag节点</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//获取Name标记</span></div><div class=\"line\">        <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_REQUEST_FOCUS = \"requestFocus\";</span></div><div class=\"line\">        <span class=\"comment\">//处理requestFocus</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</div><div class=\"line\">            parseRequestFocus(parser, parent);</div><div class=\"line\">        <span class=\"comment\">// private static final String TAG_TAG = \"tag\";</span></div><div class=\"line\">        <span class=\"comment\">//处理tag</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</div><div class=\"line\">            parseViewTag(parser, parent, attrs);</div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_INCLUDE = \"include\";</span></div><div class=\"line\">        <span class=\"comment\">//处理include</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;</div><div class=\"line\">            <span class=\"comment\">//如果是根节点则抛出异常</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;include /&gt; cannot be the root element\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            parseInclude(parser, context, parent, attrs);</div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_MERGE = \"merge\";</span></div><div class=\"line\">        <span class=\"comment\">//处理merge merge需要是xml中的根节点</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; must be the root element\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View view = createViewFromTag(parent, name, context, attrs);</div><div class=\"line\">            <span class=\"keyword\">final</span> ViewGroup viewGroup = (ViewGroup) parent;</div><div class=\"line\">            <span class=\"keyword\">final</span> ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);</div><div class=\"line\">            rInflateChildren(parser, view, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\">            viewGroup.addView(view, params);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">//parent的所有子节点都处理完毕的时候回onFinishInflate方法</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (finishInflate) &#123;</div><div class=\"line\">        parent.onFinishInflate();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//可以添加自定义逻辑</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinishInflate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"<h2 id=\"从setContentView与LayoutInflater说起\"><a href=\"#从setContentView与LayoutInflater说起\" class=\"headerlink\" title=\"从setContentView与LayoutInflater说起\"></a>从setContentView与LayoutInflater说起</h2><h3 id=\"setContentView分析\"><a href=\"#setContentView分析\" class=\"headerlink\" title=\"setContentView分析\"></a>setContentView分析</h3><h4 id=\"相关关系\"><a href=\"#相关关系\" class=\"headerlink\" title=\"相关关系\"></a>相关关系</h4><p>  <img src=\"http://p1.bpimg.com/567571/ad9dd8344a63f0cd.png\" alt=\"相关关系图\"><br>","more":"</p>\n<p>  Activity中有Window成员 实例化为PhoneWindow PhoneWindow是抽象Window类的实现类</p>\n<p>  Window提供了绘制窗口的通用API PhoneWindow中包含了DecorView对象 是所有窗口(Activity界面)的根View</p>\n<p>  具体的构如下</p>\n<p>  <img src=\"http://i1.piimg.com/567571/b7961c0d826c75e0.png\" alt=\"View层级分析\"></p>\n<p>  具体的可以通过hierarchyviewer工具分析一下</p>\n<h4 id=\"PhoneWindow的setContentView分析\"><a href=\"#PhoneWindow的setContentView分析\" class=\"headerlink\" title=\"PhoneWindow的setContentView分析\"></a>PhoneWindow的setContentView分析</h4><blockquote>\n<p>Window类的setContentView方法 而Window的setContentView方法是抽象的  所以查看PhoneWindow的setContentView()</p>\n</blockquote>\n<ol>\n<li><p>setContentView方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// This is the view in which the window contents are placed. It is either</span></div><div class=\"line\"><span class=\"comment\">// mDecor itself, or a child of mDecor where the contents go.</span></div><div class=\"line\"><span class=\"keyword\">private</span> ViewGroup mContentParent;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window</span></div><div class=\"line\">    <span class=\"comment\">// decor, when theme attributes and the like are crystalized. Do not check the feature</span></div><div class=\"line\">    <span class=\"comment\">// before this happens.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//第一次调用</span></div><div class=\"line\">        <span class=\"comment\">//下面会详细分析</span></div><div class=\"line\">        installDecor();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class=\"line\">        <span class=\"comment\">//移除该mContentParent下的所有View</span></div><div class=\"line\">        <span class=\"comment\">//又因为这个的存在  我们可以多次使用setContentView()</span></div><div class=\"line\">        mContentParent.removeAllViews();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//判断是否使用了Activity的过度动画</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class=\"line\">      <span class=\"comment\">//设置动画场景</span></div><div class=\"line\">        <span class=\"keyword\">final</span> Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,</div><div class=\"line\">                getContext());</div><div class=\"line\">        transitionTo(newScene);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//将资源文件通过LayoutInflater对象装换为View树</span></div><div class=\"line\">        <span class=\"comment\">//在PhoneWindow的构造函数中 mLayoutInflater = LayoutInflater.from(context);</span></div><div class=\"line\">        mLayoutInflater.inflate(layoutResID, mContentParent);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//View中</span></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Ask that a new dispatch of &#123;<span class=\"doctag\">@link</span> #onApplyWindowInsets(WindowInsets)&#125; be performed.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"comment\">// public void requestApplyInsets() &#123;</span></div><div class=\"line\">    <span class=\"comment\">//     requestFitSystemWindows();</span></div><div class=\"line\">    <span class=\"comment\">// &#125;</span></div><div class=\"line\">    mContentParent.requestApplyInsets();</div><div class=\"line\">    <span class=\"keyword\">final</span> Callback cb = getCallback();</div><div class=\"line\">    <span class=\"keyword\">if</span> (cb != <span class=\"keyword\">null</span> &amp;&amp; !isDestroyed()) &#123;</div><div class=\"line\">        cb.onContentChanged();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">    setContentView(view, <span class=\"keyword\">new</span> ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        installDecor();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class=\"line\">        mContentParent.removeAllViews();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class=\"line\">        view.setLayoutParams(params);</div><div class=\"line\">        <span class=\"keyword\">final</span> Scene newScene = <span class=\"keyword\">new</span> Scene(mContentParent, view);</div><div class=\"line\">        transitionTo(newScene);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//已经为View 直接使用View的addView方法追加到当前mContentParent中</span></div><div class=\"line\">        mContentParent.addView(view, params);</div><div class=\"line\">    &#125;</div><div class=\"line\">    mContentParent.requestApplyInsets();</div><div class=\"line\">    <span class=\"keyword\">final</span> Callback cb = getCallback();</div><div class=\"line\">    <span class=\"comment\">//调用CallBack接口的onContentChange来通知Activity组件视图发生了变化</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (cb != <span class=\"keyword\">null</span> &amp;&amp; !isDestroyed()) &#123;</div><div class=\"line\">        cb.onContentChanged();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>installDecor方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//截取部分主要分析代码</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installDecor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mDecor == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//如果mDecor为空则创建一个DecorView实例</span></div><div class=\"line\">        <span class=\"comment\">// protected DecorView generateDecor() &#123;</span></div><div class=\"line\">        <span class=\"comment\">//   return new DecorView(getContext(), -1);</span></div><div class=\"line\">        <span class=\"comment\">// &#125;</span></div><div class=\"line\">        mDecor = generateDecor();  </div><div class=\"line\">        mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);</div><div class=\"line\">        mDecor.setIsRootNamespace(<span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!mInvalidatePanelMenuPosted &amp;&amp; mInvalidatePanelMenuFeatures != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            mDecor.postOnAnimation(mInvalidatePanelMenuRunnable);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//根据窗口的风格修饰 选择对应的修饰布局文件 将id为content的FrameLayout赋值于mContentParent</span></div><div class=\"line\">        mContentParent = generateLayout(mDecor);</div><div class=\"line\">        ...</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ViewGroup <span class=\"title\">generateLayout</span><span class=\"params\">(DecorView decor)</span> </span>&#123;</div><div class=\"line\">     <span class=\"comment\">// Apply data from current theme.</span></div><div class=\"line\">     <span class=\"comment\">//根据当前style修饰相应样式</span></div><div class=\"line\"></div><div class=\"line\">     TypedArray a = getWindowStyle();</div><div class=\"line\"></div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"comment\">//一堆if判断</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// 增加窗口修饰</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">int</span> layoutResource;</div><div class=\"line\">     <span class=\"keyword\">int</span> features = getLocalFeatures();</div><div class=\"line\"></div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"comment\">//根据features选择不同的窗帘修饰布局文件得到</span></div><div class=\"line\">     <span class=\"comment\">//把选中的窗口修饰布局文件添加到DecorView中, 指定contentParent的值</span></div><div class=\"line\">     View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</div><div class=\"line\">     decor.addView(in, <span class=\"keyword\">new</span> ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));</div><div class=\"line\">     mContentRoot = (ViewGroup) in;</div><div class=\"line\"></div><div class=\"line\">     ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);</div><div class=\"line\">     <span class=\"keyword\">if</span> (contentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Window couldn't find content container view\"</span>);</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"keyword\">return</span> contentParent;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>该方法的主要功能为 根据窗口的style为该窗口选择不同的窗口根布局文件 将mDecor作为根视图将窗口布局添加,获取id为content的FrameLayout返回给mContentParent对象  实质为阐释mDecor和mContentParent对象</p>\n</li>\n<li><p>(扩展)关于设置Activity属性需要在setContentView方法之前调用的问题</p>\n<p>在设置Activity属性的时候 比如requestWindowFeature(Window.FEATURE_NO_TITLE) 需要在setContentView方法之前调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">requestFeature</span><span class=\"params\">(<span class=\"keyword\">int</span> featureId)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AndroidRuntimeException(<span class=\"string\">\"requestFeature() must be called before adding content\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>onContentChanged方法</p>\n<p>在PhoneWindow中没有重写getCallback相关方法 而在Window类下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Return the current Callback interface for this window.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Callback <span class=\"title\">getCallback</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mCallback;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>mCallback相关的赋值方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Set the Callback interface for this window, used to intercept key</div><div class=\"line\"> * events and other dynamic operations in the window.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> callback The desired Callback interface.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCallback</span><span class=\"params\">(Callback callback)</span> </span>&#123;</div><div class=\"line\">    mCallback = callback;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>setCallback方法在Activity中被使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context, ActivityThread aThread,</div><div class=\"line\">          Instrumentation instr, IBinder token, <span class=\"keyword\">int</span> ident,</div><div class=\"line\">          Application application, Intent intent, ActivityInfo info,</div><div class=\"line\">          CharSequence title, Activity parent, String id,</div><div class=\"line\">          NonConfigurationInstances lastNonConfigurationInstances,</div><div class=\"line\">          Configuration config, String referrer, IVoiceInteractor voiceInteractor)</span> </span>&#123;</div><div class=\"line\">      ...</div><div class=\"line\">      mWindow.setCallback(<span class=\"keyword\">this</span>);</div><div class=\"line\">      ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>说明Activity实现了Window的CallBack接口 然后在Activity中找到onContentChanged方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onContentChanged</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对 空方法. 说明在Activity的布局改动时 (setContentView或者addContentView 方法执行完毕后会调用改方法)<br>所以各种View的findViewById方法什么的可以放在这里</p>\n</li>\n<li><p>setContentView源码总结</p>\n<ul>\n<li>创建一个DecorView的对象mDector 该mDector将作为整个应用窗口的根视图</li>\n<li>根据根据Feature等style theme创建不同的窗口修饰布局文件 并且通过findViewById获取Activity布局文件该存放的地方</li>\n<li>将Activity的布局文件添加至id为content的FrameLayout内</li>\n<li>执行到当前页面还没有显示出来</li>\n</ul>\n</li>\n<li><p>Activity页面显示</p>\n<p>我们都知道Activity的实际开始于ActivityThread的main方法 当该方法调运完之后会调用该类的performLaunchActivity方法来创建要启动的Activity组件 这个过程中还会为该Activity组件创建窗口对象和视图对象 当组件创建完成后用过调用该类的handleResumeActivity方法将其激活</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">handleResumeActivity</span><span class=\"params\">(IBinder token,</div><div class=\"line\">           <span class=\"keyword\">boolean</span> clearHide, <span class=\"keyword\">boolean</span> isForward, <span class=\"keyword\">boolean</span> reallyResume)</span> </span>&#123;</div><div class=\"line\">             ...</div><div class=\"line\">           <span class=\"keyword\">if</span> (!r.activity.mFinished &amp;&amp; willBeVisible</div><div class=\"line\">                   &amp;&amp; r.activity.mDecor != <span class=\"keyword\">null</span> &amp;&amp; !r.hideForNow) &#123;</div><div class=\"line\">               ...</div><div class=\"line\">               <span class=\"keyword\">if</span> (r.activity.mVisibleFromClient) &#123;</div><div class=\"line\">                   r.activity.makeVisible();</div><div class=\"line\">                   <span class=\"comment\">//这里这里 通过调用Activity的makeVisible方法来显示我们通过setContentView创建的mDecor</span></div><div class=\"line\">               &#125;</div><div class=\"line\">               ...</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         ...</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Activity的makeVisible方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">makeVisible</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">if</span> (!mWindowAdded) &#123;</div><div class=\"line\">         ViewManager wm = getWindowManager();</div><div class=\"line\">         wm.addView(mDecor, getWindow().getAttributes());</div><div class=\"line\">         mWindowAdded = <span class=\"keyword\">true</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">     mDecor.setVisibility(View.VISIBLE);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>至此通过setContentView方法设置的页面才最后显示出来</p>\n</li>\n</ol>\n<h3 id=\"LayoutInflater源码分析\"><a href=\"#LayoutInflater源码分析\" class=\"headerlink\" title=\"LayoutInflater源码分析\"></a>LayoutInflater源码分析</h3><ol>\n<li><p>与setContentView相关</p>\n<p>在PhoneWindow的generateLayout中调用了     </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>LayoutInflater中获取实例化方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Obtains the LayoutInflater from the given context.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LayoutInflater <span class=\"title\">from</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    LayoutInflater LayoutInflater =</div><div class=\"line\">            (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class=\"line\">    <span class=\"keyword\">if</span> (LayoutInflater == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">\"LayoutInflater not found.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> LayoutInflater;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>inflate方法相关</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> inflate(resource, root, root != <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> inflate(parser, root, root != <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Resources res = getContext().getResources();</div><div class=\"line\">    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"INFLATING from resource: \\\"\"</span> + res.getResourceName(resource) + <span class=\"string\">\"\\\" (\"</span></div><div class=\"line\">                + Integer.toHexString(resource) + <span class=\"string\">\")\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> XmlResourceParser parser = res.getLayout(resource);</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        parser.close();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后发现都需要调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</div><div class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"inflate\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> Context inflaterContext = mContext;</div><div class=\"line\">            <span class=\"keyword\">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</div><div class=\"line\">            Context lastContext = (Context) mConstructorArgs[<span class=\"number\">0</span>];</div><div class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</div><div class=\"line\">            <span class=\"comment\">//定义返回值 初始化传入形参 root</span></div><div class=\"line\">            View result = root;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// 找到根节点</span></div><div class=\"line\">                <span class=\"keyword\">int</span> type;</div><div class=\"line\">                <span class=\"keyword\">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</div><div class=\"line\">                        type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//验证type是否为Start_Tag  保证xml文件正确</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(parser.getPositionDescription()</div><div class=\"line\">                            + <span class=\"string\">\": No start tag found!\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//type为 root node</span></div><div class=\"line\">                <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Creating root view: \"</span></div><div class=\"line\">                            + name);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class=\"line\">                    <span class=\"comment\">//处理 merge相关</span></div><div class=\"line\">                    <span class=\"comment\">//root需要非空 且attachToRoot为空</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; can be used only with a valid \"</span></div><div class=\"line\">                                + <span class=\"string\">\"ViewGroup root and attachToRoot=true\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//递归inflate 方法调用</span></div><div class=\"line\">                    rInflate(parser, root, inflaterContext, attrs, <span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">//根据tag节点创建view对象</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</div><div class=\"line\"></div><div class=\"line\">                    ViewGroup.LayoutParams params = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                            System.out.println(<span class=\"string\">\"Creating params from root: \"</span> +</div><div class=\"line\">                                    root);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"comment\">//根据root生成LayoutParams</span></div><div class=\"line\">                        params = root.generateLayoutParams(attrs);</div><div class=\"line\">                        <span class=\"keyword\">if</span> (!attachToRoot) &#123;</div><div class=\"line\">                            <span class=\"comment\">//如果attachToRoot为flase 则调用setLayoutParams</span></div><div class=\"line\">                            temp.setLayoutParams(params);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; start inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//递归inflate剩下的children</span></div><div class=\"line\">                    rInflateChildren(parser, temp, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; done inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></div><div class=\"line\">                    <span class=\"comment\">// to root. Do that now.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"comment\">//root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里</span></div><div class=\"line\">                        root.addView(temp, params);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></div><div class=\"line\">                    <span class=\"comment\">// top view found in xml.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"comment\">//返回xml里解析的root view</span></div><div class=\"line\">                        result = temp;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;</div><div class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(e.getMessage());</div><div class=\"line\">                ex.initCause(e);</div><div class=\"line\">                <span class=\"keyword\">throw</span> ex;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(</div><div class=\"line\">                        parser.getPositionDescription()</div><div class=\"line\">                                + <span class=\"string\">\": \"</span> + e.getMessage());</div><div class=\"line\">                ex.initCause(e);</div><div class=\"line\">                <span class=\"keyword\">throw</span> ex;</div><div class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// Don't retain static reference on context.</span></div><div class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</div><div class=\"line\">                mConstructorArgs[<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">            <span class=\"comment\">//返回参数root或xml文件里的root view</span></div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>相关inflate参数的结果<br><img src=\"/inflate参数.png\" alt=\"inflate参数.png\"></p>\n</li>\n<li><p>相关方法解析<br>在Inflate中多次被调用的rInflate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</div><div class=\"line\">        AttributeSet attrs, <span class=\"keyword\">boolean</span> finishInflate)</span> <span class=\"keyword\">throws</span> XmlPullParserException, IOException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> depth = parser.getDepth();</div><div class=\"line\">    <span class=\"keyword\">int</span> type;</div><div class=\"line\">    <span class=\"comment\">//XmlPullParser解析器的标准解析模式</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</div><div class=\"line\">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">        <span class=\"comment\">//找到start_tag节点</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//获取Name标记</span></div><div class=\"line\">        <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_REQUEST_FOCUS = \"requestFocus\";</span></div><div class=\"line\">        <span class=\"comment\">//处理requestFocus</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</div><div class=\"line\">            parseRequestFocus(parser, parent);</div><div class=\"line\">        <span class=\"comment\">// private static final String TAG_TAG = \"tag\";</span></div><div class=\"line\">        <span class=\"comment\">//处理tag</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</div><div class=\"line\">            parseViewTag(parser, parent, attrs);</div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_INCLUDE = \"include\";</span></div><div class=\"line\">        <span class=\"comment\">//处理include</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;</div><div class=\"line\">            <span class=\"comment\">//如果是根节点则抛出异常</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;include /&gt; cannot be the root element\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            parseInclude(parser, context, parent, attrs);</div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_MERGE = \"merge\";</span></div><div class=\"line\">        <span class=\"comment\">//处理merge merge需要是xml中的根节点</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; must be the root element\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View view = createViewFromTag(parent, name, context, attrs);</div><div class=\"line\">            <span class=\"keyword\">final</span> ViewGroup viewGroup = (ViewGroup) parent;</div><div class=\"line\">            <span class=\"keyword\">final</span> ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);</div><div class=\"line\">            rInflateChildren(parser, view, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\">            viewGroup.addView(view, params);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">//parent的所有子节点都处理完毕的时候回onFinishInflate方法</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (finishInflate) &#123;</div><div class=\"line\">        parent.onFinishInflate();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//可以添加自定义逻辑</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinishInflate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"Android View 相关源码分析之二 继LayoutInflater来说","date":"2017-02-03T09:39:24.000Z","_content":"### LayoutInflater源码分析\n1. 与setContentView相关\n\n  在PhoneWindow的generateLayout中调用了     \n  ```java\n    View in = mLayoutInflater.inflate(layoutResource, null);\n  ```\n\n2. LayoutInflater中获取实例化方法\n  ```java\n    /**\n     * Obtains the LayoutInflater from the given context.\n     */\n    public static LayoutInflater from(Context context) {\n        LayoutInflater LayoutInflater =\n                (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        if (LayoutInflater == null) {\n            throw new AssertionError(\"LayoutInflater not found.\");\n        }\n        return LayoutInflater;\n    }\n  ```\n  <!-- more -->\n\n3. inflate方法相关\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root) {\n        return inflate(resource, root, root != null);\n    }\n\n    public View inflate(XmlPullParser parser, @Nullable ViewGroup root) {\n      return inflate(parser, root, root != null);\n    }\n  ```\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\n        final Resources res = getContext().getResources();\n        if (DEBUG) {\n            Log.d(TAG, \"INFLATING from resource: \\\"\" + res.getResourceName(resource) + \"\\\" (\"\n                    + Integer.toHexString(resource) + \")\");\n        }\n\n        final XmlResourceParser parser = res.getLayout(resource);\n        try {\n            return inflate(parser, root, attachToRoot);\n        } finally {\n            parser.close();\n        }\n    }\n  ```\n  最后发现都需要调用\n\n  ```java\n  public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n          synchronized (mConstructorArgs) {\n              Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n\n              final Context inflaterContext = mContext;\n              final AttributeSet attrs = Xml.asAttributeSet(parser);\n              Context lastContext = (Context) mConstructorArgs[0];\n              mConstructorArgs[0] = inflaterContext;\n              //定义返回值 初始化传入形参 root\n              View result = root;\n\n              try {\n                  // 找到根节点\n                  int type;\n                  while ((type = parser.next()) != XmlPullParser.START_TAG &&\n                          type != XmlPullParser.END_DOCUMENT) {\n                  }\n\n                  //验证type是否为Start_Tag  保证xml文件正确\n                  if (type != XmlPullParser.START_TAG) {\n                      throw new InflateException(parser.getPositionDescription()\n                              + \": No start tag found!\");\n                  }\n\n                  //type为 root node\n                  final String name = parser.getName();\n\n                  if (DEBUG) {\n                      System.out.println(\"**************************\");\n                      System.out.println(\"Creating root view: \"\n                              + name);\n                      System.out.println(\"**************************\");\n                  }\n\n                  if (TAG_MERGE.equals(name)) {\n                      //处理 merge相关\n                      //root需要非空 且attachToRoot为空\n                      if (root == null || !attachToRoot) {\n                          throw new InflateException(\"<merge /> can be used only with a valid \"\n                                  + \"ViewGroup root and attachToRoot=true\");\n                      }\n                      //递归inflate 方法调用\n                      rInflate(parser, root, inflaterContext, attrs, false);\n                  } else {\n                      //根据tag节点创建view对象\n                      final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                      ViewGroup.LayoutParams params = null;\n\n                      if (root != null) {\n                          if (DEBUG) {\n                              System.out.println(\"Creating params from root: \" +\n                                      root);\n                          }\n                          //根据root生成LayoutParams\n                          params = root.generateLayoutParams(attrs);\n                          if (!attachToRoot) {\n                              //如果attachToRoot为flase 则调用setLayoutParams\n                              temp.setLayoutParams(params);\n                          }\n                      }\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> start inflating children\");\n                      }\n                      //递归inflate剩下的children\n                      rInflateChildren(parser, temp, attrs, true);\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> done inflating children\");\n                      }\n\n                      // We are supposed to attach all the views we found (int temp)\n                      // to root. Do that now.\n                      if (root != null && attachToRoot) {\n                          //root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里\n                          root.addView(temp, params);\n                      }\n\n                      // Decide whether to return the root that was passed in or the\n                      // top view found in xml.\n                      if (root == null || !attachToRoot) {\n                          //返回xml里解析的root view\n                          result = temp;\n                      }\n                  }\n\n              } catch (XmlPullParserException e) {\n                  InflateException ex = new InflateException(e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } catch (Exception e) {\n                  InflateException ex = new InflateException(\n                          parser.getPositionDescription()\n                                  + \": \" + e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } finally {\n                  // Don't retain static reference on context.\n                  mConstructorArgs[0] = lastContext;\n                  mConstructorArgs[1] = null;\n              }\n\n              Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n              //返回参数root或xml文件里的root view\n              return result;\n          }\n      }\n\n  ```\n  相关inflate参数的结果\n  ![inflate参数.png](/inflate参数.png)\n\n4. 相关方法解析\n  在Inflate中多次被调用的rInflate\n\n  ```java\n     void rInflate(XmlPullParser parser, View parent, Context context,\n             AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException {\n\n         final int depth = parser.getDepth();\n         int type;\n         //XmlPullParser解析器的标准解析模式\n         while (((type = parser.next()) != XmlPullParser.END_TAG ||\n                 parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {\n             //找到start_tag节点\n             if (type != XmlPullParser.START_TAG) {\n                 continue;\n             }\n             //获取Name标记\n             final String name = parser.getName();\n\n             //private static final String TAG_REQUEST_FOCUS = \"requestFocus\";\n             //处理requestFocus\n             if (TAG_REQUEST_FOCUS.equals(name)) {\n                 parseRequestFocus(parser, parent);\n             // private static final String TAG_TAG = \"tag\";\n             //处理tag\n             } else if (TAG_TAG.equals(name)) {\n                 parseViewTag(parser, parent, attrs);\n             //private static final String TAG_INCLUDE = \"include\";\n             //处理include\n             } else if (TAG_INCLUDE.equals(name)) {\n                 //如果是根节点则抛出异常\n                 if (parser.getDepth() == 0) {\n                     throw new InflateException(\"<include /> cannot be the root element\");\n                 }\n                 parseInclude(parser, context, parent, attrs);\n             //private static final String TAG_MERGE = \"merge\";\n             //处理merge merge需要是xml中的根节点\n             } else if (TAG_MERGE.equals(name)) {\n                 throw new InflateException(\"<merge /> must be the root element\");\n             } else {\n                 final View view = createViewFromTag(parent, name, context, attrs);\n                 final ViewGroup viewGroup = (ViewGroup) parent;\n                 final ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);\n                 rInflateChildren(parser, view, attrs, true);\n                 viewGroup.addView(view, params);\n             }\n         }\n\n          //parent的所有子节点都处理完毕的时候回onFinishInflate方法\n         if (finishInflate) {\n             parent.onFinishInflate();\n         }\n     }\n     //可以添加自定义逻辑\n      protected void onFinishInflate() {\n      }\n```\n","source":"_posts/LayoutInflater.md","raw":"---\ntitle: Android View 相关源码分析之二 继LayoutInflater来说\ndate: 2017-02-03 17:39:24\ntags: [\"android\" , \"view\" , \"源码\"]\ncategories: \"android\"\n---\n### LayoutInflater源码分析\n1. 与setContentView相关\n\n  在PhoneWindow的generateLayout中调用了     \n  ```java\n    View in = mLayoutInflater.inflate(layoutResource, null);\n  ```\n\n2. LayoutInflater中获取实例化方法\n  ```java\n    /**\n     * Obtains the LayoutInflater from the given context.\n     */\n    public static LayoutInflater from(Context context) {\n        LayoutInflater LayoutInflater =\n                (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        if (LayoutInflater == null) {\n            throw new AssertionError(\"LayoutInflater not found.\");\n        }\n        return LayoutInflater;\n    }\n  ```\n  <!-- more -->\n\n3. inflate方法相关\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root) {\n        return inflate(resource, root, root != null);\n    }\n\n    public View inflate(XmlPullParser parser, @Nullable ViewGroup root) {\n      return inflate(parser, root, root != null);\n    }\n  ```\n  ```java\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\n        final Resources res = getContext().getResources();\n        if (DEBUG) {\n            Log.d(TAG, \"INFLATING from resource: \\\"\" + res.getResourceName(resource) + \"\\\" (\"\n                    + Integer.toHexString(resource) + \")\");\n        }\n\n        final XmlResourceParser parser = res.getLayout(resource);\n        try {\n            return inflate(parser, root, attachToRoot);\n        } finally {\n            parser.close();\n        }\n    }\n  ```\n  最后发现都需要调用\n\n  ```java\n  public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n          synchronized (mConstructorArgs) {\n              Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n\n              final Context inflaterContext = mContext;\n              final AttributeSet attrs = Xml.asAttributeSet(parser);\n              Context lastContext = (Context) mConstructorArgs[0];\n              mConstructorArgs[0] = inflaterContext;\n              //定义返回值 初始化传入形参 root\n              View result = root;\n\n              try {\n                  // 找到根节点\n                  int type;\n                  while ((type = parser.next()) != XmlPullParser.START_TAG &&\n                          type != XmlPullParser.END_DOCUMENT) {\n                  }\n\n                  //验证type是否为Start_Tag  保证xml文件正确\n                  if (type != XmlPullParser.START_TAG) {\n                      throw new InflateException(parser.getPositionDescription()\n                              + \": No start tag found!\");\n                  }\n\n                  //type为 root node\n                  final String name = parser.getName();\n\n                  if (DEBUG) {\n                      System.out.println(\"**************************\");\n                      System.out.println(\"Creating root view: \"\n                              + name);\n                      System.out.println(\"**************************\");\n                  }\n\n                  if (TAG_MERGE.equals(name)) {\n                      //处理 merge相关\n                      //root需要非空 且attachToRoot为空\n                      if (root == null || !attachToRoot) {\n                          throw new InflateException(\"<merge /> can be used only with a valid \"\n                                  + \"ViewGroup root and attachToRoot=true\");\n                      }\n                      //递归inflate 方法调用\n                      rInflate(parser, root, inflaterContext, attrs, false);\n                  } else {\n                      //根据tag节点创建view对象\n                      final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                      ViewGroup.LayoutParams params = null;\n\n                      if (root != null) {\n                          if (DEBUG) {\n                              System.out.println(\"Creating params from root: \" +\n                                      root);\n                          }\n                          //根据root生成LayoutParams\n                          params = root.generateLayoutParams(attrs);\n                          if (!attachToRoot) {\n                              //如果attachToRoot为flase 则调用setLayoutParams\n                              temp.setLayoutParams(params);\n                          }\n                      }\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> start inflating children\");\n                      }\n                      //递归inflate剩下的children\n                      rInflateChildren(parser, temp, attrs, true);\n\n                      if (DEBUG) {\n                          System.out.println(\"-----> done inflating children\");\n                      }\n\n                      // We are supposed to attach all the views we found (int temp)\n                      // to root. Do that now.\n                      if (root != null && attachToRoot) {\n                          //root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里\n                          root.addView(temp, params);\n                      }\n\n                      // Decide whether to return the root that was passed in or the\n                      // top view found in xml.\n                      if (root == null || !attachToRoot) {\n                          //返回xml里解析的root view\n                          result = temp;\n                      }\n                  }\n\n              } catch (XmlPullParserException e) {\n                  InflateException ex = new InflateException(e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } catch (Exception e) {\n                  InflateException ex = new InflateException(\n                          parser.getPositionDescription()\n                                  + \": \" + e.getMessage());\n                  ex.initCause(e);\n                  throw ex;\n              } finally {\n                  // Don't retain static reference on context.\n                  mConstructorArgs[0] = lastContext;\n                  mConstructorArgs[1] = null;\n              }\n\n              Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n              //返回参数root或xml文件里的root view\n              return result;\n          }\n      }\n\n  ```\n  相关inflate参数的结果\n  ![inflate参数.png](/inflate参数.png)\n\n4. 相关方法解析\n  在Inflate中多次被调用的rInflate\n\n  ```java\n     void rInflate(XmlPullParser parser, View parent, Context context,\n             AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException {\n\n         final int depth = parser.getDepth();\n         int type;\n         //XmlPullParser解析器的标准解析模式\n         while (((type = parser.next()) != XmlPullParser.END_TAG ||\n                 parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {\n             //找到start_tag节点\n             if (type != XmlPullParser.START_TAG) {\n                 continue;\n             }\n             //获取Name标记\n             final String name = parser.getName();\n\n             //private static final String TAG_REQUEST_FOCUS = \"requestFocus\";\n             //处理requestFocus\n             if (TAG_REQUEST_FOCUS.equals(name)) {\n                 parseRequestFocus(parser, parent);\n             // private static final String TAG_TAG = \"tag\";\n             //处理tag\n             } else if (TAG_TAG.equals(name)) {\n                 parseViewTag(parser, parent, attrs);\n             //private static final String TAG_INCLUDE = \"include\";\n             //处理include\n             } else if (TAG_INCLUDE.equals(name)) {\n                 //如果是根节点则抛出异常\n                 if (parser.getDepth() == 0) {\n                     throw new InflateException(\"<include /> cannot be the root element\");\n                 }\n                 parseInclude(parser, context, parent, attrs);\n             //private static final String TAG_MERGE = \"merge\";\n             //处理merge merge需要是xml中的根节点\n             } else if (TAG_MERGE.equals(name)) {\n                 throw new InflateException(\"<merge /> must be the root element\");\n             } else {\n                 final View view = createViewFromTag(parent, name, context, attrs);\n                 final ViewGroup viewGroup = (ViewGroup) parent;\n                 final ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);\n                 rInflateChildren(parser, view, attrs, true);\n                 viewGroup.addView(view, params);\n             }\n         }\n\n          //parent的所有子节点都处理完毕的时候回onFinishInflate方法\n         if (finishInflate) {\n             parent.onFinishInflate();\n         }\n     }\n     //可以添加自定义逻辑\n      protected void onFinishInflate() {\n      }\n```\n","slug":"LayoutInflater","published":1,"updated":"2017-02-03T09:57:03.000Z","_id":"ciypmziqe00007ao9leomni4z","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"LayoutInflater源码分析\"><a href=\"#LayoutInflater源码分析\" class=\"headerlink\" title=\"LayoutInflater源码分析\"></a>LayoutInflater源码分析</h3><ol>\n<li><p>与setContentView相关</p>\n<p>在PhoneWindow的generateLayout中调用了     </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>LayoutInflater中获取实例化方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Obtains the LayoutInflater from the given context.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LayoutInflater <span class=\"title\">from</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    LayoutInflater LayoutInflater =</div><div class=\"line\">            (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class=\"line\">    <span class=\"keyword\">if</span> (LayoutInflater == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">\"LayoutInflater not found.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> LayoutInflater;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n</li>\n<li><p>inflate方法相关</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> inflate(resource, root, root != <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> inflate(parser, root, root != <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Resources res = getContext().getResources();</div><div class=\"line\">    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"INFLATING from resource: \\\"\"</span> + res.getResourceName(resource) + <span class=\"string\">\"\\\" (\"</span></div><div class=\"line\">                + Integer.toHexString(resource) + <span class=\"string\">\")\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> XmlResourceParser parser = res.getLayout(resource);</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        parser.close();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后发现都需要调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</div><div class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"inflate\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> Context inflaterContext = mContext;</div><div class=\"line\">            <span class=\"keyword\">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</div><div class=\"line\">            Context lastContext = (Context) mConstructorArgs[<span class=\"number\">0</span>];</div><div class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</div><div class=\"line\">            <span class=\"comment\">//定义返回值 初始化传入形参 root</span></div><div class=\"line\">            View result = root;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// 找到根节点</span></div><div class=\"line\">                <span class=\"keyword\">int</span> type;</div><div class=\"line\">                <span class=\"keyword\">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</div><div class=\"line\">                        type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//验证type是否为Start_Tag  保证xml文件正确</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(parser.getPositionDescription()</div><div class=\"line\">                            + <span class=\"string\">\": No start tag found!\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//type为 root node</span></div><div class=\"line\">                <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Creating root view: \"</span></div><div class=\"line\">                            + name);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class=\"line\">                    <span class=\"comment\">//处理 merge相关</span></div><div class=\"line\">                    <span class=\"comment\">//root需要非空 且attachToRoot为空</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; can be used only with a valid \"</span></div><div class=\"line\">                                + <span class=\"string\">\"ViewGroup root and attachToRoot=true\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//递归inflate 方法调用</span></div><div class=\"line\">                    rInflate(parser, root, inflaterContext, attrs, <span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">//根据tag节点创建view对象</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</div><div class=\"line\"></div><div class=\"line\">                    ViewGroup.LayoutParams params = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                            System.out.println(<span class=\"string\">\"Creating params from root: \"</span> +</div><div class=\"line\">                                    root);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"comment\">//根据root生成LayoutParams</span></div><div class=\"line\">                        params = root.generateLayoutParams(attrs);</div><div class=\"line\">                        <span class=\"keyword\">if</span> (!attachToRoot) &#123;</div><div class=\"line\">                            <span class=\"comment\">//如果attachToRoot为flase 则调用setLayoutParams</span></div><div class=\"line\">                            temp.setLayoutParams(params);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; start inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//递归inflate剩下的children</span></div><div class=\"line\">                    rInflateChildren(parser, temp, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; done inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></div><div class=\"line\">                    <span class=\"comment\">// to root. Do that now.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"comment\">//root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里</span></div><div class=\"line\">                        root.addView(temp, params);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></div><div class=\"line\">                    <span class=\"comment\">// top view found in xml.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"comment\">//返回xml里解析的root view</span></div><div class=\"line\">                        result = temp;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;</div><div class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(e.getMessage());</div><div class=\"line\">                ex.initCause(e);</div><div class=\"line\">                <span class=\"keyword\">throw</span> ex;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(</div><div class=\"line\">                        parser.getPositionDescription()</div><div class=\"line\">                                + <span class=\"string\">\": \"</span> + e.getMessage());</div><div class=\"line\">                ex.initCause(e);</div><div class=\"line\">                <span class=\"keyword\">throw</span> ex;</div><div class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// Don't retain static reference on context.</span></div><div class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</div><div class=\"line\">                mConstructorArgs[<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">            <span class=\"comment\">//返回参数root或xml文件里的root view</span></div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>相关inflate参数的结果<br><img src=\"/inflate参数.png\" alt=\"inflate参数.png\"></p>\n</li>\n<li><p>相关方法解析<br>在Inflate中多次被调用的rInflate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</span></span></div><div class=\"line\">        AttributeSet attrs, <span class=\"keyword\">boolean</span> finishInflate) <span class=\"keyword\">throws</span> XmlPullParserException, IOException &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> depth = parser.getDepth();</div><div class=\"line\">    <span class=\"keyword\">int</span> type;</div><div class=\"line\">    <span class=\"comment\">//XmlPullParser解析器的标准解析模式</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</div><div class=\"line\">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">        <span class=\"comment\">//找到start_tag节点</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//获取Name标记</span></div><div class=\"line\">        <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_REQUEST_FOCUS = \"requestFocus\";</span></div><div class=\"line\">        <span class=\"comment\">//处理requestFocus</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</div><div class=\"line\">            parseRequestFocus(parser, parent);</div><div class=\"line\">        <span class=\"comment\">// private static final String TAG_TAG = \"tag\";</span></div><div class=\"line\">        <span class=\"comment\">//处理tag</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</div><div class=\"line\">            parseViewTag(parser, parent, attrs);</div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_INCLUDE = \"include\";</span></div><div class=\"line\">        <span class=\"comment\">//处理include</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;</div><div class=\"line\">            <span class=\"comment\">//如果是根节点则抛出异常</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;include /&gt; cannot be the root element\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            parseInclude(parser, context, parent, attrs);</div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_MERGE = \"merge\";</span></div><div class=\"line\">        <span class=\"comment\">//处理merge merge需要是xml中的根节点</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; must be the root element\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View view = createViewFromTag(parent, name, context, attrs);</div><div class=\"line\">            <span class=\"keyword\">final</span> ViewGroup viewGroup = (ViewGroup) parent;</div><div class=\"line\">            <span class=\"keyword\">final</span> ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);</div><div class=\"line\">            rInflateChildren(parser, view, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\">            viewGroup.addView(view, params);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">//parent的所有子节点都处理完毕的时候回onFinishInflate方法</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (finishInflate) &#123;</div><div class=\"line\">        parent.onFinishInflate();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//可以添加自定义逻辑</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinishInflate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"<h3 id=\"LayoutInflater源码分析\"><a href=\"#LayoutInflater源码分析\" class=\"headerlink\" title=\"LayoutInflater源码分析\"></a>LayoutInflater源码分析</h3><ol>\n<li><p>与setContentView相关</p>\n<p>在PhoneWindow的generateLayout中调用了     </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>LayoutInflater中获取实例化方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Obtains the LayoutInflater from the given context.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LayoutInflater <span class=\"title\">from</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    LayoutInflater LayoutInflater =</div><div class=\"line\">            (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class=\"line\">    <span class=\"keyword\">if</span> (LayoutInflater == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">\"LayoutInflater not found.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> LayoutInflater;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"</li>\n<li><p>inflate方法相关</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> inflate(resource, root, root != <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> inflate(parser, root, root != <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Resources res = getContext().getResources();</div><div class=\"line\">    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"INFLATING from resource: \\\"\"</span> + res.getResourceName(resource) + <span class=\"string\">\"\\\" (\"</span></div><div class=\"line\">                + Integer.toHexString(resource) + <span class=\"string\">\")\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> XmlResourceParser parser = res.getLayout(resource);</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        parser.close();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后发现都需要调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</div><div class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"inflate\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> Context inflaterContext = mContext;</div><div class=\"line\">            <span class=\"keyword\">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</div><div class=\"line\">            Context lastContext = (Context) mConstructorArgs[<span class=\"number\">0</span>];</div><div class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</div><div class=\"line\">            <span class=\"comment\">//定义返回值 初始化传入形参 root</span></div><div class=\"line\">            View result = root;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// 找到根节点</span></div><div class=\"line\">                <span class=\"keyword\">int</span> type;</div><div class=\"line\">                <span class=\"keyword\">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</div><div class=\"line\">                        type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//验证type是否为Start_Tag  保证xml文件正确</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(parser.getPositionDescription()</div><div class=\"line\">                            + <span class=\"string\">\": No start tag found!\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//type为 root node</span></div><div class=\"line\">                <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Creating root view: \"</span></div><div class=\"line\">                            + name);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"**************************\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class=\"line\">                    <span class=\"comment\">//处理 merge相关</span></div><div class=\"line\">                    <span class=\"comment\">//root需要非空 且attachToRoot为空</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; can be used only with a valid \"</span></div><div class=\"line\">                                + <span class=\"string\">\"ViewGroup root and attachToRoot=true\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//递归inflate 方法调用</span></div><div class=\"line\">                    rInflate(parser, root, inflaterContext, attrs, <span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">//根据tag节点创建view对象</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</div><div class=\"line\"></div><div class=\"line\">                    ViewGroup.LayoutParams params = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                            System.out.println(<span class=\"string\">\"Creating params from root: \"</span> +</div><div class=\"line\">                                    root);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"comment\">//根据root生成LayoutParams</span></div><div class=\"line\">                        params = root.generateLayoutParams(attrs);</div><div class=\"line\">                        <span class=\"keyword\">if</span> (!attachToRoot) &#123;</div><div class=\"line\">                            <span class=\"comment\">//如果attachToRoot为flase 则调用setLayoutParams</span></div><div class=\"line\">                            temp.setLayoutParams(params);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; start inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//递归inflate剩下的children</span></div><div class=\"line\">                    rInflateChildren(parser, temp, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; done inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></div><div class=\"line\">                    <span class=\"comment\">// to root. Do that now.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"comment\">//root非空且attachToRoot=true则将xml文件的root view加到形参提供的root里</span></div><div class=\"line\">                        root.addView(temp, params);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></div><div class=\"line\">                    <span class=\"comment\">// top view found in xml.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"comment\">//返回xml里解析的root view</span></div><div class=\"line\">                        result = temp;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;</div><div class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(e.getMessage());</div><div class=\"line\">                ex.initCause(e);</div><div class=\"line\">                <span class=\"keyword\">throw</span> ex;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                InflateException ex = <span class=\"keyword\">new</span> InflateException(</div><div class=\"line\">                        parser.getPositionDescription()</div><div class=\"line\">                                + <span class=\"string\">\": \"</span> + e.getMessage());</div><div class=\"line\">                ex.initCause(e);</div><div class=\"line\">                <span class=\"keyword\">throw</span> ex;</div><div class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// Don't retain static reference on context.</span></div><div class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</div><div class=\"line\">                mConstructorArgs[<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">            <span class=\"comment\">//返回参数root或xml文件里的root view</span></div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>相关inflate参数的结果<br><img src=\"/inflate参数.png\" alt=\"inflate参数.png\"></p>\n</li>\n<li><p>相关方法解析<br>在Inflate中多次被调用的rInflate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</div><div class=\"line\">        AttributeSet attrs, <span class=\"keyword\">boolean</span> finishInflate)</span> <span class=\"keyword\">throws</span> XmlPullParserException, IOException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> depth = parser.getDepth();</div><div class=\"line\">    <span class=\"keyword\">int</span> type;</div><div class=\"line\">    <span class=\"comment\">//XmlPullParser解析器的标准解析模式</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</div><div class=\"line\">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">        <span class=\"comment\">//找到start_tag节点</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//获取Name标记</span></div><div class=\"line\">        <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_REQUEST_FOCUS = \"requestFocus\";</span></div><div class=\"line\">        <span class=\"comment\">//处理requestFocus</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</div><div class=\"line\">            parseRequestFocus(parser, parent);</div><div class=\"line\">        <span class=\"comment\">// private static final String TAG_TAG = \"tag\";</span></div><div class=\"line\">        <span class=\"comment\">//处理tag</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</div><div class=\"line\">            parseViewTag(parser, parent, attrs);</div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_INCLUDE = \"include\";</span></div><div class=\"line\">        <span class=\"comment\">//处理include</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;</div><div class=\"line\">            <span class=\"comment\">//如果是根节点则抛出异常</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;include /&gt; cannot be the root element\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            parseInclude(parser, context, parent, attrs);</div><div class=\"line\">        <span class=\"comment\">//private static final String TAG_MERGE = \"merge\";</span></div><div class=\"line\">        <span class=\"comment\">//处理merge merge需要是xml中的根节点</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; must be the root element\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View view = createViewFromTag(parent, name, context, attrs);</div><div class=\"line\">            <span class=\"keyword\">final</span> ViewGroup viewGroup = (ViewGroup) parent;</div><div class=\"line\">            <span class=\"keyword\">final</span> ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);</div><div class=\"line\">            rInflateChildren(parser, view, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\">            viewGroup.addView(view, params);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">//parent的所有子节点都处理完毕的时候回onFinishInflate方法</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (finishInflate) &#123;</div><div class=\"line\">        parent.onFinishInflate();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//可以添加自定义逻辑</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinishInflate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"Android View 相关源码分析之五 RelativeLayout 源码分析","date":"2017-02-03T09:59:16.000Z","_content":"## RelativeLayout  源码分析\n> 继承自ViewGroup 没有重载onDraw方法 内部子View又是相对 只要计算出View的坐标 layout过程同样简单\n\n### measure过程\n#### 主要过程\n1. 将内部View根据纵向关系和横向关系排序\n2. 初始化相关变量\n3. 遍历水平关系的View\n4. 遍历竖直关系的View\n5. baseline计算\n6. 宽度和高度修正\n\n  <!-- more -->\n\n\n\n#### 1 将内部View根据纵向关系和横向关系排序\n>layout_toRightOf 为横向关系  layout_below为纵向关系\n\n```java\n    //首先会根据mDirtyHierarchy的值判断是否需要将子View重新排序\n    if (mDirtyHierarchy) {\n        mDirtyHierarchy = false;\n        sortChildren();\n    }\n```\n相关调用方法\n```java\n    //mDirtyHierarchy的值只有在requestLayout方法下被更新\n    public void requestLayout() {\n        super.requestLayout();\n        mDirtyHierarchy = true;\n    }\n\n    //sortChildren()方法对横向纵向关系的view的数组进行非空判断 用DependencyGraph进行判断\n    private void sortChildren() {\n        final int count = getChildCount();\n        if (mSortedVerticalChildren == null || mSortedVerticalChildren.length != count) {\n            mSortedVerticalChildren = new View[count];\n        }\n\n        if (mSortedHorizontalChildren == null || mSortedHorizontalChildren.length != count) {\n            mSortedHorizontalChildren = new View[count];\n        }\n\n        final DependencyGraph graph = mGraph;\n        graph.clear();\n\n        for (int i = 0; i < count; i++) {\n            graph.add(getChildAt(i));\n        }\n\n        graph.getSortedViews(mSortedVerticalChildren, RULES_VERTICAL);\n        graph.getSortedViews(mSortedHorizontalChildren, RULES_HORIZONTAL);\n    }\n```\n**DependencyGraph的相关方法**\n```java\n    private static class DependencyGraph {\n        ...\n        /**\n         * Adds a view to the graph.\n         *\n         * @param view The view to be added as a node to the graph.\n         */\n        void add(View view) {\n            //因为是图 根据view生成一个节点\n            final int id = view.getId();\n            final Node node = Node.acquire(view);\n            //如果是有效的id 则将该节点添加到List中\n            if (id != View.NO_ID) {\n                mKeyNodes.put(id, node);\n            }\n\n            mNodes.add(node);\n        }     \n\n          /**\n           * Builds a sorted list of views. The sorting order depends on the dependencies\n           * between the view. For instance, if view C needs view A to be processed first\n           * and view A needs view B to be processed first, the dependency graph\n           * is: B -> A -> C. The sorted array will contain views B, A and C in this order.\n           *\n           * @param sorted The sorted list of views. The length of this array must\n           *        be equal to getChildCount().\n           * @param rules The list of rules to take into account.\n           */\n          void getSortedViews(View[] sorted, int... rules) {\n            //当前View找不到其它的可依赖的View时  作为root节点\n              final ArrayDeque<Node> roots = findRoots(rules);\n              int index = 0;\n\n              Node node;\n              //读取root的下一个node\n              while ((node = roots.pollLast()) != null) {\n                  final View view = node.view;\n                  final int key = view.getId();\n\n              //将符合规则的View加到 sorted中\n\n                  sorted[index++] = view;\n\n                  final ArrayMap<Node, DependencyGraph> dependents = node.dependents;\n                  //dependents 依赖该node的node  (A C依赖B 则B的dependents中存A C)\n                  final int count = dependents.size();\n                  //遍历所有依赖自己的node\n                  for (int i = 0; i < count; i++) {\n                      final Node dependent = dependents.keyAt(i);\n                      //dependencies 是被依赖的的node的规则和node(A 依赖 B D 则dependencies存有B D )\n                      final SparseArray<Node> dependencies = dependent.dependencies;\n\n                      //移除当前node和dependencies的依赖关系\n                      dependencies.remove(key);\n                      //如果解除依赖后没有其它依赖 则将该node也视为rootNode\n                      if (dependencies.size() == 0) {\n                          roots.add(dependent);\n                      }\n                  }\n              }\n\n              if (index < sorted.length) {\n                  throw new IllegalStateException(\"Circular dependencies cannot exist in RelativeLayout\");\n              }\n          }\n  ...\n}\n```\neg: A依赖B B依赖C 首先存入C 因为不依赖任何其它的\n\n```java\n\n        /**\n         * Finds the roots of the graph. A root is a node with no dependency and\n         * with [0..n] dependents.\n         *\n         * @param rulesFilter The list of rules to consider when building the\n         *        dependencies\n         *\n         * @return A list of node, each being a root of the graph\n         */\n        private ArrayDeque<Node> findRoots(int[] rulesFilter) {\n          //keyNodes为nodelist\n            final SparseArray<Node> keyNodes = mKeyNodes;\n            final ArrayList<Node> nodes = mNodes;\n            final int count = nodes.size();\n\n          //初始化依赖该node的node和该node依赖的node相关参数\n            for (int i = 0; i < count; i++) {\n                final Node node = nodes.get(i);\n                node.dependents.clear();\n                node.dependencies.clear();\n            }\n\n\n            //遍历所有node  存入当前view和他所依赖的关系\n            for (int i = 0; i < count; i++) {\n                final Node node = nodes.get(i);\n\n                final LayoutParams layoutParams = (LayoutParams) node.view.getLayoutParams();\n                //取出当前View所有的依赖关系\n                final int[] rules = layoutParams.mRules;\n                final int rulesCount = rulesFilter.length;\n\n                //遍历当前View所有的\n                for (int j = 0; j < rulesCount; j++) {\n                  //rule对应被依赖view的id\n                    final int rule = rules[rulesFilter[j]];\n                    if (rule > 0) {\n                        //找到被依赖的node\n                        final Node dependency = keyNodes.get(rule);\n                        //跳过空view和本身\n                        if (dependency == null || dependency == node) {\n                            continue;\n                        }\n                        //添加依赖被依赖的node\n                        dependency.dependents.put(node, this);\n                        node.dependencies.put(rule, dependency);\n                    }\n                }\n            }\n\n            final ArrayDeque<Node> roots = mRoots;\n            roots.clear();\n\n            // 再次遍历  如果该node的依赖关系为0 即该view不依赖任何view 则视为rootView\n            for (int i = 0; i < count; i++) {\n                final Node node = nodes.get(i);\n                if (node.dependencies.size() == 0) roots.addLast(node);\n            }\n\n            return roots;\n        }\n```\n\n#### 2 初始化相关变量\n```java\n  int myWidth = -1;\n  int myHeight = -1;\n\n  int width = 0;\n  int height = 0;\n\n  final int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n  final int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n  final int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n  final int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n\n  // 如果不是UNSPECIFIED模式 则将widthSize赋值于myWidth\n  if (widthMode != MeasureSpec.UNSPECIFIED) {\n      myWidth = widthSize;\n  }\n  // 如果不是UNSPECIFIED模式 则将heightSize赋值于myHeight\n  if (heightMode != MeasureSpec.UNSPECIFIED) {\n      myHeight = heightSize;\n  }\n  //如果是EXACTLY模式 则将myWidth和myHeight记录\n  if (widthMode == MeasureSpec.EXACTLY) {\n      width = myWidth;\n  }\n\n  if (heightMode == MeasureSpec.EXACTLY) {\n      height = myHeight;\n  }\n\n  View ignore = null;\n  //判断是否为Start 和  top 确定左上角坐标\n  int gravity = mGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;\n  final boolean horizontalGravity = gravity != Gravity.START && gravity != 0;\n  gravity = mGravity & Gravity.VERTICAL_GRAVITY_MASK;\n  final boolean verticalGravity = gravity != Gravity.TOP && gravity != 0;\n\n  int left = Integer.MAX_VALUE;\n  int top = Integer.MAX_VALUE;\n  int right = Integer.MIN_VALUE;\n  int bottom = Integer.MIN_VALUE;\n\n  boolean offsetHorizontalAxis = false;\n  boolean offsetVerticalAxis = false;\n  // 记录ignore的view\n  if ((horizontalGravity || verticalGravity) && mIgnoreGravity != View.NO_ID) {\n      ignore = findViewById(mIgnoreGravity);\n  }\n  //宽度个高度是否为warp模式\n  final boolean isWrapContentWidth = widthMode != MeasureSpec.EXACTLY;\n  final boolean isWrapContentHeight = heightMode != MeasureSpec.EXACTLY;\n\n  //在计算和分配的子View的坐标的时候 需要用到父VIew的尺寸 但是暂时无法拿到准确值(待完成下面操作)\n  //先使用默认值代替 在计算后 用偏移量更新真是坐标\n  final int layoutDirection = getLayoutDirection();\n  if (isLayoutRtl() && myWidth == -1) {\n      myWidth = DEFAULT_WIDTH;\n  }\n```\n\n#### 3  遍历水平关系的View\n```java\n    View[] views = mSortedHorizontalChildren;\n    int count = views.length;\n\n    for (int i = 0; i < count; i++) {\n        View child = views[i];\n        if (child.getVisibility() != GONE) {\n            LayoutParams params = (LayoutParams) child.getLayoutParams();\n            //根据方向获得子View中设置的规则\n            int[] rules = params.getRules(layoutDirection);\n            //将左右方向规则转换为左右的坐标\n            applyHorizontalSizeRules(params, myWidth, rules);\n            //测算水平方向的子View的尺寸\n            measureChildHorizontal(child, params, myWidth, myHeight);\n            //确定水平方向子View的位置\n            if (positionChildHorizontal(child, params, myWidth, isWrapContentWidth)) {\n                offsetHorizontalAxis = true;\n            }\n        }\n    }\n\n```\n相关方法\n```java\n    private void applyHorizontalSizeRules(LayoutParams childParams, int myWidth, int[] rules) {\n        RelativeLayout.LayoutParams anchorParams;\n        childParams.mLeft = VALUE_NOT_SET;\n        childParams.mRight = VALUE_NOT_SET;\n        //得到当前子View的layout_toLeftOf属性对应的View\n        anchorParams = getRelatedViewParams(rules, LEFT_OF);\n        if (anchorParams != null) {\n          //如果这个属性存在 则当前子View的右坐标是layout_toLeftOf对应的view的左坐标减去对应view的marginLeft的值和自身marginRight的值\n            childParams.mRight = anchorParams.mLeft - (anchorParams.leftMargin +\n                    childParams.rightMargin);\n        //如果alignWithParent为true alignWithParent取alignWithParentIfMissing\n        //如果layout_toLeftOf的view为空 或者gone 则将RelativeLayout当做被依赖的对象\n        } else if (childParams.alignWithParent && rules[LEFT_OF] != 0) {\n            //如果父容器RelativeLayout的宽度大于0\n            //则子View的右坐标为 父RelativeLayout的宽度减去 mPaddingRight 和自身的marginRight\n            if (myWidth >= 0) {\n                childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;\n            }\n        }\n\n        //类似的方法 得到左坐标(通过参数RIGHT_OF)\n        anchorParams = getRelatedViewParams(rules, RIGHT_OF);\n        if (anchorParams != null) {\n            childParams.mLeft = anchorParams.mRight + (anchorParams.rightMargin +\n                    childParams.leftMargin);\n        } else if (childParams.alignWithParent && rules[RIGHT_OF] != 0) {\n            childParams.mLeft = mPaddingLeft + childParams.leftMargin;\n        }\n        //类似的方法 得到左坐标 (通过参数ALIGN_LEFT)\n        anchorParams = getRelatedViewParams(rules, ALIGN_LEFT);\n        if (anchorParams != null) {\n            childParams.mLeft = anchorParams.mLeft + childParams.leftMargin;\n        } else if (childParams.alignWithParent && rules[ALIGN_LEFT] != 0) {\n            childParams.mLeft = mPaddingLeft + childParams.leftMargin;\n        }\n        //类似的方法 得到右坐标 (通过参数ALIGN_RIGHT)\n        anchorParams = getRelatedViewParams(rules, ALIGN_RIGHT);\n        if (anchorParams != null) {\n            childParams.mRight = anchorParams.mRight - childParams.rightMargin;\n        } else if (childParams.alignWithParent && rules[ALIGN_RIGHT] != 0) {\n            if (myWidth >= 0) {\n                childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;\n            }\n        }\n        //根据ALIGN_PARENT_LEFT 将自己放到父RelativeLayout的左边\n        if (0 != rules[ALIGN_PARENT_LEFT]) {\n            childParams.mLeft = mPaddingLeft + childParams.leftMargin;\n        }\n        //根据ALIGN_PARENT_RIGHT 将自己放到父RelativeLayout的右边\n        if (0 != rules[ALIGN_PARENT_RIGHT]) {\n            if (myWidth >= 0) {\n                childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;\n            }\n        }\n    }\n```\n```java\nprivate void measureChildHorizontal(View child, LayoutParams params, int myWidth, int myHeight) {\n  //获得child的宽度MeasureSpec\n    final int childWidthMeasureSpec = getChildMeasureSpec(params.mLeft, params.mRight,\n            params.width, params.leftMargin, params.rightMargin, mPaddingLeft, mPaddingRight,\n            myWidth);\n\n    final int childHeightMeasureSpec;\n    //在低于4.2的时候 mAllowBrokenMeasureSpecs为true\n    //当myHeight < 0 时 则根据父RelativeLayout设置其MeasureSpec模式\n    if (myHeight < 0 && !mAllowBrokenMeasureSpecs) {\n        //如果父RelativeLayout的height大于0  则 设置子view的MeasureSpec模式为EXACTLY\n        if (params.height >= 0) {\n            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(\n                    params.height, MeasureSpec.EXACTLY);\n        } else {\n            //反之 如果其小于0  则设置子View的MeasureSpec为UNSPECIFIED\n            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED);\n        }\n    } else {\n      //当当前myHeight >= 0\n      //判断当前高度是否与父RelativeLayout高度相同 设置heightMode\n      //根据maxHeight 和heightMode设置子View的MeasureSpec模式\n        final int maxHeight;\n        if (mMeasureVerticalWithPaddingMargin) {\n            maxHeight = Math.max(0, myHeight - mPaddingTop - mPaddingBottom\n                    - params.topMargin - params.bottomMargin);\n        } else {\n            maxHeight = Math.max(0, myHeight);\n        }\n        final int heightMode;\n        if (params.height == LayoutParams.MATCH_PARENT) {\n            heightMode = MeasureSpec.EXACTLY;\n        } else {\n            heightMode = MeasureSpec.AT_MOST;\n        }\n        childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(maxHeight, heightMode);\n    }\n    //获得了子View的WidthMeasureSpec和HeightMeasureSpec\n    //子View可以通过measure方法获取自身的size\n    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n}\n```\n```java\n/**\n    * Get a measure spec that accounts for all of the constraints on this view.\n    * This includes size constraints imposed by the RelativeLayout as well as\n    * the View's desired dimension.\n    *\n    * @param childStart The left or top field of the child's layout params\n    * @param childEnd The right or bottom field of the child's layout params\n    * @param childSize The child's desired size (the width or height field of\n    *        the child's layout params)\n    * @param startMargin The left or top margin\n    * @param endMargin The right or bottom margin\n    * @param startPadding mPaddingLeft or mPaddingTop\n    * @param endPadding mPaddingRight or mPaddingBottom\n    * @param mySize The width or height of this view (the RelativeLayout)\n    * @return MeasureSpec for the child\n    */\n   private int getChildMeasureSpec(int childStart, int childEnd,\n           int childSize, int startMargin, int endMargin, int startPadding,\n           int endPadding, int mySize) {\n       int childSpecMode = 0;\n       int childSpecSize = 0;\n\n       final boolean isUnspecified = mySize < 0;\n       //如果父RelativeLayout宽度小于0 版本号不小于4.2\n       if (isUnspecified && !mAllowBrokenMeasureSpecs) {\n            //如果子View的左边距和右边距都不为VALUE_NOT_SET\n            //且右边距坐标大于左边距坐标 则将其差当做宽度赋予View 设置模式为EXACTLY\n            //VALUE_NOT_SET = Integer.MIN_VALUE\n            /**\n             * Constant for the minimum {@code int} value, -2<sup>31</sup>.\n             */\n            //public static final int MIN_VALUE = 0x80000000;\n           if (childStart != VALUE_NOT_SET && childEnd != VALUE_NOT_SET) {\n               childSpecSize = Math.max(0, childEnd - childStart);\n               childSpecMode = MeasureSpec.EXACTLY;\n           } else if (childSize >= 0) {\n               // 如果childSpecSize >= 0 则赋值于childSpecSize\n               //同样设置模式为EXACTLY\n               childSpecSize = childSize;\n               childSpecMode = MeasureSpec.EXACTLY;\n           } else {\n               // 都不满足则设置模式为UNSPECIFIED\n               childSpecSize = 0;\n               childSpecMode = MeasureSpec.UNSPECIFIED;\n           }\n\n           return MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);\n       }\n\n       // 计算 开始和结束相关\n       int tempStart = childStart;\n       int tempEnd = childEnd;\n\n       //如果没有指定start值 则默认赋予 padding和merage的值\n       if (tempStart == VALUE_NOT_SET) {\n           tempStart = startPadding + startMargin;\n       }\n       //同上\n       if (tempEnd == VALUE_NOT_SET) {\n           tempEnd = mySize - endPadding - endMargin;\n       }\n\n       //指定最大可提供的大小\n       final int maxAvailable = tempEnd - tempStart;\n\n       if (childStart != VALUE_NOT_SET && childEnd != VALUE_NOT_SET) {\n           //如果Start和End都是有效值 根据isUnspecified设置specMode为UNSPECIFIED或EXACTLY\n           //并将设置对应的size\n           childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;\n           childSpecSize = Math.max(0, maxAvailable);\n       } else {\n          //反之 判断childSize的相关值\n           if (childSize >= 0) {\n               //设置模式为EXACTLY\n               //判断maxAvailable和childSize情况 取较大值设置为childSpecSize\n               childSpecMode = MeasureSpec.EXACTLY;\n\n               if (maxAvailable >= 0) {\n                   // We have a maximum size in this dimension.\n                   childSpecSize = Math.min(maxAvailable, childSize);\n               } else {\n                   // We can grow in this dimension.\n                   childSpecSize = childSize;\n               }\n           } else if (childSize == LayoutParams.MATCH_PARENT) {\n               //如果子View是match模式 参照isUnspecified设置相关\n               childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;\n               childSpecSize = Math.max(0, maxAvailable);\n           } else if (childSize == LayoutParams.WRAP_CONTENT) {\n               //在wrap进行设置\n               if (maxAvailable >= 0) {\n                   // We have a maximum size in this dimension.\n                   childSpecMode = MeasureSpec.AT_MOST;\n                   childSpecSize = maxAvailable;\n               } else {\n                   // We can grow in this dimension. Child can be as big as it\n                   // wants.\n                   childSpecMode = MeasureSpec.UNSPECIFIED;\n                   childSpecSize = 0;\n               }\n           }\n       }\n\n       return MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);\n   }\n```\n以上 完成了View的第一次测量  确定了View的大小 然后根据大小觉得把子view放在父RelativeLayout中的位置\n\n```java\nprivate boolean positionChildHorizontal(View child, LayoutParams params, int myWidth,\n        boolean wrapContent) {\n    //获取RelativeLayout的布局方向\n    final int layoutDirection = getLayoutDirection();\n    int[] rules = params.getRules(layoutDirection);\n\n    if (params.mLeft == VALUE_NOT_SET && params.mRight != VALUE_NOT_SET) {\n        // 如果右边界有效 左边界无效 根据右边界计算出左边界\n        params.mLeft = params.mRight - child.getMeasuredWidth();\n    } else if (params.mLeft != VALUE_NOT_SET && params.mRight == VALUE_NOT_SET) {\n        // 同上反之\n        params.mRight = params.mLeft + child.getMeasuredWidth();\n    } else if (params.mLeft == VALUE_NOT_SET && params.mRight == VALUE_NOT_SET) {\n        //都无效的时候\n\n        if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_HORIZONTAL] != 0) {\n          //设置了CENTER_IN_PARENT或者 CENTER_HORIZONTAL的情况下\n            if (!wrapContent) {\n              //非wrap情况下\n              //把子View水平中心固定在RelativeLayout的中心\n                centerHorizontal(child, params, myWidth);\n            } else {\n               //左边距为padding+margin\n               //右边距为左边距加上测量宽度\n                params.mLeft = mPaddingLeft + params.leftMargin;\n                params.mRight = params.mLeft + child.getMeasuredWidth();\n            }\n            return true;\n        } else {\n            //RTL右到左 布局方向\n            //LTR\u0010左到右 布局方向\n            if (isLayoutRtl()) {\n                params.mRight = myWidth - mPaddingRight- params.rightMargin;\n                params.mLeft = params.mRight - child.getMeasuredWidth();\n            } else {\n                params.mLeft = mPaddingLeft + params.leftMargin;\n                params.mRight = params.mLeft + child.getMeasuredWidth();\n            }\n        }\n    }\n    return rules[ALIGN_PARENT_END] != 0;\n    //当为CENTER_IN_PARENT  CENTER_HORIZONTAL ALIGN_PARENT_END三种情况之一时返回True\n}\n```\n\n#### 4 遍历竖直关系的View\n```java\n...\n  for (int i = 0; i < count; i++) {\n           final View child = views[i];\n           if (child.getVisibility() != GONE) {\n               final LayoutParams params = (LayoutParams) child.getLayoutParams();\n              //将竖直方向规则转换为坐标\n               applyVerticalSizeRules(params, myHeight, child.getBaseline());\n               //测量子View\n               measureChild(child, params, myWidth, myHeight);\n               //确定竖直方向子View的位置\n               if (positionChildVertical(child, params, myHeight, isWrapContentHeight)) {\n                   offsetVerticalAxis = true;\n               }\n              //首先判断是否为wrap模式\n               if (isWrapContentWidth) {\n                 //根据RTL或者LTR和版本进行区分\n                 //Build.VERSION_CODES.KITKAT = 19\n                 //主要对margin进行处理\n                   if (isLayoutRtl()) {\n                       if (targetSdkVersion < Build.VERSION_CODES.KITKAT) {\n                           width = Math.max(width, myWidth - params.mLeft);\n                       } else {\n                           width = Math.max(width, myWidth - params.mLeft - params.leftMargin);\n                       }\n                   } else {\n                       if (targetSdkVersion < Build.VERSION_CODES.KITKAT) {\n                           width = Math.max(width, params.mRight);\n                       } else {\n                           width = Math.max(width, params.mRight + params.rightMargin);\n                       }\n                   }\n               }\n               if (isWrapContentHeight) {\n                   if (targetSdkVersion < Build.VERSION_CODES.KITKAT) {\n                       height = Math.max(height, params.mBottom);\n                   } else {\n                       height = Math.max(height, params.mBottom + params.bottomMargin);\n                   }\n               }\n\n               if (child != ignore || verticalGravity) {\n                   left = Math.min(left, params.mLeft - params.leftMargin);\n                   top = Math.min(top, params.mTop - params.topMargin);\n               }\n\n               if (child != ignore || horizontalGravity) {\n                   right = Math.max(right, params.mRight + params.rightMargin);\n                   bottom = Math.max(bottom, params.mBottom + params.bottomMargin);\n               }\n           }\n       }\n...\n```\n\n#### 5 baseline计算\n```java\n// Use the top-start-most laid out view as the baseline. RTL offsets are\n// applied later, so we can use the left-most edge as the starting edge.\n    View baselineView = null;\n    LayoutParams baselineParams = null;\n    for (int i = 0; i < count; i++) {\n        final View child = views[i];\n        if (child.getVisibility() != GONE) {\n            final LayoutParams childParams = (LayoutParams) child.getLayoutParams();\n            if (baselineView == null || baselineParams == null\n                    || compareLayoutPosition(childParams, baselineParams) < 0) {\n                baselineView = child;\n                baselineParams = childParams;\n            }\n        }\n    }\n    mBaselineView = baselineView;\n```\n\n#### 6 宽度和高度修正\n```java\n    //如何是wrap模式\n    if (isWrapContentWidth) {\n            width += mPaddingRight;\n\n            if (mLayoutParams != null && mLayoutParams.width >= 0) {\n                width = Math.max(width, mLayoutParams.width);\n            }\n\n            width = Math.max(width, getSuggestedMinimumWidth());\n            width = resolveSize(width, widthMeasureSpec);\n\n            //在得到最后的width之后 对依赖RelativeLayout的子View添上偏移量\n            if (offsetHorizontalAxis) {\n                for (int i = 0; i < count; i++) {\n                    final View child = views[i];\n                    if (child.getVisibility() != GONE) {\n                        final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                        final int[] rules = params.getRules(layoutDirection);\n                        //对CENTER_IN_PARENT或者CENTER_HORIZONTAL的子View重测\n                        if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_HORIZONTAL] != 0) {\n                            centerHorizontal(child, params, width);\n                        //对ALIGN_PARENT_RIGHT重测\n                        } else if (rules[ALIGN_PARENT_RIGHT] != 0) {\n                            final int childWidth = child.getMeasuredWidth();\n                            params.mLeft = width - mPaddingRight - childWidth;\n                            params.mRight = params.mLeft + childWidth;\n                        }\n                    }\n                }\n            }\n        }\n        //同上\n        if (isWrapContentHeight) {\n            height += mPaddingBottom;\n\n            if (mLayoutParams != null && mLayoutParams.height >= 0) {\n                height = Math.max(height, mLayoutParams.height);\n            }\n\n            height = Math.max(height, getSuggestedMinimumHeight());\n            height = resolveSize(height, heightMeasureSpec);\n\n            if (offsetVerticalAxis) {\n                for (int i = 0; i < count; i++) {\n                    final View child = views[i];\n                    if (child.getVisibility() != GONE) {\n                        final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                        final int[] rules = params.getRules(layoutDirection);\n                        if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_VERTICAL] != 0) {\n                            centerVertical(child, params, height);\n                        } else if (rules[ALIGN_PARENT_BOTTOM] != 0) {\n                            final int childHeight = child.getMeasuredHeight();\n                            params.mTop = height - mPaddingBottom - childHeight;\n                            params.mBottom = params.mTop + childHeight;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        //根据gravity再次修正\n        if (horizontalGravity || verticalGravity) {\n            final Rect selfBounds = mSelfBounds;\n            selfBounds.set(mPaddingLeft, mPaddingTop, width - mPaddingRight,\n                    height - mPaddingBottom);\n\n            final Rect contentBounds = mContentBounds;\n            Gravity.apply(mGravity, right - left, bottom - top, selfBounds, contentBounds,\n                    layoutDirection);\n\n            final int horizontalOffset = contentBounds.left - left;\n            final int verticalOffset = contentBounds.top - top;\n            if (horizontalOffset != 0 || verticalOffset != 0) {\n                for (int i = 0; i < count; i++) {\n                    final View child = views[i];\n                    if (child.getVisibility() != GONE && child != ignore) {\n                        final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                        if (horizontalGravity) {\n                            params.mLeft += horizontalOffset;\n                            params.mRight += horizontalOffset;\n                        }\n                        if (verticalGravity) {\n                            params.mTop += verticalOffset;\n                            params.mBottom += verticalOffset;\n                        }\n                    }\n                }\n            }\n        }\n\n        //如果是RTL(右到左显示)则再次修改\n        if (isLayoutRtl()) {\n            final int offsetWidth = myWidth - width;\n            for (int i = 0; i < count; i++) {\n                final View child = views[i];\n                if (child.getVisibility() != GONE) {\n                    final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                    params.mLeft -= offsetWidth;\n                    params.mRight -= offsetWidth;\n                }\n            }\n        }\n```\n#### 简单总结\nRelativeLayout更加关注子View的left right top bottom值 并且优先级高于width和height\n\n\n\n### RelativeLayout的layout过程\n对于RelativeLayout来的 layout过程更多的根据子View的left right top bottom值来设定位置\n```java\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        //  The layout has actually already been performed and the positions\n        //  cached.  Apply the cached values to the children.\n        final int count = getChildCount();\n\n        for (int i = 0; i < count; i++) {\n            View child = getChildAt(i);\n            if (child.getVisibility() != GONE) {\n                RelativeLayout.LayoutParams st =\n                        (RelativeLayout.LayoutParams) child.getLayoutParams();\n                child.layout(st.mLeft, st.mTop, st.mRight, st.mBottom);\n            }\n        }\n    }\n```\n\n### RelativeLayout的draw过程\nRelativeLayout作为ViewGroup的子类 因为其性质原因  没有对draw过程进行修改\n\n\n以上\n","source":"_posts/RelativeLayout 源码分析.md","raw":"---\ntitle: Android View 相关源码分析之五 RelativeLayout 源码分析\ndate: 2017-02-03 17:59:16\ntags: [\"android\" , \"view\" , \"源码\"]\ncategories: \"android\"\n---\n## RelativeLayout  源码分析\n> 继承自ViewGroup 没有重载onDraw方法 内部子View又是相对 只要计算出View的坐标 layout过程同样简单\n\n### measure过程\n#### 主要过程\n1. 将内部View根据纵向关系和横向关系排序\n2. 初始化相关变量\n3. 遍历水平关系的View\n4. 遍历竖直关系的View\n5. baseline计算\n6. 宽度和高度修正\n\n  <!-- more -->\n\n\n\n#### 1 将内部View根据纵向关系和横向关系排序\n>layout_toRightOf 为横向关系  layout_below为纵向关系\n\n```java\n    //首先会根据mDirtyHierarchy的值判断是否需要将子View重新排序\n    if (mDirtyHierarchy) {\n        mDirtyHierarchy = false;\n        sortChildren();\n    }\n```\n相关调用方法\n```java\n    //mDirtyHierarchy的值只有在requestLayout方法下被更新\n    public void requestLayout() {\n        super.requestLayout();\n        mDirtyHierarchy = true;\n    }\n\n    //sortChildren()方法对横向纵向关系的view的数组进行非空判断 用DependencyGraph进行判断\n    private void sortChildren() {\n        final int count = getChildCount();\n        if (mSortedVerticalChildren == null || mSortedVerticalChildren.length != count) {\n            mSortedVerticalChildren = new View[count];\n        }\n\n        if (mSortedHorizontalChildren == null || mSortedHorizontalChildren.length != count) {\n            mSortedHorizontalChildren = new View[count];\n        }\n\n        final DependencyGraph graph = mGraph;\n        graph.clear();\n\n        for (int i = 0; i < count; i++) {\n            graph.add(getChildAt(i));\n        }\n\n        graph.getSortedViews(mSortedVerticalChildren, RULES_VERTICAL);\n        graph.getSortedViews(mSortedHorizontalChildren, RULES_HORIZONTAL);\n    }\n```\n**DependencyGraph的相关方法**\n```java\n    private static class DependencyGraph {\n        ...\n        /**\n         * Adds a view to the graph.\n         *\n         * @param view The view to be added as a node to the graph.\n         */\n        void add(View view) {\n            //因为是图 根据view生成一个节点\n            final int id = view.getId();\n            final Node node = Node.acquire(view);\n            //如果是有效的id 则将该节点添加到List中\n            if (id != View.NO_ID) {\n                mKeyNodes.put(id, node);\n            }\n\n            mNodes.add(node);\n        }     \n\n          /**\n           * Builds a sorted list of views. The sorting order depends on the dependencies\n           * between the view. For instance, if view C needs view A to be processed first\n           * and view A needs view B to be processed first, the dependency graph\n           * is: B -> A -> C. The sorted array will contain views B, A and C in this order.\n           *\n           * @param sorted The sorted list of views. The length of this array must\n           *        be equal to getChildCount().\n           * @param rules The list of rules to take into account.\n           */\n          void getSortedViews(View[] sorted, int... rules) {\n            //当前View找不到其它的可依赖的View时  作为root节点\n              final ArrayDeque<Node> roots = findRoots(rules);\n              int index = 0;\n\n              Node node;\n              //读取root的下一个node\n              while ((node = roots.pollLast()) != null) {\n                  final View view = node.view;\n                  final int key = view.getId();\n\n              //将符合规则的View加到 sorted中\n\n                  sorted[index++] = view;\n\n                  final ArrayMap<Node, DependencyGraph> dependents = node.dependents;\n                  //dependents 依赖该node的node  (A C依赖B 则B的dependents中存A C)\n                  final int count = dependents.size();\n                  //遍历所有依赖自己的node\n                  for (int i = 0; i < count; i++) {\n                      final Node dependent = dependents.keyAt(i);\n                      //dependencies 是被依赖的的node的规则和node(A 依赖 B D 则dependencies存有B D )\n                      final SparseArray<Node> dependencies = dependent.dependencies;\n\n                      //移除当前node和dependencies的依赖关系\n                      dependencies.remove(key);\n                      //如果解除依赖后没有其它依赖 则将该node也视为rootNode\n                      if (dependencies.size() == 0) {\n                          roots.add(dependent);\n                      }\n                  }\n              }\n\n              if (index < sorted.length) {\n                  throw new IllegalStateException(\"Circular dependencies cannot exist in RelativeLayout\");\n              }\n          }\n  ...\n}\n```\neg: A依赖B B依赖C 首先存入C 因为不依赖任何其它的\n\n```java\n\n        /**\n         * Finds the roots of the graph. A root is a node with no dependency and\n         * with [0..n] dependents.\n         *\n         * @param rulesFilter The list of rules to consider when building the\n         *        dependencies\n         *\n         * @return A list of node, each being a root of the graph\n         */\n        private ArrayDeque<Node> findRoots(int[] rulesFilter) {\n          //keyNodes为nodelist\n            final SparseArray<Node> keyNodes = mKeyNodes;\n            final ArrayList<Node> nodes = mNodes;\n            final int count = nodes.size();\n\n          //初始化依赖该node的node和该node依赖的node相关参数\n            for (int i = 0; i < count; i++) {\n                final Node node = nodes.get(i);\n                node.dependents.clear();\n                node.dependencies.clear();\n            }\n\n\n            //遍历所有node  存入当前view和他所依赖的关系\n            for (int i = 0; i < count; i++) {\n                final Node node = nodes.get(i);\n\n                final LayoutParams layoutParams = (LayoutParams) node.view.getLayoutParams();\n                //取出当前View所有的依赖关系\n                final int[] rules = layoutParams.mRules;\n                final int rulesCount = rulesFilter.length;\n\n                //遍历当前View所有的\n                for (int j = 0; j < rulesCount; j++) {\n                  //rule对应被依赖view的id\n                    final int rule = rules[rulesFilter[j]];\n                    if (rule > 0) {\n                        //找到被依赖的node\n                        final Node dependency = keyNodes.get(rule);\n                        //跳过空view和本身\n                        if (dependency == null || dependency == node) {\n                            continue;\n                        }\n                        //添加依赖被依赖的node\n                        dependency.dependents.put(node, this);\n                        node.dependencies.put(rule, dependency);\n                    }\n                }\n            }\n\n            final ArrayDeque<Node> roots = mRoots;\n            roots.clear();\n\n            // 再次遍历  如果该node的依赖关系为0 即该view不依赖任何view 则视为rootView\n            for (int i = 0; i < count; i++) {\n                final Node node = nodes.get(i);\n                if (node.dependencies.size() == 0) roots.addLast(node);\n            }\n\n            return roots;\n        }\n```\n\n#### 2 初始化相关变量\n```java\n  int myWidth = -1;\n  int myHeight = -1;\n\n  int width = 0;\n  int height = 0;\n\n  final int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n  final int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n  final int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n  final int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n\n  // 如果不是UNSPECIFIED模式 则将widthSize赋值于myWidth\n  if (widthMode != MeasureSpec.UNSPECIFIED) {\n      myWidth = widthSize;\n  }\n  // 如果不是UNSPECIFIED模式 则将heightSize赋值于myHeight\n  if (heightMode != MeasureSpec.UNSPECIFIED) {\n      myHeight = heightSize;\n  }\n  //如果是EXACTLY模式 则将myWidth和myHeight记录\n  if (widthMode == MeasureSpec.EXACTLY) {\n      width = myWidth;\n  }\n\n  if (heightMode == MeasureSpec.EXACTLY) {\n      height = myHeight;\n  }\n\n  View ignore = null;\n  //判断是否为Start 和  top 确定左上角坐标\n  int gravity = mGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;\n  final boolean horizontalGravity = gravity != Gravity.START && gravity != 0;\n  gravity = mGravity & Gravity.VERTICAL_GRAVITY_MASK;\n  final boolean verticalGravity = gravity != Gravity.TOP && gravity != 0;\n\n  int left = Integer.MAX_VALUE;\n  int top = Integer.MAX_VALUE;\n  int right = Integer.MIN_VALUE;\n  int bottom = Integer.MIN_VALUE;\n\n  boolean offsetHorizontalAxis = false;\n  boolean offsetVerticalAxis = false;\n  // 记录ignore的view\n  if ((horizontalGravity || verticalGravity) && mIgnoreGravity != View.NO_ID) {\n      ignore = findViewById(mIgnoreGravity);\n  }\n  //宽度个高度是否为warp模式\n  final boolean isWrapContentWidth = widthMode != MeasureSpec.EXACTLY;\n  final boolean isWrapContentHeight = heightMode != MeasureSpec.EXACTLY;\n\n  //在计算和分配的子View的坐标的时候 需要用到父VIew的尺寸 但是暂时无法拿到准确值(待完成下面操作)\n  //先使用默认值代替 在计算后 用偏移量更新真是坐标\n  final int layoutDirection = getLayoutDirection();\n  if (isLayoutRtl() && myWidth == -1) {\n      myWidth = DEFAULT_WIDTH;\n  }\n```\n\n#### 3  遍历水平关系的View\n```java\n    View[] views = mSortedHorizontalChildren;\n    int count = views.length;\n\n    for (int i = 0; i < count; i++) {\n        View child = views[i];\n        if (child.getVisibility() != GONE) {\n            LayoutParams params = (LayoutParams) child.getLayoutParams();\n            //根据方向获得子View中设置的规则\n            int[] rules = params.getRules(layoutDirection);\n            //将左右方向规则转换为左右的坐标\n            applyHorizontalSizeRules(params, myWidth, rules);\n            //测算水平方向的子View的尺寸\n            measureChildHorizontal(child, params, myWidth, myHeight);\n            //确定水平方向子View的位置\n            if (positionChildHorizontal(child, params, myWidth, isWrapContentWidth)) {\n                offsetHorizontalAxis = true;\n            }\n        }\n    }\n\n```\n相关方法\n```java\n    private void applyHorizontalSizeRules(LayoutParams childParams, int myWidth, int[] rules) {\n        RelativeLayout.LayoutParams anchorParams;\n        childParams.mLeft = VALUE_NOT_SET;\n        childParams.mRight = VALUE_NOT_SET;\n        //得到当前子View的layout_toLeftOf属性对应的View\n        anchorParams = getRelatedViewParams(rules, LEFT_OF);\n        if (anchorParams != null) {\n          //如果这个属性存在 则当前子View的右坐标是layout_toLeftOf对应的view的左坐标减去对应view的marginLeft的值和自身marginRight的值\n            childParams.mRight = anchorParams.mLeft - (anchorParams.leftMargin +\n                    childParams.rightMargin);\n        //如果alignWithParent为true alignWithParent取alignWithParentIfMissing\n        //如果layout_toLeftOf的view为空 或者gone 则将RelativeLayout当做被依赖的对象\n        } else if (childParams.alignWithParent && rules[LEFT_OF] != 0) {\n            //如果父容器RelativeLayout的宽度大于0\n            //则子View的右坐标为 父RelativeLayout的宽度减去 mPaddingRight 和自身的marginRight\n            if (myWidth >= 0) {\n                childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;\n            }\n        }\n\n        //类似的方法 得到左坐标(通过参数RIGHT_OF)\n        anchorParams = getRelatedViewParams(rules, RIGHT_OF);\n        if (anchorParams != null) {\n            childParams.mLeft = anchorParams.mRight + (anchorParams.rightMargin +\n                    childParams.leftMargin);\n        } else if (childParams.alignWithParent && rules[RIGHT_OF] != 0) {\n            childParams.mLeft = mPaddingLeft + childParams.leftMargin;\n        }\n        //类似的方法 得到左坐标 (通过参数ALIGN_LEFT)\n        anchorParams = getRelatedViewParams(rules, ALIGN_LEFT);\n        if (anchorParams != null) {\n            childParams.mLeft = anchorParams.mLeft + childParams.leftMargin;\n        } else if (childParams.alignWithParent && rules[ALIGN_LEFT] != 0) {\n            childParams.mLeft = mPaddingLeft + childParams.leftMargin;\n        }\n        //类似的方法 得到右坐标 (通过参数ALIGN_RIGHT)\n        anchorParams = getRelatedViewParams(rules, ALIGN_RIGHT);\n        if (anchorParams != null) {\n            childParams.mRight = anchorParams.mRight - childParams.rightMargin;\n        } else if (childParams.alignWithParent && rules[ALIGN_RIGHT] != 0) {\n            if (myWidth >= 0) {\n                childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;\n            }\n        }\n        //根据ALIGN_PARENT_LEFT 将自己放到父RelativeLayout的左边\n        if (0 != rules[ALIGN_PARENT_LEFT]) {\n            childParams.mLeft = mPaddingLeft + childParams.leftMargin;\n        }\n        //根据ALIGN_PARENT_RIGHT 将自己放到父RelativeLayout的右边\n        if (0 != rules[ALIGN_PARENT_RIGHT]) {\n            if (myWidth >= 0) {\n                childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;\n            }\n        }\n    }\n```\n```java\nprivate void measureChildHorizontal(View child, LayoutParams params, int myWidth, int myHeight) {\n  //获得child的宽度MeasureSpec\n    final int childWidthMeasureSpec = getChildMeasureSpec(params.mLeft, params.mRight,\n            params.width, params.leftMargin, params.rightMargin, mPaddingLeft, mPaddingRight,\n            myWidth);\n\n    final int childHeightMeasureSpec;\n    //在低于4.2的时候 mAllowBrokenMeasureSpecs为true\n    //当myHeight < 0 时 则根据父RelativeLayout设置其MeasureSpec模式\n    if (myHeight < 0 && !mAllowBrokenMeasureSpecs) {\n        //如果父RelativeLayout的height大于0  则 设置子view的MeasureSpec模式为EXACTLY\n        if (params.height >= 0) {\n            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(\n                    params.height, MeasureSpec.EXACTLY);\n        } else {\n            //反之 如果其小于0  则设置子View的MeasureSpec为UNSPECIFIED\n            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED);\n        }\n    } else {\n      //当当前myHeight >= 0\n      //判断当前高度是否与父RelativeLayout高度相同 设置heightMode\n      //根据maxHeight 和heightMode设置子View的MeasureSpec模式\n        final int maxHeight;\n        if (mMeasureVerticalWithPaddingMargin) {\n            maxHeight = Math.max(0, myHeight - mPaddingTop - mPaddingBottom\n                    - params.topMargin - params.bottomMargin);\n        } else {\n            maxHeight = Math.max(0, myHeight);\n        }\n        final int heightMode;\n        if (params.height == LayoutParams.MATCH_PARENT) {\n            heightMode = MeasureSpec.EXACTLY;\n        } else {\n            heightMode = MeasureSpec.AT_MOST;\n        }\n        childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(maxHeight, heightMode);\n    }\n    //获得了子View的WidthMeasureSpec和HeightMeasureSpec\n    //子View可以通过measure方法获取自身的size\n    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n}\n```\n```java\n/**\n    * Get a measure spec that accounts for all of the constraints on this view.\n    * This includes size constraints imposed by the RelativeLayout as well as\n    * the View's desired dimension.\n    *\n    * @param childStart The left or top field of the child's layout params\n    * @param childEnd The right or bottom field of the child's layout params\n    * @param childSize The child's desired size (the width or height field of\n    *        the child's layout params)\n    * @param startMargin The left or top margin\n    * @param endMargin The right or bottom margin\n    * @param startPadding mPaddingLeft or mPaddingTop\n    * @param endPadding mPaddingRight or mPaddingBottom\n    * @param mySize The width or height of this view (the RelativeLayout)\n    * @return MeasureSpec for the child\n    */\n   private int getChildMeasureSpec(int childStart, int childEnd,\n           int childSize, int startMargin, int endMargin, int startPadding,\n           int endPadding, int mySize) {\n       int childSpecMode = 0;\n       int childSpecSize = 0;\n\n       final boolean isUnspecified = mySize < 0;\n       //如果父RelativeLayout宽度小于0 版本号不小于4.2\n       if (isUnspecified && !mAllowBrokenMeasureSpecs) {\n            //如果子View的左边距和右边距都不为VALUE_NOT_SET\n            //且右边距坐标大于左边距坐标 则将其差当做宽度赋予View 设置模式为EXACTLY\n            //VALUE_NOT_SET = Integer.MIN_VALUE\n            /**\n             * Constant for the minimum {@code int} value, -2<sup>31</sup>.\n             */\n            //public static final int MIN_VALUE = 0x80000000;\n           if (childStart != VALUE_NOT_SET && childEnd != VALUE_NOT_SET) {\n               childSpecSize = Math.max(0, childEnd - childStart);\n               childSpecMode = MeasureSpec.EXACTLY;\n           } else if (childSize >= 0) {\n               // 如果childSpecSize >= 0 则赋值于childSpecSize\n               //同样设置模式为EXACTLY\n               childSpecSize = childSize;\n               childSpecMode = MeasureSpec.EXACTLY;\n           } else {\n               // 都不满足则设置模式为UNSPECIFIED\n               childSpecSize = 0;\n               childSpecMode = MeasureSpec.UNSPECIFIED;\n           }\n\n           return MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);\n       }\n\n       // 计算 开始和结束相关\n       int tempStart = childStart;\n       int tempEnd = childEnd;\n\n       //如果没有指定start值 则默认赋予 padding和merage的值\n       if (tempStart == VALUE_NOT_SET) {\n           tempStart = startPadding + startMargin;\n       }\n       //同上\n       if (tempEnd == VALUE_NOT_SET) {\n           tempEnd = mySize - endPadding - endMargin;\n       }\n\n       //指定最大可提供的大小\n       final int maxAvailable = tempEnd - tempStart;\n\n       if (childStart != VALUE_NOT_SET && childEnd != VALUE_NOT_SET) {\n           //如果Start和End都是有效值 根据isUnspecified设置specMode为UNSPECIFIED或EXACTLY\n           //并将设置对应的size\n           childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;\n           childSpecSize = Math.max(0, maxAvailable);\n       } else {\n          //反之 判断childSize的相关值\n           if (childSize >= 0) {\n               //设置模式为EXACTLY\n               //判断maxAvailable和childSize情况 取较大值设置为childSpecSize\n               childSpecMode = MeasureSpec.EXACTLY;\n\n               if (maxAvailable >= 0) {\n                   // We have a maximum size in this dimension.\n                   childSpecSize = Math.min(maxAvailable, childSize);\n               } else {\n                   // We can grow in this dimension.\n                   childSpecSize = childSize;\n               }\n           } else if (childSize == LayoutParams.MATCH_PARENT) {\n               //如果子View是match模式 参照isUnspecified设置相关\n               childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;\n               childSpecSize = Math.max(0, maxAvailable);\n           } else if (childSize == LayoutParams.WRAP_CONTENT) {\n               //在wrap进行设置\n               if (maxAvailable >= 0) {\n                   // We have a maximum size in this dimension.\n                   childSpecMode = MeasureSpec.AT_MOST;\n                   childSpecSize = maxAvailable;\n               } else {\n                   // We can grow in this dimension. Child can be as big as it\n                   // wants.\n                   childSpecMode = MeasureSpec.UNSPECIFIED;\n                   childSpecSize = 0;\n               }\n           }\n       }\n\n       return MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);\n   }\n```\n以上 完成了View的第一次测量  确定了View的大小 然后根据大小觉得把子view放在父RelativeLayout中的位置\n\n```java\nprivate boolean positionChildHorizontal(View child, LayoutParams params, int myWidth,\n        boolean wrapContent) {\n    //获取RelativeLayout的布局方向\n    final int layoutDirection = getLayoutDirection();\n    int[] rules = params.getRules(layoutDirection);\n\n    if (params.mLeft == VALUE_NOT_SET && params.mRight != VALUE_NOT_SET) {\n        // 如果右边界有效 左边界无效 根据右边界计算出左边界\n        params.mLeft = params.mRight - child.getMeasuredWidth();\n    } else if (params.mLeft != VALUE_NOT_SET && params.mRight == VALUE_NOT_SET) {\n        // 同上反之\n        params.mRight = params.mLeft + child.getMeasuredWidth();\n    } else if (params.mLeft == VALUE_NOT_SET && params.mRight == VALUE_NOT_SET) {\n        //都无效的时候\n\n        if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_HORIZONTAL] != 0) {\n          //设置了CENTER_IN_PARENT或者 CENTER_HORIZONTAL的情况下\n            if (!wrapContent) {\n              //非wrap情况下\n              //把子View水平中心固定在RelativeLayout的中心\n                centerHorizontal(child, params, myWidth);\n            } else {\n               //左边距为padding+margin\n               //右边距为左边距加上测量宽度\n                params.mLeft = mPaddingLeft + params.leftMargin;\n                params.mRight = params.mLeft + child.getMeasuredWidth();\n            }\n            return true;\n        } else {\n            //RTL右到左 布局方向\n            //LTR\u0010左到右 布局方向\n            if (isLayoutRtl()) {\n                params.mRight = myWidth - mPaddingRight- params.rightMargin;\n                params.mLeft = params.mRight - child.getMeasuredWidth();\n            } else {\n                params.mLeft = mPaddingLeft + params.leftMargin;\n                params.mRight = params.mLeft + child.getMeasuredWidth();\n            }\n        }\n    }\n    return rules[ALIGN_PARENT_END] != 0;\n    //当为CENTER_IN_PARENT  CENTER_HORIZONTAL ALIGN_PARENT_END三种情况之一时返回True\n}\n```\n\n#### 4 遍历竖直关系的View\n```java\n...\n  for (int i = 0; i < count; i++) {\n           final View child = views[i];\n           if (child.getVisibility() != GONE) {\n               final LayoutParams params = (LayoutParams) child.getLayoutParams();\n              //将竖直方向规则转换为坐标\n               applyVerticalSizeRules(params, myHeight, child.getBaseline());\n               //测量子View\n               measureChild(child, params, myWidth, myHeight);\n               //确定竖直方向子View的位置\n               if (positionChildVertical(child, params, myHeight, isWrapContentHeight)) {\n                   offsetVerticalAxis = true;\n               }\n              //首先判断是否为wrap模式\n               if (isWrapContentWidth) {\n                 //根据RTL或者LTR和版本进行区分\n                 //Build.VERSION_CODES.KITKAT = 19\n                 //主要对margin进行处理\n                   if (isLayoutRtl()) {\n                       if (targetSdkVersion < Build.VERSION_CODES.KITKAT) {\n                           width = Math.max(width, myWidth - params.mLeft);\n                       } else {\n                           width = Math.max(width, myWidth - params.mLeft - params.leftMargin);\n                       }\n                   } else {\n                       if (targetSdkVersion < Build.VERSION_CODES.KITKAT) {\n                           width = Math.max(width, params.mRight);\n                       } else {\n                           width = Math.max(width, params.mRight + params.rightMargin);\n                       }\n                   }\n               }\n               if (isWrapContentHeight) {\n                   if (targetSdkVersion < Build.VERSION_CODES.KITKAT) {\n                       height = Math.max(height, params.mBottom);\n                   } else {\n                       height = Math.max(height, params.mBottom + params.bottomMargin);\n                   }\n               }\n\n               if (child != ignore || verticalGravity) {\n                   left = Math.min(left, params.mLeft - params.leftMargin);\n                   top = Math.min(top, params.mTop - params.topMargin);\n               }\n\n               if (child != ignore || horizontalGravity) {\n                   right = Math.max(right, params.mRight + params.rightMargin);\n                   bottom = Math.max(bottom, params.mBottom + params.bottomMargin);\n               }\n           }\n       }\n...\n```\n\n#### 5 baseline计算\n```java\n// Use the top-start-most laid out view as the baseline. RTL offsets are\n// applied later, so we can use the left-most edge as the starting edge.\n    View baselineView = null;\n    LayoutParams baselineParams = null;\n    for (int i = 0; i < count; i++) {\n        final View child = views[i];\n        if (child.getVisibility() != GONE) {\n            final LayoutParams childParams = (LayoutParams) child.getLayoutParams();\n            if (baselineView == null || baselineParams == null\n                    || compareLayoutPosition(childParams, baselineParams) < 0) {\n                baselineView = child;\n                baselineParams = childParams;\n            }\n        }\n    }\n    mBaselineView = baselineView;\n```\n\n#### 6 宽度和高度修正\n```java\n    //如何是wrap模式\n    if (isWrapContentWidth) {\n            width += mPaddingRight;\n\n            if (mLayoutParams != null && mLayoutParams.width >= 0) {\n                width = Math.max(width, mLayoutParams.width);\n            }\n\n            width = Math.max(width, getSuggestedMinimumWidth());\n            width = resolveSize(width, widthMeasureSpec);\n\n            //在得到最后的width之后 对依赖RelativeLayout的子View添上偏移量\n            if (offsetHorizontalAxis) {\n                for (int i = 0; i < count; i++) {\n                    final View child = views[i];\n                    if (child.getVisibility() != GONE) {\n                        final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                        final int[] rules = params.getRules(layoutDirection);\n                        //对CENTER_IN_PARENT或者CENTER_HORIZONTAL的子View重测\n                        if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_HORIZONTAL] != 0) {\n                            centerHorizontal(child, params, width);\n                        //对ALIGN_PARENT_RIGHT重测\n                        } else if (rules[ALIGN_PARENT_RIGHT] != 0) {\n                            final int childWidth = child.getMeasuredWidth();\n                            params.mLeft = width - mPaddingRight - childWidth;\n                            params.mRight = params.mLeft + childWidth;\n                        }\n                    }\n                }\n            }\n        }\n        //同上\n        if (isWrapContentHeight) {\n            height += mPaddingBottom;\n\n            if (mLayoutParams != null && mLayoutParams.height >= 0) {\n                height = Math.max(height, mLayoutParams.height);\n            }\n\n            height = Math.max(height, getSuggestedMinimumHeight());\n            height = resolveSize(height, heightMeasureSpec);\n\n            if (offsetVerticalAxis) {\n                for (int i = 0; i < count; i++) {\n                    final View child = views[i];\n                    if (child.getVisibility() != GONE) {\n                        final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                        final int[] rules = params.getRules(layoutDirection);\n                        if (rules[CENTER_IN_PARENT] != 0 || rules[CENTER_VERTICAL] != 0) {\n                            centerVertical(child, params, height);\n                        } else if (rules[ALIGN_PARENT_BOTTOM] != 0) {\n                            final int childHeight = child.getMeasuredHeight();\n                            params.mTop = height - mPaddingBottom - childHeight;\n                            params.mBottom = params.mTop + childHeight;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        //根据gravity再次修正\n        if (horizontalGravity || verticalGravity) {\n            final Rect selfBounds = mSelfBounds;\n            selfBounds.set(mPaddingLeft, mPaddingTop, width - mPaddingRight,\n                    height - mPaddingBottom);\n\n            final Rect contentBounds = mContentBounds;\n            Gravity.apply(mGravity, right - left, bottom - top, selfBounds, contentBounds,\n                    layoutDirection);\n\n            final int horizontalOffset = contentBounds.left - left;\n            final int verticalOffset = contentBounds.top - top;\n            if (horizontalOffset != 0 || verticalOffset != 0) {\n                for (int i = 0; i < count; i++) {\n                    final View child = views[i];\n                    if (child.getVisibility() != GONE && child != ignore) {\n                        final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                        if (horizontalGravity) {\n                            params.mLeft += horizontalOffset;\n                            params.mRight += horizontalOffset;\n                        }\n                        if (verticalGravity) {\n                            params.mTop += verticalOffset;\n                            params.mBottom += verticalOffset;\n                        }\n                    }\n                }\n            }\n        }\n\n        //如果是RTL(右到左显示)则再次修改\n        if (isLayoutRtl()) {\n            final int offsetWidth = myWidth - width;\n            for (int i = 0; i < count; i++) {\n                final View child = views[i];\n                if (child.getVisibility() != GONE) {\n                    final LayoutParams params = (LayoutParams) child.getLayoutParams();\n                    params.mLeft -= offsetWidth;\n                    params.mRight -= offsetWidth;\n                }\n            }\n        }\n```\n#### 简单总结\nRelativeLayout更加关注子View的left right top bottom值 并且优先级高于width和height\n\n\n\n### RelativeLayout的layout过程\n对于RelativeLayout来的 layout过程更多的根据子View的left right top bottom值来设定位置\n```java\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        //  The layout has actually already been performed and the positions\n        //  cached.  Apply the cached values to the children.\n        final int count = getChildCount();\n\n        for (int i = 0; i < count; i++) {\n            View child = getChildAt(i);\n            if (child.getVisibility() != GONE) {\n                RelativeLayout.LayoutParams st =\n                        (RelativeLayout.LayoutParams) child.getLayoutParams();\n                child.layout(st.mLeft, st.mTop, st.mRight, st.mBottom);\n            }\n        }\n    }\n```\n\n### RelativeLayout的draw过程\nRelativeLayout作为ViewGroup的子类 因为其性质原因  没有对draw过程进行修改\n\n\n以上\n","slug":"RelativeLayout 源码分析","published":1,"updated":"2017-02-03T09:59:20.000Z","_id":"ciypn1f0w00008ko92li7xnce","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"RelativeLayout-源码分析\"><a href=\"#RelativeLayout-源码分析\" class=\"headerlink\" title=\"RelativeLayout  源码分析\"></a>RelativeLayout  源码分析</h2><blockquote>\n<p>继承自ViewGroup 没有重载onDraw方法 内部子View又是相对 只要计算出View的坐标 layout过程同样简单</p>\n</blockquote>\n<h3 id=\"measure过程\"><a href=\"#measure过程\" class=\"headerlink\" title=\"measure过程\"></a>measure过程</h3><h4 id=\"主要过程\"><a href=\"#主要过程\" class=\"headerlink\" title=\"主要过程\"></a>主要过程</h4><ol>\n<li>将内部View根据纵向关系和横向关系排序</li>\n<li>初始化相关变量</li>\n<li>遍历水平关系的View</li>\n<li>遍历竖直关系的View</li>\n<li>baseline计算</li>\n<li><p>宽度和高度修正</p>\n<a id=\"more\"></a>\n</li>\n</ol>\n<h4 id=\"1-将内部View根据纵向关系和横向关系排序\"><a href=\"#1-将内部View根据纵向关系和横向关系排序\" class=\"headerlink\" title=\"1 将内部View根据纵向关系和横向关系排序\"></a>1 将内部View根据纵向关系和横向关系排序</h4><blockquote>\n<p>layout_toRightOf 为横向关系  layout_below为纵向关系</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//首先会根据mDirtyHierarchy的值判断是否需要将子View重新排序</span></div><div class=\"line\"><span class=\"keyword\">if</span> (mDirtyHierarchy) &#123;</div><div class=\"line\">    mDirtyHierarchy = <span class=\"keyword\">false</span>;</div><div class=\"line\">    sortChildren();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>相关调用方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//mDirtyHierarchy的值只有在requestLayout方法下被更新</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">requestLayout</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.requestLayout();</div><div class=\"line\">    mDirtyHierarchy = <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//sortChildren()方法对横向纵向关系的view的数组进行非空判断 用DependencyGraph进行判断</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sortChildren</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getChildCount();</div><div class=\"line\">    <span class=\"keyword\">if</span> (mSortedVerticalChildren == <span class=\"keyword\">null</span> || mSortedVerticalChildren.length != count) &#123;</div><div class=\"line\">        mSortedVerticalChildren = <span class=\"keyword\">new</span> View[count];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (mSortedHorizontalChildren == <span class=\"keyword\">null</span> || mSortedHorizontalChildren.length != count) &#123;</div><div class=\"line\">        mSortedHorizontalChildren = <span class=\"keyword\">new</span> View[count];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> DependencyGraph graph = mGraph;</div><div class=\"line\">    graph.clear();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        graph.add(getChildAt(i));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    graph.getSortedViews(mSortedVerticalChildren, RULES_VERTICAL);</div><div class=\"line\">    graph.getSortedViews(mSortedHorizontalChildren, RULES_HORIZONTAL);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>DependencyGraph的相关方法</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DependencyGraph</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * Adds a view to the graph.</div><div class=\"line\">         *</div><div class=\"line\">         * <span class=\"doctag\">@param</span> view The view to be added as a node to the graph.</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//因为是图 根据view生成一个节点</span></div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id = view.getId();</div><div class=\"line\">            <span class=\"keyword\">final</span> Node node = Node.acquire(view);</div><div class=\"line\">            <span class=\"comment\">//如果是有效的id 则将该节点添加到List中</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (id != View.NO_ID) &#123;</div><div class=\"line\">                mKeyNodes.put(id, node);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            mNodes.add(node);</div><div class=\"line\">        &#125;     </div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">/**</span></div><div class=\"line\">           * Builds a sorted list of views. The sorting order depends on the dependencies</div><div class=\"line\">           * between the view. For instance, if view C needs view A to be processed first</div><div class=\"line\">           * and view A needs view B to be processed first, the dependency graph</div><div class=\"line\">           * is: B -&gt; A -&gt; C. The sorted array will contain views B, A and C in this order.</div><div class=\"line\">           *</div><div class=\"line\">           * <span class=\"doctag\">@param</span> sorted The sorted list of views. The length of this array must</div><div class=\"line\">           *        be equal to getChildCount().</div><div class=\"line\">           * <span class=\"doctag\">@param</span> rules The list of rules to take into account.</div><div class=\"line\">           */</div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getSortedViews</span><span class=\"params\">(View[] sorted, <span class=\"keyword\">int</span>... rules)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//当前View找不到其它的可依赖的View时  作为root节点</span></div><div class=\"line\">              <span class=\"keyword\">final</span> ArrayDeque&lt;Node&gt; roots = findRoots(rules);</div><div class=\"line\">              <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">              Node node;</div><div class=\"line\">              <span class=\"comment\">//读取root的下一个node</span></div><div class=\"line\">              <span class=\"keyword\">while</span> ((node = roots.pollLast()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  <span class=\"keyword\">final</span> View view = node.view;</div><div class=\"line\">                  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> key = view.getId();</div><div class=\"line\"></div><div class=\"line\">              <span class=\"comment\">//将符合规则的View加到 sorted中</span></div><div class=\"line\"></div><div class=\"line\">                  sorted[index++] = view;</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"keyword\">final</span> ArrayMap&lt;Node, DependencyGraph&gt; dependents = node.dependents;</div><div class=\"line\">                  <span class=\"comment\">//dependents 依赖该node的node  (A C依赖B 则B的dependents中存A C)</span></div><div class=\"line\">                  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = dependents.size();</div><div class=\"line\">                  <span class=\"comment\">//遍历所有依赖自己的node</span></div><div class=\"line\">                  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">                      <span class=\"keyword\">final</span> Node dependent = dependents.keyAt(i);</div><div class=\"line\">                      <span class=\"comment\">//dependencies 是被依赖的的node的规则和node(A 依赖 B D 则dependencies存有B D )</span></div><div class=\"line\">                      <span class=\"keyword\">final</span> SparseArray&lt;Node&gt; dependencies = dependent.dependencies;</div><div class=\"line\"></div><div class=\"line\">                      <span class=\"comment\">//移除当前node和dependencies的依赖关系</span></div><div class=\"line\">                      dependencies.remove(key);</div><div class=\"line\">                      <span class=\"comment\">//如果解除依赖后没有其它依赖 则将该node也视为rootNode</span></div><div class=\"line\">                      <span class=\"keyword\">if</span> (dependencies.size() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                          roots.add(dependent);</div><div class=\"line\">                      &#125;</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (index &lt; sorted.length) &#123;</div><div class=\"line\">                  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Circular dependencies cannot exist in RelativeLayout\"</span>);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>eg: A依赖B B依赖C 首先存入C 因为不依赖任何其它的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Finds the roots of the graph. A root is a node with no dependency and</div><div class=\"line\"> * with [0..n] dependents.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> rulesFilter The list of rules to consider when building the</div><div class=\"line\"> *        dependencies</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@return</span> A list of node, each being a root of the graph</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ArrayDeque&lt;Node&gt; <span class=\"title\">findRoots</span><span class=\"params\">(<span class=\"keyword\">int</span>[] rulesFilter)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//keyNodes为nodelist</span></div><div class=\"line\">    <span class=\"keyword\">final</span> SparseArray&lt;Node&gt; keyNodes = mKeyNodes;</div><div class=\"line\">    <span class=\"keyword\">final</span> ArrayList&lt;Node&gt; nodes = mNodes;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = nodes.size();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//初始化依赖该node的node和该node依赖的node相关参数</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node node = nodes.get(i);</div><div class=\"line\">        node.dependents.clear();</div><div class=\"line\">        node.dependencies.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//遍历所有node  存入当前view和他所依赖的关系</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node node = nodes.get(i);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> LayoutParams layoutParams = (LayoutParams) node.view.getLayoutParams();</div><div class=\"line\">        <span class=\"comment\">//取出当前View所有的依赖关系</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] rules = layoutParams.mRules;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> rulesCount = rulesFilter.length;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//遍历当前View所有的</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; rulesCount; j++) &#123;</div><div class=\"line\">          <span class=\"comment\">//rule对应被依赖view的id</span></div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> rule = rules[rulesFilter[j]];</div><div class=\"line\">            <span class=\"keyword\">if</span> (rule &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">//找到被依赖的node</span></div><div class=\"line\">                <span class=\"keyword\">final</span> Node dependency = keyNodes.get(rule);</div><div class=\"line\">                <span class=\"comment\">//跳过空view和本身</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (dependency == <span class=\"keyword\">null</span> || dependency == node) &#123;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//添加依赖被依赖的node</span></div><div class=\"line\">                dependency.dependents.put(node, <span class=\"keyword\">this</span>);</div><div class=\"line\">                node.dependencies.put(rule, dependency);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> ArrayDeque&lt;Node&gt; roots = mRoots;</div><div class=\"line\">    roots.clear();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 再次遍历  如果该node的依赖关系为0 即该view不依赖任何view 则视为rootView</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node node = nodes.get(i);</div><div class=\"line\">        <span class=\"keyword\">if</span> (node.dependencies.size() == <span class=\"number\">0</span>) roots.addLast(node);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> roots;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-初始化相关变量\"><a href=\"#2-初始化相关变量\" class=\"headerlink\" title=\"2 初始化相关变量\"></a>2 初始化相关变量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> myWidth = -<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> myHeight = -<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> width = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> height = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果不是UNSPECIFIED模式 则将widthSize赋值于myWidth</span></div><div class=\"line\"><span class=\"keyword\">if</span> (widthMode != MeasureSpec.UNSPECIFIED) &#123;</div><div class=\"line\">    myWidth = widthSize;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 如果不是UNSPECIFIED模式 则将heightSize赋值于myHeight</span></div><div class=\"line\"><span class=\"keyword\">if</span> (heightMode != MeasureSpec.UNSPECIFIED) &#123;</div><div class=\"line\">    myHeight = heightSize;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//如果是EXACTLY模式 则将myWidth和myHeight记录</span></div><div class=\"line\"><span class=\"keyword\">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">    width = myWidth;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (heightMode == MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">    height = myHeight;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">View ignore = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"comment\">//判断是否为Start 和  top 确定左上角坐标</span></div><div class=\"line\"><span class=\"keyword\">int</span> gravity = mGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> horizontalGravity = gravity != Gravity.START &amp;&amp; gravity != <span class=\"number\">0</span>;</div><div class=\"line\">gravity = mGravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> verticalGravity = gravity != Gravity.TOP &amp;&amp; gravity != <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> left = Integer.MAX_VALUE;</div><div class=\"line\"><span class=\"keyword\">int</span> top = Integer.MAX_VALUE;</div><div class=\"line\"><span class=\"keyword\">int</span> right = Integer.MIN_VALUE;</div><div class=\"line\"><span class=\"keyword\">int</span> bottom = Integer.MIN_VALUE;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">boolean</span> offsetHorizontalAxis = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"keyword\">boolean</span> offsetVerticalAxis = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"comment\">// 记录ignore的view</span></div><div class=\"line\"><span class=\"keyword\">if</span> ((horizontalGravity || verticalGravity) &amp;&amp; mIgnoreGravity != View.NO_ID) &#123;</div><div class=\"line\">    ignore = findViewById(mIgnoreGravity);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//宽度个高度是否为warp模式</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isWrapContentWidth = widthMode != MeasureSpec.EXACTLY;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isWrapContentHeight = heightMode != MeasureSpec.EXACTLY;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//在计算和分配的子View的坐标的时候 需要用到父VIew的尺寸 但是暂时无法拿到准确值(待完成下面操作)</span></div><div class=\"line\"><span class=\"comment\">//先使用默认值代替 在计算后 用偏移量更新真是坐标</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</div><div class=\"line\"><span class=\"keyword\">if</span> (isLayoutRtl() &amp;&amp; myWidth == -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">    myWidth = DEFAULT_WIDTH;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-遍历水平关系的View\"><a href=\"#3-遍历水平关系的View\" class=\"headerlink\" title=\"3  遍历水平关系的View\"></a>3  遍历水平关系的View</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">View[] views = mSortedHorizontalChildren;</div><div class=\"line\"><span class=\"keyword\">int</span> count = views.length;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">    View child = views[i];</div><div class=\"line\">    <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">        LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">        <span class=\"comment\">//根据方向获得子View中设置的规则</span></div><div class=\"line\">        <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</div><div class=\"line\">        <span class=\"comment\">//将左右方向规则转换为左右的坐标</span></div><div class=\"line\">        applyHorizontalSizeRules(params, myWidth, rules);</div><div class=\"line\">        <span class=\"comment\">//测算水平方向的子View的尺寸</span></div><div class=\"line\">        measureChildHorizontal(child, params, myWidth, myHeight);</div><div class=\"line\">        <span class=\"comment\">//确定水平方向子View的位置</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (positionChildHorizontal(child, params, myWidth, isWrapContentWidth)) &#123;</div><div class=\"line\">            offsetHorizontalAxis = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>相关方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">applyHorizontalSizeRules</span><span class=\"params\">(LayoutParams childParams, <span class=\"keyword\">int</span> myWidth, <span class=\"keyword\">int</span>[] rules)</span> </span>&#123;</div><div class=\"line\">    RelativeLayout.LayoutParams anchorParams;</div><div class=\"line\">    childParams.mLeft = VALUE_NOT_SET;</div><div class=\"line\">    childParams.mRight = VALUE_NOT_SET;</div><div class=\"line\">    <span class=\"comment\">//得到当前子View的layout_toLeftOf属性对应的View</span></div><div class=\"line\">    anchorParams = getRelatedViewParams(rules, LEFT_OF);</div><div class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">//如果这个属性存在 则当前子View的右坐标是layout_toLeftOf对应的view的左坐标减去对应view的marginLeft的值和自身marginRight的值</span></div><div class=\"line\">        childParams.mRight = anchorParams.mLeft - (anchorParams.leftMargin +</div><div class=\"line\">                childParams.rightMargin);</div><div class=\"line\">    <span class=\"comment\">//如果alignWithParent为true alignWithParent取alignWithParentIfMissing</span></div><div class=\"line\">    <span class=\"comment\">//如果layout_toLeftOf的view为空 或者gone 则将RelativeLayout当做被依赖的对象</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[LEFT_OF] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//如果父容器RelativeLayout的宽度大于0</span></div><div class=\"line\">        <span class=\"comment\">//则子View的右坐标为 父RelativeLayout的宽度减去 mPaddingRight 和自身的marginRight</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (myWidth &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//类似的方法 得到左坐标(通过参数RIGHT_OF)</span></div><div class=\"line\">    anchorParams = getRelatedViewParams(rules, RIGHT_OF);</div><div class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        childParams.mLeft = anchorParams.mRight + (anchorParams.rightMargin +</div><div class=\"line\">                childParams.leftMargin);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[RIGHT_OF] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        childParams.mLeft = mPaddingLeft + childParams.leftMargin;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//类似的方法 得到左坐标 (通过参数ALIGN_LEFT)</span></div><div class=\"line\">    anchorParams = getRelatedViewParams(rules, ALIGN_LEFT);</div><div class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        childParams.mLeft = anchorParams.mLeft + childParams.leftMargin;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[ALIGN_LEFT] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        childParams.mLeft = mPaddingLeft + childParams.leftMargin;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//类似的方法 得到右坐标 (通过参数ALIGN_RIGHT)</span></div><div class=\"line\">    anchorParams = getRelatedViewParams(rules, ALIGN_RIGHT);</div><div class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        childParams.mRight = anchorParams.mRight - childParams.rightMargin;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[ALIGN_RIGHT] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (myWidth &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//根据ALIGN_PARENT_LEFT 将自己放到父RelativeLayout的左边</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> != rules[ALIGN_PARENT_LEFT]) &#123;</div><div class=\"line\">        childParams.mLeft = mPaddingLeft + childParams.leftMargin;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//根据ALIGN_PARENT_RIGHT 将自己放到父RelativeLayout的右边</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> != rules[ALIGN_PARENT_RIGHT]) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (myWidth &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildHorizontal</span><span class=\"params\">(View child, LayoutParams params, <span class=\"keyword\">int</span> myWidth, <span class=\"keyword\">int</span> myHeight)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//获得child的宽度MeasureSpec</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(params.mLeft, params.mRight,</div><div class=\"line\">            params.width, params.leftMargin, params.rightMargin, mPaddingLeft, mPaddingRight,</div><div class=\"line\">            myWidth);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec;</div><div class=\"line\">    <span class=\"comment\">//在低于4.2的时候 mAllowBrokenMeasureSpecs为true</span></div><div class=\"line\">    <span class=\"comment\">//当myHeight &lt; 0 时 则根据父RelativeLayout设置其MeasureSpec模式</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (myHeight &lt; <span class=\"number\">0</span> &amp;&amp; !mAllowBrokenMeasureSpecs) &#123;</div><div class=\"line\">        <span class=\"comment\">//如果父RelativeLayout的height大于0  则 设置子view的MeasureSpec模式为EXACTLY</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (params.height &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(</div><div class=\"line\">                    params.height, MeasureSpec.EXACTLY);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//反之 如果其小于0  则设置子View的MeasureSpec为UNSPECIFIED</span></div><div class=\"line\">            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(<span class=\"number\">0</span>, MeasureSpec.UNSPECIFIED);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//当当前myHeight &gt;= 0</span></div><div class=\"line\">      <span class=\"comment\">//判断当前高度是否与父RelativeLayout高度相同 设置heightMode</span></div><div class=\"line\">      <span class=\"comment\">//根据maxHeight 和heightMode设置子View的MeasureSpec模式</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maxHeight;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mMeasureVerticalWithPaddingMargin) &#123;</div><div class=\"line\">            maxHeight = Math.max(<span class=\"number\">0</span>, myHeight - mPaddingTop - mPaddingBottom</div><div class=\"line\">                    - params.topMargin - params.bottomMargin);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            maxHeight = Math.max(<span class=\"number\">0</span>, myHeight);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode;</div><div class=\"line\">        <span class=\"keyword\">if</span> (params.height == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">            heightMode = MeasureSpec.EXACTLY;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            heightMode = MeasureSpec.AT_MOST;</div><div class=\"line\">        &#125;</div><div class=\"line\">        childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(maxHeight, heightMode);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//获得了子View的WidthMeasureSpec和HeightMeasureSpec</span></div><div class=\"line\">    <span class=\"comment\">//子View可以通过measure方法获取自身的size</span></div><div class=\"line\">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * Get a measure spec that accounts for all of the constraints on this view.</div><div class=\"line\">    * This includes size constraints imposed by the RelativeLayout as well as</div><div class=\"line\">    * the View's desired dimension.</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> childStart The left or top field of the child's layout params</div><div class=\"line\">    * <span class=\"doctag\">@param</span> childEnd The right or bottom field of the child's layout params</div><div class=\"line\">    * <span class=\"doctag\">@param</span> childSize The child's desired size (the width or height field of</div><div class=\"line\">    *        the child's layout params)</div><div class=\"line\">    * <span class=\"doctag\">@param</span> startMargin The left or top margin</div><div class=\"line\">    * <span class=\"doctag\">@param</span> endMargin The right or bottom margin</div><div class=\"line\">    * <span class=\"doctag\">@param</span> startPadding mPaddingLeft or mPaddingTop</div><div class=\"line\">    * <span class=\"doctag\">@param</span> endPadding mPaddingRight or mPaddingBottom</div><div class=\"line\">    * <span class=\"doctag\">@param</span> mySize The width or height of this view (the RelativeLayout)</div><div class=\"line\">    * <span class=\"doctag\">@return</span> MeasureSpec for the child</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> childStart, <span class=\"keyword\">int</span> childEnd,</span></span></div><div class=\"line\">           <span class=\"keyword\">int</span> childSize, <span class=\"keyword\">int</span> startMargin, <span class=\"keyword\">int</span> endMargin, <span class=\"keyword\">int</span> startPadding,</div><div class=\"line\">           <span class=\"keyword\">int</span> endPadding, <span class=\"keyword\">int</span> mySize) &#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> childSpecMode = <span class=\"number\">0</span>;</div><div class=\"line\">       <span class=\"keyword\">int</span> childSpecSize = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isUnspecified = mySize &lt; <span class=\"number\">0</span>;</div><div class=\"line\">       <span class=\"comment\">//如果父RelativeLayout宽度小于0 版本号不小于4.2</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (isUnspecified &amp;&amp; !mAllowBrokenMeasureSpecs) &#123;</div><div class=\"line\">            <span class=\"comment\">//如果子View的左边距和右边距都不为VALUE_NOT_SET</span></div><div class=\"line\">            <span class=\"comment\">//且右边距坐标大于左边距坐标 则将其差当做宽度赋予View 设置模式为EXACTLY</span></div><div class=\"line\">            <span class=\"comment\">//VALUE_NOT_SET = Integer.MIN_VALUE</span></div><div class=\"line\">            <span class=\"comment\">/**</span></div><div class=\"line\">             * Constant for the minimum &#123;<span class=\"doctag\">@code</span> int&#125; value, -2&lt;sup&gt;31&lt;/sup&gt;.</div><div class=\"line\">             */</div><div class=\"line\">            <span class=\"comment\">//public static final int MIN_VALUE = 0x80000000;</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (childStart != VALUE_NOT_SET &amp;&amp; childEnd != VALUE_NOT_SET) &#123;</div><div class=\"line\">               childSpecSize = Math.max(<span class=\"number\">0</span>, childEnd - childStart);</div><div class=\"line\">               childSpecMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childSize &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               <span class=\"comment\">// 如果childSpecSize &gt;= 0 则赋值于childSpecSize</span></div><div class=\"line\">               <span class=\"comment\">//同样设置模式为EXACTLY</span></div><div class=\"line\">               childSpecSize = childSize;</div><div class=\"line\">               childSpecMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               <span class=\"comment\">// 都不满足则设置模式为UNSPECIFIED</span></div><div class=\"line\">               childSpecSize = <span class=\"number\">0</span>;</div><div class=\"line\">               childSpecMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 计算 开始和结束相关</span></div><div class=\"line\">       <span class=\"keyword\">int</span> tempStart = childStart;</div><div class=\"line\">       <span class=\"keyword\">int</span> tempEnd = childEnd;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//如果没有指定start值 则默认赋予 padding和merage的值</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (tempStart == VALUE_NOT_SET) &#123;</div><div class=\"line\">           tempStart = startPadding + startMargin;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"comment\">//同上</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (tempEnd == VALUE_NOT_SET) &#123;</div><div class=\"line\">           tempEnd = mySize - endPadding - endMargin;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//指定最大可提供的大小</span></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maxAvailable = tempEnd - tempStart;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (childStart != VALUE_NOT_SET &amp;&amp; childEnd != VALUE_NOT_SET) &#123;</div><div class=\"line\">           <span class=\"comment\">//如果Start和End都是有效值 根据isUnspecified设置specMode为UNSPECIFIED或EXACTLY</span></div><div class=\"line\">           <span class=\"comment\">//并将设置对应的size</span></div><div class=\"line\">           childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;</div><div class=\"line\">           childSpecSize = Math.max(<span class=\"number\">0</span>, maxAvailable);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"comment\">//反之 判断childSize的相关值</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (childSize &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               <span class=\"comment\">//设置模式为EXACTLY</span></div><div class=\"line\">               <span class=\"comment\">//判断maxAvailable和childSize情况 取较大值设置为childSpecSize</span></div><div class=\"line\">               childSpecMode = MeasureSpec.EXACTLY;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">if</span> (maxAvailable &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                   <span class=\"comment\">// We have a maximum size in this dimension.</span></div><div class=\"line\">                   childSpecSize = Math.min(maxAvailable, childSize);</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   <span class=\"comment\">// We can grow in this dimension.</span></div><div class=\"line\">                   childSpecSize = childSize;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childSize == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">               <span class=\"comment\">//如果子View是match模式 参照isUnspecified设置相关</span></div><div class=\"line\">               childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;</div><div class=\"line\">               childSpecSize = Math.max(<span class=\"number\">0</span>, maxAvailable);</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childSize == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">               <span class=\"comment\">//在wrap进行设置</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (maxAvailable &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                   <span class=\"comment\">// We have a maximum size in this dimension.</span></div><div class=\"line\">                   childSpecMode = MeasureSpec.AT_MOST;</div><div class=\"line\">                   childSpecSize = maxAvailable;</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   <span class=\"comment\">// We can grow in this dimension. Child can be as big as it</span></div><div class=\"line\">                   <span class=\"comment\">// wants.</span></div><div class=\"line\">                   childSpecMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">                   childSpecSize = <span class=\"number\">0</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>以上 完成了View的第一次测量  确定了View的大小 然后根据大小觉得把子view放在父RelativeLayout中的位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">positionChildHorizontal</span><span class=\"params\">(View child, LayoutParams params, <span class=\"keyword\">int</span> myWidth,</span></span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> wrapContent) &#123;</div><div class=\"line\">    <span class=\"comment\">//获取RelativeLayout的布局方向</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</div><div class=\"line\">    <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (params.mLeft == VALUE_NOT_SET &amp;&amp; params.mRight != VALUE_NOT_SET) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果右边界有效 左边界无效 根据右边界计算出左边界</span></div><div class=\"line\">        params.mLeft = params.mRight - child.getMeasuredWidth();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params.mLeft != VALUE_NOT_SET &amp;&amp; params.mRight == VALUE_NOT_SET) &#123;</div><div class=\"line\">        <span class=\"comment\">// 同上反之</span></div><div class=\"line\">        params.mRight = params.mLeft + child.getMeasuredWidth();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params.mLeft == VALUE_NOT_SET &amp;&amp; params.mRight == VALUE_NOT_SET) &#123;</div><div class=\"line\">        <span class=\"comment\">//都无效的时候</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (rules[CENTER_IN_PARENT] != <span class=\"number\">0</span> || rules[CENTER_HORIZONTAL] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          <span class=\"comment\">//设置了CENTER_IN_PARENT或者 CENTER_HORIZONTAL的情况下</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!wrapContent) &#123;</div><div class=\"line\">              <span class=\"comment\">//非wrap情况下</span></div><div class=\"line\">              <span class=\"comment\">//把子View水平中心固定在RelativeLayout的中心</span></div><div class=\"line\">                centerHorizontal(child, params, myWidth);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               <span class=\"comment\">//左边距为padding+margin</span></div><div class=\"line\">               <span class=\"comment\">//右边距为左边距加上测量宽度</span></div><div class=\"line\">                params.mLeft = mPaddingLeft + params.leftMargin;</div><div class=\"line\">                params.mRight = params.mLeft + child.getMeasuredWidth();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//RTL右到左 布局方向</span></div><div class=\"line\">            <span class=\"comment\">//LTR\u0010左到右 布局方向</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (isLayoutRtl()) &#123;</div><div class=\"line\">                params.mRight = myWidth - mPaddingRight- params.rightMargin;</div><div class=\"line\">                params.mLeft = params.mRight - child.getMeasuredWidth();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                params.mLeft = mPaddingLeft + params.leftMargin;</div><div class=\"line\">                params.mRight = params.mLeft + child.getMeasuredWidth();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> rules[ALIGN_PARENT_END] != <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">//当为CENTER_IN_PARENT  CENTER_HORIZONTAL ALIGN_PARENT_END三种情况之一时返回True</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-遍历竖直关系的View\"><a href=\"#4-遍历竖直关系的View\" class=\"headerlink\" title=\"4 遍历竖直关系的View\"></a>4 遍历竖直关系的View</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">           <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">               <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">              <span class=\"comment\">//将竖直方向规则转换为坐标</span></div><div class=\"line\">               applyVerticalSizeRules(params, myHeight, child.getBaseline());</div><div class=\"line\">               <span class=\"comment\">//测量子View</span></div><div class=\"line\">               measureChild(child, params, myWidth, myHeight);</div><div class=\"line\">               <span class=\"comment\">//确定竖直方向子View的位置</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (positionChildVertical(child, params, myHeight, isWrapContentHeight)) &#123;</div><div class=\"line\">                   offsetVerticalAxis = <span class=\"keyword\">true</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">              <span class=\"comment\">//首先判断是否为wrap模式</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (isWrapContentWidth) &#123;</div><div class=\"line\">                 <span class=\"comment\">//根据RTL或者LTR和版本进行区分</span></div><div class=\"line\">                 <span class=\"comment\">//Build.VERSION_CODES.KITKAT = 19</span></div><div class=\"line\">                 <span class=\"comment\">//主要对margin进行处理</span></div><div class=\"line\">                   <span class=\"keyword\">if</span> (isLayoutRtl()) &#123;</div><div class=\"line\">                       <span class=\"keyword\">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">                           width = Math.max(width, myWidth - params.mLeft);</div><div class=\"line\">                       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                           width = Math.max(width, myWidth - params.mLeft - params.leftMargin);</div><div class=\"line\">                       &#125;</div><div class=\"line\">                   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                       <span class=\"keyword\">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">                           width = Math.max(width, params.mRight);</div><div class=\"line\">                       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                           width = Math.max(width, params.mRight + params.rightMargin);</div><div class=\"line\">                       &#125;</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">if</span> (isWrapContentHeight) &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">                       height = Math.max(height, params.mBottom);</div><div class=\"line\">                   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                       height = Math.max(height, params.mBottom + params.bottomMargin);</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">if</span> (child != ignore || verticalGravity) &#123;</div><div class=\"line\">                   left = Math.min(left, params.mLeft - params.leftMargin);</div><div class=\"line\">                   top = Math.min(top, params.mTop - params.topMargin);</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">if</span> (child != ignore || horizontalGravity) &#123;</div><div class=\"line\">                   right = Math.max(right, params.mRight + params.rightMargin);</div><div class=\"line\">                   bottom = Math.max(bottom, params.mBottom + params.bottomMargin);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h4 id=\"5-baseline计算\"><a href=\"#5-baseline计算\" class=\"headerlink\" title=\"5 baseline计算\"></a>5 baseline计算</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Use the top-start-most laid out view as the baseline. RTL offsets are</span></div><div class=\"line\"><span class=\"comment\">// applied later, so we can use the left-most edge as the starting edge.</span></div><div class=\"line\">    View baselineView = <span class=\"keyword\">null</span>;</div><div class=\"line\">    LayoutParams baselineParams = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> LayoutParams childParams = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">            <span class=\"keyword\">if</span> (baselineView == <span class=\"keyword\">null</span> || baselineParams == <span class=\"keyword\">null</span></div><div class=\"line\">                    || compareLayoutPosition(childParams, baselineParams) &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                baselineView = child;</div><div class=\"line\">                baselineParams = childParams;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    mBaselineView = baselineView;</div></pre></td></tr></table></figure>\n<h4 id=\"6-宽度和高度修正\"><a href=\"#6-宽度和高度修正\" class=\"headerlink\" title=\"6 宽度和高度修正\"></a>6 宽度和高度修正</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//如何是wrap模式</span></div><div class=\"line\"><span class=\"keyword\">if</span> (isWrapContentWidth) &#123;</div><div class=\"line\">        width += mPaddingRight;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (mLayoutParams != <span class=\"keyword\">null</span> &amp;&amp; mLayoutParams.width &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            width = Math.max(width, mLayoutParams.width);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        width = Math.max(width, getSuggestedMinimumWidth());</div><div class=\"line\">        width = resolveSize(width, widthMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//在得到最后的width之后 对依赖RelativeLayout的子View添上偏移量</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (offsetHorizontalAxis) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">                <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">                    <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</div><div class=\"line\">                    <span class=\"comment\">//对CENTER_IN_PARENT或者CENTER_HORIZONTAL的子View重测</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (rules[CENTER_IN_PARENT] != <span class=\"number\">0</span> || rules[CENTER_HORIZONTAL] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        centerHorizontal(child, params, width);</div><div class=\"line\">                    <span class=\"comment\">//对ALIGN_PARENT_RIGHT重测</span></div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rules[ALIGN_PARENT_RIGHT] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = child.getMeasuredWidth();</div><div class=\"line\">                        params.mLeft = width - mPaddingRight - childWidth;</div><div class=\"line\">                        params.mRight = params.mLeft + childWidth;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//同上</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (isWrapContentHeight) &#123;</div><div class=\"line\">        height += mPaddingBottom;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (mLayoutParams != <span class=\"keyword\">null</span> &amp;&amp; mLayoutParams.height &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            height = Math.max(height, mLayoutParams.height);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        height = Math.max(height, getSuggestedMinimumHeight());</div><div class=\"line\">        height = resolveSize(height, heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (offsetVerticalAxis) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">                <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">                    <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (rules[CENTER_IN_PARENT] != <span class=\"number\">0</span> || rules[CENTER_VERTICAL] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        centerVertical(child, params, height);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rules[ALIGN_PARENT_BOTTOM] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</div><div class=\"line\">                        params.mTop = height - mPaddingBottom - childHeight;</div><div class=\"line\">                        params.mBottom = params.mTop + childHeight;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//根据gravity再次修正</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (horizontalGravity || verticalGravity) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Rect selfBounds = mSelfBounds;</div><div class=\"line\">        selfBounds.set(mPaddingLeft, mPaddingTop, width - mPaddingRight,</div><div class=\"line\">                height - mPaddingBottom);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> Rect contentBounds = mContentBounds;</div><div class=\"line\">        Gravity.apply(mGravity, right - left, bottom - top, selfBounds, contentBounds,</div><div class=\"line\">                layoutDirection);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> horizontalOffset = contentBounds.left - left;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> verticalOffset = contentBounds.top - top;</div><div class=\"line\">        <span class=\"keyword\">if</span> (horizontalOffset != <span class=\"number\">0</span> || verticalOffset != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">                <span class=\"keyword\">if</span> (child.getVisibility() != GONE &amp;&amp; child != ignore) &#123;</div><div class=\"line\">                    <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">                    <span class=\"keyword\">if</span> (horizontalGravity) &#123;</div><div class=\"line\">                        params.mLeft += horizontalOffset;</div><div class=\"line\">                        params.mRight += horizontalOffset;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (verticalGravity) &#123;</div><div class=\"line\">                        params.mTop += verticalOffset;</div><div class=\"line\">                        params.mBottom += verticalOffset;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//如果是RTL(右到左显示)则再次修改</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (isLayoutRtl()) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> offsetWidth = myWidth - width;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">            <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">                params.mLeft -= offsetWidth;</div><div class=\"line\">                params.mRight -= offsetWidth;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"简单总结\"><a href=\"#简单总结\" class=\"headerlink\" title=\"简单总结\"></a>简单总结</h4><p>RelativeLayout更加关注子View的left right top bottom值 并且优先级高于width和height</p>\n<h3 id=\"RelativeLayout的layout过程\"><a href=\"#RelativeLayout的layout过程\" class=\"headerlink\" title=\"RelativeLayout的layout过程\"></a>RelativeLayout的layout过程</h3><p>对于RelativeLayout来的 layout过程更多的根据子View的left right top bottom值来设定位置<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//  The layout has actually already been performed and the positions</span></div><div class=\"line\">    <span class=\"comment\">//  cached.  Apply the cached values to the children.</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getChildCount();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        View child = getChildAt(i);</div><div class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">            RelativeLayout.LayoutParams st =</div><div class=\"line\">                    (RelativeLayout.LayoutParams) child.getLayoutParams();</div><div class=\"line\">            child.layout(st.mLeft, st.mTop, st.mRight, st.mBottom);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"RelativeLayout的draw过程\"><a href=\"#RelativeLayout的draw过程\" class=\"headerlink\" title=\"RelativeLayout的draw过程\"></a>RelativeLayout的draw过程</h3><p>RelativeLayout作为ViewGroup的子类 因为其性质原因  没有对draw过程进行修改</p>\n<p>以上</p>\n","excerpt":"<h2 id=\"RelativeLayout-源码分析\"><a href=\"#RelativeLayout-源码分析\" class=\"headerlink\" title=\"RelativeLayout  源码分析\"></a>RelativeLayout  源码分析</h2><blockquote>\n<p>继承自ViewGroup 没有重载onDraw方法 内部子View又是相对 只要计算出View的坐标 layout过程同样简单</p>\n</blockquote>\n<h3 id=\"measure过程\"><a href=\"#measure过程\" class=\"headerlink\" title=\"measure过程\"></a>measure过程</h3><h4 id=\"主要过程\"><a href=\"#主要过程\" class=\"headerlink\" title=\"主要过程\"></a>主要过程</h4><ol>\n<li>将内部View根据纵向关系和横向关系排序</li>\n<li>初始化相关变量</li>\n<li>遍历水平关系的View</li>\n<li>遍历竖直关系的View</li>\n<li>baseline计算</li>\n<li><p>宽度和高度修正</p>","more":"</li>\n</ol>\n<h4 id=\"1-将内部View根据纵向关系和横向关系排序\"><a href=\"#1-将内部View根据纵向关系和横向关系排序\" class=\"headerlink\" title=\"1 将内部View根据纵向关系和横向关系排序\"></a>1 将内部View根据纵向关系和横向关系排序</h4><blockquote>\n<p>layout_toRightOf 为横向关系  layout_below为纵向关系</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//首先会根据mDirtyHierarchy的值判断是否需要将子View重新排序</span></div><div class=\"line\"><span class=\"keyword\">if</span> (mDirtyHierarchy) &#123;</div><div class=\"line\">    mDirtyHierarchy = <span class=\"keyword\">false</span>;</div><div class=\"line\">    sortChildren();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>相关调用方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//mDirtyHierarchy的值只有在requestLayout方法下被更新</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">requestLayout</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.requestLayout();</div><div class=\"line\">    mDirtyHierarchy = <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//sortChildren()方法对横向纵向关系的view的数组进行非空判断 用DependencyGraph进行判断</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sortChildren</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getChildCount();</div><div class=\"line\">    <span class=\"keyword\">if</span> (mSortedVerticalChildren == <span class=\"keyword\">null</span> || mSortedVerticalChildren.length != count) &#123;</div><div class=\"line\">        mSortedVerticalChildren = <span class=\"keyword\">new</span> View[count];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (mSortedHorizontalChildren == <span class=\"keyword\">null</span> || mSortedHorizontalChildren.length != count) &#123;</div><div class=\"line\">        mSortedHorizontalChildren = <span class=\"keyword\">new</span> View[count];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> DependencyGraph graph = mGraph;</div><div class=\"line\">    graph.clear();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        graph.add(getChildAt(i));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    graph.getSortedViews(mSortedVerticalChildren, RULES_VERTICAL);</div><div class=\"line\">    graph.getSortedViews(mSortedHorizontalChildren, RULES_HORIZONTAL);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>DependencyGraph的相关方法</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DependencyGraph</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * Adds a view to the graph.</div><div class=\"line\">         *</div><div class=\"line\">         * <span class=\"doctag\">@param</span> view The view to be added as a node to the graph.</div><div class=\"line\">         */</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//因为是图 根据view生成一个节点</span></div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id = view.getId();</div><div class=\"line\">            <span class=\"keyword\">final</span> Node node = Node.acquire(view);</div><div class=\"line\">            <span class=\"comment\">//如果是有效的id 则将该节点添加到List中</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (id != View.NO_ID) &#123;</div><div class=\"line\">                mKeyNodes.put(id, node);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            mNodes.add(node);</div><div class=\"line\">        &#125;     </div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">/**</div><div class=\"line\">           * Builds a sorted list of views. The sorting order depends on the dependencies</div><div class=\"line\">           * between the view. For instance, if view C needs view A to be processed first</div><div class=\"line\">           * and view A needs view B to be processed first, the dependency graph</div><div class=\"line\">           * is: B -&gt; A -&gt; C. The sorted array will contain views B, A and C in this order.</div><div class=\"line\">           *</div><div class=\"line\">           * <span class=\"doctag\">@param</span> sorted The sorted list of views. The length of this array must</div><div class=\"line\">           *        be equal to getChildCount().</div><div class=\"line\">           * <span class=\"doctag\">@param</span> rules The list of rules to take into account.</div><div class=\"line\">           */</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getSortedViews</span><span class=\"params\">(View[] sorted, <span class=\"keyword\">int</span>... rules)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//当前View找不到其它的可依赖的View时  作为root节点</span></div><div class=\"line\">              <span class=\"keyword\">final</span> ArrayDeque&lt;Node&gt; roots = findRoots(rules);</div><div class=\"line\">              <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">              Node node;</div><div class=\"line\">              <span class=\"comment\">//读取root的下一个node</span></div><div class=\"line\">              <span class=\"keyword\">while</span> ((node = roots.pollLast()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  <span class=\"keyword\">final</span> View view = node.view;</div><div class=\"line\">                  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> key = view.getId();</div><div class=\"line\"></div><div class=\"line\">              <span class=\"comment\">//将符合规则的View加到 sorted中</span></div><div class=\"line\"></div><div class=\"line\">                  sorted[index++] = view;</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"keyword\">final</span> ArrayMap&lt;Node, DependencyGraph&gt; dependents = node.dependents;</div><div class=\"line\">                  <span class=\"comment\">//dependents 依赖该node的node  (A C依赖B 则B的dependents中存A C)</span></div><div class=\"line\">                  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = dependents.size();</div><div class=\"line\">                  <span class=\"comment\">//遍历所有依赖自己的node</span></div><div class=\"line\">                  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">                      <span class=\"keyword\">final</span> Node dependent = dependents.keyAt(i);</div><div class=\"line\">                      <span class=\"comment\">//dependencies 是被依赖的的node的规则和node(A 依赖 B D 则dependencies存有B D )</span></div><div class=\"line\">                      <span class=\"keyword\">final</span> SparseArray&lt;Node&gt; dependencies = dependent.dependencies;</div><div class=\"line\"></div><div class=\"line\">                      <span class=\"comment\">//移除当前node和dependencies的依赖关系</span></div><div class=\"line\">                      dependencies.remove(key);</div><div class=\"line\">                      <span class=\"comment\">//如果解除依赖后没有其它依赖 则将该node也视为rootNode</span></div><div class=\"line\">                      <span class=\"keyword\">if</span> (dependencies.size() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                          roots.add(dependent);</div><div class=\"line\">                      &#125;</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (index &lt; sorted.length) &#123;</div><div class=\"line\">                  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Circular dependencies cannot exist in RelativeLayout\"</span>);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>eg: A依赖B B依赖C 首先存入C 因为不依赖任何其它的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Finds the roots of the graph. A root is a node with no dependency and</div><div class=\"line\"> * with [0..n] dependents.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> rulesFilter The list of rules to consider when building the</div><div class=\"line\"> *        dependencies</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@return</span> A list of node, each being a root of the graph</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ArrayDeque&lt;Node&gt; <span class=\"title\">findRoots</span><span class=\"params\">(<span class=\"keyword\">int</span>[] rulesFilter)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//keyNodes为nodelist</span></div><div class=\"line\">    <span class=\"keyword\">final</span> SparseArray&lt;Node&gt; keyNodes = mKeyNodes;</div><div class=\"line\">    <span class=\"keyword\">final</span> ArrayList&lt;Node&gt; nodes = mNodes;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = nodes.size();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//初始化依赖该node的node和该node依赖的node相关参数</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node node = nodes.get(i);</div><div class=\"line\">        node.dependents.clear();</div><div class=\"line\">        node.dependencies.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//遍历所有node  存入当前view和他所依赖的关系</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node node = nodes.get(i);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> LayoutParams layoutParams = (LayoutParams) node.view.getLayoutParams();</div><div class=\"line\">        <span class=\"comment\">//取出当前View所有的依赖关系</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] rules = layoutParams.mRules;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> rulesCount = rulesFilter.length;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//遍历当前View所有的</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; rulesCount; j++) &#123;</div><div class=\"line\">          <span class=\"comment\">//rule对应被依赖view的id</span></div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> rule = rules[rulesFilter[j]];</div><div class=\"line\">            <span class=\"keyword\">if</span> (rule &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">//找到被依赖的node</span></div><div class=\"line\">                <span class=\"keyword\">final</span> Node dependency = keyNodes.get(rule);</div><div class=\"line\">                <span class=\"comment\">//跳过空view和本身</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (dependency == <span class=\"keyword\">null</span> || dependency == node) &#123;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//添加依赖被依赖的node</span></div><div class=\"line\">                dependency.dependents.put(node, <span class=\"keyword\">this</span>);</div><div class=\"line\">                node.dependencies.put(rule, dependency);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> ArrayDeque&lt;Node&gt; roots = mRoots;</div><div class=\"line\">    roots.clear();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 再次遍历  如果该node的依赖关系为0 即该view不依赖任何view 则视为rootView</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node node = nodes.get(i);</div><div class=\"line\">        <span class=\"keyword\">if</span> (node.dependencies.size() == <span class=\"number\">0</span>) roots.addLast(node);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> roots;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-初始化相关变量\"><a href=\"#2-初始化相关变量\" class=\"headerlink\" title=\"2 初始化相关变量\"></a>2 初始化相关变量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> myWidth = -<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> myHeight = -<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> width = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> height = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果不是UNSPECIFIED模式 则将widthSize赋值于myWidth</span></div><div class=\"line\"><span class=\"keyword\">if</span> (widthMode != MeasureSpec.UNSPECIFIED) &#123;</div><div class=\"line\">    myWidth = widthSize;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 如果不是UNSPECIFIED模式 则将heightSize赋值于myHeight</span></div><div class=\"line\"><span class=\"keyword\">if</span> (heightMode != MeasureSpec.UNSPECIFIED) &#123;</div><div class=\"line\">    myHeight = heightSize;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//如果是EXACTLY模式 则将myWidth和myHeight记录</span></div><div class=\"line\"><span class=\"keyword\">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">    width = myWidth;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (heightMode == MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">    height = myHeight;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">View ignore = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"comment\">//判断是否为Start 和  top 确定左上角坐标</span></div><div class=\"line\"><span class=\"keyword\">int</span> gravity = mGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> horizontalGravity = gravity != Gravity.START &amp;&amp; gravity != <span class=\"number\">0</span>;</div><div class=\"line\">gravity = mGravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> verticalGravity = gravity != Gravity.TOP &amp;&amp; gravity != <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> left = Integer.MAX_VALUE;</div><div class=\"line\"><span class=\"keyword\">int</span> top = Integer.MAX_VALUE;</div><div class=\"line\"><span class=\"keyword\">int</span> right = Integer.MIN_VALUE;</div><div class=\"line\"><span class=\"keyword\">int</span> bottom = Integer.MIN_VALUE;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">boolean</span> offsetHorizontalAxis = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"keyword\">boolean</span> offsetVerticalAxis = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"comment\">// 记录ignore的view</span></div><div class=\"line\"><span class=\"keyword\">if</span> ((horizontalGravity || verticalGravity) &amp;&amp; mIgnoreGravity != View.NO_ID) &#123;</div><div class=\"line\">    ignore = findViewById(mIgnoreGravity);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//宽度个高度是否为warp模式</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isWrapContentWidth = widthMode != MeasureSpec.EXACTLY;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isWrapContentHeight = heightMode != MeasureSpec.EXACTLY;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//在计算和分配的子View的坐标的时候 需要用到父VIew的尺寸 但是暂时无法拿到准确值(待完成下面操作)</span></div><div class=\"line\"><span class=\"comment\">//先使用默认值代替 在计算后 用偏移量更新真是坐标</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</div><div class=\"line\"><span class=\"keyword\">if</span> (isLayoutRtl() &amp;&amp; myWidth == -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">    myWidth = DEFAULT_WIDTH;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-遍历水平关系的View\"><a href=\"#3-遍历水平关系的View\" class=\"headerlink\" title=\"3  遍历水平关系的View\"></a>3  遍历水平关系的View</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">View[] views = mSortedHorizontalChildren;</div><div class=\"line\"><span class=\"keyword\">int</span> count = views.length;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">    View child = views[i];</div><div class=\"line\">    <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">        LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">        <span class=\"comment\">//根据方向获得子View中设置的规则</span></div><div class=\"line\">        <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</div><div class=\"line\">        <span class=\"comment\">//将左右方向规则转换为左右的坐标</span></div><div class=\"line\">        applyHorizontalSizeRules(params, myWidth, rules);</div><div class=\"line\">        <span class=\"comment\">//测算水平方向的子View的尺寸</span></div><div class=\"line\">        measureChildHorizontal(child, params, myWidth, myHeight);</div><div class=\"line\">        <span class=\"comment\">//确定水平方向子View的位置</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (positionChildHorizontal(child, params, myWidth, isWrapContentWidth)) &#123;</div><div class=\"line\">            offsetHorizontalAxis = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>相关方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">applyHorizontalSizeRules</span><span class=\"params\">(LayoutParams childParams, <span class=\"keyword\">int</span> myWidth, <span class=\"keyword\">int</span>[] rules)</span> </span>&#123;</div><div class=\"line\">    RelativeLayout.LayoutParams anchorParams;</div><div class=\"line\">    childParams.mLeft = VALUE_NOT_SET;</div><div class=\"line\">    childParams.mRight = VALUE_NOT_SET;</div><div class=\"line\">    <span class=\"comment\">//得到当前子View的layout_toLeftOf属性对应的View</span></div><div class=\"line\">    anchorParams = getRelatedViewParams(rules, LEFT_OF);</div><div class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">//如果这个属性存在 则当前子View的右坐标是layout_toLeftOf对应的view的左坐标减去对应view的marginLeft的值和自身marginRight的值</span></div><div class=\"line\">        childParams.mRight = anchorParams.mLeft - (anchorParams.leftMargin +</div><div class=\"line\">                childParams.rightMargin);</div><div class=\"line\">    <span class=\"comment\">//如果alignWithParent为true alignWithParent取alignWithParentIfMissing</span></div><div class=\"line\">    <span class=\"comment\">//如果layout_toLeftOf的view为空 或者gone 则将RelativeLayout当做被依赖的对象</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[LEFT_OF] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//如果父容器RelativeLayout的宽度大于0</span></div><div class=\"line\">        <span class=\"comment\">//则子View的右坐标为 父RelativeLayout的宽度减去 mPaddingRight 和自身的marginRight</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (myWidth &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//类似的方法 得到左坐标(通过参数RIGHT_OF)</span></div><div class=\"line\">    anchorParams = getRelatedViewParams(rules, RIGHT_OF);</div><div class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        childParams.mLeft = anchorParams.mRight + (anchorParams.rightMargin +</div><div class=\"line\">                childParams.leftMargin);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[RIGHT_OF] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        childParams.mLeft = mPaddingLeft + childParams.leftMargin;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//类似的方法 得到左坐标 (通过参数ALIGN_LEFT)</span></div><div class=\"line\">    anchorParams = getRelatedViewParams(rules, ALIGN_LEFT);</div><div class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        childParams.mLeft = anchorParams.mLeft + childParams.leftMargin;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[ALIGN_LEFT] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        childParams.mLeft = mPaddingLeft + childParams.leftMargin;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//类似的方法 得到右坐标 (通过参数ALIGN_RIGHT)</span></div><div class=\"line\">    anchorParams = getRelatedViewParams(rules, ALIGN_RIGHT);</div><div class=\"line\">    <span class=\"keyword\">if</span> (anchorParams != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        childParams.mRight = anchorParams.mRight - childParams.rightMargin;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childParams.alignWithParent &amp;&amp; rules[ALIGN_RIGHT] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (myWidth &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//根据ALIGN_PARENT_LEFT 将自己放到父RelativeLayout的左边</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> != rules[ALIGN_PARENT_LEFT]) &#123;</div><div class=\"line\">        childParams.mLeft = mPaddingLeft + childParams.leftMargin;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//根据ALIGN_PARENT_RIGHT 将自己放到父RelativeLayout的右边</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> != rules[ALIGN_PARENT_RIGHT]) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (myWidth &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            childParams.mRight = myWidth - mPaddingRight - childParams.rightMargin;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildHorizontal</span><span class=\"params\">(View child, LayoutParams params, <span class=\"keyword\">int</span> myWidth, <span class=\"keyword\">int</span> myHeight)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//获得child的宽度MeasureSpec</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(params.mLeft, params.mRight,</div><div class=\"line\">            params.width, params.leftMargin, params.rightMargin, mPaddingLeft, mPaddingRight,</div><div class=\"line\">            myWidth);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec;</div><div class=\"line\">    <span class=\"comment\">//在低于4.2的时候 mAllowBrokenMeasureSpecs为true</span></div><div class=\"line\">    <span class=\"comment\">//当myHeight &lt; 0 时 则根据父RelativeLayout设置其MeasureSpec模式</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (myHeight &lt; <span class=\"number\">0</span> &amp;&amp; !mAllowBrokenMeasureSpecs) &#123;</div><div class=\"line\">        <span class=\"comment\">//如果父RelativeLayout的height大于0  则 设置子view的MeasureSpec模式为EXACTLY</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (params.height &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(</div><div class=\"line\">                    params.height, MeasureSpec.EXACTLY);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//反之 如果其小于0  则设置子View的MeasureSpec为UNSPECIFIED</span></div><div class=\"line\">            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(<span class=\"number\">0</span>, MeasureSpec.UNSPECIFIED);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//当当前myHeight &gt;= 0</span></div><div class=\"line\">      <span class=\"comment\">//判断当前高度是否与父RelativeLayout高度相同 设置heightMode</span></div><div class=\"line\">      <span class=\"comment\">//根据maxHeight 和heightMode设置子View的MeasureSpec模式</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maxHeight;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mMeasureVerticalWithPaddingMargin) &#123;</div><div class=\"line\">            maxHeight = Math.max(<span class=\"number\">0</span>, myHeight - mPaddingTop - mPaddingBottom</div><div class=\"line\">                    - params.topMargin - params.bottomMargin);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            maxHeight = Math.max(<span class=\"number\">0</span>, myHeight);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode;</div><div class=\"line\">        <span class=\"keyword\">if</span> (params.height == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">            heightMode = MeasureSpec.EXACTLY;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            heightMode = MeasureSpec.AT_MOST;</div><div class=\"line\">        &#125;</div><div class=\"line\">        childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(maxHeight, heightMode);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//获得了子View的WidthMeasureSpec和HeightMeasureSpec</span></div><div class=\"line\">    <span class=\"comment\">//子View可以通过measure方法获取自身的size</span></div><div class=\"line\">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * Get a measure spec that accounts for all of the constraints on this view.</div><div class=\"line\">    * This includes size constraints imposed by the RelativeLayout as well as</div><div class=\"line\">    * the View's desired dimension.</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> childStart The left or top field of the child's layout params</div><div class=\"line\">    * <span class=\"doctag\">@param</span> childEnd The right or bottom field of the child's layout params</div><div class=\"line\">    * <span class=\"doctag\">@param</span> childSize The child's desired size (the width or height field of</div><div class=\"line\">    *        the child's layout params)</div><div class=\"line\">    * <span class=\"doctag\">@param</span> startMargin The left or top margin</div><div class=\"line\">    * <span class=\"doctag\">@param</span> endMargin The right or bottom margin</div><div class=\"line\">    * <span class=\"doctag\">@param</span> startPadding mPaddingLeft or mPaddingTop</div><div class=\"line\">    * <span class=\"doctag\">@param</span> endPadding mPaddingRight or mPaddingBottom</div><div class=\"line\">    * <span class=\"doctag\">@param</span> mySize The width or height of this view (the RelativeLayout)</div><div class=\"line\">    * <span class=\"doctag\">@return</span> MeasureSpec for the child</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> childStart, <span class=\"keyword\">int</span> childEnd,</div><div class=\"line\">           <span class=\"keyword\">int</span> childSize, <span class=\"keyword\">int</span> startMargin, <span class=\"keyword\">int</span> endMargin, <span class=\"keyword\">int</span> startPadding,</div><div class=\"line\">           <span class=\"keyword\">int</span> endPadding, <span class=\"keyword\">int</span> mySize)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> childSpecMode = <span class=\"number\">0</span>;</div><div class=\"line\">       <span class=\"keyword\">int</span> childSpecSize = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isUnspecified = mySize &lt; <span class=\"number\">0</span>;</div><div class=\"line\">       <span class=\"comment\">//如果父RelativeLayout宽度小于0 版本号不小于4.2</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (isUnspecified &amp;&amp; !mAllowBrokenMeasureSpecs) &#123;</div><div class=\"line\">            <span class=\"comment\">//如果子View的左边距和右边距都不为VALUE_NOT_SET</span></div><div class=\"line\">            <span class=\"comment\">//且右边距坐标大于左边距坐标 则将其差当做宽度赋予View 设置模式为EXACTLY</span></div><div class=\"line\">            <span class=\"comment\">//VALUE_NOT_SET = Integer.MIN_VALUE</span></div><div class=\"line\">            <span class=\"comment\">/**</div><div class=\"line\">             * Constant for the minimum &#123;<span class=\"doctag\">@code</span> int&#125; value, -2&lt;sup&gt;31&lt;/sup&gt;.</div><div class=\"line\">             */</span></div><div class=\"line\">            <span class=\"comment\">//public static final int MIN_VALUE = 0x80000000;</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (childStart != VALUE_NOT_SET &amp;&amp; childEnd != VALUE_NOT_SET) &#123;</div><div class=\"line\">               childSpecSize = Math.max(<span class=\"number\">0</span>, childEnd - childStart);</div><div class=\"line\">               childSpecMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childSize &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               <span class=\"comment\">// 如果childSpecSize &gt;= 0 则赋值于childSpecSize</span></div><div class=\"line\">               <span class=\"comment\">//同样设置模式为EXACTLY</span></div><div class=\"line\">               childSpecSize = childSize;</div><div class=\"line\">               childSpecMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               <span class=\"comment\">// 都不满足则设置模式为UNSPECIFIED</span></div><div class=\"line\">               childSpecSize = <span class=\"number\">0</span>;</div><div class=\"line\">               childSpecMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 计算 开始和结束相关</span></div><div class=\"line\">       <span class=\"keyword\">int</span> tempStart = childStart;</div><div class=\"line\">       <span class=\"keyword\">int</span> tempEnd = childEnd;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//如果没有指定start值 则默认赋予 padding和merage的值</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (tempStart == VALUE_NOT_SET) &#123;</div><div class=\"line\">           tempStart = startPadding + startMargin;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"comment\">//同上</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (tempEnd == VALUE_NOT_SET) &#123;</div><div class=\"line\">           tempEnd = mySize - endPadding - endMargin;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//指定最大可提供的大小</span></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maxAvailable = tempEnd - tempStart;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (childStart != VALUE_NOT_SET &amp;&amp; childEnd != VALUE_NOT_SET) &#123;</div><div class=\"line\">           <span class=\"comment\">//如果Start和End都是有效值 根据isUnspecified设置specMode为UNSPECIFIED或EXACTLY</span></div><div class=\"line\">           <span class=\"comment\">//并将设置对应的size</span></div><div class=\"line\">           childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;</div><div class=\"line\">           childSpecSize = Math.max(<span class=\"number\">0</span>, maxAvailable);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"comment\">//反之 判断childSize的相关值</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (childSize &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               <span class=\"comment\">//设置模式为EXACTLY</span></div><div class=\"line\">               <span class=\"comment\">//判断maxAvailable和childSize情况 取较大值设置为childSpecSize</span></div><div class=\"line\">               childSpecMode = MeasureSpec.EXACTLY;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">if</span> (maxAvailable &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                   <span class=\"comment\">// We have a maximum size in this dimension.</span></div><div class=\"line\">                   childSpecSize = Math.min(maxAvailable, childSize);</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   <span class=\"comment\">// We can grow in this dimension.</span></div><div class=\"line\">                   childSpecSize = childSize;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childSize == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">               <span class=\"comment\">//如果子View是match模式 参照isUnspecified设置相关</span></div><div class=\"line\">               childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;</div><div class=\"line\">               childSpecSize = Math.max(<span class=\"number\">0</span>, maxAvailable);</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childSize == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">               <span class=\"comment\">//在wrap进行设置</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (maxAvailable &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                   <span class=\"comment\">// We have a maximum size in this dimension.</span></div><div class=\"line\">                   childSpecMode = MeasureSpec.AT_MOST;</div><div class=\"line\">                   childSpecSize = maxAvailable;</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   <span class=\"comment\">// We can grow in this dimension. Child can be as big as it</span></div><div class=\"line\">                   <span class=\"comment\">// wants.</span></div><div class=\"line\">                   childSpecMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">                   childSpecSize = <span class=\"number\">0</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(childSpecSize, childSpecMode);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>以上 完成了View的第一次测量  确定了View的大小 然后根据大小觉得把子view放在父RelativeLayout中的位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">positionChildHorizontal</span><span class=\"params\">(View child, LayoutParams params, <span class=\"keyword\">int</span> myWidth,</div><div class=\"line\">        <span class=\"keyword\">boolean</span> wrapContent)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//获取RelativeLayout的布局方向</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</div><div class=\"line\">    <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (params.mLeft == VALUE_NOT_SET &amp;&amp; params.mRight != VALUE_NOT_SET) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果右边界有效 左边界无效 根据右边界计算出左边界</span></div><div class=\"line\">        params.mLeft = params.mRight - child.getMeasuredWidth();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params.mLeft != VALUE_NOT_SET &amp;&amp; params.mRight == VALUE_NOT_SET) &#123;</div><div class=\"line\">        <span class=\"comment\">// 同上反之</span></div><div class=\"line\">        params.mRight = params.mLeft + child.getMeasuredWidth();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params.mLeft == VALUE_NOT_SET &amp;&amp; params.mRight == VALUE_NOT_SET) &#123;</div><div class=\"line\">        <span class=\"comment\">//都无效的时候</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (rules[CENTER_IN_PARENT] != <span class=\"number\">0</span> || rules[CENTER_HORIZONTAL] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          <span class=\"comment\">//设置了CENTER_IN_PARENT或者 CENTER_HORIZONTAL的情况下</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!wrapContent) &#123;</div><div class=\"line\">              <span class=\"comment\">//非wrap情况下</span></div><div class=\"line\">              <span class=\"comment\">//把子View水平中心固定在RelativeLayout的中心</span></div><div class=\"line\">                centerHorizontal(child, params, myWidth);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               <span class=\"comment\">//左边距为padding+margin</span></div><div class=\"line\">               <span class=\"comment\">//右边距为左边距加上测量宽度</span></div><div class=\"line\">                params.mLeft = mPaddingLeft + params.leftMargin;</div><div class=\"line\">                params.mRight = params.mLeft + child.getMeasuredWidth();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//RTL右到左 布局方向</span></div><div class=\"line\">            <span class=\"comment\">//LTR\u0010左到右 布局方向</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (isLayoutRtl()) &#123;</div><div class=\"line\">                params.mRight = myWidth - mPaddingRight- params.rightMargin;</div><div class=\"line\">                params.mLeft = params.mRight - child.getMeasuredWidth();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                params.mLeft = mPaddingLeft + params.leftMargin;</div><div class=\"line\">                params.mRight = params.mLeft + child.getMeasuredWidth();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> rules[ALIGN_PARENT_END] != <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">//当为CENTER_IN_PARENT  CENTER_HORIZONTAL ALIGN_PARENT_END三种情况之一时返回True</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-遍历竖直关系的View\"><a href=\"#4-遍历竖直关系的View\" class=\"headerlink\" title=\"4 遍历竖直关系的View\"></a>4 遍历竖直关系的View</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">           <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">               <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">              <span class=\"comment\">//将竖直方向规则转换为坐标</span></div><div class=\"line\">               applyVerticalSizeRules(params, myHeight, child.getBaseline());</div><div class=\"line\">               <span class=\"comment\">//测量子View</span></div><div class=\"line\">               measureChild(child, params, myWidth, myHeight);</div><div class=\"line\">               <span class=\"comment\">//确定竖直方向子View的位置</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (positionChildVertical(child, params, myHeight, isWrapContentHeight)) &#123;</div><div class=\"line\">                   offsetVerticalAxis = <span class=\"keyword\">true</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">              <span class=\"comment\">//首先判断是否为wrap模式</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (isWrapContentWidth) &#123;</div><div class=\"line\">                 <span class=\"comment\">//根据RTL或者LTR和版本进行区分</span></div><div class=\"line\">                 <span class=\"comment\">//Build.VERSION_CODES.KITKAT = 19</span></div><div class=\"line\">                 <span class=\"comment\">//主要对margin进行处理</span></div><div class=\"line\">                   <span class=\"keyword\">if</span> (isLayoutRtl()) &#123;</div><div class=\"line\">                       <span class=\"keyword\">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">                           width = Math.max(width, myWidth - params.mLeft);</div><div class=\"line\">                       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                           width = Math.max(width, myWidth - params.mLeft - params.leftMargin);</div><div class=\"line\">                       &#125;</div><div class=\"line\">                   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                       <span class=\"keyword\">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">                           width = Math.max(width, params.mRight);</div><div class=\"line\">                       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                           width = Math.max(width, params.mRight + params.rightMargin);</div><div class=\"line\">                       &#125;</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">if</span> (isWrapContentHeight) &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">                       height = Math.max(height, params.mBottom);</div><div class=\"line\">                   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                       height = Math.max(height, params.mBottom + params.bottomMargin);</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">if</span> (child != ignore || verticalGravity) &#123;</div><div class=\"line\">                   left = Math.min(left, params.mLeft - params.leftMargin);</div><div class=\"line\">                   top = Math.min(top, params.mTop - params.topMargin);</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">if</span> (child != ignore || horizontalGravity) &#123;</div><div class=\"line\">                   right = Math.max(right, params.mRight + params.rightMargin);</div><div class=\"line\">                   bottom = Math.max(bottom, params.mBottom + params.bottomMargin);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h4 id=\"5-baseline计算\"><a href=\"#5-baseline计算\" class=\"headerlink\" title=\"5 baseline计算\"></a>5 baseline计算</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Use the top-start-most laid out view as the baseline. RTL offsets are</span></div><div class=\"line\"><span class=\"comment\">// applied later, so we can use the left-most edge as the starting edge.</span></div><div class=\"line\">    View baselineView = <span class=\"keyword\">null</span>;</div><div class=\"line\">    LayoutParams baselineParams = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> LayoutParams childParams = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">            <span class=\"keyword\">if</span> (baselineView == <span class=\"keyword\">null</span> || baselineParams == <span class=\"keyword\">null</span></div><div class=\"line\">                    || compareLayoutPosition(childParams, baselineParams) &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                baselineView = child;</div><div class=\"line\">                baselineParams = childParams;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    mBaselineView = baselineView;</div></pre></td></tr></table></figure>\n<h4 id=\"6-宽度和高度修正\"><a href=\"#6-宽度和高度修正\" class=\"headerlink\" title=\"6 宽度和高度修正\"></a>6 宽度和高度修正</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//如何是wrap模式</span></div><div class=\"line\"><span class=\"keyword\">if</span> (isWrapContentWidth) &#123;</div><div class=\"line\">        width += mPaddingRight;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (mLayoutParams != <span class=\"keyword\">null</span> &amp;&amp; mLayoutParams.width &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            width = Math.max(width, mLayoutParams.width);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        width = Math.max(width, getSuggestedMinimumWidth());</div><div class=\"line\">        width = resolveSize(width, widthMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//在得到最后的width之后 对依赖RelativeLayout的子View添上偏移量</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (offsetHorizontalAxis) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">                <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">                    <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</div><div class=\"line\">                    <span class=\"comment\">//对CENTER_IN_PARENT或者CENTER_HORIZONTAL的子View重测</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (rules[CENTER_IN_PARENT] != <span class=\"number\">0</span> || rules[CENTER_HORIZONTAL] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        centerHorizontal(child, params, width);</div><div class=\"line\">                    <span class=\"comment\">//对ALIGN_PARENT_RIGHT重测</span></div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rules[ALIGN_PARENT_RIGHT] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = child.getMeasuredWidth();</div><div class=\"line\">                        params.mLeft = width - mPaddingRight - childWidth;</div><div class=\"line\">                        params.mRight = params.mLeft + childWidth;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//同上</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (isWrapContentHeight) &#123;</div><div class=\"line\">        height += mPaddingBottom;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (mLayoutParams != <span class=\"keyword\">null</span> &amp;&amp; mLayoutParams.height &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            height = Math.max(height, mLayoutParams.height);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        height = Math.max(height, getSuggestedMinimumHeight());</div><div class=\"line\">        height = resolveSize(height, heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (offsetVerticalAxis) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">                <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">                    <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] rules = params.getRules(layoutDirection);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (rules[CENTER_IN_PARENT] != <span class=\"number\">0</span> || rules[CENTER_VERTICAL] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        centerVertical(child, params, height);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rules[ALIGN_PARENT_BOTTOM] != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</div><div class=\"line\">                        params.mTop = height - mPaddingBottom - childHeight;</div><div class=\"line\">                        params.mBottom = params.mTop + childHeight;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//根据gravity再次修正</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (horizontalGravity || verticalGravity) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Rect selfBounds = mSelfBounds;</div><div class=\"line\">        selfBounds.set(mPaddingLeft, mPaddingTop, width - mPaddingRight,</div><div class=\"line\">                height - mPaddingBottom);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> Rect contentBounds = mContentBounds;</div><div class=\"line\">        Gravity.apply(mGravity, right - left, bottom - top, selfBounds, contentBounds,</div><div class=\"line\">                layoutDirection);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> horizontalOffset = contentBounds.left - left;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> verticalOffset = contentBounds.top - top;</div><div class=\"line\">        <span class=\"keyword\">if</span> (horizontalOffset != <span class=\"number\">0</span> || verticalOffset != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">                <span class=\"keyword\">if</span> (child.getVisibility() != GONE &amp;&amp; child != ignore) &#123;</div><div class=\"line\">                    <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">                    <span class=\"keyword\">if</span> (horizontalGravity) &#123;</div><div class=\"line\">                        params.mLeft += horizontalOffset;</div><div class=\"line\">                        params.mRight += horizontalOffset;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (verticalGravity) &#123;</div><div class=\"line\">                        params.mTop += verticalOffset;</div><div class=\"line\">                        params.mBottom += verticalOffset;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//如果是RTL(右到左显示)则再次修改</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (isLayoutRtl()) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> offsetWidth = myWidth - width;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View child = views[i];</div><div class=\"line\">            <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class=\"line\">                params.mLeft -= offsetWidth;</div><div class=\"line\">                params.mRight -= offsetWidth;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"简单总结\"><a href=\"#简单总结\" class=\"headerlink\" title=\"简单总结\"></a>简单总结</h4><p>RelativeLayout更加关注子View的left right top bottom值 并且优先级高于width和height</p>\n<h3 id=\"RelativeLayout的layout过程\"><a href=\"#RelativeLayout的layout过程\" class=\"headerlink\" title=\"RelativeLayout的layout过程\"></a>RelativeLayout的layout过程</h3><p>对于RelativeLayout来的 layout过程更多的根据子View的left right top bottom值来设定位置<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//  The layout has actually already been performed and the positions</span></div><div class=\"line\">    <span class=\"comment\">//  cached.  Apply the cached values to the children.</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getChildCount();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        View child = getChildAt(i);</div><div class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">            RelativeLayout.LayoutParams st =</div><div class=\"line\">                    (RelativeLayout.LayoutParams) child.getLayoutParams();</div><div class=\"line\">            child.layout(st.mLeft, st.mTop, st.mRight, st.mBottom);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"RelativeLayout的draw过程\"><a href=\"#RelativeLayout的draw过程\" class=\"headerlink\" title=\"RelativeLayout的draw过程\"></a>RelativeLayout的draw过程</h3><p>RelativeLayout作为ViewGroup的子类 因为其性质原因  没有对draw过程进行修改</p>\n<p>以上</p>"},{"title":"Android Tools 之一 Hierarchy Viewer","date":"2017-02-03T10:02:56.000Z","_content":"# Android Tools 之一 Hierarchy Viewer\n\n>本系列旨在介绍一些被忽略的优质工具 毕竟 能被当做自带的工具总有些做的比较好的地方不是\n\n## Hierarchy Viewer\n\nHierarchy Viewer是一个可以用来查看View的使用工具 android sdk中自带\n\n[Optimizing Your UI -官方网站 需科学上网](https://developer.android.com/studio/profile/optimize-ui.html#lint)\n\n### 启动Hierarchy Viewer\n\nhierarchyviewer工具在sdk/tools路径下\n<!-- more -->\n\n再次打开后会出现如下提示\n```\nThe standalone version of hieararchyviewer is deprecated.\nPlease use Android Device Monitor (tools/monitor) instead.\n```\n主要想说的就是 单独使用hieararchyviewer已经不被建议  建议使用Android Device Monitor(Android Device Monitor的相关使用后续会详细介绍)\n\n直接运行monitor或者在在Android Studio -> tools -> android -> Android Device Monitor中将hieararchyviewer工具打开\n\n**以下对hieararchyviewer工具进行操作均为直接打开hieararchyviewer工具 和通过monitor工具打开的hieararchyviewer的UI可能略有不同  以直接打开hieararchyviewer工具操作为准**\n\n\n#### 无法正常使用\n\n在连接过程中可能遇到无法连接到手机的问题 详情参考以下文章\n\n[HierachyViewer无法连接真机调试](http://blog.csdn.net/yafeng_0306/article/details/17224001)\n\n[HierachyViewer无法连接真机调试详解](http://maider.blog.sohu.com/255448342.html)\n\n### 使用Hierarchy Viewer\n\n![Hierarchy Viewer 1-1](http://i1.piimg.com/567571/95498e5576c157e1.png)\n\n成功连接后会出现如上页面\n\n当前页面正在显示的进程被加粗显示\n\n(那些看着是空的位置 进入后会显示通知栏中的View布局)\n\n选择想要查看的进程后进入 Load View Hierarchy页面\n\n![Hierarchy Viewer 1-2](http://p1.bpimg.com/567571/08b13a1f4b3c6b97.png)\n\n下面对不同部分分别介绍一下\n\n![Hierarchy Viewer 1-3](http://i1.piimg.com/567571/ed16834323343ea2.png)\n\n1. Save as PNG: 把这个布局的层级另存为png格式\n2. Capture Layers: 把这个布局的层级另存为psd格式\n\n  可以查看各层级的情况\n\n  ![Capture Layers](http://i1.piimg.com/567571/62b7d9584993e3a1.png)\n\n3. Load View Hierarchy: 重新载入这个view层级图\n4. Evaluate Contrast: 查看层级布局的具体情况\n\n  ![Evaluate Contrast](http://i1.piimg.com/567571/594698903a3e6fa1.png)\n\n5. Display View: 在单独的一个窗口中显示所选择的view\n6. Invalidate Layout: 重绘当前窗口\n7. Request Layout: 对当前view进行layout\n8. Dump DisplayList: 使当前view输出它的显示列表到logcat中\n9. Dump Theme: 下载这个view主题的资源\n10. Profile Node: 得到measure，layout，draw的性能指示器\n\n![Hierarchy Viewer 1-6](http://p1.bpimg.com/567571/b7a6efcd6d505116.png)\n\n选取某个view节点可以查看选取的View的详情\n\n![Hierarchy Viewer 1-6](http://i1.piimg.com/567571/3b66b1216e20e81d.png)\n\n关于View的渲染机制可以参考一下本人关于android View相关机制解析的文章 [Android View 相关源码分析之三 View的绘制过程 ](http://www.jianshu.com/p/8f3e45663d06)\n\n关于对应渲染时间的速度中  我么知道View绘制分为measure layout 和draw三个过程 三个点分布对应以上三个过程 分为绿 黄 红三个颜色  绿色代表该View在本view tree中速度是前50% 黄色表示后50% 而红色表示是花费时间最长的\n\n还记得最开始使用Hierarchy Viewer中上方有Inspect screenshot的按钮 可以查看当前Activity的像素情况\n\n![Inspect screenshot](http://p1.bqimg.com/567571/82cd3eeaf8663969.png)\n\n(层级十分的清晰 就不仔细解释了)\n\n解释下相关功能\n\n1. Save as PNG: 保存当前显示的页面为png格式\n2. Refresh Screenshot: 刷新像素视图和放大镜视图(右边那两个)\n3. Refresh Tree: 刷新View tree\n4. Load Overlay: 在右侧放大镜视图中中加载一个覆盖图(官网中没有给出详细的定义 主要根据相关介绍理解 略有偏差 欢迎指出)\n5. Show In Loupe: 在中间的像素视图中显示之前加载的图片\n6. Auto Refresh: 会根据下发设置的Refresh Rate的时间自动\n更新View tree\n\n\n以上\n","source":"_posts/HierarchyViewer.md","raw":"---\ntitle: Android Tools 之一 Hierarchy Viewer\ndate: 2017-02-03 18:02:56\ntags: [\"android\" , \"view\" , tools\" , \"Hierarchy Viewer\"]\ncategories: \"android\"\n---\n# Android Tools 之一 Hierarchy Viewer\n\n>本系列旨在介绍一些被忽略的优质工具 毕竟 能被当做自带的工具总有些做的比较好的地方不是\n\n## Hierarchy Viewer\n\nHierarchy Viewer是一个可以用来查看View的使用工具 android sdk中自带\n\n[Optimizing Your UI -官方网站 需科学上网](https://developer.android.com/studio/profile/optimize-ui.html#lint)\n\n### 启动Hierarchy Viewer\n\nhierarchyviewer工具在sdk/tools路径下\n<!-- more -->\n\n再次打开后会出现如下提示\n```\nThe standalone version of hieararchyviewer is deprecated.\nPlease use Android Device Monitor (tools/monitor) instead.\n```\n主要想说的就是 单独使用hieararchyviewer已经不被建议  建议使用Android Device Monitor(Android Device Monitor的相关使用后续会详细介绍)\n\n直接运行monitor或者在在Android Studio -> tools -> android -> Android Device Monitor中将hieararchyviewer工具打开\n\n**以下对hieararchyviewer工具进行操作均为直接打开hieararchyviewer工具 和通过monitor工具打开的hieararchyviewer的UI可能略有不同  以直接打开hieararchyviewer工具操作为准**\n\n\n#### 无法正常使用\n\n在连接过程中可能遇到无法连接到手机的问题 详情参考以下文章\n\n[HierachyViewer无法连接真机调试](http://blog.csdn.net/yafeng_0306/article/details/17224001)\n\n[HierachyViewer无法连接真机调试详解](http://maider.blog.sohu.com/255448342.html)\n\n### 使用Hierarchy Viewer\n\n![Hierarchy Viewer 1-1](http://i1.piimg.com/567571/95498e5576c157e1.png)\n\n成功连接后会出现如上页面\n\n当前页面正在显示的进程被加粗显示\n\n(那些看着是空的位置 进入后会显示通知栏中的View布局)\n\n选择想要查看的进程后进入 Load View Hierarchy页面\n\n![Hierarchy Viewer 1-2](http://p1.bpimg.com/567571/08b13a1f4b3c6b97.png)\n\n下面对不同部分分别介绍一下\n\n![Hierarchy Viewer 1-3](http://i1.piimg.com/567571/ed16834323343ea2.png)\n\n1. Save as PNG: 把这个布局的层级另存为png格式\n2. Capture Layers: 把这个布局的层级另存为psd格式\n\n  可以查看各层级的情况\n\n  ![Capture Layers](http://i1.piimg.com/567571/62b7d9584993e3a1.png)\n\n3. Load View Hierarchy: 重新载入这个view层级图\n4. Evaluate Contrast: 查看层级布局的具体情况\n\n  ![Evaluate Contrast](http://i1.piimg.com/567571/594698903a3e6fa1.png)\n\n5. Display View: 在单独的一个窗口中显示所选择的view\n6. Invalidate Layout: 重绘当前窗口\n7. Request Layout: 对当前view进行layout\n8. Dump DisplayList: 使当前view输出它的显示列表到logcat中\n9. Dump Theme: 下载这个view主题的资源\n10. Profile Node: 得到measure，layout，draw的性能指示器\n\n![Hierarchy Viewer 1-6](http://p1.bpimg.com/567571/b7a6efcd6d505116.png)\n\n选取某个view节点可以查看选取的View的详情\n\n![Hierarchy Viewer 1-6](http://i1.piimg.com/567571/3b66b1216e20e81d.png)\n\n关于View的渲染机制可以参考一下本人关于android View相关机制解析的文章 [Android View 相关源码分析之三 View的绘制过程 ](http://www.jianshu.com/p/8f3e45663d06)\n\n关于对应渲染时间的速度中  我么知道View绘制分为measure layout 和draw三个过程 三个点分布对应以上三个过程 分为绿 黄 红三个颜色  绿色代表该View在本view tree中速度是前50% 黄色表示后50% 而红色表示是花费时间最长的\n\n还记得最开始使用Hierarchy Viewer中上方有Inspect screenshot的按钮 可以查看当前Activity的像素情况\n\n![Inspect screenshot](http://p1.bqimg.com/567571/82cd3eeaf8663969.png)\n\n(层级十分的清晰 就不仔细解释了)\n\n解释下相关功能\n\n1. Save as PNG: 保存当前显示的页面为png格式\n2. Refresh Screenshot: 刷新像素视图和放大镜视图(右边那两个)\n3. Refresh Tree: 刷新View tree\n4. Load Overlay: 在右侧放大镜视图中中加载一个覆盖图(官网中没有给出详细的定义 主要根据相关介绍理解 略有偏差 欢迎指出)\n5. Show In Loupe: 在中间的像素视图中显示之前加载的图片\n6. Auto Refresh: 会根据下发设置的Refresh Rate的时间自动\n更新View tree\n\n\n以上\n","slug":"HierarchyViewer","published":1,"updated":"2017-02-03T10:05:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciypnag7n0000f8o9jt9voi4m","content":"<h1 id=\"Android-Tools-之一-Hierarchy-Viewer\"><a href=\"#Android-Tools-之一-Hierarchy-Viewer\" class=\"headerlink\" title=\"Android Tools 之一 Hierarchy Viewer\"></a>Android Tools 之一 Hierarchy Viewer</h1><blockquote>\n<p>本系列旨在介绍一些被忽略的优质工具 毕竟 能被当做自带的工具总有些做的比较好的地方不是</p>\n</blockquote>\n<h2 id=\"Hierarchy-Viewer\"><a href=\"#Hierarchy-Viewer\" class=\"headerlink\" title=\"Hierarchy Viewer\"></a>Hierarchy Viewer</h2><p>Hierarchy Viewer是一个可以用来查看View的使用工具 android sdk中自带</p>\n<p><a href=\"https://developer.android.com/studio/profile/optimize-ui.html#lint\" target=\"_blank\" rel=\"external\">Optimizing Your UI -官方网站 需科学上网</a></p>\n<h3 id=\"启动Hierarchy-Viewer\"><a href=\"#启动Hierarchy-Viewer\" class=\"headerlink\" title=\"启动Hierarchy Viewer\"></a>启动Hierarchy Viewer</h3><p>hierarchyviewer工具在sdk/tools路径下<br><a id=\"more\"></a></p>\n<p>再次打开后会出现如下提示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">The standalone version of hieararchyviewer is deprecated.</div><div class=\"line\">Please use Android Device Monitor (tools/monitor) instead.</div></pre></td></tr></table></figure></p>\n<p>主要想说的就是 单独使用hieararchyviewer已经不被建议  建议使用Android Device Monitor(Android Device Monitor的相关使用后续会详细介绍)</p>\n<p>直接运行monitor或者在在Android Studio -&gt; tools -&gt; android -&gt; Android Device Monitor中将hieararchyviewer工具打开</p>\n<p><strong>以下对hieararchyviewer工具进行操作均为直接打开hieararchyviewer工具 和通过monitor工具打开的hieararchyviewer的UI可能略有不同  以直接打开hieararchyviewer工具操作为准</strong></p>\n<h4 id=\"无法正常使用\"><a href=\"#无法正常使用\" class=\"headerlink\" title=\"无法正常使用\"></a>无法正常使用</h4><p>在连接过程中可能遇到无法连接到手机的问题 详情参考以下文章</p>\n<p><a href=\"http://blog.csdn.net/yafeng_0306/article/details/17224001\" target=\"_blank\" rel=\"external\">HierachyViewer无法连接真机调试</a></p>\n<p><a href=\"http://maider.blog.sohu.com/255448342.html\" target=\"_blank\" rel=\"external\">HierachyViewer无法连接真机调试详解</a></p>\n<h3 id=\"使用Hierarchy-Viewer\"><a href=\"#使用Hierarchy-Viewer\" class=\"headerlink\" title=\"使用Hierarchy Viewer\"></a>使用Hierarchy Viewer</h3><p><img src=\"http://i1.piimg.com/567571/95498e5576c157e1.png\" alt=\"Hierarchy Viewer 1-1\"></p>\n<p>成功连接后会出现如上页面</p>\n<p>当前页面正在显示的进程被加粗显示</p>\n<p>(那些看着是空的位置 进入后会显示通知栏中的View布局)</p>\n<p>选择想要查看的进程后进入 Load View Hierarchy页面</p>\n<p><img src=\"http://p1.bpimg.com/567571/08b13a1f4b3c6b97.png\" alt=\"Hierarchy Viewer 1-2\"></p>\n<p>下面对不同部分分别介绍一下</p>\n<p><img src=\"http://i1.piimg.com/567571/ed16834323343ea2.png\" alt=\"Hierarchy Viewer 1-3\"></p>\n<ol>\n<li>Save as PNG: 把这个布局的层级另存为png格式</li>\n<li><p>Capture Layers: 把这个布局的层级另存为psd格式</p>\n<p>可以查看各层级的情况</p>\n<p><img src=\"http://i1.piimg.com/567571/62b7d9584993e3a1.png\" alt=\"Capture Layers\"></p>\n</li>\n<li><p>Load View Hierarchy: 重新载入这个view层级图</p>\n</li>\n<li><p>Evaluate Contrast: 查看层级布局的具体情况</p>\n<p><img src=\"http://i1.piimg.com/567571/594698903a3e6fa1.png\" alt=\"Evaluate Contrast\"></p>\n</li>\n<li><p>Display View: 在单独的一个窗口中显示所选择的view</p>\n</li>\n<li>Invalidate Layout: 重绘当前窗口</li>\n<li>Request Layout: 对当前view进行layout</li>\n<li>Dump DisplayList: 使当前view输出它的显示列表到logcat中</li>\n<li>Dump Theme: 下载这个view主题的资源</li>\n<li>Profile Node: 得到measure，layout，draw的性能指示器</li>\n</ol>\n<p><img src=\"http://p1.bpimg.com/567571/b7a6efcd6d505116.png\" alt=\"Hierarchy Viewer 1-6\"></p>\n<p>选取某个view节点可以查看选取的View的详情</p>\n<p><img src=\"http://i1.piimg.com/567571/3b66b1216e20e81d.png\" alt=\"Hierarchy Viewer 1-6\"></p>\n<p>关于View的渲染机制可以参考一下本人关于android View相关机制解析的文章 <a href=\"http://www.jianshu.com/p/8f3e45663d06\" target=\"_blank\" rel=\"external\">Android View 相关源码分析之三 View的绘制过程 </a></p>\n<p>关于对应渲染时间的速度中  我么知道View绘制分为measure layout 和draw三个过程 三个点分布对应以上三个过程 分为绿 黄 红三个颜色  绿色代表该View在本view tree中速度是前50% 黄色表示后50% 而红色表示是花费时间最长的</p>\n<p>还记得最开始使用Hierarchy Viewer中上方有Inspect screenshot的按钮 可以查看当前Activity的像素情况</p>\n<p><img src=\"http://p1.bqimg.com/567571/82cd3eeaf8663969.png\" alt=\"Inspect screenshot\"></p>\n<p>(层级十分的清晰 就不仔细解释了)</p>\n<p>解释下相关功能</p>\n<ol>\n<li>Save as PNG: 保存当前显示的页面为png格式</li>\n<li>Refresh Screenshot: 刷新像素视图和放大镜视图(右边那两个)</li>\n<li>Refresh Tree: 刷新View tree</li>\n<li>Load Overlay: 在右侧放大镜视图中中加载一个覆盖图(官网中没有给出详细的定义 主要根据相关介绍理解 略有偏差 欢迎指出)</li>\n<li>Show In Loupe: 在中间的像素视图中显示之前加载的图片</li>\n<li>Auto Refresh: 会根据下发设置的Refresh Rate的时间自动<br>更新View tree</li>\n</ol>\n<p>以上</p>\n","excerpt":"<h1 id=\"Android-Tools-之一-Hierarchy-Viewer\"><a href=\"#Android-Tools-之一-Hierarchy-Viewer\" class=\"headerlink\" title=\"Android Tools 之一 Hierarchy Viewer\"></a>Android Tools 之一 Hierarchy Viewer</h1><blockquote>\n<p>本系列旨在介绍一些被忽略的优质工具 毕竟 能被当做自带的工具总有些做的比较好的地方不是</p>\n</blockquote>\n<h2 id=\"Hierarchy-Viewer\"><a href=\"#Hierarchy-Viewer\" class=\"headerlink\" title=\"Hierarchy Viewer\"></a>Hierarchy Viewer</h2><p>Hierarchy Viewer是一个可以用来查看View的使用工具 android sdk中自带</p>\n<p><a href=\"https://developer.android.com/studio/profile/optimize-ui.html#lint\">Optimizing Your UI -官方网站 需科学上网</a></p>\n<h3 id=\"启动Hierarchy-Viewer\"><a href=\"#启动Hierarchy-Viewer\" class=\"headerlink\" title=\"启动Hierarchy Viewer\"></a>启动Hierarchy Viewer</h3><p>hierarchyviewer工具在sdk/tools路径下<br>","more":"</p>\n<p>再次打开后会出现如下提示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">The standalone version of hieararchyviewer is deprecated.</div><div class=\"line\">Please use Android Device Monitor (tools/monitor) instead.</div></pre></td></tr></table></figure></p>\n<p>主要想说的就是 单独使用hieararchyviewer已经不被建议  建议使用Android Device Monitor(Android Device Monitor的相关使用后续会详细介绍)</p>\n<p>直接运行monitor或者在在Android Studio -&gt; tools -&gt; android -&gt; Android Device Monitor中将hieararchyviewer工具打开</p>\n<p><strong>以下对hieararchyviewer工具进行操作均为直接打开hieararchyviewer工具 和通过monitor工具打开的hieararchyviewer的UI可能略有不同  以直接打开hieararchyviewer工具操作为准</strong></p>\n<h4 id=\"无法正常使用\"><a href=\"#无法正常使用\" class=\"headerlink\" title=\"无法正常使用\"></a>无法正常使用</h4><p>在连接过程中可能遇到无法连接到手机的问题 详情参考以下文章</p>\n<p><a href=\"http://blog.csdn.net/yafeng_0306/article/details/17224001\">HierachyViewer无法连接真机调试</a></p>\n<p><a href=\"http://maider.blog.sohu.com/255448342.html\">HierachyViewer无法连接真机调试详解</a></p>\n<h3 id=\"使用Hierarchy-Viewer\"><a href=\"#使用Hierarchy-Viewer\" class=\"headerlink\" title=\"使用Hierarchy Viewer\"></a>使用Hierarchy Viewer</h3><p><img src=\"http://i1.piimg.com/567571/95498e5576c157e1.png\" alt=\"Hierarchy Viewer 1-1\"></p>\n<p>成功连接后会出现如上页面</p>\n<p>当前页面正在显示的进程被加粗显示</p>\n<p>(那些看着是空的位置 进入后会显示通知栏中的View布局)</p>\n<p>选择想要查看的进程后进入 Load View Hierarchy页面</p>\n<p><img src=\"http://p1.bpimg.com/567571/08b13a1f4b3c6b97.png\" alt=\"Hierarchy Viewer 1-2\"></p>\n<p>下面对不同部分分别介绍一下</p>\n<p><img src=\"http://i1.piimg.com/567571/ed16834323343ea2.png\" alt=\"Hierarchy Viewer 1-3\"></p>\n<ol>\n<li>Save as PNG: 把这个布局的层级另存为png格式</li>\n<li><p>Capture Layers: 把这个布局的层级另存为psd格式</p>\n<p>可以查看各层级的情况</p>\n<p><img src=\"http://i1.piimg.com/567571/62b7d9584993e3a1.png\" alt=\"Capture Layers\"></p>\n</li>\n<li><p>Load View Hierarchy: 重新载入这个view层级图</p>\n</li>\n<li><p>Evaluate Contrast: 查看层级布局的具体情况</p>\n<p><img src=\"http://i1.piimg.com/567571/594698903a3e6fa1.png\" alt=\"Evaluate Contrast\"></p>\n</li>\n<li><p>Display View: 在单独的一个窗口中显示所选择的view</p>\n</li>\n<li>Invalidate Layout: 重绘当前窗口</li>\n<li>Request Layout: 对当前view进行layout</li>\n<li>Dump DisplayList: 使当前view输出它的显示列表到logcat中</li>\n<li>Dump Theme: 下载这个view主题的资源</li>\n<li>Profile Node: 得到measure，layout，draw的性能指示器</li>\n</ol>\n<p><img src=\"http://p1.bpimg.com/567571/b7a6efcd6d505116.png\" alt=\"Hierarchy Viewer 1-6\"></p>\n<p>选取某个view节点可以查看选取的View的详情</p>\n<p><img src=\"http://i1.piimg.com/567571/3b66b1216e20e81d.png\" alt=\"Hierarchy Viewer 1-6\"></p>\n<p>关于View的渲染机制可以参考一下本人关于android View相关机制解析的文章 <a href=\"http://www.jianshu.com/p/8f3e45663d06\">Android View 相关源码分析之三 View的绘制过程 </a></p>\n<p>关于对应渲染时间的速度中  我么知道View绘制分为measure layout 和draw三个过程 三个点分布对应以上三个过程 分为绿 黄 红三个颜色  绿色代表该View在本view tree中速度是前50% 黄色表示后50% 而红色表示是花费时间最长的</p>\n<p>还记得最开始使用Hierarchy Viewer中上方有Inspect screenshot的按钮 可以查看当前Activity的像素情况</p>\n<p><img src=\"http://p1.bqimg.com/567571/82cd3eeaf8663969.png\" alt=\"Inspect screenshot\"></p>\n<p>(层级十分的清晰 就不仔细解释了)</p>\n<p>解释下相关功能</p>\n<ol>\n<li>Save as PNG: 保存当前显示的页面为png格式</li>\n<li>Refresh Screenshot: 刷新像素视图和放大镜视图(右边那两个)</li>\n<li>Refresh Tree: 刷新View tree</li>\n<li>Load Overlay: 在右侧放大镜视图中中加载一个覆盖图(官网中没有给出详细的定义 主要根据相关介绍理解 略有偏差 欢迎指出)</li>\n<li>Show In Loupe: 在中间的像素视图中显示之前加载的图片</li>\n<li>Auto Refresh: 会根据下发设置的Refresh Rate的时间自动<br>更新View tree</li>\n</ol>\n<p>以上</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciypmndvs0000z3o98efkrcc3","category_id":"ciypm410n0000l4o9fa4kzz04","_id":"ciypmnw4t0002z3o9qz93dq75"},{"post_id":"ciypmw91y00003xo9djg5dd1i","category_id":"ciypm410n0000l4o9fa4kzz04","_id":"ciypmw92000023xo9fnaz45vz"},{"post_id":"ciypmwr3m00053xo93jn3r8im","category_id":"ciypm410n0000l4o9fa4kzz04","_id":"ciypmwr3n00073xo98zwqidxq"},{"post_id":"ciypmziqe00007ao9leomni4z","category_id":"ciypm410n0000l4o9fa4kzz04","_id":"ciypmziqg00027ao9d6gkzwes"},{"post_id":"ciypn1f0w00008ko92li7xnce","category_id":"ciypm410n0000l4o9fa4kzz04","_id":"ciypn2cb100028ko9rt6hstjf"},{"post_id":"ciypnag7n0000f8o9jt9voi4m","category_id":"ciypm410n0000l4o9fa4kzz04","_id":"ciypnag7v0002f8o902jfck6t"}],"PostTag":[{"post_id":"ciypmndvs0000z3o98efkrcc3","tag_id":"ciypm4k4n0002l4o9gb0x0utb","_id":"ciypmnw4t0001z3o9nnyfxw1d"},{"post_id":"ciypmndvs0000z3o98efkrcc3","tag_id":"ciypm4k4p0003l4o9yckp8q4t","_id":"ciypmnw4t0003z3o92ws12c17"},{"post_id":"ciypmndvs0000z3o98efkrcc3","tag_id":"ciypm4k4p0004l4o9xpevhyw4","_id":"ciypmnw4u0004z3o9bk58tl1k"},{"post_id":"ciypmw91y00003xo9djg5dd1i","tag_id":"ciypm4k4n0002l4o9gb0x0utb","_id":"ciypmw91z00013xo91ijfo6ef"},{"post_id":"ciypmw91y00003xo9djg5dd1i","tag_id":"ciypm4k4p0003l4o9yckp8q4t","_id":"ciypmw92000033xo9u4vu6i7f"},{"post_id":"ciypmw91y00003xo9djg5dd1i","tag_id":"ciypm4k4p0004l4o9xpevhyw4","_id":"ciypmw92000043xo9mg7r8usj"},{"post_id":"ciypmwr3m00053xo93jn3r8im","tag_id":"ciypm4k4n0002l4o9gb0x0utb","_id":"ciypmwr3n00063xo99n9w1qxa"},{"post_id":"ciypmwr3m00053xo93jn3r8im","tag_id":"ciypm4k4p0003l4o9yckp8q4t","_id":"ciypmwr3n00083xo90uy693ac"},{"post_id":"ciypmwr3m00053xo93jn3r8im","tag_id":"ciypm4k4p0004l4o9xpevhyw4","_id":"ciypmwr3n00093xo9aqtx0rb2"},{"post_id":"ciypmziqe00007ao9leomni4z","tag_id":"ciypm4k4n0002l4o9gb0x0utb","_id":"ciypmziqg00017ao9os855lhz"},{"post_id":"ciypmziqe00007ao9leomni4z","tag_id":"ciypm4k4p0003l4o9yckp8q4t","_id":"ciypmziqg00037ao915mmni4y"},{"post_id":"ciypmziqe00007ao9leomni4z","tag_id":"ciypm4k4p0004l4o9xpevhyw4","_id":"ciypmziqh00047ao995wkwe85"},{"post_id":"ciypn1f0w00008ko92li7xnce","tag_id":"ciypm4k4n0002l4o9gb0x0utb","_id":"ciypn2cb000018ko927qgd9ba"},{"post_id":"ciypn1f0w00008ko92li7xnce","tag_id":"ciypm4k4p0003l4o9yckp8q4t","_id":"ciypn2cb100038ko90z91zquh"},{"post_id":"ciypn1f0w00008ko92li7xnce","tag_id":"ciypm4k4p0004l4o9xpevhyw4","_id":"ciypn2cb100048ko9t3z6e6gf"},{"post_id":"ciypnag7n0000f8o9jt9voi4m","tag_id":"ciypm4k4n0002l4o9gb0x0utb","_id":"ciypnag7w0004f8o9483o0dpy"},{"post_id":"ciypnag7n0000f8o9jt9voi4m","tag_id":"ciypm4k4p0003l4o9yckp8q4t","_id":"ciypnag7x0005f8o9iwp24a4y"},{"post_id":"ciypnag7n0000f8o9jt9voi4m","tag_id":"ciypnag7s0001f8o9d5g6tlw5","_id":"ciypnag7y0006f8o9kyy0z4od"},{"post_id":"ciypnag7n0000f8o9jt9voi4m","tag_id":"ciypnag7v0003f8o966qcd6et","_id":"ciypnag7y0007f8o99ynoig2t"}],"Tag":[{"name":"android","_id":"ciypm4k4n0002l4o9gb0x0utb"},{"name":"view","_id":"ciypm4k4p0003l4o9yckp8q4t"},{"name":"源码","_id":"ciypm4k4p0004l4o9xpevhyw4"},{"name":"tools\"","_id":"ciypnag7s0001f8o9d5g6tlw5"},{"name":"Hierarchy Viewer","_id":"ciypnag7v0003f8o966qcd6et"}]}}